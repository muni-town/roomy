import { b as tn, d as Da, g as Ee, e as mp } from "./BMAj9zKA.js";
import { p as Ta } from "./Baj-A2iI.js";
class tx {
  database;
  store;
  dbPromise;
  constructor(t = "automerge", i = "documents") {
    this.database = t, this.store = i, this.dbPromise = this.createDatabasePromise();
  }
  createDatabasePromise() {
    return new Promise((t, i) => {
      const n = indexedDB.open(this.database, 1);
      n.onerror = () => {
        i(n.error);
      }, n.onupgradeneeded = (o) => {
        o.target.result.createObjectStore(this.store);
      }, n.onsuccess = (o) => {
        const s = o.target.result;
        t(s);
      };
    });
  }
  async load(t) {
    const n = (await this.dbPromise).transaction(this.store), s = n.objectStore(this.store).get(t);
    return new Promise((e, u) => {
      n.onerror = () => {
        u(s.error);
      }, s.onsuccess = (a) => {
        const c = a.target.result;
        c && typeof c == "object" && "binary" in c ? e(c.binary) : e(void 0);
      };
    });
  }
  async save(t, i) {
    const o = (await this.dbPromise).transaction(this.store, "readwrite");
    return o.objectStore(this.store).put({ key: t, binary: i }, t), new Promise((e, u) => {
      o.onerror = () => {
        u(o.error);
      }, o.oncomplete = () => {
        e();
      };
    });
  }
  async remove(t) {
    const n = (await this.dbPromise).transaction(this.store, "readwrite");
    return n.objectStore(this.store).delete(t), new Promise((s, e) => {
      n.onerror = () => {
        e(n.error);
      }, n.oncomplete = () => {
        s();
      };
    });
  }
  async loadRange(t) {
    const i = await this.dbPromise, n = t, o = [...t, "\uFFFF"], s = IDBKeyRange.bound(n, o), e = i.transaction(this.store), a = e.objectStore(this.store).openCursor(s), c = [];
    return new Promise((l, d) => {
      e.onerror = () => {
        d(a.error);
      }, a.onsuccess = (f) => {
        const h = f.target.result;
        h ? (c.push({ data: h.value.binary, key: h.key }), h.continue()) : l(c);
      };
    });
  }
  async removeRange(t) {
    const i = await this.dbPromise, n = t, o = [...t, "\uFFFF"], s = IDBKeyRange.bound(n, o), e = i.transaction(this.store, "readwrite");
    return e.objectStore(this.store).delete(s), new Promise((a, c) => {
      e.onerror = () => {
        c(e.error);
      }, e.oncomplete = () => {
        a();
      };
    });
  }
}
function rx(r) {
  return r && r.__esModule && Object.prototype.hasOwnProperty.call(r, "default") ? r.default : r;
}
function Fl(r) {
  if (Object.prototype.hasOwnProperty.call(r, "__esModule")) return r;
  var t = r.default;
  if (typeof t == "function") {
    var i = function n() {
      return this instanceof n ? Reflect.construct(t, arguments, this.constructor) : t.apply(this, arguments);
    };
    i.prototype = t.prototype;
  } else i = {};
  return Object.defineProperty(i, "__esModule", { value: true }), Object.keys(r).forEach(function(n) {
    var o = Object.getOwnPropertyDescriptor(r, n);
    Object.defineProperty(i, n, o.get ? o : { enumerable: true, get: function() {
      return r[n];
    } });
  }), i;
}
var hi = {}, yi = {}, dd = {}, Ft = {}, mi = {}, $t = {}, Fa = {}, pd = {}, of;
function $l() {
  return of || (of = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.getParsedType = r.ZodParsedType = r.objectUtil = r.util = void 0;
    var t;
    (function(o) {
      o.assertEqual = (a) => a;
      function s(a) {
      }
      o.assertIs = s;
      function e(a) {
        throw new Error();
      }
      o.assertNever = e, o.arrayToEnum = (a) => {
        const c = {};
        for (const l of a) c[l] = l;
        return c;
      }, o.getValidEnumValues = (a) => {
        const c = o.objectKeys(a).filter((d) => typeof a[a[d]] != "number"), l = {};
        for (const d of c) l[d] = a[d];
        return o.objectValues(l);
      }, o.objectValues = (a) => o.objectKeys(a).map(function(c) {
        return a[c];
      }), o.objectKeys = typeof Object.keys == "function" ? (a) => Object.keys(a) : (a) => {
        const c = [];
        for (const l in a) Object.prototype.hasOwnProperty.call(a, l) && c.push(l);
        return c;
      }, o.find = (a, c) => {
        for (const l of a) if (c(l)) return l;
      }, o.isInteger = typeof Number.isInteger == "function" ? (a) => Number.isInteger(a) : (a) => typeof a == "number" && isFinite(a) && Math.floor(a) === a;
      function u(a, c = " | ") {
        return a.map((l) => typeof l == "string" ? `'${l}'` : l).join(c);
      }
      o.joinValues = u, o.jsonStringifyReplacer = (a, c) => typeof c == "bigint" ? c.toString() : c;
    })(t || (r.util = t = {}));
    var i;
    (function(o) {
      o.mergeShapes = (s, e) => ({ ...s, ...e });
    })(i || (r.objectUtil = i = {})), r.ZodParsedType = t.arrayToEnum(["string", "nan", "number", "integer", "float", "boolean", "date", "bigint", "symbol", "function", "undefined", "null", "array", "object", "unknown", "promise", "void", "never", "map", "set"]);
    const n = (o) => {
      switch (typeof o) {
        case "undefined":
          return r.ZodParsedType.undefined;
        case "string":
          return r.ZodParsedType.string;
        case "number":
          return isNaN(o) ? r.ZodParsedType.nan : r.ZodParsedType.number;
        case "boolean":
          return r.ZodParsedType.boolean;
        case "function":
          return r.ZodParsedType.function;
        case "bigint":
          return r.ZodParsedType.bigint;
        case "symbol":
          return r.ZodParsedType.symbol;
        case "object":
          return Array.isArray(o) ? r.ZodParsedType.array : o === null ? r.ZodParsedType.null : o.then && typeof o.then == "function" && o.catch && typeof o.catch == "function" ? r.ZodParsedType.promise : typeof Map < "u" && o instanceof Map ? r.ZodParsedType.map : typeof Set < "u" && o instanceof Set ? r.ZodParsedType.set : typeof Date < "u" && o instanceof Date ? r.ZodParsedType.date : r.ZodParsedType.object;
        default:
          return r.ZodParsedType.unknown;
      }
    };
    r.getParsedType = n;
  }(pd)), pd;
}
var fr = {}, sf;
function bp() {
  if (sf) return fr;
  sf = 1, Object.defineProperty(fr, "__esModule", { value: true }), fr.ZodError = fr.quotelessJson = fr.ZodIssueCode = void 0;
  const r = $l();
  fr.ZodIssueCode = r.util.arrayToEnum(["invalid_type", "invalid_literal", "custom", "invalid_union", "invalid_union_discriminator", "invalid_enum_value", "unrecognized_keys", "invalid_arguments", "invalid_return_type", "invalid_date", "invalid_string", "too_small", "too_big", "invalid_intersection_types", "not_multiple_of", "not_finite"]);
  const t = (n) => JSON.stringify(n, null, 2).replace(/"([^"]+)":/g, "$1:");
  fr.quotelessJson = t;
  let i = class QR extends Error {
    get errors() {
      return this.issues;
    }
    constructor(o) {
      super(), this.issues = [], this.addIssue = (e) => {
        this.issues = [...this.issues, e];
      }, this.addIssues = (e = []) => {
        this.issues = [...this.issues, ...e];
      };
      const s = new.target.prototype;
      Object.setPrototypeOf ? Object.setPrototypeOf(this, s) : this.__proto__ = s, this.name = "ZodError", this.issues = o;
    }
    format(o) {
      const s = o || function(a) {
        return a.message;
      }, e = { _errors: [] }, u = (a) => {
        for (const c of a.issues) if (c.code === "invalid_union") c.unionErrors.map(u);
        else if (c.code === "invalid_return_type") u(c.returnTypeError);
        else if (c.code === "invalid_arguments") u(c.argumentsError);
        else if (c.path.length === 0) e._errors.push(s(c));
        else {
          let l = e, d = 0;
          for (; d < c.path.length; ) {
            const f = c.path[d];
            d === c.path.length - 1 ? (l[f] = l[f] || { _errors: [] }, l[f]._errors.push(s(c))) : l[f] = l[f] || { _errors: [] }, l = l[f], d++;
          }
        }
      };
      return u(this), e;
    }
    static assert(o) {
      if (!(o instanceof QR)) throw new Error(`Not a ZodError: ${o}`);
    }
    toString() {
      return this.message;
    }
    get message() {
      return JSON.stringify(this.issues, r.util.jsonStringifyReplacer, 2);
    }
    get isEmpty() {
      return this.issues.length === 0;
    }
    flatten(o = (s) => s.message) {
      const s = {}, e = [];
      for (const u of this.issues) u.path.length > 0 ? (s[u.path[0]] = s[u.path[0]] || [], s[u.path[0]].push(o(u))) : e.push(o(u));
      return { formErrors: e, fieldErrors: s };
    }
    get formErrors() {
      return this.flatten();
    }
  };
  return fr.ZodError = i, i.create = (n) => new i(n), fr;
}
var af;
function YR() {
  if (af) return Fa;
  af = 1, Object.defineProperty(Fa, "__esModule", { value: true });
  const r = $l(), t = bp(), i = (n, o) => {
    let s;
    switch (n.code) {
      case t.ZodIssueCode.invalid_type:
        n.received === r.ZodParsedType.undefined ? s = "Required" : s = `Expected ${n.expected}, received ${n.received}`;
        break;
      case t.ZodIssueCode.invalid_literal:
        s = `Invalid literal value, expected ${JSON.stringify(n.expected, r.util.jsonStringifyReplacer)}`;
        break;
      case t.ZodIssueCode.unrecognized_keys:
        s = `Unrecognized key(s) in object: ${r.util.joinValues(n.keys, ", ")}`;
        break;
      case t.ZodIssueCode.invalid_union:
        s = "Invalid input";
        break;
      case t.ZodIssueCode.invalid_union_discriminator:
        s = `Invalid discriminator value. Expected ${r.util.joinValues(n.options)}`;
        break;
      case t.ZodIssueCode.invalid_enum_value:
        s = `Invalid enum value. Expected ${r.util.joinValues(n.options)}, received '${n.received}'`;
        break;
      case t.ZodIssueCode.invalid_arguments:
        s = "Invalid function arguments";
        break;
      case t.ZodIssueCode.invalid_return_type:
        s = "Invalid function return type";
        break;
      case t.ZodIssueCode.invalid_date:
        s = "Invalid date";
        break;
      case t.ZodIssueCode.invalid_string:
        typeof n.validation == "object" ? "includes" in n.validation ? (s = `Invalid input: must include "${n.validation.includes}"`, typeof n.validation.position == "number" && (s = `${s} at one or more positions greater than or equal to ${n.validation.position}`)) : "startsWith" in n.validation ? s = `Invalid input: must start with "${n.validation.startsWith}"` : "endsWith" in n.validation ? s = `Invalid input: must end with "${n.validation.endsWith}"` : r.util.assertNever(n.validation) : n.validation !== "regex" ? s = `Invalid ${n.validation}` : s = "Invalid";
        break;
      case t.ZodIssueCode.too_small:
        n.type === "array" ? s = `Array must contain ${n.exact ? "exactly" : n.inclusive ? "at least" : "more than"} ${n.minimum} element(s)` : n.type === "string" ? s = `String must contain ${n.exact ? "exactly" : n.inclusive ? "at least" : "over"} ${n.minimum} character(s)` : n.type === "number" ? s = `Number must be ${n.exact ? "exactly equal to " : n.inclusive ? "greater than or equal to " : "greater than "}${n.minimum}` : n.type === "date" ? s = `Date must be ${n.exact ? "exactly equal to " : n.inclusive ? "greater than or equal to " : "greater than "}${new Date(Number(n.minimum))}` : s = "Invalid input";
        break;
      case t.ZodIssueCode.too_big:
        n.type === "array" ? s = `Array must contain ${n.exact ? "exactly" : n.inclusive ? "at most" : "less than"} ${n.maximum} element(s)` : n.type === "string" ? s = `String must contain ${n.exact ? "exactly" : n.inclusive ? "at most" : "under"} ${n.maximum} character(s)` : n.type === "number" ? s = `Number must be ${n.exact ? "exactly" : n.inclusive ? "less than or equal to" : "less than"} ${n.maximum}` : n.type === "bigint" ? s = `BigInt must be ${n.exact ? "exactly" : n.inclusive ? "less than or equal to" : "less than"} ${n.maximum}` : n.type === "date" ? s = `Date must be ${n.exact ? "exactly" : n.inclusive ? "smaller than or equal to" : "smaller than"} ${new Date(Number(n.maximum))}` : s = "Invalid input";
        break;
      case t.ZodIssueCode.custom:
        s = "Invalid input";
        break;
      case t.ZodIssueCode.invalid_intersection_types:
        s = "Intersection results could not be merged";
        break;
      case t.ZodIssueCode.not_multiple_of:
        s = `Number must be a multiple of ${n.multipleOf}`;
        break;
      case t.ZodIssueCode.not_finite:
        s = "Number must be finite";
        break;
      default:
        s = o.defaultError, r.util.assertNever(n);
    }
    return { message: s };
  };
  return Fa.default = i, Fa;
}
var uf;
function gp() {
  if (uf) return $t;
  uf = 1;
  var r = $t && $t.__importDefault || function(s) {
    return s && s.__esModule ? s : { default: s };
  };
  Object.defineProperty($t, "__esModule", { value: true }), $t.getErrorMap = $t.setErrorMap = $t.defaultErrorMap = void 0;
  const t = r(YR());
  $t.defaultErrorMap = t.default;
  let i = t.default;
  function n(s) {
    i = s;
  }
  $t.setErrorMap = n;
  function o() {
    return i;
  }
  return $t.getErrorMap = o, $t;
}
var Co = {}, cf;
function e_() {
  return cf || (cf = 1, function(r) {
    var t = Co && Co.__importDefault || function(h) {
      return h && h.__esModule ? h : { default: h };
    };
    Object.defineProperty(r, "__esModule", { value: true }), r.isAsync = r.isValid = r.isDirty = r.isAborted = r.OK = r.DIRTY = r.INVALID = r.ParseStatus = r.addIssueToContext = r.EMPTY_PATH = r.makeIssue = void 0;
    const i = gp(), n = t(YR()), o = (h) => {
      const { data: p, path: b, errorMaps: E, issueData: g } = h, x = [...b, ...g.path || []], T = { ...g, path: x };
      if (g.message !== void 0) return { ...g, path: x, message: g.message };
      let A = "";
      const K = E.filter((j) => !!j).slice().reverse();
      for (const j of K) A = j(T, { data: p, defaultError: A }).message;
      return { ...g, path: x, message: A };
    };
    r.makeIssue = o, r.EMPTY_PATH = [];
    function s(h, p) {
      const b = (0, i.getErrorMap)(), E = (0, r.makeIssue)({ issueData: p, data: h.data, path: h.path, errorMaps: [h.common.contextualErrorMap, h.schemaErrorMap, b, b === n.default ? void 0 : n.default].filter((g) => !!g) });
      h.common.issues.push(E);
    }
    r.addIssueToContext = s;
    class e {
      constructor() {
        this.value = "valid";
      }
      dirty() {
        this.value === "valid" && (this.value = "dirty");
      }
      abort() {
        this.value !== "aborted" && (this.value = "aborted");
      }
      static mergeArray(p, b) {
        const E = [];
        for (const g of b) {
          if (g.status === "aborted") return r.INVALID;
          g.status === "dirty" && p.dirty(), E.push(g.value);
        }
        return { status: p.value, value: E };
      }
      static async mergeObjectAsync(p, b) {
        const E = [];
        for (const g of b) {
          const x = await g.key, T = await g.value;
          E.push({ key: x, value: T });
        }
        return e.mergeObjectSync(p, E);
      }
      static mergeObjectSync(p, b) {
        const E = {};
        for (const g of b) {
          const { key: x, value: T } = g;
          if (x.status === "aborted" || T.status === "aborted") return r.INVALID;
          x.status === "dirty" && p.dirty(), T.status === "dirty" && p.dirty(), x.value !== "__proto__" && (typeof T.value < "u" || g.alwaysSet) && (E[x.value] = T.value);
        }
        return { status: p.value, value: E };
      }
    }
    r.ParseStatus = e, r.INVALID = Object.freeze({ status: "aborted" });
    const u = (h) => ({ status: "dirty", value: h });
    r.DIRTY = u;
    const a = (h) => ({ status: "valid", value: h });
    r.OK = a;
    const c = (h) => h.status === "aborted";
    r.isAborted = c;
    const l = (h) => h.status === "dirty";
    r.isDirty = l;
    const d = (h) => h.status === "valid";
    r.isValid = d;
    const f = (h) => typeof Promise < "u" && h instanceof Promise;
    r.isAsync = f;
  }(Co)), Co;
}
var fd = {}, lf;
function ix() {
  return lf || (lf = 1, Object.defineProperty(fd, "__esModule", { value: true })), fd;
}
var q = {}, To = {}, df;
function nx() {
  if (df) return To;
  df = 1, Object.defineProperty(To, "__esModule", { value: true }), To.errorUtil = void 0;
  var r;
  return function(t) {
    t.errToObj = (i) => typeof i == "string" ? { message: i } : i || {}, t.toString = (i) => typeof i == "string" ? i : i?.message;
  }(r || (To.errorUtil = r = {})), To;
}
var pf;
function ox() {
  if (pf) return q;
  pf = 1;
  var r = q && q.__classPrivateFieldGet || function(_, y, w, S) {
    if (w === "a" && !S) throw new TypeError("Private accessor was defined without a getter");
    if (typeof y == "function" ? _ !== y || !S : !y.has(_)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return w === "m" ? S : w === "a" ? S.call(_) : S ? S.value : y.get(_);
  }, t = q && q.__classPrivateFieldSet || function(_, y, w, S, L) {
    if (S === "m") throw new TypeError("Private method is not writable");
    if (S === "a" && !L) throw new TypeError("Private accessor was defined without a setter");
    if (typeof y == "function" ? _ !== y || !L : !y.has(_)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return S === "a" ? L.call(_, w) : L ? L.value = w : y.set(_, w), w;
  }, i, n;
  Object.defineProperty(q, "__esModule", { value: true }), q.boolean = q.bigint = q.array = q.any = q.coerce = q.ZodFirstPartyTypeKind = q.late = q.ZodSchema = q.Schema = q.custom = q.ZodReadonly = q.ZodPipeline = q.ZodBranded = q.BRAND = q.ZodNaN = q.ZodCatch = q.ZodDefault = q.ZodNullable = q.ZodOptional = q.ZodTransformer = q.ZodEffects = q.ZodPromise = q.ZodNativeEnum = q.ZodEnum = q.ZodLiteral = q.ZodLazy = q.ZodFunction = q.ZodSet = q.ZodMap = q.ZodRecord = q.ZodTuple = q.ZodIntersection = q.ZodDiscriminatedUnion = q.ZodUnion = q.ZodObject = q.ZodArray = q.ZodVoid = q.ZodNever = q.ZodUnknown = q.ZodAny = q.ZodNull = q.ZodUndefined = q.ZodSymbol = q.ZodDate = q.ZodBoolean = q.ZodBigInt = q.ZodNumber = q.ZodString = q.datetimeRegex = q.ZodType = void 0, q.NEVER = q.void = q.unknown = q.union = q.undefined = q.tuple = q.transformer = q.symbol = q.string = q.strictObject = q.set = q.record = q.promise = q.preprocess = q.pipeline = q.ostring = q.optional = q.onumber = q.oboolean = q.object = q.number = q.nullable = q.null = q.never = q.nativeEnum = q.nan = q.map = q.literal = q.lazy = q.intersection = q.instanceof = q.function = q.enum = q.effect = q.discriminatedUnion = q.date = void 0;
  const o = gp(), s = nx(), e = e_(), u = $l(), a = bp();
  class c {
    constructor(y, w, S, L) {
      this._cachedPath = [], this.parent = y, this.data = w, this._path = S, this._key = L;
    }
    get path() {
      return this._cachedPath.length || (this._key instanceof Array ? this._cachedPath.push(...this._path, ...this._key) : this._cachedPath.push(...this._path, this._key)), this._cachedPath;
    }
  }
  const l = (_, y) => {
    if ((0, e.isValid)(y)) return { success: true, data: y.value };
    if (!_.common.issues.length) throw new Error("Validation failed but no issues detected.");
    return { success: false, get error() {
      if (this._error) return this._error;
      const w = new a.ZodError(_.common.issues);
      return this._error = w, this._error;
    } };
  };
  function d(_) {
    if (!_) return {};
    const { errorMap: y, invalid_type_error: w, required_error: S, description: L } = _;
    if (y && (w || S)) throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
    return y ? { errorMap: y, description: L } : { errorMap: ($, G) => {
      var re, te;
      const { message: ce } = _;
      return $.code === "invalid_enum_value" ? { message: ce ?? G.defaultError } : typeof G.data > "u" ? { message: (re = ce ?? S) !== null && re !== void 0 ? re : G.defaultError } : $.code !== "invalid_type" ? { message: G.defaultError } : { message: (te = ce ?? w) !== null && te !== void 0 ? te : G.defaultError };
    }, description: L };
  }
  class f {
    get description() {
      return this._def.description;
    }
    _getType(y) {
      return (0, u.getParsedType)(y.data);
    }
    _getOrReturnCtx(y, w) {
      return w || { common: y.parent.common, data: y.data, parsedType: (0, u.getParsedType)(y.data), schemaErrorMap: this._def.errorMap, path: y.path, parent: y.parent };
    }
    _processInputParams(y) {
      return { status: new e.ParseStatus(), ctx: { common: y.parent.common, data: y.data, parsedType: (0, u.getParsedType)(y.data), schemaErrorMap: this._def.errorMap, path: y.path, parent: y.parent } };
    }
    _parseSync(y) {
      const w = this._parse(y);
      if ((0, e.isAsync)(w)) throw new Error("Synchronous parse encountered promise.");
      return w;
    }
    _parseAsync(y) {
      const w = this._parse(y);
      return Promise.resolve(w);
    }
    parse(y, w) {
      const S = this.safeParse(y, w);
      if (S.success) return S.data;
      throw S.error;
    }
    safeParse(y, w) {
      var S;
      const L = { common: { issues: [], async: (S = w?.async) !== null && S !== void 0 ? S : false, contextualErrorMap: w?.errorMap }, path: w?.path || [], schemaErrorMap: this._def.errorMap, parent: null, data: y, parsedType: (0, u.getParsedType)(y) }, B = this._parseSync({ data: y, path: L.path, parent: L });
      return l(L, B);
    }
    "~validate"(y) {
      var w, S;
      const L = { common: { issues: [], async: !!this["~standard"].async }, path: [], schemaErrorMap: this._def.errorMap, parent: null, data: y, parsedType: (0, u.getParsedType)(y) };
      if (!this["~standard"].async) try {
        const B = this._parseSync({ data: y, path: [], parent: L });
        return (0, e.isValid)(B) ? { value: B.value } : { issues: L.common.issues };
      } catch (B) {
        !((S = (w = B?.message) === null || w === void 0 ? void 0 : w.toLowerCase()) === null || S === void 0) && S.includes("encountered") && (this["~standard"].async = true), L.common = { issues: [], async: true };
      }
      return this._parseAsync({ data: y, path: [], parent: L }).then((B) => (0, e.isValid)(B) ? { value: B.value } : { issues: L.common.issues });
    }
    async parseAsync(y, w) {
      const S = await this.safeParseAsync(y, w);
      if (S.success) return S.data;
      throw S.error;
    }
    async safeParseAsync(y, w) {
      const S = { common: { issues: [], contextualErrorMap: w?.errorMap, async: true }, path: w?.path || [], schemaErrorMap: this._def.errorMap, parent: null, data: y, parsedType: (0, u.getParsedType)(y) }, L = this._parse({ data: y, path: S.path, parent: S }), B = await ((0, e.isAsync)(L) ? L : Promise.resolve(L));
      return l(S, B);
    }
    refine(y, w) {
      const S = (L) => typeof w == "string" || typeof w > "u" ? { message: w } : typeof w == "function" ? w(L) : w;
      return this._refinement((L, B) => {
        const $ = y(L), G = () => B.addIssue({ code: a.ZodIssueCode.custom, ...S(L) });
        return typeof Promise < "u" && $ instanceof Promise ? $.then((re) => re ? true : (G(), false)) : $ ? true : (G(), false);
      });
    }
    refinement(y, w) {
      return this._refinement((S, L) => y(S) ? true : (L.addIssue(typeof w == "function" ? w(S, L) : w), false));
    }
    _refinement(y) {
      return new Ie({ schema: this, typeName: M.ZodEffects, effect: { type: "refinement", refinement: y } });
    }
    superRefine(y) {
      return this._refinement(y);
    }
    constructor(y) {
      this.spa = this.safeParseAsync, this._def = y, this.parse = this.parse.bind(this), this.safeParse = this.safeParse.bind(this), this.parseAsync = this.parseAsync.bind(this), this.safeParseAsync = this.safeParseAsync.bind(this), this.spa = this.spa.bind(this), this.refine = this.refine.bind(this), this.refinement = this.refinement.bind(this), this.superRefine = this.superRefine.bind(this), this.optional = this.optional.bind(this), this.nullable = this.nullable.bind(this), this.nullish = this.nullish.bind(this), this.array = this.array.bind(this), this.promise = this.promise.bind(this), this.or = this.or.bind(this), this.and = this.and.bind(this), this.transform = this.transform.bind(this), this.brand = this.brand.bind(this), this.default = this.default.bind(this), this.catch = this.catch.bind(this), this.describe = this.describe.bind(this), this.pipe = this.pipe.bind(this), this.readonly = this.readonly.bind(this), this.isNullable = this.isNullable.bind(this), this.isOptional = this.isOptional.bind(this), this["~standard"] = { version: 1, vendor: "zod", validate: (w) => this["~validate"](w) };
    }
    optional() {
      return ze.create(this, this._def);
    }
    nullable() {
      return Ge.create(this, this._def);
    }
    nullish() {
      return this.nullable().optional();
    }
    array() {
      return we.create(this);
    }
    promise() {
      return rt.create(this, this._def);
    }
    or(y) {
      return Xe.create([this, y], this._def);
    }
    and(y) {
      return ft.create(this, y, this._def);
    }
    transform(y) {
      return new Ie({ ...d(this._def), schema: this, typeName: M.ZodEffects, effect: { type: "transform", transform: y } });
    }
    default(y) {
      const w = typeof y == "function" ? y : () => y;
      return new It({ ...d(this._def), innerType: this, defaultValue: w, typeName: M.ZodDefault });
    }
    brand() {
      return new ir({ typeName: M.ZodBranded, type: this, ...d(this._def) });
    }
    catch(y) {
      const w = typeof y == "function" ? y : () => y;
      return new Kt({ ...d(this._def), innerType: this, catchValue: w, typeName: M.ZodCatch });
    }
    describe(y) {
      const w = this.constructor;
      return new w({ ...this._def, description: y });
    }
    pipe(y) {
      return Ot.create(this, y);
    }
    readonly() {
      return yt.create(this);
    }
    isOptional() {
      return this.safeParse(void 0).success;
    }
    isNullable() {
      return this.safeParse(null).success;
    }
  }
  q.ZodType = f, q.Schema = f, q.ZodSchema = f;
  const h = /^c[^\s-]{8,}$/i, p = /^[0-9a-z]+$/, b = /^[0-9A-HJKMNP-TV-Z]{26}$/i, E = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i, g = /^[a-z0-9_-]{21}$/i, x = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/, T = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/, A = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i, K = "^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";
  let j;
  const O = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/, z = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/, H = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/, X = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/, F = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/, C = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/, k = "((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))", U = new RegExp(`^${k}$`);
  function I(_) {
    let y = "([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d";
    return _.precision ? y = `${y}\\.\\d{${_.precision}}` : _.precision == null && (y = `${y}(\\.\\d+)?`), y;
  }
  function N(_) {
    return new RegExp(`^${I(_)}$`);
  }
  function Z(_) {
    let y = `${k}T${I(_)}`;
    const w = [];
    return w.push(_.local ? "Z?" : "Z"), _.offset && w.push("([+-]\\d{2}:?\\d{2})"), y = `${y}(${w.join("|")})`, new RegExp(`^${y}$`);
  }
  q.datetimeRegex = Z;
  function se(_, y) {
    return !!((y === "v4" || !y) && O.test(_) || (y === "v6" || !y) && H.test(_));
  }
  function le(_, y) {
    if (!x.test(_)) return false;
    try {
      const [w] = _.split("."), S = w.replace(/-/g, "+").replace(/_/g, "/").padEnd(w.length + (4 - w.length % 4) % 4, "="), L = JSON.parse(atob(S));
      return !(typeof L != "object" || L === null || !L.typ || !L.alg || y && L.alg !== y);
    } catch {
      return false;
    }
  }
  function ve(_, y) {
    return !!((y === "v4" || !y) && z.test(_) || (y === "v6" || !y) && X.test(_));
  }
  class be extends f {
    _parse(y) {
      if (this._def.coerce && (y.data = String(y.data)), this._getType(y) !== u.ZodParsedType.string) {
        const B = this._getOrReturnCtx(y);
        return (0, e.addIssueToContext)(B, { code: a.ZodIssueCode.invalid_type, expected: u.ZodParsedType.string, received: B.parsedType }), e.INVALID;
      }
      const S = new e.ParseStatus();
      let L;
      for (const B of this._def.checks) if (B.kind === "min") y.data.length < B.value && (L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { code: a.ZodIssueCode.too_small, minimum: B.value, type: "string", inclusive: true, exact: false, message: B.message }), S.dirty());
      else if (B.kind === "max") y.data.length > B.value && (L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { code: a.ZodIssueCode.too_big, maximum: B.value, type: "string", inclusive: true, exact: false, message: B.message }), S.dirty());
      else if (B.kind === "length") {
        const $ = y.data.length > B.value, G = y.data.length < B.value;
        ($ || G) && (L = this._getOrReturnCtx(y, L), $ ? (0, e.addIssueToContext)(L, { code: a.ZodIssueCode.too_big, maximum: B.value, type: "string", inclusive: true, exact: true, message: B.message }) : G && (0, e.addIssueToContext)(L, { code: a.ZodIssueCode.too_small, minimum: B.value, type: "string", inclusive: true, exact: true, message: B.message }), S.dirty());
      } else if (B.kind === "email") A.test(y.data) || (L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { validation: "email", code: a.ZodIssueCode.invalid_string, message: B.message }), S.dirty());
      else if (B.kind === "emoji") j || (j = new RegExp(K, "u")), j.test(y.data) || (L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { validation: "emoji", code: a.ZodIssueCode.invalid_string, message: B.message }), S.dirty());
      else if (B.kind === "uuid") E.test(y.data) || (L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { validation: "uuid", code: a.ZodIssueCode.invalid_string, message: B.message }), S.dirty());
      else if (B.kind === "nanoid") g.test(y.data) || (L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { validation: "nanoid", code: a.ZodIssueCode.invalid_string, message: B.message }), S.dirty());
      else if (B.kind === "cuid") h.test(y.data) || (L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { validation: "cuid", code: a.ZodIssueCode.invalid_string, message: B.message }), S.dirty());
      else if (B.kind === "cuid2") p.test(y.data) || (L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { validation: "cuid2", code: a.ZodIssueCode.invalid_string, message: B.message }), S.dirty());
      else if (B.kind === "ulid") b.test(y.data) || (L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { validation: "ulid", code: a.ZodIssueCode.invalid_string, message: B.message }), S.dirty());
      else if (B.kind === "url") try {
        new URL(y.data);
      } catch {
        L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { validation: "url", code: a.ZodIssueCode.invalid_string, message: B.message }), S.dirty();
      }
      else B.kind === "regex" ? (B.regex.lastIndex = 0, B.regex.test(y.data) || (L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { validation: "regex", code: a.ZodIssueCode.invalid_string, message: B.message }), S.dirty())) : B.kind === "trim" ? y.data = y.data.trim() : B.kind === "includes" ? y.data.includes(B.value, B.position) || (L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { code: a.ZodIssueCode.invalid_string, validation: { includes: B.value, position: B.position }, message: B.message }), S.dirty()) : B.kind === "toLowerCase" ? y.data = y.data.toLowerCase() : B.kind === "toUpperCase" ? y.data = y.data.toUpperCase() : B.kind === "startsWith" ? y.data.startsWith(B.value) || (L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { code: a.ZodIssueCode.invalid_string, validation: { startsWith: B.value }, message: B.message }), S.dirty()) : B.kind === "endsWith" ? y.data.endsWith(B.value) || (L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { code: a.ZodIssueCode.invalid_string, validation: { endsWith: B.value }, message: B.message }), S.dirty()) : B.kind === "datetime" ? Z(B).test(y.data) || (L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { code: a.ZodIssueCode.invalid_string, validation: "datetime", message: B.message }), S.dirty()) : B.kind === "date" ? U.test(y.data) || (L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { code: a.ZodIssueCode.invalid_string, validation: "date", message: B.message }), S.dirty()) : B.kind === "time" ? N(B).test(y.data) || (L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { code: a.ZodIssueCode.invalid_string, validation: "time", message: B.message }), S.dirty()) : B.kind === "duration" ? T.test(y.data) || (L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { validation: "duration", code: a.ZodIssueCode.invalid_string, message: B.message }), S.dirty()) : B.kind === "ip" ? se(y.data, B.version) || (L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { validation: "ip", code: a.ZodIssueCode.invalid_string, message: B.message }), S.dirty()) : B.kind === "jwt" ? le(y.data, B.alg) || (L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { validation: "jwt", code: a.ZodIssueCode.invalid_string, message: B.message }), S.dirty()) : B.kind === "cidr" ? ve(y.data, B.version) || (L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { validation: "cidr", code: a.ZodIssueCode.invalid_string, message: B.message }), S.dirty()) : B.kind === "base64" ? F.test(y.data) || (L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { validation: "base64", code: a.ZodIssueCode.invalid_string, message: B.message }), S.dirty()) : B.kind === "base64url" ? C.test(y.data) || (L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { validation: "base64url", code: a.ZodIssueCode.invalid_string, message: B.message }), S.dirty()) : u.util.assertNever(B);
      return { status: S.value, value: y.data };
    }
    _regex(y, w, S) {
      return this.refinement((L) => y.test(L), { validation: w, code: a.ZodIssueCode.invalid_string, ...s.errorUtil.errToObj(S) });
    }
    _addCheck(y) {
      return new be({ ...this._def, checks: [...this._def.checks, y] });
    }
    email(y) {
      return this._addCheck({ kind: "email", ...s.errorUtil.errToObj(y) });
    }
    url(y) {
      return this._addCheck({ kind: "url", ...s.errorUtil.errToObj(y) });
    }
    emoji(y) {
      return this._addCheck({ kind: "emoji", ...s.errorUtil.errToObj(y) });
    }
    uuid(y) {
      return this._addCheck({ kind: "uuid", ...s.errorUtil.errToObj(y) });
    }
    nanoid(y) {
      return this._addCheck({ kind: "nanoid", ...s.errorUtil.errToObj(y) });
    }
    cuid(y) {
      return this._addCheck({ kind: "cuid", ...s.errorUtil.errToObj(y) });
    }
    cuid2(y) {
      return this._addCheck({ kind: "cuid2", ...s.errorUtil.errToObj(y) });
    }
    ulid(y) {
      return this._addCheck({ kind: "ulid", ...s.errorUtil.errToObj(y) });
    }
    base64(y) {
      return this._addCheck({ kind: "base64", ...s.errorUtil.errToObj(y) });
    }
    base64url(y) {
      return this._addCheck({ kind: "base64url", ...s.errorUtil.errToObj(y) });
    }
    jwt(y) {
      return this._addCheck({ kind: "jwt", ...s.errorUtil.errToObj(y) });
    }
    ip(y) {
      return this._addCheck({ kind: "ip", ...s.errorUtil.errToObj(y) });
    }
    cidr(y) {
      return this._addCheck({ kind: "cidr", ...s.errorUtil.errToObj(y) });
    }
    datetime(y) {
      var w, S;
      return typeof y == "string" ? this._addCheck({ kind: "datetime", precision: null, offset: false, local: false, message: y }) : this._addCheck({ kind: "datetime", precision: typeof y?.precision > "u" ? null : y?.precision, offset: (w = y?.offset) !== null && w !== void 0 ? w : false, local: (S = y?.local) !== null && S !== void 0 ? S : false, ...s.errorUtil.errToObj(y?.message) });
    }
    date(y) {
      return this._addCheck({ kind: "date", message: y });
    }
    time(y) {
      return typeof y == "string" ? this._addCheck({ kind: "time", precision: null, message: y }) : this._addCheck({ kind: "time", precision: typeof y?.precision > "u" ? null : y?.precision, ...s.errorUtil.errToObj(y?.message) });
    }
    duration(y) {
      return this._addCheck({ kind: "duration", ...s.errorUtil.errToObj(y) });
    }
    regex(y, w) {
      return this._addCheck({ kind: "regex", regex: y, ...s.errorUtil.errToObj(w) });
    }
    includes(y, w) {
      return this._addCheck({ kind: "includes", value: y, position: w?.position, ...s.errorUtil.errToObj(w?.message) });
    }
    startsWith(y, w) {
      return this._addCheck({ kind: "startsWith", value: y, ...s.errorUtil.errToObj(w) });
    }
    endsWith(y, w) {
      return this._addCheck({ kind: "endsWith", value: y, ...s.errorUtil.errToObj(w) });
    }
    min(y, w) {
      return this._addCheck({ kind: "min", value: y, ...s.errorUtil.errToObj(w) });
    }
    max(y, w) {
      return this._addCheck({ kind: "max", value: y, ...s.errorUtil.errToObj(w) });
    }
    length(y, w) {
      return this._addCheck({ kind: "length", value: y, ...s.errorUtil.errToObj(w) });
    }
    nonempty(y) {
      return this.min(1, s.errorUtil.errToObj(y));
    }
    trim() {
      return new be({ ...this._def, checks: [...this._def.checks, { kind: "trim" }] });
    }
    toLowerCase() {
      return new be({ ...this._def, checks: [...this._def.checks, { kind: "toLowerCase" }] });
    }
    toUpperCase() {
      return new be({ ...this._def, checks: [...this._def.checks, { kind: "toUpperCase" }] });
    }
    get isDatetime() {
      return !!this._def.checks.find((y) => y.kind === "datetime");
    }
    get isDate() {
      return !!this._def.checks.find((y) => y.kind === "date");
    }
    get isTime() {
      return !!this._def.checks.find((y) => y.kind === "time");
    }
    get isDuration() {
      return !!this._def.checks.find((y) => y.kind === "duration");
    }
    get isEmail() {
      return !!this._def.checks.find((y) => y.kind === "email");
    }
    get isURL() {
      return !!this._def.checks.find((y) => y.kind === "url");
    }
    get isEmoji() {
      return !!this._def.checks.find((y) => y.kind === "emoji");
    }
    get isUUID() {
      return !!this._def.checks.find((y) => y.kind === "uuid");
    }
    get isNANOID() {
      return !!this._def.checks.find((y) => y.kind === "nanoid");
    }
    get isCUID() {
      return !!this._def.checks.find((y) => y.kind === "cuid");
    }
    get isCUID2() {
      return !!this._def.checks.find((y) => y.kind === "cuid2");
    }
    get isULID() {
      return !!this._def.checks.find((y) => y.kind === "ulid");
    }
    get isIP() {
      return !!this._def.checks.find((y) => y.kind === "ip");
    }
    get isCIDR() {
      return !!this._def.checks.find((y) => y.kind === "cidr");
    }
    get isBase64() {
      return !!this._def.checks.find((y) => y.kind === "base64");
    }
    get isBase64url() {
      return !!this._def.checks.find((y) => y.kind === "base64url");
    }
    get minLength() {
      let y = null;
      for (const w of this._def.checks) w.kind === "min" && (y === null || w.value > y) && (y = w.value);
      return y;
    }
    get maxLength() {
      let y = null;
      for (const w of this._def.checks) w.kind === "max" && (y === null || w.value < y) && (y = w.value);
      return y;
    }
  }
  q.ZodString = be, be.create = (_) => {
    var y;
    return new be({ checks: [], typeName: M.ZodString, coerce: (y = _?.coerce) !== null && y !== void 0 ? y : false, ...d(_) });
  };
  function _e(_, y) {
    const w = (_.toString().split(".")[1] || "").length, S = (y.toString().split(".")[1] || "").length, L = w > S ? w : S, B = parseInt(_.toFixed(L).replace(".", "")), $ = parseInt(y.toFixed(L).replace(".", ""));
    return B % $ / Math.pow(10, L);
  }
  class Be extends f {
    constructor() {
      super(...arguments), this.min = this.gte, this.max = this.lte, this.step = this.multipleOf;
    }
    _parse(y) {
      if (this._def.coerce && (y.data = Number(y.data)), this._getType(y) !== u.ZodParsedType.number) {
        const B = this._getOrReturnCtx(y);
        return (0, e.addIssueToContext)(B, { code: a.ZodIssueCode.invalid_type, expected: u.ZodParsedType.number, received: B.parsedType }), e.INVALID;
      }
      let S;
      const L = new e.ParseStatus();
      for (const B of this._def.checks) B.kind === "int" ? u.util.isInteger(y.data) || (S = this._getOrReturnCtx(y, S), (0, e.addIssueToContext)(S, { code: a.ZodIssueCode.invalid_type, expected: "integer", received: "float", message: B.message }), L.dirty()) : B.kind === "min" ? (B.inclusive ? y.data < B.value : y.data <= B.value) && (S = this._getOrReturnCtx(y, S), (0, e.addIssueToContext)(S, { code: a.ZodIssueCode.too_small, minimum: B.value, type: "number", inclusive: B.inclusive, exact: false, message: B.message }), L.dirty()) : B.kind === "max" ? (B.inclusive ? y.data > B.value : y.data >= B.value) && (S = this._getOrReturnCtx(y, S), (0, e.addIssueToContext)(S, { code: a.ZodIssueCode.too_big, maximum: B.value, type: "number", inclusive: B.inclusive, exact: false, message: B.message }), L.dirty()) : B.kind === "multipleOf" ? _e(y.data, B.value) !== 0 && (S = this._getOrReturnCtx(y, S), (0, e.addIssueToContext)(S, { code: a.ZodIssueCode.not_multiple_of, multipleOf: B.value, message: B.message }), L.dirty()) : B.kind === "finite" ? Number.isFinite(y.data) || (S = this._getOrReturnCtx(y, S), (0, e.addIssueToContext)(S, { code: a.ZodIssueCode.not_finite, message: B.message }), L.dirty()) : u.util.assertNever(B);
      return { status: L.value, value: y.data };
    }
    gte(y, w) {
      return this.setLimit("min", y, true, s.errorUtil.toString(w));
    }
    gt(y, w) {
      return this.setLimit("min", y, false, s.errorUtil.toString(w));
    }
    lte(y, w) {
      return this.setLimit("max", y, true, s.errorUtil.toString(w));
    }
    lt(y, w) {
      return this.setLimit("max", y, false, s.errorUtil.toString(w));
    }
    setLimit(y, w, S, L) {
      return new Be({ ...this._def, checks: [...this._def.checks, { kind: y, value: w, inclusive: S, message: s.errorUtil.toString(L) }] });
    }
    _addCheck(y) {
      return new Be({ ...this._def, checks: [...this._def.checks, y] });
    }
    int(y) {
      return this._addCheck({ kind: "int", message: s.errorUtil.toString(y) });
    }
    positive(y) {
      return this._addCheck({ kind: "min", value: 0, inclusive: false, message: s.errorUtil.toString(y) });
    }
    negative(y) {
      return this._addCheck({ kind: "max", value: 0, inclusive: false, message: s.errorUtil.toString(y) });
    }
    nonpositive(y) {
      return this._addCheck({ kind: "max", value: 0, inclusive: true, message: s.errorUtil.toString(y) });
    }
    nonnegative(y) {
      return this._addCheck({ kind: "min", value: 0, inclusive: true, message: s.errorUtil.toString(y) });
    }
    multipleOf(y, w) {
      return this._addCheck({ kind: "multipleOf", value: y, message: s.errorUtil.toString(w) });
    }
    finite(y) {
      return this._addCheck({ kind: "finite", message: s.errorUtil.toString(y) });
    }
    safe(y) {
      return this._addCheck({ kind: "min", inclusive: true, value: Number.MIN_SAFE_INTEGER, message: s.errorUtil.toString(y) })._addCheck({ kind: "max", inclusive: true, value: Number.MAX_SAFE_INTEGER, message: s.errorUtil.toString(y) });
    }
    get minValue() {
      let y = null;
      for (const w of this._def.checks) w.kind === "min" && (y === null || w.value > y) && (y = w.value);
      return y;
    }
    get maxValue() {
      let y = null;
      for (const w of this._def.checks) w.kind === "max" && (y === null || w.value < y) && (y = w.value);
      return y;
    }
    get isInt() {
      return !!this._def.checks.find((y) => y.kind === "int" || y.kind === "multipleOf" && u.util.isInteger(y.value));
    }
    get isFinite() {
      let y = null, w = null;
      for (const S of this._def.checks) {
        if (S.kind === "finite" || S.kind === "int" || S.kind === "multipleOf") return true;
        S.kind === "min" ? (w === null || S.value > w) && (w = S.value) : S.kind === "max" && (y === null || S.value < y) && (y = S.value);
      }
      return Number.isFinite(w) && Number.isFinite(y);
    }
  }
  q.ZodNumber = Be, Be.create = (_) => new Be({ checks: [], typeName: M.ZodNumber, coerce: _?.coerce || false, ...d(_) });
  class Ue extends f {
    constructor() {
      super(...arguments), this.min = this.gte, this.max = this.lte;
    }
    _parse(y) {
      if (this._def.coerce) try {
        y.data = BigInt(y.data);
      } catch {
        return this._getInvalidInput(y);
      }
      if (this._getType(y) !== u.ZodParsedType.bigint) return this._getInvalidInput(y);
      let S;
      const L = new e.ParseStatus();
      for (const B of this._def.checks) B.kind === "min" ? (B.inclusive ? y.data < B.value : y.data <= B.value) && (S = this._getOrReturnCtx(y, S), (0, e.addIssueToContext)(S, { code: a.ZodIssueCode.too_small, type: "bigint", minimum: B.value, inclusive: B.inclusive, message: B.message }), L.dirty()) : B.kind === "max" ? (B.inclusive ? y.data > B.value : y.data >= B.value) && (S = this._getOrReturnCtx(y, S), (0, e.addIssueToContext)(S, { code: a.ZodIssueCode.too_big, type: "bigint", maximum: B.value, inclusive: B.inclusive, message: B.message }), L.dirty()) : B.kind === "multipleOf" ? y.data % B.value !== BigInt(0) && (S = this._getOrReturnCtx(y, S), (0, e.addIssueToContext)(S, { code: a.ZodIssueCode.not_multiple_of, multipleOf: B.value, message: B.message }), L.dirty()) : u.util.assertNever(B);
      return { status: L.value, value: y.data };
    }
    _getInvalidInput(y) {
      const w = this._getOrReturnCtx(y);
      return (0, e.addIssueToContext)(w, { code: a.ZodIssueCode.invalid_type, expected: u.ZodParsedType.bigint, received: w.parsedType }), e.INVALID;
    }
    gte(y, w) {
      return this.setLimit("min", y, true, s.errorUtil.toString(w));
    }
    gt(y, w) {
      return this.setLimit("min", y, false, s.errorUtil.toString(w));
    }
    lte(y, w) {
      return this.setLimit("max", y, true, s.errorUtil.toString(w));
    }
    lt(y, w) {
      return this.setLimit("max", y, false, s.errorUtil.toString(w));
    }
    setLimit(y, w, S, L) {
      return new Ue({ ...this._def, checks: [...this._def.checks, { kind: y, value: w, inclusive: S, message: s.errorUtil.toString(L) }] });
    }
    _addCheck(y) {
      return new Ue({ ...this._def, checks: [...this._def.checks, y] });
    }
    positive(y) {
      return this._addCheck({ kind: "min", value: BigInt(0), inclusive: false, message: s.errorUtil.toString(y) });
    }
    negative(y) {
      return this._addCheck({ kind: "max", value: BigInt(0), inclusive: false, message: s.errorUtil.toString(y) });
    }
    nonpositive(y) {
      return this._addCheck({ kind: "max", value: BigInt(0), inclusive: true, message: s.errorUtil.toString(y) });
    }
    nonnegative(y) {
      return this._addCheck({ kind: "min", value: BigInt(0), inclusive: true, message: s.errorUtil.toString(y) });
    }
    multipleOf(y, w) {
      return this._addCheck({ kind: "multipleOf", value: y, message: s.errorUtil.toString(w) });
    }
    get minValue() {
      let y = null;
      for (const w of this._def.checks) w.kind === "min" && (y === null || w.value > y) && (y = w.value);
      return y;
    }
    get maxValue() {
      let y = null;
      for (const w of this._def.checks) w.kind === "max" && (y === null || w.value < y) && (y = w.value);
      return y;
    }
  }
  q.ZodBigInt = Ue, Ue.create = (_) => {
    var y;
    return new Ue({ checks: [], typeName: M.ZodBigInt, coerce: (y = _?.coerce) !== null && y !== void 0 ? y : false, ...d(_) });
  };
  class ke extends f {
    _parse(y) {
      if (this._def.coerce && (y.data = !!y.data), this._getType(y) !== u.ZodParsedType.boolean) {
        const S = this._getOrReturnCtx(y);
        return (0, e.addIssueToContext)(S, { code: a.ZodIssueCode.invalid_type, expected: u.ZodParsedType.boolean, received: S.parsedType }), e.INVALID;
      }
      return (0, e.OK)(y.data);
    }
  }
  q.ZodBoolean = ke, ke.create = (_) => new ke({ typeName: M.ZodBoolean, coerce: _?.coerce || false, ...d(_) });
  class Me extends f {
    _parse(y) {
      if (this._def.coerce && (y.data = new Date(y.data)), this._getType(y) !== u.ZodParsedType.date) {
        const B = this._getOrReturnCtx(y);
        return (0, e.addIssueToContext)(B, { code: a.ZodIssueCode.invalid_type, expected: u.ZodParsedType.date, received: B.parsedType }), e.INVALID;
      }
      if (isNaN(y.data.getTime())) {
        const B = this._getOrReturnCtx(y);
        return (0, e.addIssueToContext)(B, { code: a.ZodIssueCode.invalid_date }), e.INVALID;
      }
      const S = new e.ParseStatus();
      let L;
      for (const B of this._def.checks) B.kind === "min" ? y.data.getTime() < B.value && (L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { code: a.ZodIssueCode.too_small, message: B.message, inclusive: true, exact: false, minimum: B.value, type: "date" }), S.dirty()) : B.kind === "max" ? y.data.getTime() > B.value && (L = this._getOrReturnCtx(y, L), (0, e.addIssueToContext)(L, { code: a.ZodIssueCode.too_big, message: B.message, inclusive: true, exact: false, maximum: B.value, type: "date" }), S.dirty()) : u.util.assertNever(B);
      return { status: S.value, value: new Date(y.data.getTime()) };
    }
    _addCheck(y) {
      return new Me({ ...this._def, checks: [...this._def.checks, y] });
    }
    min(y, w) {
      return this._addCheck({ kind: "min", value: y.getTime(), message: s.errorUtil.toString(w) });
    }
    max(y, w) {
      return this._addCheck({ kind: "max", value: y.getTime(), message: s.errorUtil.toString(w) });
    }
    get minDate() {
      let y = null;
      for (const w of this._def.checks) w.kind === "min" && (y === null || w.value > y) && (y = w.value);
      return y != null ? new Date(y) : null;
    }
    get maxDate() {
      let y = null;
      for (const w of this._def.checks) w.kind === "max" && (y === null || w.value < y) && (y = w.value);
      return y != null ? new Date(y) : null;
    }
  }
  q.ZodDate = Me, Me.create = (_) => new Me({ checks: [], coerce: _?.coerce || false, typeName: M.ZodDate, ...d(_) });
  class dt extends f {
    _parse(y) {
      if (this._getType(y) !== u.ZodParsedType.symbol) {
        const S = this._getOrReturnCtx(y);
        return (0, e.addIssueToContext)(S, { code: a.ZodIssueCode.invalid_type, expected: u.ZodParsedType.symbol, received: S.parsedType }), e.INVALID;
      }
      return (0, e.OK)(y.data);
    }
  }
  q.ZodSymbol = dt, dt.create = (_) => new dt({ typeName: M.ZodSymbol, ...d(_) });
  class De extends f {
    _parse(y) {
      if (this._getType(y) !== u.ZodParsedType.undefined) {
        const S = this._getOrReturnCtx(y);
        return (0, e.addIssueToContext)(S, { code: a.ZodIssueCode.invalid_type, expected: u.ZodParsedType.undefined, received: S.parsedType }), e.INVALID;
      }
      return (0, e.OK)(y.data);
    }
  }
  q.ZodUndefined = De, De.create = (_) => new De({ typeName: M.ZodUndefined, ...d(_) });
  class Qe extends f {
    _parse(y) {
      if (this._getType(y) !== u.ZodParsedType.null) {
        const S = this._getOrReturnCtx(y);
        return (0, e.addIssueToContext)(S, { code: a.ZodIssueCode.invalid_type, expected: u.ZodParsedType.null, received: S.parsedType }), e.INVALID;
      }
      return (0, e.OK)(y.data);
    }
  }
  q.ZodNull = Qe, Qe.create = (_) => new Qe({ typeName: M.ZodNull, ...d(_) });
  class He extends f {
    constructor() {
      super(...arguments), this._any = true;
    }
    _parse(y) {
      return (0, e.OK)(y.data);
    }
  }
  q.ZodAny = He, He.create = (_) => new He({ typeName: M.ZodAny, ...d(_) });
  class Q extends f {
    constructor() {
      super(...arguments), this._unknown = true;
    }
    _parse(y) {
      return (0, e.OK)(y.data);
    }
  }
  q.ZodUnknown = Q, Q.create = (_) => new Q({ typeName: M.ZodUnknown, ...d(_) });
  class Ve extends f {
    _parse(y) {
      const w = this._getOrReturnCtx(y);
      return (0, e.addIssueToContext)(w, { code: a.ZodIssueCode.invalid_type, expected: u.ZodParsedType.never, received: w.parsedType }), e.INVALID;
    }
  }
  q.ZodNever = Ve, Ve.create = (_) => new Ve({ typeName: M.ZodNever, ...d(_) });
  class kt extends f {
    _parse(y) {
      if (this._getType(y) !== u.ZodParsedType.undefined) {
        const S = this._getOrReturnCtx(y);
        return (0, e.addIssueToContext)(S, { code: a.ZodIssueCode.invalid_type, expected: u.ZodParsedType.void, received: S.parsedType }), e.INVALID;
      }
      return (0, e.OK)(y.data);
    }
  }
  q.ZodVoid = kt, kt.create = (_) => new kt({ typeName: M.ZodVoid, ...d(_) });
  class we extends f {
    _parse(y) {
      const { ctx: w, status: S } = this._processInputParams(y), L = this._def;
      if (w.parsedType !== u.ZodParsedType.array) return (0, e.addIssueToContext)(w, { code: a.ZodIssueCode.invalid_type, expected: u.ZodParsedType.array, received: w.parsedType }), e.INVALID;
      if (L.exactLength !== null) {
        const $ = w.data.length > L.exactLength.value, G = w.data.length < L.exactLength.value;
        ($ || G) && ((0, e.addIssueToContext)(w, { code: $ ? a.ZodIssueCode.too_big : a.ZodIssueCode.too_small, minimum: G ? L.exactLength.value : void 0, maximum: $ ? L.exactLength.value : void 0, type: "array", inclusive: true, exact: true, message: L.exactLength.message }), S.dirty());
      }
      if (L.minLength !== null && w.data.length < L.minLength.value && ((0, e.addIssueToContext)(w, { code: a.ZodIssueCode.too_small, minimum: L.minLength.value, type: "array", inclusive: true, exact: false, message: L.minLength.message }), S.dirty()), L.maxLength !== null && w.data.length > L.maxLength.value && ((0, e.addIssueToContext)(w, { code: a.ZodIssueCode.too_big, maximum: L.maxLength.value, type: "array", inclusive: true, exact: false, message: L.maxLength.message }), S.dirty()), w.common.async) return Promise.all([...w.data].map(($, G) => L.type._parseAsync(new c(w, $, w.path, G)))).then(($) => e.ParseStatus.mergeArray(S, $));
      const B = [...w.data].map(($, G) => L.type._parseSync(new c(w, $, w.path, G)));
      return e.ParseStatus.mergeArray(S, B);
    }
    get element() {
      return this._def.type;
    }
    min(y, w) {
      return new we({ ...this._def, minLength: { value: y, message: s.errorUtil.toString(w) } });
    }
    max(y, w) {
      return new we({ ...this._def, maxLength: { value: y, message: s.errorUtil.toString(w) } });
    }
    length(y, w) {
      return new we({ ...this._def, exactLength: { value: y, message: s.errorUtil.toString(w) } });
    }
    nonempty(y) {
      return this.min(1, y);
    }
  }
  q.ZodArray = we, we.create = (_, y) => new we({ type: _, minLength: null, maxLength: null, exactLength: null, typeName: M.ZodArray, ...d(y) });
  function pt(_) {
    if (_ instanceof fe) {
      const y = {};
      for (const w in _.shape) {
        const S = _.shape[w];
        y[w] = ze.create(pt(S));
      }
      return new fe({ ..._._def, shape: () => y });
    } else return _ instanceof we ? new we({ ..._._def, type: pt(_.element) }) : _ instanceof ze ? ze.create(pt(_.unwrap())) : _ instanceof Ge ? Ge.create(pt(_.unwrap())) : _ instanceof Pe ? Pe.create(_.items.map((y) => pt(y))) : _;
  }
  class fe extends f {
    constructor() {
      super(...arguments), this._cached = null, this.nonstrict = this.passthrough, this.augment = this.extend;
    }
    _getCached() {
      if (this._cached !== null) return this._cached;
      const y = this._def.shape(), w = u.util.objectKeys(y);
      return this._cached = { shape: y, keys: w };
    }
    _parse(y) {
      if (this._getType(y) !== u.ZodParsedType.object) {
        const te = this._getOrReturnCtx(y);
        return (0, e.addIssueToContext)(te, { code: a.ZodIssueCode.invalid_type, expected: u.ZodParsedType.object, received: te.parsedType }), e.INVALID;
      }
      const { status: S, ctx: L } = this._processInputParams(y), { shape: B, keys: $ } = this._getCached(), G = [];
      if (!(this._def.catchall instanceof Ve && this._def.unknownKeys === "strip")) for (const te in L.data) $.includes(te) || G.push(te);
      const re = [];
      for (const te of $) {
        const ce = B[te], it = L.data[te];
        re.push({ key: { status: "valid", value: te }, value: ce._parse(new c(L, it, L.path, te)), alwaysSet: te in L.data });
      }
      if (this._def.catchall instanceof Ve) {
        const te = this._def.unknownKeys;
        if (te === "passthrough") for (const ce of G) re.push({ key: { status: "valid", value: ce }, value: { status: "valid", value: L.data[ce] } });
        else if (te === "strict") G.length > 0 && ((0, e.addIssueToContext)(L, { code: a.ZodIssueCode.unrecognized_keys, keys: G }), S.dirty());
        else if (te !== "strip") throw new Error("Internal ZodObject error: invalid unknownKeys value.");
      } else {
        const te = this._def.catchall;
        for (const ce of G) {
          const it = L.data[ce];
          re.push({ key: { status: "valid", value: ce }, value: te._parse(new c(L, it, L.path, ce)), alwaysSet: ce in L.data });
        }
      }
      return L.common.async ? Promise.resolve().then(async () => {
        const te = [];
        for (const ce of re) {
          const it = await ce.key, Ga = await ce.value;
          te.push({ key: it, value: Ga, alwaysSet: ce.alwaysSet });
        }
        return te;
      }).then((te) => e.ParseStatus.mergeObjectSync(S, te)) : e.ParseStatus.mergeObjectSync(S, re);
    }
    get shape() {
      return this._def.shape();
    }
    strict(y) {
      return s.errorUtil.errToObj, new fe({ ...this._def, unknownKeys: "strict", ...y !== void 0 ? { errorMap: (w, S) => {
        var L, B, $, G;
        const re = ($ = (B = (L = this._def).errorMap) === null || B === void 0 ? void 0 : B.call(L, w, S).message) !== null && $ !== void 0 ? $ : S.defaultError;
        return w.code === "unrecognized_keys" ? { message: (G = s.errorUtil.errToObj(y).message) !== null && G !== void 0 ? G : re } : { message: re };
      } } : {} });
    }
    strip() {
      return new fe({ ...this._def, unknownKeys: "strip" });
    }
    passthrough() {
      return new fe({ ...this._def, unknownKeys: "passthrough" });
    }
    extend(y) {
      return new fe({ ...this._def, shape: () => ({ ...this._def.shape(), ...y }) });
    }
    merge(y) {
      return new fe({ unknownKeys: y._def.unknownKeys, catchall: y._def.catchall, shape: () => ({ ...this._def.shape(), ...y._def.shape() }), typeName: M.ZodObject });
    }
    setKey(y, w) {
      return this.augment({ [y]: w });
    }
    catchall(y) {
      return new fe({ ...this._def, catchall: y });
    }
    pick(y) {
      const w = {};
      return u.util.objectKeys(y).forEach((S) => {
        y[S] && this.shape[S] && (w[S] = this.shape[S]);
      }), new fe({ ...this._def, shape: () => w });
    }
    omit(y) {
      const w = {};
      return u.util.objectKeys(this.shape).forEach((S) => {
        y[S] || (w[S] = this.shape[S]);
      }), new fe({ ...this._def, shape: () => w });
    }
    deepPartial() {
      return pt(this);
    }
    partial(y) {
      const w = {};
      return u.util.objectKeys(this.shape).forEach((S) => {
        const L = this.shape[S];
        y && !y[S] ? w[S] = L : w[S] = L.optional();
      }), new fe({ ...this._def, shape: () => w });
    }
    required(y) {
      const w = {};
      return u.util.objectKeys(this.shape).forEach((S) => {
        if (y && !y[S]) w[S] = this.shape[S];
        else {
          let B = this.shape[S];
          for (; B instanceof ze; ) B = B._def.innerType;
          w[S] = B;
        }
      }), new fe({ ...this._def, shape: () => w });
    }
    keyof() {
      return Gt(u.util.objectKeys(this.shape));
    }
  }
  q.ZodObject = fe, fe.create = (_, y) => new fe({ shape: () => _, unknownKeys: "strip", catchall: Ve.create(), typeName: M.ZodObject, ...d(y) }), fe.strictCreate = (_, y) => new fe({ shape: () => _, unknownKeys: "strict", catchall: Ve.create(), typeName: M.ZodObject, ...d(y) }), fe.lazycreate = (_, y) => new fe({ shape: _, unknownKeys: "strip", catchall: Ve.create(), typeName: M.ZodObject, ...d(y) });
  class Xe extends f {
    _parse(y) {
      const { ctx: w } = this._processInputParams(y), S = this._def.options;
      function L(B) {
        for (const G of B) if (G.result.status === "valid") return G.result;
        for (const G of B) if (G.result.status === "dirty") return w.common.issues.push(...G.ctx.common.issues), G.result;
        const $ = B.map((G) => new a.ZodError(G.ctx.common.issues));
        return (0, e.addIssueToContext)(w, { code: a.ZodIssueCode.invalid_union, unionErrors: $ }), e.INVALID;
      }
      if (w.common.async) return Promise.all(S.map(async (B) => {
        const $ = { ...w, common: { ...w.common, issues: [] }, parent: null };
        return { result: await B._parseAsync({ data: w.data, path: w.path, parent: $ }), ctx: $ };
      })).then(L);
      {
        let B;
        const $ = [];
        for (const re of S) {
          const te = { ...w, common: { ...w.common, issues: [] }, parent: null }, ce = re._parseSync({ data: w.data, path: w.path, parent: te });
          if (ce.status === "valid") return ce;
          ce.status === "dirty" && !B && (B = { result: ce, ctx: te }), te.common.issues.length && $.push(te.common.issues);
        }
        if (B) return w.common.issues.push(...B.ctx.common.issues), B.result;
        const G = $.map((re) => new a.ZodError(re));
        return (0, e.addIssueToContext)(w, { code: a.ZodIssueCode.invalid_union, unionErrors: G }), e.INVALID;
      }
    }
    get options() {
      return this._def.options;
    }
  }
  q.ZodUnion = Xe, Xe.create = (_, y) => new Xe({ options: _, typeName: M.ZodUnion, ...d(y) });
  const Ne = (_) => _ instanceof Pt ? Ne(_.schema) : _ instanceof Ie ? Ne(_.innerType()) : _ instanceof Bt ? [_.value] : _ instanceof tt ? _.options : _ instanceof Ut ? u.util.objectValues(_.enum) : _ instanceof It ? Ne(_._def.innerType) : _ instanceof De ? [void 0] : _ instanceof Qe ? [null] : _ instanceof ze ? [void 0, ...Ne(_.unwrap())] : _ instanceof Ge ? [null, ...Ne(_.unwrap())] : _ instanceof ir || _ instanceof yt ? Ne(_.unwrap()) : _ instanceof Kt ? Ne(_._def.innerType) : [];
  class Dt extends f {
    _parse(y) {
      const { ctx: w } = this._processInputParams(y);
      if (w.parsedType !== u.ZodParsedType.object) return (0, e.addIssueToContext)(w, { code: a.ZodIssueCode.invalid_type, expected: u.ZodParsedType.object, received: w.parsedType }), e.INVALID;
      const S = this.discriminator, L = w.data[S], B = this.optionsMap.get(L);
      return B ? w.common.async ? B._parseAsync({ data: w.data, path: w.path, parent: w }) : B._parseSync({ data: w.data, path: w.path, parent: w }) : ((0, e.addIssueToContext)(w, { code: a.ZodIssueCode.invalid_union_discriminator, options: Array.from(this.optionsMap.keys()), path: [S] }), e.INVALID);
    }
    get discriminator() {
      return this._def.discriminator;
    }
    get options() {
      return this._def.options;
    }
    get optionsMap() {
      return this._def.optionsMap;
    }
    static create(y, w, S) {
      const L = /* @__PURE__ */ new Map();
      for (const B of w) {
        const $ = Ne(B.shape[y]);
        if (!$.length) throw new Error(`A discriminator value for key \`${y}\` could not be extracted from all schema options`);
        for (const G of $) {
          if (L.has(G)) throw new Error(`Discriminator property ${String(y)} has duplicate value ${String(G)}`);
          L.set(G, B);
        }
      }
      return new Dt({ typeName: M.ZodDiscriminatedUnion, discriminator: y, options: w, optionsMap: L, ...d(S) });
    }
  }
  q.ZodDiscriminatedUnion = Dt;
  function Ye(_, y) {
    const w = (0, u.getParsedType)(_), S = (0, u.getParsedType)(y);
    if (_ === y) return { valid: true, data: _ };
    if (w === u.ZodParsedType.object && S === u.ZodParsedType.object) {
      const L = u.util.objectKeys(y), B = u.util.objectKeys(_).filter((G) => L.indexOf(G) !== -1), $ = { ..._, ...y };
      for (const G of B) {
        const re = Ye(_[G], y[G]);
        if (!re.valid) return { valid: false };
        $[G] = re.data;
      }
      return { valid: true, data: $ };
    } else if (w === u.ZodParsedType.array && S === u.ZodParsedType.array) {
      if (_.length !== y.length) return { valid: false };
      const L = [];
      for (let B = 0; B < _.length; B++) {
        const $ = _[B], G = y[B], re = Ye($, G);
        if (!re.valid) return { valid: false };
        L.push(re.data);
      }
      return { valid: true, data: L };
    } else return w === u.ZodParsedType.date && S === u.ZodParsedType.date && +_ == +y ? { valid: true, data: _ } : { valid: false };
  }
  class ft extends f {
    _parse(y) {
      const { status: w, ctx: S } = this._processInputParams(y), L = (B, $) => {
        if ((0, e.isAborted)(B) || (0, e.isAborted)($)) return e.INVALID;
        const G = Ye(B.value, $.value);
        return G.valid ? (((0, e.isDirty)(B) || (0, e.isDirty)($)) && w.dirty(), { status: w.value, value: G.data }) : ((0, e.addIssueToContext)(S, { code: a.ZodIssueCode.invalid_intersection_types }), e.INVALID);
      };
      return S.common.async ? Promise.all([this._def.left._parseAsync({ data: S.data, path: S.path, parent: S }), this._def.right._parseAsync({ data: S.data, path: S.path, parent: S })]).then(([B, $]) => L(B, $)) : L(this._def.left._parseSync({ data: S.data, path: S.path, parent: S }), this._def.right._parseSync({ data: S.data, path: S.path, parent: S }));
    }
  }
  q.ZodIntersection = ft, ft.create = (_, y, w) => new ft({ left: _, right: y, typeName: M.ZodIntersection, ...d(w) });
  class Pe extends f {
    _parse(y) {
      const { status: w, ctx: S } = this._processInputParams(y);
      if (S.parsedType !== u.ZodParsedType.array) return (0, e.addIssueToContext)(S, { code: a.ZodIssueCode.invalid_type, expected: u.ZodParsedType.array, received: S.parsedType }), e.INVALID;
      if (S.data.length < this._def.items.length) return (0, e.addIssueToContext)(S, { code: a.ZodIssueCode.too_small, minimum: this._def.items.length, inclusive: true, exact: false, type: "array" }), e.INVALID;
      !this._def.rest && S.data.length > this._def.items.length && ((0, e.addIssueToContext)(S, { code: a.ZodIssueCode.too_big, maximum: this._def.items.length, inclusive: true, exact: false, type: "array" }), w.dirty());
      const B = [...S.data].map(($, G) => {
        const re = this._def.items[G] || this._def.rest;
        return re ? re._parse(new c(S, $, S.path, G)) : null;
      }).filter(($) => !!$);
      return S.common.async ? Promise.all(B).then(($) => e.ParseStatus.mergeArray(w, $)) : e.ParseStatus.mergeArray(w, B);
    }
    get items() {
      return this._def.items;
    }
    rest(y) {
      return new Pe({ ...this._def, rest: y });
    }
  }
  q.ZodTuple = Pe, Pe.create = (_, y) => {
    if (!Array.isArray(_)) throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
    return new Pe({ items: _, typeName: M.ZodTuple, rest: null, ...d(y) });
  };
  class J extends f {
    get keySchema() {
      return this._def.keyType;
    }
    get valueSchema() {
      return this._def.valueType;
    }
    _parse(y) {
      const { status: w, ctx: S } = this._processInputParams(y);
      if (S.parsedType !== u.ZodParsedType.object) return (0, e.addIssueToContext)(S, { code: a.ZodIssueCode.invalid_type, expected: u.ZodParsedType.object, received: S.parsedType }), e.INVALID;
      const L = [], B = this._def.keyType, $ = this._def.valueType;
      for (const G in S.data) L.push({ key: B._parse(new c(S, G, S.path, G)), value: $._parse(new c(S, S.data[G], S.path, G)), alwaysSet: G in S.data });
      return S.common.async ? e.ParseStatus.mergeObjectAsync(w, L) : e.ParseStatus.mergeObjectSync(w, L);
    }
    get element() {
      return this._def.valueType;
    }
    static create(y, w, S) {
      return w instanceof f ? new J({ keyType: y, valueType: w, typeName: M.ZodRecord, ...d(S) }) : new J({ keyType: be.create(), valueType: y, typeName: M.ZodRecord, ...d(w) });
    }
  }
  q.ZodRecord = J;
  class zt extends f {
    get keySchema() {
      return this._def.keyType;
    }
    get valueSchema() {
      return this._def.valueType;
    }
    _parse(y) {
      const { status: w, ctx: S } = this._processInputParams(y);
      if (S.parsedType !== u.ZodParsedType.map) return (0, e.addIssueToContext)(S, { code: a.ZodIssueCode.invalid_type, expected: u.ZodParsedType.map, received: S.parsedType }), e.INVALID;
      const L = this._def.keyType, B = this._def.valueType, $ = [...S.data.entries()].map(([G, re], te) => ({ key: L._parse(new c(S, G, S.path, [te, "key"])), value: B._parse(new c(S, re, S.path, [te, "value"])) }));
      if (S.common.async) {
        const G = /* @__PURE__ */ new Map();
        return Promise.resolve().then(async () => {
          for (const re of $) {
            const te = await re.key, ce = await re.value;
            if (te.status === "aborted" || ce.status === "aborted") return e.INVALID;
            (te.status === "dirty" || ce.status === "dirty") && w.dirty(), G.set(te.value, ce.value);
          }
          return { status: w.value, value: G };
        });
      } else {
        const G = /* @__PURE__ */ new Map();
        for (const re of $) {
          const te = re.key, ce = re.value;
          if (te.status === "aborted" || ce.status === "aborted") return e.INVALID;
          (te.status === "dirty" || ce.status === "dirty") && w.dirty(), G.set(te.value, ce.value);
        }
        return { status: w.value, value: G };
      }
    }
  }
  q.ZodMap = zt, zt.create = (_, y, w) => new zt({ valueType: y, keyType: _, typeName: M.ZodMap, ...d(w) });
  class ht extends f {
    _parse(y) {
      const { status: w, ctx: S } = this._processInputParams(y);
      if (S.parsedType !== u.ZodParsedType.set) return (0, e.addIssueToContext)(S, { code: a.ZodIssueCode.invalid_type, expected: u.ZodParsedType.set, received: S.parsedType }), e.INVALID;
      const L = this._def;
      L.minSize !== null && S.data.size < L.minSize.value && ((0, e.addIssueToContext)(S, { code: a.ZodIssueCode.too_small, minimum: L.minSize.value, type: "set", inclusive: true, exact: false, message: L.minSize.message }), w.dirty()), L.maxSize !== null && S.data.size > L.maxSize.value && ((0, e.addIssueToContext)(S, { code: a.ZodIssueCode.too_big, maximum: L.maxSize.value, type: "set", inclusive: true, exact: false, message: L.maxSize.message }), w.dirty());
      const B = this._def.valueType;
      function $(re) {
        const te = /* @__PURE__ */ new Set();
        for (const ce of re) {
          if (ce.status === "aborted") return e.INVALID;
          ce.status === "dirty" && w.dirty(), te.add(ce.value);
        }
        return { status: w.value, value: te };
      }
      const G = [...S.data.values()].map((re, te) => B._parse(new c(S, re, S.path, te)));
      return S.common.async ? Promise.all(G).then((re) => $(re)) : $(G);
    }
    min(y, w) {
      return new ht({ ...this._def, minSize: { value: y, message: s.errorUtil.toString(w) } });
    }
    max(y, w) {
      return new ht({ ...this._def, maxSize: { value: y, message: s.errorUtil.toString(w) } });
    }
    size(y, w) {
      return this.min(y, w).max(y, w);
    }
    nonempty(y) {
      return this.min(1, y);
    }
  }
  q.ZodSet = ht, ht.create = (_, y) => new ht({ valueType: _, minSize: null, maxSize: null, typeName: M.ZodSet, ...d(y) });
  class et extends f {
    constructor() {
      super(...arguments), this.validate = this.implement;
    }
    _parse(y) {
      const { ctx: w } = this._processInputParams(y);
      if (w.parsedType !== u.ZodParsedType.function) return (0, e.addIssueToContext)(w, { code: a.ZodIssueCode.invalid_type, expected: u.ZodParsedType.function, received: w.parsedType }), e.INVALID;
      function S(G, re) {
        return (0, e.makeIssue)({ data: G, path: w.path, errorMaps: [w.common.contextualErrorMap, w.schemaErrorMap, (0, o.getErrorMap)(), o.defaultErrorMap].filter((te) => !!te), issueData: { code: a.ZodIssueCode.invalid_arguments, argumentsError: re } });
      }
      function L(G, re) {
        return (0, e.makeIssue)({ data: G, path: w.path, errorMaps: [w.common.contextualErrorMap, w.schemaErrorMap, (0, o.getErrorMap)(), o.defaultErrorMap].filter((te) => !!te), issueData: { code: a.ZodIssueCode.invalid_return_type, returnTypeError: re } });
      }
      const B = { errorMap: w.common.contextualErrorMap }, $ = w.data;
      if (this._def.returns instanceof rt) {
        const G = this;
        return (0, e.OK)(async function(...re) {
          const te = new a.ZodError([]), ce = await G._def.args.parseAsync(re, B).catch((ld) => {
            throw te.addIssue(S(re, ld)), te;
          }), it = await Reflect.apply($, this, ce);
          return await G._def.returns._def.type.parseAsync(it, B).catch((ld) => {
            throw te.addIssue(L(it, ld)), te;
          });
        });
      } else {
        const G = this;
        return (0, e.OK)(function(...re) {
          const te = G._def.args.safeParse(re, B);
          if (!te.success) throw new a.ZodError([S(re, te.error)]);
          const ce = Reflect.apply($, this, te.data), it = G._def.returns.safeParse(ce, B);
          if (!it.success) throw new a.ZodError([L(ce, it.error)]);
          return it.data;
        });
      }
    }
    parameters() {
      return this._def.args;
    }
    returnType() {
      return this._def.returns;
    }
    args(...y) {
      return new et({ ...this._def, args: Pe.create(y).rest(Q.create()) });
    }
    returns(y) {
      return new et({ ...this._def, returns: y });
    }
    implement(y) {
      return this.parse(y);
    }
    strictImplement(y) {
      return this.parse(y);
    }
    static create(y, w, S) {
      return new et({ args: y || Pe.create([]).rest(Q.create()), returns: w || Q.create(), typeName: M.ZodFunction, ...d(S) });
    }
  }
  q.ZodFunction = et;
  class Pt extends f {
    get schema() {
      return this._def.getter();
    }
    _parse(y) {
      const { ctx: w } = this._processInputParams(y);
      return this._def.getter()._parse({ data: w.data, path: w.path, parent: w });
    }
  }
  q.ZodLazy = Pt, Pt.create = (_, y) => new Pt({ getter: _, typeName: M.ZodLazy, ...d(y) });
  class Bt extends f {
    _parse(y) {
      if (y.data !== this._def.value) {
        const w = this._getOrReturnCtx(y);
        return (0, e.addIssueToContext)(w, { received: w.data, code: a.ZodIssueCode.invalid_literal, expected: this._def.value }), e.INVALID;
      }
      return { status: "valid", value: y.data };
    }
    get value() {
      return this._def.value;
    }
  }
  q.ZodLiteral = Bt, Bt.create = (_, y) => new Bt({ value: _, typeName: M.ZodLiteral, ...d(y) });
  function Gt(_, y) {
    return new tt({ values: _, typeName: M.ZodEnum, ...d(y) });
  }
  class tt extends f {
    constructor() {
      super(...arguments), i.set(this, void 0);
    }
    _parse(y) {
      if (typeof y.data != "string") {
        const w = this._getOrReturnCtx(y), S = this._def.values;
        return (0, e.addIssueToContext)(w, { expected: u.util.joinValues(S), received: w.parsedType, code: a.ZodIssueCode.invalid_type }), e.INVALID;
      }
      if (r(this, i, "f") || t(this, i, new Set(this._def.values), "f"), !r(this, i, "f").has(y.data)) {
        const w = this._getOrReturnCtx(y), S = this._def.values;
        return (0, e.addIssueToContext)(w, { received: w.data, code: a.ZodIssueCode.invalid_enum_value, options: S }), e.INVALID;
      }
      return (0, e.OK)(y.data);
    }
    get options() {
      return this._def.values;
    }
    get enum() {
      const y = {};
      for (const w of this._def.values) y[w] = w;
      return y;
    }
    get Values() {
      const y = {};
      for (const w of this._def.values) y[w] = w;
      return y;
    }
    get Enum() {
      const y = {};
      for (const w of this._def.values) y[w] = w;
      return y;
    }
    extract(y, w = this._def) {
      return tt.create(y, { ...this._def, ...w });
    }
    exclude(y, w = this._def) {
      return tt.create(this.options.filter((S) => !y.includes(S)), { ...this._def, ...w });
    }
  }
  q.ZodEnum = tt, i = /* @__PURE__ */ new WeakMap(), tt.create = Gt;
  class Ut extends f {
    constructor() {
      super(...arguments), n.set(this, void 0);
    }
    _parse(y) {
      const w = u.util.getValidEnumValues(this._def.values), S = this._getOrReturnCtx(y);
      if (S.parsedType !== u.ZodParsedType.string && S.parsedType !== u.ZodParsedType.number) {
        const L = u.util.objectValues(w);
        return (0, e.addIssueToContext)(S, { expected: u.util.joinValues(L), received: S.parsedType, code: a.ZodIssueCode.invalid_type }), e.INVALID;
      }
      if (r(this, n, "f") || t(this, n, new Set(u.util.getValidEnumValues(this._def.values)), "f"), !r(this, n, "f").has(y.data)) {
        const L = u.util.objectValues(w);
        return (0, e.addIssueToContext)(S, { received: S.data, code: a.ZodIssueCode.invalid_enum_value, options: L }), e.INVALID;
      }
      return (0, e.OK)(y.data);
    }
    get enum() {
      return this._def.values;
    }
  }
  q.ZodNativeEnum = Ut, n = /* @__PURE__ */ new WeakMap(), Ut.create = (_, y) => new Ut({ values: _, typeName: M.ZodNativeEnum, ...d(y) });
  class rt extends f {
    unwrap() {
      return this._def.type;
    }
    _parse(y) {
      const { ctx: w } = this._processInputParams(y);
      if (w.parsedType !== u.ZodParsedType.promise && w.common.async === false) return (0, e.addIssueToContext)(w, { code: a.ZodIssueCode.invalid_type, expected: u.ZodParsedType.promise, received: w.parsedType }), e.INVALID;
      const S = w.parsedType === u.ZodParsedType.promise ? w.data : Promise.resolve(w.data);
      return (0, e.OK)(S.then((L) => this._def.type.parseAsync(L, { path: w.path, errorMap: w.common.contextualErrorMap })));
    }
  }
  q.ZodPromise = rt, rt.create = (_, y) => new rt({ type: _, typeName: M.ZodPromise, ...d(y) });
  class Ie extends f {
    innerType() {
      return this._def.schema;
    }
    sourceType() {
      return this._def.schema._def.typeName === M.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
    }
    _parse(y) {
      const { status: w, ctx: S } = this._processInputParams(y), L = this._def.effect || null, B = { addIssue: ($) => {
        (0, e.addIssueToContext)(S, $), $.fatal ? w.abort() : w.dirty();
      }, get path() {
        return S.path;
      } };
      if (B.addIssue = B.addIssue.bind(B), L.type === "preprocess") {
        const $ = L.transform(S.data, B);
        if (S.common.async) return Promise.resolve($).then(async (G) => {
          if (w.value === "aborted") return e.INVALID;
          const re = await this._def.schema._parseAsync({ data: G, path: S.path, parent: S });
          return re.status === "aborted" ? e.INVALID : re.status === "dirty" || w.value === "dirty" ? (0, e.DIRTY)(re.value) : re;
        });
        {
          if (w.value === "aborted") return e.INVALID;
          const G = this._def.schema._parseSync({ data: $, path: S.path, parent: S });
          return G.status === "aborted" ? e.INVALID : G.status === "dirty" || w.value === "dirty" ? (0, e.DIRTY)(G.value) : G;
        }
      }
      if (L.type === "refinement") {
        const $ = (G) => {
          const re = L.refinement(G, B);
          if (S.common.async) return Promise.resolve(re);
          if (re instanceof Promise) throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
          return G;
        };
        if (S.common.async === false) {
          const G = this._def.schema._parseSync({ data: S.data, path: S.path, parent: S });
          return G.status === "aborted" ? e.INVALID : (G.status === "dirty" && w.dirty(), $(G.value), { status: w.value, value: G.value });
        } else return this._def.schema._parseAsync({ data: S.data, path: S.path, parent: S }).then((G) => G.status === "aborted" ? e.INVALID : (G.status === "dirty" && w.dirty(), $(G.value).then(() => ({ status: w.value, value: G.value }))));
      }
      if (L.type === "transform") if (S.common.async === false) {
        const $ = this._def.schema._parseSync({ data: S.data, path: S.path, parent: S });
        if (!(0, e.isValid)($)) return $;
        const G = L.transform($.value, B);
        if (G instanceof Promise) throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");
        return { status: w.value, value: G };
      } else return this._def.schema._parseAsync({ data: S.data, path: S.path, parent: S }).then(($) => (0, e.isValid)($) ? Promise.resolve(L.transform($.value, B)).then((G) => ({ status: w.value, value: G })) : $);
      u.util.assertNever(L);
    }
  }
  q.ZodEffects = Ie, q.ZodTransformer = Ie, Ie.create = (_, y, w) => new Ie({ schema: _, typeName: M.ZodEffects, effect: y, ...d(w) }), Ie.createWithPreprocess = (_, y, w) => new Ie({ schema: y, effect: { type: "preprocess", transform: _ }, typeName: M.ZodEffects, ...d(w) });
  class ze extends f {
    _parse(y) {
      return this._getType(y) === u.ZodParsedType.undefined ? (0, e.OK)(void 0) : this._def.innerType._parse(y);
    }
    unwrap() {
      return this._def.innerType;
    }
  }
  q.ZodOptional = ze, ze.create = (_, y) => new ze({ innerType: _, typeName: M.ZodOptional, ...d(y) });
  class Ge extends f {
    _parse(y) {
      return this._getType(y) === u.ZodParsedType.null ? (0, e.OK)(null) : this._def.innerType._parse(y);
    }
    unwrap() {
      return this._def.innerType;
    }
  }
  q.ZodNullable = Ge, Ge.create = (_, y) => new Ge({ innerType: _, typeName: M.ZodNullable, ...d(y) });
  class It extends f {
    _parse(y) {
      const { ctx: w } = this._processInputParams(y);
      let S = w.data;
      return w.parsedType === u.ZodParsedType.undefined && (S = this._def.defaultValue()), this._def.innerType._parse({ data: S, path: w.path, parent: w });
    }
    removeDefault() {
      return this._def.innerType;
    }
  }
  q.ZodDefault = It, It.create = (_, y) => new It({ innerType: _, typeName: M.ZodDefault, defaultValue: typeof y.default == "function" ? y.default : () => y.default, ...d(y) });
  class Kt extends f {
    _parse(y) {
      const { ctx: w } = this._processInputParams(y), S = { ...w, common: { ...w.common, issues: [] } }, L = this._def.innerType._parse({ data: S.data, path: S.path, parent: { ...S } });
      return (0, e.isAsync)(L) ? L.then((B) => ({ status: "valid", value: B.status === "valid" ? B.value : this._def.catchValue({ get error() {
        return new a.ZodError(S.common.issues);
      }, input: S.data }) })) : { status: "valid", value: L.status === "valid" ? L.value : this._def.catchValue({ get error() {
        return new a.ZodError(S.common.issues);
      }, input: S.data }) };
    }
    removeCatch() {
      return this._def.innerType;
    }
  }
  q.ZodCatch = Kt, Kt.create = (_, y) => new Kt({ innerType: _, typeName: M.ZodCatch, catchValue: typeof y.catch == "function" ? y.catch : () => y.catch, ...d(y) });
  class xt extends f {
    _parse(y) {
      if (this._getType(y) !== u.ZodParsedType.nan) {
        const S = this._getOrReturnCtx(y);
        return (0, e.addIssueToContext)(S, { code: a.ZodIssueCode.invalid_type, expected: u.ZodParsedType.nan, received: S.parsedType }), e.INVALID;
      }
      return { status: "valid", value: y.data };
    }
  }
  q.ZodNaN = xt, xt.create = (_) => new xt({ typeName: M.ZodNaN, ...d(_) }), q.BRAND = Symbol("zod_brand");
  class ir extends f {
    _parse(y) {
      const { ctx: w } = this._processInputParams(y), S = w.data;
      return this._def.type._parse({ data: S, path: w.path, parent: w });
    }
    unwrap() {
      return this._def.type;
    }
  }
  q.ZodBranded = ir;
  class Ot extends f {
    _parse(y) {
      const { status: w, ctx: S } = this._processInputParams(y);
      if (S.common.async) return (async () => {
        const B = await this._def.in._parseAsync({ data: S.data, path: S.path, parent: S });
        return B.status === "aborted" ? e.INVALID : B.status === "dirty" ? (w.dirty(), (0, e.DIRTY)(B.value)) : this._def.out._parseAsync({ data: B.value, path: S.path, parent: S });
      })();
      {
        const L = this._def.in._parseSync({ data: S.data, path: S.path, parent: S });
        return L.status === "aborted" ? e.INVALID : L.status === "dirty" ? (w.dirty(), { status: "dirty", value: L.value }) : this._def.out._parseSync({ data: L.value, path: S.path, parent: S });
      }
    }
    static create(y, w) {
      return new Ot({ in: y, out: w, typeName: M.ZodPipeline });
    }
  }
  q.ZodPipeline = Ot;
  class yt extends f {
    _parse(y) {
      const w = this._def.innerType._parse(y), S = (L) => ((0, e.isValid)(L) && (L.value = Object.freeze(L.value)), L);
      return (0, e.isAsync)(w) ? w.then((L) => S(L)) : S(w);
    }
    unwrap() {
      return this._def.innerType;
    }
  }
  q.ZodReadonly = yt, yt.create = (_, y) => new yt({ innerType: _, typeName: M.ZodReadonly, ...d(y) });
  function dr(_, y) {
    const w = typeof _ == "function" ? _(y) : typeof _ == "string" ? { message: _ } : _;
    return typeof w == "string" ? { message: w } : w;
  }
  function pr(_, y = {}, w) {
    return _ ? He.create().superRefine((S, L) => {
      var B, $;
      const G = _(S);
      if (G instanceof Promise) return G.then((re) => {
        var te, ce;
        if (!re) {
          const it = dr(y, S), Ga = (ce = (te = it.fatal) !== null && te !== void 0 ? te : w) !== null && ce !== void 0 ? ce : true;
          L.addIssue({ code: "custom", ...it, fatal: Ga });
        }
      });
      if (!G) {
        const re = dr(y, S), te = ($ = (B = re.fatal) !== null && B !== void 0 ? B : w) !== null && $ !== void 0 ? $ : true;
        L.addIssue({ code: "custom", ...re, fatal: te });
      }
    }) : He.create();
  }
  q.custom = pr, q.late = { object: fe.lazycreate };
  var M;
  (function(_) {
    _.ZodString = "ZodString", _.ZodNumber = "ZodNumber", _.ZodNaN = "ZodNaN", _.ZodBigInt = "ZodBigInt", _.ZodBoolean = "ZodBoolean", _.ZodDate = "ZodDate", _.ZodSymbol = "ZodSymbol", _.ZodUndefined = "ZodUndefined", _.ZodNull = "ZodNull", _.ZodAny = "ZodAny", _.ZodUnknown = "ZodUnknown", _.ZodNever = "ZodNever", _.ZodVoid = "ZodVoid", _.ZodArray = "ZodArray", _.ZodObject = "ZodObject", _.ZodUnion = "ZodUnion", _.ZodDiscriminatedUnion = "ZodDiscriminatedUnion", _.ZodIntersection = "ZodIntersection", _.ZodTuple = "ZodTuple", _.ZodRecord = "ZodRecord", _.ZodMap = "ZodMap", _.ZodSet = "ZodSet", _.ZodFunction = "ZodFunction", _.ZodLazy = "ZodLazy", _.ZodLiteral = "ZodLiteral", _.ZodEnum = "ZodEnum", _.ZodEffects = "ZodEffects", _.ZodNativeEnum = "ZodNativeEnum", _.ZodOptional = "ZodOptional", _.ZodNullable = "ZodNullable", _.ZodDefault = "ZodDefault", _.ZodCatch = "ZodCatch", _.ZodPromise = "ZodPromise", _.ZodBranded = "ZodBranded", _.ZodPipeline = "ZodPipeline", _.ZodReadonly = "ZodReadonly";
  })(M || (q.ZodFirstPartyTypeKind = M = {}));
  const un = (_, y = { message: `Input not instance of ${_.name}` }) => pr((w) => w instanceof _, y);
  q.instanceof = un;
  const si = be.create;
  q.string = si;
  const Dr = Be.create;
  q.number = Dr;
  const cn = xt.create;
  q.nan = cn;
  const ln = Ue.create;
  q.bigint = ln;
  const Pr = ke.create;
  q.boolean = Pr;
  const dn = Me.create;
  q.date = dn;
  const pn = dt.create;
  q.symbol = pn;
  const ai = De.create;
  q.undefined = ai;
  const fn = Qe.create;
  q.null = fn;
  const hn = He.create;
  q.any = hn;
  const ui = Q.create;
  q.unknown = ui;
  const yn = Ve.create;
  q.never = yn;
  const mn = kt.create;
  q.void = mn;
  const ci = we.create;
  q.array = ci;
  const bn = fe.create;
  q.object = bn;
  const gn = fe.strictCreate;
  q.strictObject = gn;
  const li = Xe.create;
  q.union = li;
  const En = Dt.create;
  q.discriminatedUnion = En;
  const vn = ft.create;
  q.intersection = vn;
  const di = Pe.create;
  q.tuple = di;
  const Rn = J.create;
  q.record = Rn;
  const _n = zt.create;
  q.map = _n;
  const pi = ht.create;
  q.set = pi;
  const wn = et.create;
  q.function = wn;
  const xn = Pt.create;
  q.lazy = xn;
  const fi = Bt.create;
  q.literal = fi;
  const Y = tt.create;
  q.enum = Y;
  const m = Ut.create;
  q.nativeEnum = m;
  const R = rt.create;
  q.promise = R;
  const V = Ie.create;
  q.effect = V, q.transformer = V;
  const ne = ze.create;
  q.optional = ne;
  const Te = Ge.create;
  q.nullable = Te;
  const sd = Ie.createWithPreprocess;
  q.preprocess = sd;
  const ad = Ot.create;
  q.pipeline = ad;
  const za = () => si().optional();
  q.ostring = za;
  const ud = () => Dr().optional();
  q.onumber = ud;
  const cd = () => Pr().optional();
  return q.oboolean = cd, q.coerce = { string: (_) => be.create({ ..._, coerce: true }), number: (_) => Be.create({ ..._, coerce: true }), boolean: (_) => ke.create({ ..._, coerce: true }), bigint: (_) => Ue.create({ ..._, coerce: true }), date: (_) => Me.create({ ..._, coerce: true }) }, q.NEVER = e.INVALID, q;
}
var ff;
function hf() {
  return ff || (ff = 1, function(r) {
    var t = mi && mi.__createBinding || (Object.create ? function(n, o, s, e) {
      e === void 0 && (e = s);
      var u = Object.getOwnPropertyDescriptor(o, s);
      (!u || ("get" in u ? !o.__esModule : u.writable || u.configurable)) && (u = { enumerable: true, get: function() {
        return o[s];
      } }), Object.defineProperty(n, e, u);
    } : function(n, o, s, e) {
      e === void 0 && (e = s), n[e] = o[s];
    }), i = mi && mi.__exportStar || function(n, o) {
      for (var s in n) s !== "default" && !Object.prototype.hasOwnProperty.call(o, s) && t(o, n, s);
    };
    Object.defineProperty(r, "__esModule", { value: true }), i(gp(), r), i(e_(), r), i(ix(), r), i($l(), r), i(ox(), r), i(bp(), r);
  }(mi)), mi;
}
var yf;
function oe() {
  return yf || (yf = 1, function(r) {
    var t = Ft && Ft.__createBinding || (Object.create ? function(e, u, a, c) {
      c === void 0 && (c = a);
      var l = Object.getOwnPropertyDescriptor(u, a);
      (!l || ("get" in l ? !u.__esModule : l.writable || l.configurable)) && (l = { enumerable: true, get: function() {
        return u[a];
      } }), Object.defineProperty(e, c, l);
    } : function(e, u, a, c) {
      c === void 0 && (c = a), e[c] = u[a];
    }), i = Ft && Ft.__setModuleDefault || (Object.create ? function(e, u) {
      Object.defineProperty(e, "default", { enumerable: true, value: u });
    } : function(e, u) {
      e.default = u;
    }), n = Ft && Ft.__importStar || function(e) {
      if (e && e.__esModule) return e;
      var u = {};
      if (e != null) for (var a in e) a !== "default" && Object.prototype.hasOwnProperty.call(e, a) && t(u, e, a);
      return i(u, e), u;
    }, o = Ft && Ft.__exportStar || function(e, u) {
      for (var a in e) a !== "default" && !Object.prototype.hasOwnProperty.call(u, a) && t(u, e, a);
    };
    Object.defineProperty(r, "__esModule", { value: true }), r.z = void 0;
    const s = n(hf());
    r.z = s, o(hf(), r), r.default = s;
  }(Ft)), Ft;
}
var bi = {}, hd = {}, mf;
function t_() {
  return mf || (mf = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.DisallowedDomainError = r.UnsupportedDomainError = r.ReservedHandleError = r.InvalidHandleError = r.isValidTld = r.isValidHandle = r.normalizeAndEnsureValidHandle = r.normalizeHandle = r.ensureValidHandleRegex = r.ensureValidHandle = r.DISALLOWED_TLDS = r.INVALID_HANDLE = void 0, r.INVALID_HANDLE = "handle.invalid", r.DISALLOWED_TLDS = [".local", ".arpa", ".invalid", ".localhost", ".internal", ".example", ".alt", ".onion"];
    const t = (d) => {
      if (!/^[a-zA-Z0-9.-]*$/.test(d)) throw new u("Disallowed characters in handle (ASCII letters, digits, dashes, periods only)");
      if (d.length > 253) throw new u("Handle is too long (253 chars max)");
      const f = d.split(".");
      if (f.length < 2) throw new u("Handle domain needs at least two parts");
      for (let h = 0; h < f.length; h++) {
        const p = f[h];
        if (p.length < 1) throw new u("Handle parts can not be empty");
        if (p.length > 63) throw new u("Handle part too long (max 63 chars)");
        if (p.endsWith("-") || p.startsWith("-")) throw new u("Handle parts can not start or end with hyphens");
        if (h + 1 === f.length && !/^[a-zA-Z]/.test(p)) throw new u("Handle final component (TLD) must start with ASCII letter");
      }
    };
    r.ensureValidHandle = t;
    const i = (d) => {
      if (!/^([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$/.test(d)) throw new u("Handle didn't validate via regex");
      if (d.length > 253) throw new u("Handle is too long (253 chars max)");
    };
    r.ensureValidHandleRegex = i;
    const n = (d) => d.toLowerCase();
    r.normalizeHandle = n;
    const o = (d) => {
      const f = (0, r.normalizeHandle)(d);
      return (0, r.ensureValidHandle)(f), f;
    };
    r.normalizeAndEnsureValidHandle = o;
    const s = (d) => {
      try {
        (0, r.ensureValidHandle)(d);
      } catch (f) {
        if (f instanceof u) return false;
        throw f;
      }
      return true;
    };
    r.isValidHandle = s;
    const e = (d) => !r.DISALLOWED_TLDS.some((f) => d.endsWith(f));
    r.isValidTld = e;
    class u extends Error {
    }
    r.InvalidHandleError = u;
    class a extends Error {
    }
    r.ReservedHandleError = a;
    class c extends Error {
    }
    r.UnsupportedDomainError = c;
    class l extends Error {
    }
    r.DisallowedDomainError = l;
  }(hd)), hd;
}
var hr = {}, bf;
function r_() {
  if (bf) return hr;
  bf = 1, Object.defineProperty(hr, "__esModule", { value: true }), hr.InvalidDidError = hr.ensureValidDidRegex = hr.ensureValidDid = void 0;
  const r = (n) => {
    if (!n.startsWith("did:")) throw new i('DID requires "did:" prefix');
    if (!/^[a-zA-Z0-9._:%-]*$/.test(n)) throw new i("Disallowed characters in DID (ASCII letters, digits, and a couple other characters only)");
    const { length: o, 1: s } = n.split(":");
    if (o < 3) throw new i("DID requires prefix, method, and method-specific content");
    if (!/^[a-z]+$/.test(s)) throw new i("DID method must be lower-case letters");
    if (n.endsWith(":") || n.endsWith("%")) throw new i('DID can not end with ":" or "%"');
    if (n.length > 2 * 1024) throw new i("DID is too long (2048 chars max)");
  };
  hr.ensureValidDid = r;
  const t = (n) => {
    if (!/^did:[a-z]+:[a-zA-Z0-9._:%-]*[a-zA-Z0-9._-]$/.test(n)) throw new i("DID didn't validate via regex");
    if (n.length > 2 * 1024) throw new i("DID is too long (2048 chars max)");
  };
  hr.ensureValidDidRegex = t;
  class i extends Error {
  }
  return hr.InvalidDidError = i, hr;
}
var yd = {}, gf;
function i_() {
  return gf || (gf = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.InvalidNsidError = r.ensureValidNsidRegex = r.ensureValidNsid = r.NSID = void 0;
    class t {
      static parse(e) {
        return new t(e);
      }
      static create(e, u) {
        const a = [...e.split(".").reverse(), u].join(".");
        return new t(a);
      }
      static isValid(e) {
        try {
          return t.parse(e), true;
        } catch {
          return false;
        }
      }
      constructor(e) {
        Object.defineProperty(this, "segments", { enumerable: true, configurable: true, writable: true, value: [] }), (0, r.ensureValidNsid)(e), this.segments = e.split(".");
      }
      get authority() {
        return this.segments.slice(0, this.segments.length - 1).reverse().join(".");
      }
      get name() {
        return this.segments.at(this.segments.length - 1);
      }
      toString() {
        return this.segments.join(".");
      }
    }
    r.NSID = t;
    const i = (s) => {
      const e = s;
      if (!/^[a-zA-Z0-9.-]*$/.test(e)) throw new o("Disallowed characters in NSID (ASCII letters, digits, dashes, periods only)");
      if (e.length > 317) throw new o("NSID is too long (317 chars max)");
      const u = e.split(".");
      if (u.length < 3) throw new o("NSID needs at least three parts");
      for (let a = 0; a < u.length; a++) {
        const c = u[a];
        if (c.length < 1) throw new o("NSID parts can not be empty");
        if (c.length > 63) throw new o("NSID part too long (max 63 chars)");
        if (c.endsWith("-") || c.startsWith("-")) throw new o("NSID parts can not start or end with hyphen");
        if (/^[0-9]/.test(c) && a === 0) throw new o("NSID first part may not start with a digit");
        if (!/^[a-zA-Z]+$/.test(c) && a + 1 === u.length) throw new o("NSID name part must be only letters");
      }
    };
    r.ensureValidNsid = i;
    const n = (s) => {
      if (!/^[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(\.[a-zA-Z]([a-zA-Z]{0,61}[a-zA-Z])?)$/.test(s)) throw new o("NSID didn't validate via regex");
      if (s.length > 317) throw new o("NSID is too long (317 chars max)");
    };
    r.ensureValidNsidRegex = n;
    class o extends Error {
    }
    r.InvalidNsidError = o;
  }(yd)), yd;
}
var gi = {}, Ei = {}, Ef;
function sx() {
  if (Ef) return Ei;
  Ef = 1, Object.defineProperty(Ei, "__esModule", { value: true }), Ei.ensureValidAtUriRegex = Ei.ensureValidAtUri = void 0;
  const r = r_(), t = t_(), i = i_(), n = (s) => {
    const e = s.split("#");
    if (e.length > 2) throw new Error('ATURI can have at most one "#", separating fragment out');
    const u = e[1] || null;
    if (s = e[0], !/^[a-zA-Z0-9._~:@!$&')(*+,;=%/-]*$/.test(s)) throw new Error("Disallowed characters in ATURI (ASCII)");
    const a = s.split("/");
    if (a.length >= 3 && (a[0] !== "at:" || a[1].length !== 0)) throw new Error('ATURI must start with "at://"');
    if (a.length < 3) throw new Error("ATURI requires at least method and authority sections");
    try {
      a[2].startsWith("did:") ? (0, r.ensureValidDid)(a[2]) : (0, t.ensureValidHandle)(a[2]);
    } catch {
      throw new Error("ATURI authority must be a valid handle or DID");
    }
    if (a.length >= 4) {
      if (a[3].length === 0) throw new Error("ATURI can not have a slash after authority without a path segment");
      try {
        (0, i.ensureValidNsid)(a[3]);
      } catch {
        throw new Error("ATURI requires first path segment (if supplied) to be valid NSID");
      }
    }
    if (a.length >= 5 && a[4].length === 0) throw new Error("ATURI can not have a slash after collection, unless record key is provided");
    if (a.length >= 6) throw new Error("ATURI path can have at most two parts, and no trailing slash");
    if (e.length >= 2 && u == null) throw new Error("ATURI fragment must be non-empty and start with slash");
    if (u != null) {
      if (u.length === 0 || u[0] !== "/") throw new Error("ATURI fragment must be non-empty and start with slash");
      if (!/^\/[a-zA-Z0-9._~:@!$&')(*+,;=%[\]/-]*$/.test(u)) throw new Error("Disallowed characters in ATURI fragment (ASCII)");
    }
    if (s.length > 8 * 1024) throw new Error("ATURI is far too long");
  };
  Ei.ensureValidAtUri = n;
  const o = (s) => {
    const e = /^at:\/\/(?<authority>[a-zA-Z0-9._:%-]+)(\/(?<collection>[a-zA-Z0-9-.]+)(\/(?<rkey>[a-zA-Z0-9._~:@!$&%')(*+,;=-]+))?)?(#(?<fragment>\/[a-zA-Z0-9._~:@!$&%')(*+,;=\-[\]/\\]*))?$/, u = s.match(e);
    if (!u || !u.groups) throw new Error("ATURI didn't validate via regex");
    const a = u.groups;
    try {
      (0, t.ensureValidHandleRegex)(a.authority);
    } catch {
      try {
        (0, r.ensureValidDidRegex)(a.authority);
      } catch {
        throw new Error("ATURI authority must be a valid handle or DID");
      }
    }
    if (a.collection) try {
      (0, i.ensureValidNsidRegex)(a.collection);
    } catch {
      throw new Error("ATURI collection path segment must be a valid NSID");
    }
    if (s.length > 8 * 1024) throw new Error("ATURI is far too long");
  };
  return Ei.ensureValidAtUriRegex = o, Ei;
}
var vf;
function ax() {
  return vf || (vf = 1, function(r) {
    var t = gi && gi.__createBinding || (Object.create ? function(u, a, c, l) {
      l === void 0 && (l = c);
      var d = Object.getOwnPropertyDescriptor(a, c);
      (!d || ("get" in d ? !a.__esModule : d.writable || d.configurable)) && (d = { enumerable: true, get: function() {
        return a[c];
      } }), Object.defineProperty(u, l, d);
    } : function(u, a, c, l) {
      l === void 0 && (l = c), u[l] = a[c];
    }), i = gi && gi.__exportStar || function(u, a) {
      for (var c in u) c !== "default" && !Object.prototype.hasOwnProperty.call(a, c) && t(a, u, c);
    };
    Object.defineProperty(r, "__esModule", { value: true }), r.AtUri = r.ATP_URI_REGEX = void 0, i(sx(), r), r.ATP_URI_REGEX = /^(at:\/\/)?((?:did:[a-z0-9:%-]+)|(?:[a-z0-9][a-z0-9.:-]*))(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;
    const n = /^(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;
    class o {
      constructor(a, c) {
        Object.defineProperty(this, "hash", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "host", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "pathname", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "searchParams", { enumerable: true, configurable: true, writable: true, value: void 0 });
        let l;
        if (c) {
          if (l = s(c), !l) throw new Error(`Invalid at uri: ${c}`);
          const d = e(a);
          if (!d) throw new Error(`Invalid path: ${a}`);
          Object.assign(l, d);
        } else if (l = s(a), !l) throw new Error(`Invalid at uri: ${a}`);
        this.hash = l.hash, this.host = l.host, this.pathname = l.pathname, this.searchParams = l.searchParams;
      }
      static make(a, c, l) {
        let d = a;
        return c && (d += "/" + c), l && (d += "/" + l), new o(d);
      }
      get protocol() {
        return "at:";
      }
      get origin() {
        return `at://${this.host}`;
      }
      get hostname() {
        return this.host;
      }
      set hostname(a) {
        this.host = a;
      }
      get search() {
        return this.searchParams.toString();
      }
      set search(a) {
        this.searchParams = new URLSearchParams(a);
      }
      get collection() {
        return this.pathname.split("/").filter(Boolean)[0] || "";
      }
      set collection(a) {
        const c = this.pathname.split("/").filter(Boolean);
        c[0] = a, this.pathname = c.join("/");
      }
      get rkey() {
        return this.pathname.split("/").filter(Boolean)[1] || "";
      }
      set rkey(a) {
        const c = this.pathname.split("/").filter(Boolean);
        c[0] || (c[0] = "undefined"), c[1] = a, this.pathname = c.join("/");
      }
      get href() {
        return this.toString();
      }
      toString() {
        let a = this.pathname || "/";
        a.startsWith("/") || (a = `/${a}`);
        let c = this.searchParams.toString();
        c && !c.startsWith("?") && (c = `?${c}`);
        let l = this.hash;
        return l && !l.startsWith("#") && (l = `#${l}`), `at://${this.host}${a}${c}${l}`;
      }
    }
    r.AtUri = o;
    function s(u) {
      const a = r.ATP_URI_REGEX.exec(u);
      if (a) return { hash: a[5] || "", host: a[2] || "", pathname: a[3] || "", searchParams: new URLSearchParams(a[4] || "") };
    }
    function e(u) {
      const a = n.exec(u);
      if (a) return { hash: a[3] || "", pathname: a[1] || "", searchParams: new URLSearchParams(a[2] || "") };
    }
  }(gi)), gi;
}
var yr = {}, Rf;
function ux() {
  if (Rf) return yr;
  Rf = 1, Object.defineProperty(yr, "__esModule", { value: true }), yr.InvalidTidError = yr.isValidTid = yr.ensureValidTid = void 0;
  const r = 13, t = /^[234567abcdefghij][234567abcdefghijklmnopqrstuvwxyz]{12}$/, i = (s) => {
    if (s.length !== r) throw new o(`TID must be ${r} characters`);
    if (!t.test(s)) throw new o("TID syntax not valid (regex)");
  };
  yr.ensureValidTid = i;
  const n = (s) => s.length === r && t.test(s);
  yr.isValidTid = n;
  class o extends Error {
  }
  return yr.InvalidTidError = o, yr;
}
var md = {}, _f;
function cx() {
  return _f || (_f = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.InvalidRecordKeyError = r.isValidRecordKey = r.ensureValidRecordKey = void 0;
    const t = (o) => {
      if (o.length > 512 || o.length < 1) throw new n("record key must be 1 to 512 characters");
      if (!/^[a-zA-Z0-9_~.:-]{1,512}$/.test(o)) throw new n("record key syntax not valid (regex)");
      if (o === "." || o === "..") throw new n('record key can not be "." or ".."');
    };
    r.ensureValidRecordKey = t;
    const i = (o) => {
      try {
        (0, r.ensureValidRecordKey)(o);
      } catch (s) {
        if (s instanceof n) return false;
        throw s;
      }
      return true;
    };
    r.isValidRecordKey = i;
    class n extends Error {
    }
    r.InvalidRecordKeyError = n;
  }(md)), md;
}
var bd = {}, wf;
function lx() {
  return wf || (wf = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.InvalidDatetimeError = r.normalizeDatetimeAlways = r.normalizeDatetime = r.isValidDatetime = r.ensureValidDatetime = void 0;
    const t = (e) => {
      const u = new Date(e);
      if (isNaN(u.getTime())) throw new s("datetime did not parse as ISO 8601");
      if (u.toISOString().startsWith("-")) throw new s("datetime normalized to a negative time");
      if (!/^[0-9]{4}-[01][0-9]-[0-3][0-9]T[0-2][0-9]:[0-6][0-9]:[0-6][0-9](.[0-9]{1,20})?(Z|([+-][0-2][0-9]:[0-5][0-9]))$/.test(e)) throw new s("datetime didn't validate via regex");
      if (e.length > 64) throw new s("datetime is too long (64 chars max)");
      if (e.endsWith("-00:00")) throw new s('datetime can not use "-00:00" for UTC timezone');
      if (e.startsWith("000")) throw new s("datetime so close to year zero not allowed");
    };
    r.ensureValidDatetime = t;
    const i = (e) => {
      try {
        (0, r.ensureValidDatetime)(e);
      } catch (u) {
        if (u instanceof s) return false;
        throw u;
      }
      return true;
    };
    r.isValidDatetime = i;
    const n = (e) => {
      if ((0, r.isValidDatetime)(e)) {
        const c = new Date(e).toISOString();
        if ((0, r.isValidDatetime)(c)) return c;
      }
      if (!/.*(([+-]\d\d:?\d\d)|[a-zA-Z])$/.test(e)) {
        const c = /* @__PURE__ */ new Date(e + "Z");
        if (!isNaN(c.getTime())) {
          const l = c.toISOString();
          if ((0, r.isValidDatetime)(l)) return l;
        }
      }
      const u = new Date(e);
      if (isNaN(u.getTime())) throw new s("datetime did not parse as any timestamp format");
      const a = u.toISOString();
      if ((0, r.isValidDatetime)(a)) return a;
      throw new s("datetime normalized to invalid timestamp string");
    };
    r.normalizeDatetime = n;
    const o = (e) => {
      try {
        return (0, r.normalizeDatetime)(e);
      } catch (u) {
        if (u instanceof s) return (/* @__PURE__ */ new Date(0)).toISOString();
        throw u;
      }
    };
    r.normalizeDatetimeAlways = o;
    class s extends Error {
    }
    r.InvalidDatetimeError = s;
  }(bd)), bd;
}
var xf;
function nn() {
  return xf || (xf = 1, function(r) {
    var t = bi && bi.__createBinding || (Object.create ? function(n, o, s, e) {
      e === void 0 && (e = s);
      var u = Object.getOwnPropertyDescriptor(o, s);
      (!u || ("get" in u ? !o.__esModule : u.writable || u.configurable)) && (u = { enumerable: true, get: function() {
        return o[s];
      } }), Object.defineProperty(n, e, u);
    } : function(n, o, s, e) {
      e === void 0 && (e = s), n[e] = o[s];
    }), i = bi && bi.__exportStar || function(n, o) {
      for (var s in n) s !== "default" && !Object.prototype.hasOwnProperty.call(o, s) && t(o, n, s);
    };
    Object.defineProperty(r, "__esModule", { value: true }), i(t_(), r), i(r_(), r), i(i_(), r), i(ax(), r), i(ux(), r), i(cx(), r), i(lx(), r);
  }(bi)), bi;
}
var Lo = {}, Af;
function Ep() {
  if (Af) return Lo;
  Af = 1, Object.defineProperty(Lo, "__esModule", { value: true }), Lo.toLexUri = t, Lo.requiredPropertiesRefinement = i;
  const r = oe();
  function t(n, o) {
    if (n.split("#").length > 2) throw new Error("Uri can only have one hash segment");
    if (n.startsWith("lex:")) return n;
    if (n.startsWith("#")) {
      if (!o) throw new Error(`Unable to resolve uri without anchor: ${n}`);
      return `${o}${n}`;
    }
    return `lex:${n}`;
  }
  function i(n, o) {
    if (n.required !== void 0) {
      if (!Array.isArray(n.required)) {
        o.addIssue({ code: r.z.ZodIssueCode.invalid_type, received: typeof n.required, expected: "array" });
        return;
      }
      if (n.properties === void 0) {
        n.required.length > 0 && o.addIssue({ code: r.z.ZodIssueCode.custom, message: "Required fields defined but no properties defined" });
        return;
      }
      for (const s of n.required) n.properties[s] === void 0 && o.addIssue({ code: r.z.ZodIssueCode.custom, message: `Required field "${s}" not defined` });
    }
  }
  return Lo;
}
var Sf;
function on() {
  return Sf || (Sf = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.LexiconDefNotFoundError = r.InvalidLexiconError = r.ValidationError = r.lexiconDoc = r.lexUserType = r.lexRecord = r.lexXrpcSubscription = r.lexXrpcProcedure = r.lexXrpcQuery = r.lexXrpcError = r.lexXrpcSubscriptionMessage = r.lexXrpcBody = r.lexXrpcParameters = r.lexObject = r.lexToken = r.lexPrimitiveArray = r.lexArray = r.lexBlob = r.lexRefVariant = r.lexRefUnion = r.lexRef = r.lexIpldType = r.lexCidLink = r.lexBytes = r.lexPrimitive = r.lexUnknown = r.lexString = r.lexStringFormat = r.lexInteger = r.lexBoolean = void 0, r.isValidLexiconDoc = o, r.isObj = s, r.isDiscriminatedObject = e, r.parseLexiconDoc = u;
    const t = oe(), i = nn(), n = Ep();
    r.lexBoolean = t.z.object({ type: t.z.literal("boolean"), description: t.z.string().optional(), default: t.z.boolean().optional(), const: t.z.boolean().optional() }).strict(), r.lexInteger = t.z.object({ type: t.z.literal("integer"), description: t.z.string().optional(), default: t.z.number().int().optional(), minimum: t.z.number().int().optional(), maximum: t.z.number().int().optional(), enum: t.z.number().int().array().optional(), const: t.z.number().int().optional() }).strict(), r.lexStringFormat = t.z.enum(["datetime", "uri", "at-uri", "did", "handle", "at-identifier", "nsid", "cid", "language", "tid", "record-key"]), r.lexString = t.z.object({ type: t.z.literal("string"), format: r.lexStringFormat.optional(), description: t.z.string().optional(), default: t.z.string().optional(), minLength: t.z.number().int().optional(), maxLength: t.z.number().int().optional(), minGraphemes: t.z.number().int().optional(), maxGraphemes: t.z.number().int().optional(), enum: t.z.string().array().optional(), const: t.z.string().optional(), knownValues: t.z.string().array().optional() }).strict(), r.lexUnknown = t.z.object({ type: t.z.literal("unknown"), description: t.z.string().optional() }).strict(), r.lexPrimitive = t.z.discriminatedUnion("type", [r.lexBoolean, r.lexInteger, r.lexString, r.lexUnknown]), r.lexBytes = t.z.object({ type: t.z.literal("bytes"), description: t.z.string().optional(), maxLength: t.z.number().optional(), minLength: t.z.number().optional() }).strict(), r.lexCidLink = t.z.object({ type: t.z.literal("cid-link"), description: t.z.string().optional() }).strict(), r.lexIpldType = t.z.discriminatedUnion("type", [r.lexBytes, r.lexCidLink]), r.lexRef = t.z.object({ type: t.z.literal("ref"), description: t.z.string().optional(), ref: t.z.string() }).strict(), r.lexRefUnion = t.z.object({ type: t.z.literal("union"), description: t.z.string().optional(), refs: t.z.string().array(), closed: t.z.boolean().optional() }).strict(), r.lexRefVariant = t.z.discriminatedUnion("type", [r.lexRef, r.lexRefUnion]), r.lexBlob = t.z.object({ type: t.z.literal("blob"), description: t.z.string().optional(), accept: t.z.string().array().optional(), maxSize: t.z.number().optional() }).strict(), r.lexArray = t.z.object({ type: t.z.literal("array"), description: t.z.string().optional(), items: t.z.discriminatedUnion("type", [r.lexBoolean, r.lexInteger, r.lexString, r.lexUnknown, r.lexBytes, r.lexCidLink, r.lexRef, r.lexRefUnion, r.lexBlob]), minLength: t.z.number().int().optional(), maxLength: t.z.number().int().optional() }).strict(), r.lexPrimitiveArray = r.lexArray.merge(t.z.object({ items: r.lexPrimitive }).strict()), r.lexToken = t.z.object({ type: t.z.literal("token"), description: t.z.string().optional() }).strict(), r.lexObject = t.z.object({ type: t.z.literal("object"), description: t.z.string().optional(), required: t.z.string().array().optional(), nullable: t.z.string().array().optional(), properties: t.z.record(t.z.discriminatedUnion("type", [r.lexArray, r.lexBoolean, r.lexInteger, r.lexString, r.lexUnknown, r.lexBytes, r.lexCidLink, r.lexRef, r.lexRefUnion, r.lexBlob])) }).strict().superRefine(n.requiredPropertiesRefinement), r.lexXrpcParameters = t.z.object({ type: t.z.literal("params"), description: t.z.string().optional(), required: t.z.string().array().optional(), properties: t.z.record(t.z.discriminatedUnion("type", [r.lexPrimitiveArray, r.lexBoolean, r.lexInteger, r.lexString, r.lexUnknown])) }).strict().superRefine(n.requiredPropertiesRefinement), r.lexXrpcBody = t.z.object({ description: t.z.string().optional(), encoding: t.z.string(), schema: t.z.union([r.lexRefVariant, r.lexObject]).optional() }).strict(), r.lexXrpcSubscriptionMessage = t.z.object({ description: t.z.string().optional(), schema: t.z.union([r.lexRefVariant, r.lexObject]).optional() }).strict(), r.lexXrpcError = t.z.object({ name: t.z.string(), description: t.z.string().optional() }).strict(), r.lexXrpcQuery = t.z.object({ type: t.z.literal("query"), description: t.z.string().optional(), parameters: r.lexXrpcParameters.optional(), output: r.lexXrpcBody.optional(), errors: r.lexXrpcError.array().optional() }).strict(), r.lexXrpcProcedure = t.z.object({ type: t.z.literal("procedure"), description: t.z.string().optional(), parameters: r.lexXrpcParameters.optional(), input: r.lexXrpcBody.optional(), output: r.lexXrpcBody.optional(), errors: r.lexXrpcError.array().optional() }).strict(), r.lexXrpcSubscription = t.z.object({ type: t.z.literal("subscription"), description: t.z.string().optional(), parameters: r.lexXrpcParameters.optional(), message: r.lexXrpcSubscriptionMessage.optional(), errors: r.lexXrpcError.array().optional() }).strict(), r.lexRecord = t.z.object({ type: t.z.literal("record"), description: t.z.string().optional(), key: t.z.string().optional(), record: r.lexObject }).strict(), r.lexUserType = t.z.custom((d) => {
      if (!(!d || typeof d != "object") && d.type !== void 0) switch (d.type) {
        case "record":
          return r.lexRecord.parse(d);
        case "query":
          return r.lexXrpcQuery.parse(d);
        case "procedure":
          return r.lexXrpcProcedure.parse(d);
        case "subscription":
          return r.lexXrpcSubscription.parse(d);
        case "blob":
          return r.lexBlob.parse(d);
        case "array":
          return r.lexArray.parse(d);
        case "token":
          return r.lexToken.parse(d);
        case "object":
          return r.lexObject.parse(d);
        case "boolean":
          return r.lexBoolean.parse(d);
        case "integer":
          return r.lexInteger.parse(d);
        case "string":
          return r.lexString.parse(d);
        case "bytes":
          return r.lexBytes.parse(d);
        case "cid-link":
          return r.lexCidLink.parse(d);
        case "unknown":
          return r.lexUnknown.parse(d);
      }
    }, (d) => !d || typeof d != "object" ? { message: "Must be an object", fatal: true } : d.type === void 0 ? { message: "Must have a type", fatal: true } : typeof d.type != "string" ? { message: "Type property must be a string", fatal: true } : { message: `Invalid type: ${d.type} must be one of: record, query, procedure, subscription, blob, array, token, object, boolean, integer, string, bytes, cid-link, unknown`, fatal: true }), r.lexiconDoc = t.z.object({ lexicon: t.z.literal(1), id: t.z.string().refine((d) => i.NSID.isValid(d), { message: "Must be a valid NSID" }), revision: t.z.number().optional(), description: t.z.string().optional(), defs: t.z.record(r.lexUserType) }).strict().superRefine((d, f) => {
      for (const h in d.defs) {
        const p = d.defs[h];
        h !== "main" && (p.type === "record" || p.type === "procedure" || p.type === "query" || p.type === "subscription") && f.addIssue({ code: t.z.ZodIssueCode.custom, message: "Records, procedures, queries, and subscriptions must be the main definition." });
      }
    });
    function o(d) {
      return r.lexiconDoc.safeParse(d).success;
    }
    function s(d) {
      return d != null && typeof d == "object";
    }
    function e(d) {
      return s(d) && "$type" in d && typeof d.$type == "string";
    }
    function u(d) {
      return r.lexiconDoc.parse(d), d;
    }
    class a extends Error {
    }
    r.ValidationError = a;
    class c extends Error {
    }
    r.InvalidLexiconError = c;
    class l extends Error {
    }
    r.LexiconDefNotFoundError = l;
  }(dd)), dd;
}
var ko = {}, Br = {}, vi = {}, $a = {}, gd = {}, dx = n_, Cf = 128, px = -128, fx = Math.pow(2, 31);
function n_(r, t, i) {
  t = t || [], i = i || 0;
  for (var n = i; r >= fx; ) t[i++] = r & 255 | Cf, r /= 128;
  for (; r & px; ) t[i++] = r & 255 | Cf, r >>>= 7;
  return t[i] = r | 0, n_.bytes = i - n + 1, t;
}
var hx = sp, yx = 128, Tf = 127;
function sp(r, n) {
  var i = 0, n = n || 0, o = 0, s = n, e, u = r.length;
  do {
    if (s >= u) throw sp.bytes = 0, new RangeError("Could not decode varint");
    e = r[s++], i += o < 28 ? (e & Tf) << o : (e & Tf) * Math.pow(2, o), o += 7;
  } while (e >= yx);
  return sp.bytes = s - n, i;
}
var mx = Math.pow(2, 7), bx = Math.pow(2, 14), gx = Math.pow(2, 21), Ex = Math.pow(2, 28), vx = Math.pow(2, 35), Rx = Math.pow(2, 42), _x = Math.pow(2, 49), wx = Math.pow(2, 56), xx = Math.pow(2, 63), Ax = function(r) {
  return r < mx ? 1 : r < bx ? 2 : r < gx ? 3 : r < Ex ? 4 : r < vx ? 5 : r < Rx ? 6 : r < _x ? 7 : r < wx ? 8 : r < xx ? 9 : 10;
}, Sx = { encode: dx, decode: hx, encodingLength: Ax }, Il = Sx;
const ap = (r, t = 0) => [Il.decode(r, t), Il.decode.bytes], Kl = (r, t, i = 0) => (Il.encode(r, t, i), t), Ol = (r) => Il.encodingLength(r), Cx = (r, t) => {
  if (r === t) return true;
  if (r.byteLength !== t.byteLength) return false;
  for (let i = 0; i < r.byteLength; i++) if (r[i] !== t[i]) return false;
  return true;
}, vp = (r) => {
  if (r instanceof Uint8Array && r.constructor.name === "Uint8Array") return r;
  if (r instanceof ArrayBuffer) return new Uint8Array(r);
  if (ArrayBuffer.isView(r)) return new Uint8Array(r.buffer, r.byteOffset, r.byteLength);
  throw new Error("Unknown type, must be binary type");
}, Tx = (r) => new TextEncoder().encode(r), Lx = (r) => new TextDecoder().decode(r), kx = (r, t) => {
  const i = t.byteLength, n = Ol(r), o = n + Ol(i), s = new Uint8Array(o + i);
  return Kl(r, s, 0), Kl(i, s, n), s.set(t, o), new Rp(r, i, t, s);
}, Dx = (r) => {
  const t = vp(r), [i, n] = ap(t), [o, s] = ap(t.subarray(n)), e = t.subarray(n + s);
  if (e.byteLength !== o) throw new Error("Incorrect length");
  return new Rp(i, o, e, t);
}, Px = (r, t) => r === t ? true : r.code === t.code && r.size === t.size && Cx(r.bytes, t.bytes);
class Rp {
  constructor(t, i, n, o) {
    this.code = t, this.size = i, this.digest = n, this.bytes = o;
  }
}
function Bx(r, t) {
  if (r.length >= 255) throw new TypeError("Alphabet too long");
  for (var i = new Uint8Array(256), n = 0; n < i.length; n++) i[n] = 255;
  for (var o = 0; o < r.length; o++) {
    var s = r.charAt(o), e = s.charCodeAt(0);
    if (i[e] !== 255) throw new TypeError(s + " is ambiguous");
    i[e] = o;
  }
  var u = r.length, a = r.charAt(0), c = Math.log(u) / Math.log(256), l = Math.log(256) / Math.log(u);
  function d(p) {
    if (p instanceof Uint8Array || (ArrayBuffer.isView(p) ? p = new Uint8Array(p.buffer, p.byteOffset, p.byteLength) : Array.isArray(p) && (p = Uint8Array.from(p))), !(p instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (p.length === 0) return "";
    for (var b = 0, E = 0, g = 0, x = p.length; g !== x && p[g] === 0; ) g++, b++;
    for (var T = (x - g) * l + 1 >>> 0, A = new Uint8Array(T); g !== x; ) {
      for (var K = p[g], j = 0, O = T - 1; (K !== 0 || j < E) && O !== -1; O--, j++) K += 256 * A[O] >>> 0, A[O] = K % u >>> 0, K = K / u >>> 0;
      if (K !== 0) throw new Error("Non-zero carry");
      E = j, g++;
    }
    for (var z = T - E; z !== T && A[z] === 0; ) z++;
    for (var H = a.repeat(b); z < T; ++z) H += r.charAt(A[z]);
    return H;
  }
  function f(p) {
    if (typeof p != "string") throw new TypeError("Expected String");
    if (p.length === 0) return new Uint8Array();
    var b = 0;
    if (p[b] !== " ") {
      for (var E = 0, g = 0; p[b] === a; ) E++, b++;
      for (var x = (p.length - b) * c + 1 >>> 0, T = new Uint8Array(x); p[b]; ) {
        var A = i[p.charCodeAt(b)];
        if (A === 255) return;
        for (var K = 0, j = x - 1; (A !== 0 || K < g) && j !== -1; j--, K++) A += u * T[j] >>> 0, T[j] = A % 256 >>> 0, A = A / 256 >>> 0;
        if (A !== 0) throw new Error("Non-zero carry");
        g = K, b++;
      }
      if (p[b] !== " ") {
        for (var O = x - g; O !== x && T[O] === 0; ) O++;
        for (var z = new Uint8Array(E + (x - O)), H = E; O !== x; ) z[H++] = T[O++];
        return z;
      }
    }
  }
  function h(p) {
    var b = f(p);
    if (b) return b;
    throw new Error(`Non-${t} character`);
  }
  return { encode: d, decodeUnsafe: f, decode: h };
}
var Ux = Bx, Ix = Ux;
class Kx {
  constructor(t, i, n) {
    this.name = t, this.prefix = i, this.baseEncode = n;
  }
  encode(t) {
    if (t instanceof Uint8Array) return `${this.prefix}${this.baseEncode(t)}`;
    throw Error("Unknown type, must be binary type");
  }
}
class Ox {
  constructor(t, i, n) {
    if (this.name = t, this.prefix = i, i.codePointAt(0) === void 0) throw new Error("Invalid prefix character");
    this.prefixCodePoint = i.codePointAt(0), this.baseDecode = n;
  }
  decode(t) {
    if (typeof t == "string") {
      if (t.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(t)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(t.slice(this.prefix.length));
    } else throw Error("Can only multibase decode strings");
  }
  or(t) {
    return o_(this, t);
  }
}
class jx {
  constructor(t) {
    this.decoders = t;
  }
  or(t) {
    return o_(this, t);
  }
  decode(t) {
    const i = t[0], n = this.decoders[i];
    if (n) return n.decode(t);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(t)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
}
const o_ = (r, t) => new jx({ ...r.decoders || { [r.prefix]: r }, ...t.decoders || { [t.prefix]: t } });
class qx {
  constructor(t, i, n, o) {
    this.name = t, this.prefix = i, this.baseEncode = n, this.baseDecode = o, this.encoder = new Kx(t, i, n), this.decoder = new Ox(t, i, o);
  }
  encode(t) {
    return this.encoder.encode(t);
  }
  decode(t) {
    return this.decoder.decode(t);
  }
}
const Hl = ({ name: r, prefix: t, encode: i, decode: n }) => new qx(r, t, i, n), Pa = ({ prefix: r, name: t, alphabet: i }) => {
  const { encode: n, decode: o } = Ix(i, t);
  return Hl({ prefix: r, name: t, encode: n, decode: (s) => vp(o(s)) });
}, Mx = (r, t, i, n) => {
  const o = {};
  for (let l = 0; l < t.length; ++l) o[t[l]] = l;
  let s = r.length;
  for (; r[s - 1] === "="; ) --s;
  const e = new Uint8Array(s * i / 8 | 0);
  let u = 0, a = 0, c = 0;
  for (let l = 0; l < s; ++l) {
    const d = o[r[l]];
    if (d === void 0) throw new SyntaxError(`Non-${n} character`);
    a = a << i | d, u += i, u >= 8 && (u -= 8, e[c++] = 255 & a >> u);
  }
  if (u >= i || 255 & a << 8 - u) throw new SyntaxError("Unexpected end of data");
  return e;
}, Vx = (r, t, i) => {
  const n = t[t.length - 1] === "=", o = (1 << i) - 1;
  let s = "", e = 0, u = 0;
  for (let a = 0; a < r.length; ++a) for (u = u << 8 | r[a], e += 8; e > i; ) e -= i, s += t[o & u >> e];
  if (e && (s += t[o & u << i - e]), n) for (; s.length * i & 7; ) s += "=";
  return s;
}, $e = ({ name: r, prefix: t, bitsPerChar: i, alphabet: n }) => Hl({ prefix: t, name: r, encode(o) {
  return Vx(o, n, i);
}, decode(o) {
  return Mx(o, n, i, r);
} }), Cr = Pa({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" }), Nx = Pa({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" }), zx = Object.freeze(Object.defineProperty({ __proto__: null, base58btc: Cr, base58flickr: Nx }, Symbol.toStringTag, { value: "Module" })), Aa = $e({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 }), Gx = $e({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 }), Fx = $e({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 }), $x = $e({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 }), Hx = $e({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 }), Xx = $e({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 }), Wx = $e({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 }), Jx = $e({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 }), Zx = $e({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 }), Qx = Object.freeze(Object.defineProperty({ __proto__: null, base32: Aa, base32hex: Hx, base32hexpad: Wx, base32hexpadupper: Jx, base32hexupper: Xx, base32pad: Fx, base32padupper: $x, base32upper: Gx, base32z: Zx }, Symbol.toStringTag, { value: "Module" }));
class We {
  constructor(t, i, n, o) {
    this.code = i, this.version = t, this.multihash = n, this.bytes = o, this.byteOffset = o.byteOffset, this.byteLength = o.byteLength, this.asCID = this, this._baseCache = /* @__PURE__ */ new Map(), Object.defineProperties(this, { byteOffset: Xa, byteLength: Xa, code: Ha, version: Ha, multihash: Ha, bytes: Ha, _baseCache: Xa, asCID: Xa });
  }
  toV0() {
    switch (this.version) {
      case 0:
        return this;
      default: {
        const { code: t, multihash: i } = this;
        if (t !== Do) throw new Error("Cannot convert a non dag-pb CID to CIDv0");
        if (i.code !== rA) throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
        return We.createV0(i);
      }
    }
  }
  toV1() {
    switch (this.version) {
      case 0: {
        const { code: t, digest: i } = this.multihash, n = kx(t, i);
        return We.createV1(this.code, n);
      }
      case 1:
        return this;
      default:
        throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
    }
  }
  equals(t) {
    return t && this.code === t.code && this.version === t.version && Px(this.multihash, t.multihash);
  }
  toString(t) {
    const { bytes: i, version: n, _baseCache: o } = this;
    switch (n) {
      case 0:
        return eA(i, o, t || Cr.encoder);
      default:
        return tA(i, o, t || Aa.encoder);
    }
  }
  toJSON() {
    return { code: this.code, version: this.version, hash: this.multihash.bytes };
  }
  get [Symbol.toStringTag]() {
    return "CID";
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return "CID(" + this.toString() + ")";
  }
  static isCID(t) {
    return nA(/^0\.0/, oA), !!(t && (t[kf] || t.asCID === t));
  }
  get toBaseEncodedString() {
    throw new Error("Deprecated, use .toString()");
  }
  get codec() {
    throw new Error('"codec" property is deprecated, use integer "code" property instead');
  }
  get buffer() {
    throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
  }
  get multibaseName() {
    throw new Error('"multibaseName" property is deprecated');
  }
  get prefix() {
    throw new Error('"prefix" property is deprecated');
  }
  static asCID(t) {
    if (t instanceof We) return t;
    if (t != null && t.asCID === t) {
      const { version: i, code: n, multihash: o, bytes: s } = t;
      return new We(i, n, o, s || Lf(i, n, o.bytes));
    } else if (t != null && t[kf] === true) {
      const { version: i, multihash: n, code: o } = t, s = Dx(n);
      return We.create(i, o, s);
    } else return null;
  }
  static create(t, i, n) {
    if (typeof i != "number") throw new Error("String codecs are no longer supported");
    switch (t) {
      case 0: {
        if (i !== Do) throw new Error(`Version 0 CID must use dag-pb (code: ${Do}) block encoding`);
        return new We(t, i, n, n.bytes);
      }
      case 1: {
        const o = Lf(t, i, n.bytes);
        return new We(t, i, n, o);
      }
      default:
        throw new Error("Invalid version");
    }
  }
  static createV0(t) {
    return We.create(0, Do, t);
  }
  static createV1(t, i) {
    return We.create(1, t, i);
  }
  static decode(t) {
    const [i, n] = We.decodeFirst(t);
    if (n.length) throw new Error("Incorrect length");
    return i;
  }
  static decodeFirst(t) {
    const i = We.inspectBytes(t), n = i.size - i.multihashSize, o = vp(t.subarray(n, n + i.multihashSize));
    if (o.byteLength !== i.multihashSize) throw new Error("Incorrect length");
    const s = o.subarray(i.multihashSize - i.digestSize), e = new Rp(i.multihashCode, i.digestSize, s, o);
    return [i.version === 0 ? We.createV0(e) : We.createV1(i.codec, e), t.subarray(i.size)];
  }
  static inspectBytes(t) {
    let i = 0;
    const n = () => {
      const [d, f] = ap(t.subarray(i));
      return i += f, d;
    };
    let o = n(), s = Do;
    if (o === 18 ? (o = 0, i = 0) : o === 1 && (s = n()), o !== 0 && o !== 1) throw new RangeError(`Invalid CID version ${o}`);
    const e = i, u = n(), a = n(), c = i + a, l = c - e;
    return { version: o, codec: s, multihashCode: u, digestSize: a, multihashSize: l, size: c };
  }
  static parse(t, i) {
    const [n, o] = Yx(t, i), s = We.decode(o);
    return s._baseCache.set(n, t), s;
  }
}
const Yx = (r, t) => {
  switch (r[0]) {
    case "Q": {
      const i = t || Cr;
      return [Cr.prefix, i.decode(`${Cr.prefix}${r}`)];
    }
    case Cr.prefix: {
      const i = t || Cr;
      return [Cr.prefix, i.decode(r)];
    }
    case Aa.prefix: {
      const i = t || Aa;
      return [Aa.prefix, i.decode(r)];
    }
    default: {
      if (t == null) throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
      return [r[0], t.decode(r)];
    }
  }
}, eA = (r, t, i) => {
  const { prefix: n } = i;
  if (n !== Cr.prefix) throw Error(`Cannot string encode V0 in ${i.name} encoding`);
  const o = t.get(n);
  if (o == null) {
    const s = i.encode(r).slice(1);
    return t.set(n, s), s;
  } else return o;
}, tA = (r, t, i) => {
  const { prefix: n } = i, o = t.get(n);
  if (o == null) {
    const s = i.encode(r);
    return t.set(n, s), s;
  } else return o;
}, Do = 112, rA = 18, Lf = (r, t, i) => {
  const n = Ol(r), o = n + Ol(t), s = new Uint8Array(o + i.byteLength);
  return Kl(r, s, 0), Kl(t, s, n), s.set(i, o), s;
}, kf = Symbol.for("@ipld/js-cid/CID"), Ha = { writable: false, configurable: false, enumerable: true }, Xa = { writable: false, enumerable: false, configurable: false }, iA = "0.0.0-dev", nA = (r, t) => {
  if (r.test(iA)) console.warn(t);
  else throw new Error(t);
}, oA = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`, sA = Object.freeze(Object.defineProperty({ __proto__: null, CID: We }, Symbol.toStringTag, { value: "Module" })), xo = Fl(sA);
var Ht = {}, Xt = {}, Df;
function aA() {
  if (Df) return Xt;
  Df = 1, Object.defineProperty(Xt, "__esModule", { value: true }), Xt.isObject = Xt.assure = Xt.create = Xt.is = void 0;
  const r = (o, s) => s.safeParse(o).success;
  Xt.is = r;
  const t = (o) => (s) => o.safeParse(s).success;
  Xt.create = t;
  const i = (o, s) => o.parse(s);
  Xt.assure = i;
  const n = (o) => typeof o == "object" && o !== null;
  return Xt.isObject = n, Xt;
}
var Ed = {}, Pf;
function La() {
  return Pf || (Pf = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.parseIntWithFallback = r.dedupeStrs = r.range = r.chunkArray = r.errHasMsg = r.isErrnoException = r.asyncFilter = r.s32decode = r.s32encode = r.streamToBuffer = r.flattenUint8Arrays = r.bailableWait = r.wait = r.jitter = r.noUndefinedVals = void 0, r.omit = i;
    const t = (x) => (Object.keys(x).forEach((T) => {
      x[T] === void 0 && delete x[T];
    }), x);
    r.noUndefinedVals = t;
    function i(x, T) {
      if (!x) return x;
      const A = {}, K = Object.keys(x);
      for (let j = 0; j < K.length; j++) {
        const O = K[j];
        T.includes(O) || (A[O] = x[O]);
      }
      return A;
    }
    const n = (x) => Math.round((Math.random() - 0.5) * x * 2);
    r.jitter = n;
    const o = (x) => new Promise((T) => setTimeout(T, x));
    r.wait = o;
    const s = (x) => {
      let T;
      const A = new Promise((K) => {
        const j = setTimeout(K, x);
        T = () => {
          clearTimeout(j), K();
        };
      });
      return { bail: T, wait: () => A };
    };
    r.bailableWait = s;
    const e = (x) => {
      const T = x.reduce((j, O) => j + O.length, 0), A = new Uint8Array(T);
      let K = 0;
      return x.forEach((j) => {
        A.set(j, K), K += j.length;
      }), A;
    };
    r.flattenUint8Arrays = e;
    const u = async (x) => {
      const T = [];
      for await (const A of x) T.push(A);
      return (0, r.flattenUint8Arrays)(T);
    };
    r.streamToBuffer = u;
    const a = "234567abcdefghijklmnopqrstuvwxyz", c = (x) => {
      let T = "";
      for (; x; ) {
        const A = x % 32;
        x = Math.floor(x / 32), T = a.charAt(A) + T;
      }
      return T;
    };
    r.s32encode = c;
    const l = (x) => {
      let T = 0;
      for (const A of x) T = T * 32 + a.indexOf(A);
      return T;
    };
    r.s32decode = l;
    const d = async (x, T) => {
      const A = await Promise.all(x.map((K) => T(K)));
      return x.filter((K, j) => A[j]);
    };
    r.asyncFilter = d;
    const f = (x) => !!x && x.code;
    r.isErrnoException = f;
    const h = (x, T) => !!x && typeof x == "object" && x.message === T;
    r.errHasMsg = h;
    const p = (x, T) => x.reduce((A, K, j) => {
      const O = Math.floor(j / T);
      return A[O] || (A[O] = []), A[O].push(K), A;
    }, []);
    r.chunkArray = p;
    const b = (x) => {
      const T = [];
      for (let A = 0; A < x; A++) T.push(A);
      return T;
    };
    r.range = b;
    const E = (x) => [...new Set(x)];
    r.dedupeStrs = E;
    const g = (x, T) => {
      const A = parseInt(x || "", 10);
      return isNaN(A) ? T : A;
    };
    r.parseIntWithFallback = g;
  }(Ed)), Ed;
}
var An = {}, Bf;
function uA() {
  if (Bf) return An;
  Bf = 1, Object.defineProperty(An, "__esModule", { value: true }), An.mapDefined = void 0, An.keyBy = r;
  function r(i, n) {
    return i.reduce((o, s) => (o.set(s[n], s), o), /* @__PURE__ */ new Map());
  }
  const t = (i, n) => {
    const o = [];
    for (const s of i) {
      const e = n(s);
      e !== void 0 && o.push(e);
    }
    return o;
  };
  return An.mapDefined = t, An;
}
var vd = {}, Uf;
function cA() {
  return Uf || (Uf = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.AsyncBufferFullError = r.AsyncBuffer = r.allComplete = r.createDeferrables = r.createDeferrable = r.readFromGenerator = void 0, r.allFulfilled = a, r.handleAllSettledErrors = c, r.isRejectedResult = l, r.isFulfilledResult = f;
    const t = La(), i = async (b, E, g = Promise.resolve(), x = Number.MAX_SAFE_INTEGER) => {
      const T = [];
      let A, K = false;
      const j = async () => {
        if (await E(T.at(-1))) return true;
        const z = (0, t.bailableWait)(20);
        return await z.wait(), A = z.bail, K ? false : await j();
      }, O = new Promise((z) => {
        g.then(() => {
          j().then(() => z());
        });
      });
      try {
        for (; T.length < x; ) {
          const z = await Promise.race([b.next(), O]);
          if (!z) break;
          const H = z;
          if (H.done) break;
          T.push(H.value);
        }
      } finally {
        K = true, A && A();
      }
      return T;
    };
    r.readFromGenerator = i;
    const n = () => {
      let b;
      const E = new Promise((g) => {
        b = () => g();
      });
      return { resolve: b, complete: E };
    };
    r.createDeferrable = n;
    const o = (b) => {
      const E = [];
      for (let g = 0; g < b; g++) E.push((0, r.createDeferrable)());
      return E;
    };
    r.createDeferrables = o;
    const s = async (b) => {
      await Promise.all(b.map((E) => E.complete));
    };
    r.allComplete = s;
    class e {
      constructor(E) {
        Object.defineProperty(this, "maxSize", { enumerable: true, configurable: true, writable: true, value: E }), Object.defineProperty(this, "buffer", { enumerable: true, configurable: true, writable: true, value: [] }), Object.defineProperty(this, "promise", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "resolve", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "closed", { enumerable: true, configurable: true, writable: true, value: false }), Object.defineProperty(this, "toThrow", { enumerable: true, configurable: true, writable: true, value: void 0 }), this.promise = Promise.resolve(), this.resolve = () => null, this.resetPromise();
      }
      get curr() {
        return this.buffer;
      }
      get size() {
        return this.buffer.length;
      }
      get isClosed() {
        return this.closed;
      }
      resetPromise() {
        this.promise = new Promise((E) => this.resolve = E);
      }
      push(E) {
        this.buffer.push(E), this.resolve();
      }
      pushMany(E) {
        E.forEach((g) => this.buffer.push(g)), this.resolve();
      }
      async *events() {
        for (; ; ) {
          if (this.closed && this.buffer.length === 0) {
            if (this.toThrow) throw this.toThrow;
            return;
          }
          if (await this.promise, this.toThrow) throw this.toThrow;
          if (this.maxSize && this.size > this.maxSize) throw new u(this.maxSize);
          const [E, ...g] = this.buffer;
          E ? (this.buffer = g, yield E) : this.resetPromise();
        }
      }
      throw(E) {
        this.toThrow = E, this.closed = true, this.resolve();
      }
      close() {
        this.closed = true, this.resolve();
      }
    }
    r.AsyncBuffer = e;
    class u extends Error {
      constructor(E) {
        super(`ReachedMaxBufferSize: ${E}`);
      }
    }
    r.AsyncBufferFullError = u;
    function a(b) {
      return Promise.allSettled(b).then(c);
    }
    function c(b) {
      const E = b.filter(l).map(d);
      if (E.length === 0) return b.map(h);
      throw E.length === 1 ? E[0] : new AggregateError(E, `Multiple errors: ${E.map(p).join(`
`)}`);
    }
    function l(b) {
      return b.status === "rejected";
    }
    function d(b) {
      return b.reason;
    }
    function f(b) {
      return b.status === "fulfilled";
    }
    function h(b) {
      return b.value;
    }
    function p(b) {
      return b instanceof Error ? b.message : String(b);
    }
  }(vd)), vd;
}
var Po = {}, If;
function lA() {
  if (If) return Po;
  If = 1, Object.defineProperty(Po, "__esModule", { value: true }), Po.TID = void 0;
  const r = La(), t = 13;
  let i = 0, n = 0, o = null;
  function s(u) {
    return u.replaceAll("-", "");
  }
  class e {
    constructor(a) {
      Object.defineProperty(this, "str", { enumerable: true, configurable: true, writable: true, value: void 0 });
      const c = s(a);
      if (c.length !== t) throw new Error(`Poorly formatted TID: ${c.length} length`);
      this.str = c;
    }
    static next(a) {
      const c = Math.max(Date.now(), i);
      c === i && n++, i = c;
      const l = c * 1e3 + n;
      o === null && (o = Math.floor(Math.random() * 32));
      const d = e.fromTime(l, o);
      return !a || d.newerThan(a) ? d : e.fromTime(a.timestamp() + 1, o);
    }
    static nextStr(a) {
      return e.next(a ? new e(a) : void 0).toString();
    }
    static fromTime(a, c) {
      const l = `${(0, r.s32encode)(a)}${(0, r.s32encode)(c).padStart(2, "2")}`;
      return new e(l);
    }
    static fromStr(a) {
      return new e(a);
    }
    static oldestFirst(a, c) {
      return a.compareTo(c);
    }
    static newestFirst(a, c) {
      return c.compareTo(a);
    }
    static is(a) {
      return s(a).length === t;
    }
    timestamp() {
      return (0, r.s32decode)(this.str.slice(0, 11));
    }
    clockid() {
      return (0, r.s32decode)(this.str.slice(11, 13));
    }
    formatted() {
      const a = this.toString();
      return `${a.slice(0, 4)}-${a.slice(4, 7)}-${a.slice(7, 11)}-${a.slice(11, 13)}`;
    }
    toString() {
      return this.str;
    }
    compareTo(a) {
      return this.str > a.str ? 1 : this.str < a.str ? -1 : 0;
    }
    equals(a) {
      return this.str === a.str;
    }
    newerThan(a) {
      return this.compareTo(a) > 0;
    }
    olderThan(a) {
      return this.compareTo(a) < 0;
    }
  }
  return Po.TID = e, Po;
}
var mr = {};
function dA(r, t) {
  for (let i = 0; i < r.byteLength; i++) {
    if (r[i] < t[i]) return -1;
    if (r[i] > t[i]) return 1;
  }
  return r.byteLength > t.byteLength ? 1 : r.byteLength < t.byteLength ? -1 : 0;
}
function pA(r, t) {
  t || (t = r.reduce((o, s) => o + s.length, 0));
  const i = new Uint8Array(t);
  let n = 0;
  for (const o of r) i.set(o, n), n += o.length;
  return i;
}
function fA(r, t) {
  if (r === t) return true;
  if (r.byteLength !== t.byteLength) return false;
  for (let i = 0; i < r.byteLength; i++) if (r[i] !== t[i]) return false;
  return true;
}
const hA = Hl({ prefix: "\0", name: "identity", encode: (r) => Lx(r), decode: (r) => Tx(r) }), yA = Object.freeze(Object.defineProperty({ __proto__: null, identity: hA }, Symbol.toStringTag, { value: "Module" })), mA = $e({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 }), bA = Object.freeze(Object.defineProperty({ __proto__: null, base2: mA }, Symbol.toStringTag, { value: "Module" })), gA = $e({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 }), EA = Object.freeze(Object.defineProperty({ __proto__: null, base8: gA }, Symbol.toStringTag, { value: "Module" })), vA = Pa({ prefix: "9", name: "base10", alphabet: "0123456789" }), RA = Object.freeze(Object.defineProperty({ __proto__: null, base10: vA }, Symbol.toStringTag, { value: "Module" })), _A = $e({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 }), wA = $e({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 }), xA = Object.freeze(Object.defineProperty({ __proto__: null, base16: _A, base16upper: wA }, Symbol.toStringTag, { value: "Module" })), AA = Pa({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" }), SA = Pa({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" }), CA = Object.freeze(Object.defineProperty({ __proto__: null, base36: AA, base36upper: SA }, Symbol.toStringTag, { value: "Module" })), TA = $e({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 }), LA = $e({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 }), kA = $e({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 }), DA = $e({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 }), s_ = Object.freeze(Object.defineProperty({ __proto__: null, base64: TA, base64pad: LA, base64url: kA, base64urlpad: DA }, Symbol.toStringTag, { value: "Module" })), a_ = Array.from("\u{1F680}\u{1FA90}\u2604\u{1F6F0}\u{1F30C}\u{1F311}\u{1F312}\u{1F313}\u{1F314}\u{1F315}\u{1F316}\u{1F317}\u{1F318}\u{1F30D}\u{1F30F}\u{1F30E}\u{1F409}\u2600\u{1F4BB}\u{1F5A5}\u{1F4BE}\u{1F4BF}\u{1F602}\u2764\u{1F60D}\u{1F923}\u{1F60A}\u{1F64F}\u{1F495}\u{1F62D}\u{1F618}\u{1F44D}\u{1F605}\u{1F44F}\u{1F601}\u{1F525}\u{1F970}\u{1F494}\u{1F496}\u{1F499}\u{1F622}\u{1F914}\u{1F606}\u{1F644}\u{1F4AA}\u{1F609}\u263A\u{1F44C}\u{1F917}\u{1F49C}\u{1F614}\u{1F60E}\u{1F607}\u{1F339}\u{1F926}\u{1F389}\u{1F49E}\u270C\u2728\u{1F937}\u{1F631}\u{1F60C}\u{1F338}\u{1F64C}\u{1F60B}\u{1F497}\u{1F49A}\u{1F60F}\u{1F49B}\u{1F642}\u{1F493}\u{1F929}\u{1F604}\u{1F600}\u{1F5A4}\u{1F603}\u{1F4AF}\u{1F648}\u{1F447}\u{1F3B6}\u{1F612}\u{1F92D}\u2763\u{1F61C}\u{1F48B}\u{1F440}\u{1F62A}\u{1F611}\u{1F4A5}\u{1F64B}\u{1F61E}\u{1F629}\u{1F621}\u{1F92A}\u{1F44A}\u{1F973}\u{1F625}\u{1F924}\u{1F449}\u{1F483}\u{1F633}\u270B\u{1F61A}\u{1F61D}\u{1F634}\u{1F31F}\u{1F62C}\u{1F643}\u{1F340}\u{1F337}\u{1F63B}\u{1F613}\u2B50\u2705\u{1F97A}\u{1F308}\u{1F608}\u{1F918}\u{1F4A6}\u2714\u{1F623}\u{1F3C3}\u{1F490}\u2639\u{1F38A}\u{1F498}\u{1F620}\u261D\u{1F615}\u{1F33A}\u{1F382}\u{1F33B}\u{1F610}\u{1F595}\u{1F49D}\u{1F64A}\u{1F639}\u{1F5E3}\u{1F4AB}\u{1F480}\u{1F451}\u{1F3B5}\u{1F91E}\u{1F61B}\u{1F534}\u{1F624}\u{1F33C}\u{1F62B}\u26BD\u{1F919}\u2615\u{1F3C6}\u{1F92B}\u{1F448}\u{1F62E}\u{1F646}\u{1F37B}\u{1F343}\u{1F436}\u{1F481}\u{1F632}\u{1F33F}\u{1F9E1}\u{1F381}\u26A1\u{1F31E}\u{1F388}\u274C\u270A\u{1F44B}\u{1F630}\u{1F928}\u{1F636}\u{1F91D}\u{1F6B6}\u{1F4B0}\u{1F353}\u{1F4A2}\u{1F91F}\u{1F641}\u{1F6A8}\u{1F4A8}\u{1F92C}\u2708\u{1F380}\u{1F37A}\u{1F913}\u{1F619}\u{1F49F}\u{1F331}\u{1F616}\u{1F476}\u{1F974}\u25B6\u27A1\u2753\u{1F48E}\u{1F4B8}\u2B07\u{1F628}\u{1F31A}\u{1F98B}\u{1F637}\u{1F57A}\u26A0\u{1F645}\u{1F61F}\u{1F635}\u{1F44E}\u{1F932}\u{1F920}\u{1F927}\u{1F4CC}\u{1F535}\u{1F485}\u{1F9D0}\u{1F43E}\u{1F352}\u{1F617}\u{1F911}\u{1F30A}\u{1F92F}\u{1F437}\u260E\u{1F4A7}\u{1F62F}\u{1F486}\u{1F446}\u{1F3A4}\u{1F647}\u{1F351}\u2744\u{1F334}\u{1F4A3}\u{1F438}\u{1F48C}\u{1F4CD}\u{1F940}\u{1F922}\u{1F445}\u{1F4A1}\u{1F4A9}\u{1F450}\u{1F4F8}\u{1F47B}\u{1F910}\u{1F92E}\u{1F3BC}\u{1F975}\u{1F6A9}\u{1F34E}\u{1F34A}\u{1F47C}\u{1F48D}\u{1F4E3}\u{1F942}"), PA = a_.reduce((r, t, i) => (r[i] = t, r), []), BA = a_.reduce((r, t, i) => (r[t.codePointAt(0)] = i, r), []);
function UA(r) {
  return r.reduce((t, i) => (t += PA[i], t), "");
}
function IA(r) {
  const t = [];
  for (const i of r) {
    const n = BA[i.codePointAt(0)];
    if (n === void 0) throw new Error(`Non-base256emoji character: ${i}`);
    t.push(n);
  }
  return new Uint8Array(t);
}
const KA = Hl({ prefix: "\u{1F680}", name: "base256emoji", encode: UA, decode: IA }), OA = Object.freeze(Object.defineProperty({ __proto__: null, base256emoji: KA }, Symbol.toStringTag, { value: "Module" }));
new TextEncoder();
new TextDecoder();
const Kf = { ...yA, ...bA, ...EA, ...RA, ...xA, ...Qx, ...CA, ...zx, ...s_, ...OA };
function u_(r, t, i, n) {
  return { name: r, prefix: t, encoder: { name: r, prefix: t, encode: i }, decoder: { decode: n } };
}
const Of = u_("utf8", "u", (r) => "u" + new TextDecoder("utf8").decode(r), (r) => new TextEncoder().encode(r.substring(1))), Rd = u_("ascii", "a", (r) => {
  let t = "a";
  for (let i = 0; i < r.length; i++) t += String.fromCharCode(r[i]);
  return t;
}, (r) => {
  r = r.substring(1);
  const t = new Uint8Array(r.length);
  for (let i = 0; i < r.length; i++) t[i] = r.charCodeAt(i);
  return t;
}), c_ = { utf8: Of, "utf-8": Of, hex: Kf.base16, latin1: Rd, ascii: Rd, binary: Rd, ...Kf };
function jA(r, t = "utf8") {
  const i = c_[t];
  if (!i) throw new Error(`Unsupported encoding "${t}"`);
  return i.decoder.decode(`${i.prefix}${r}`);
}
function qA(r, t = "utf8") {
  const i = c_[t];
  if (!i) throw new Error(`Unsupported encoding "${t}"`);
  return i.encoder.encode(r).substring(1);
}
function MA(r, t) {
  if (r.length !== t.length) throw new Error("Inputs should have the same length");
  const i = new Uint8Array(r.length);
  for (let n = 0; n < r.length; n++) i[n] = r[n] ^ t[n];
  return i;
}
const VA = Object.freeze(Object.defineProperty({ __proto__: null, compare: dA, concat: pA, equals: fA, fromString: jA, toString: qA, xor: MA }, Symbol.toStringTag, { value: "Module" })), l_ = Fl(VA);
var jf;
function NA() {
  return jf || (jf = 1, function(r) {
    var t = mr && mr.__createBinding || (Object.create ? function(c, l, d, f) {
      f === void 0 && (f = d);
      var h = Object.getOwnPropertyDescriptor(l, d);
      (!h || ("get" in h ? !l.__esModule : h.writable || h.configurable)) && (h = { enumerable: true, get: function() {
        return l[d];
      } }), Object.defineProperty(c, f, h);
    } : function(c, l, d, f) {
      f === void 0 && (f = d), c[f] = l[d];
    }), i = mr && mr.__setModuleDefault || (Object.create ? function(c, l) {
      Object.defineProperty(c, "default", { enumerable: true, value: l });
    } : function(c, l) {
      c.default = l;
    }), n = mr && mr.__importStar || function(c) {
      if (c && c.__esModule) return c;
      var l = {};
      if (c != null) for (var d in c) d !== "default" && Object.prototype.hasOwnProperty.call(c, d) && t(l, c, d);
      return i(l, c), l;
    };
    Object.defineProperty(r, "__esModule", { value: true }), r.ipldEquals = r.ipldToJson = r.jsonToIpld = void 0;
    const o = xo, s = n(l_), e = (c) => {
      if (Array.isArray(c)) return c.map((l) => (0, r.jsonToIpld)(l));
      if (c && typeof c == "object") {
        if (typeof c.$link == "string" && Object.keys(c).length === 1) return o.CID.parse(c.$link);
        if (typeof c.$bytes == "string" && Object.keys(c).length === 1) return s.fromString(c.$bytes, "base64");
        const l = {};
        for (const d of Object.keys(c)) l[d] = (0, r.jsonToIpld)(c[d]);
        return l;
      }
      return c;
    };
    r.jsonToIpld = e;
    const u = (c) => {
      if (Array.isArray(c)) return c.map((l) => (0, r.ipldToJson)(l));
      if (c && typeof c == "object") {
        if (c instanceof Uint8Array) return { $bytes: s.toString(c, "base64") };
        if (o.CID.asCID(c)) return { $link: c.toString() };
        const l = {};
        for (const d of Object.keys(c)) l[d] = (0, r.ipldToJson)(c[d]);
        return l;
      }
      return c;
    };
    r.ipldToJson = u;
    const a = (c, l) => {
      if (Array.isArray(c) && Array.isArray(l)) {
        if (c.length !== l.length) return false;
        for (let d = 0; d < c.length; d++) if (!(0, r.ipldEquals)(c[d], l[d])) return false;
        return true;
      }
      if (c && l && typeof c == "object" && typeof l == "object") {
        if (c instanceof Uint8Array && l instanceof Uint8Array) return s.equals(c, l);
        if (o.CID.asCID(c) && o.CID.asCID(l)) return o.CID.asCID(c)?.equals(o.CID.asCID(l));
        if (Object.keys(c).length !== Object.keys(l).length) return false;
        for (const d of Object.keys(c)) if (!(0, r.ipldEquals)(c[d], l[d])) return false;
        return true;
      }
      return c === l;
    };
    r.ipldEquals = a;
  }(mr)), mr;
}
var Sn = {}, qf;
function zA() {
  if (qf) return Sn;
  qf = 1, Object.defineProperty(Sn, "__esModule", { value: true }), Sn.retry = t, Sn.createRetryable = i, Sn.backoffMs = n;
  const r = La();
  async function t(e, u = {}) {
    const { maxRetries: a = 3, retryable: c = () => true, getWaitMs: l = n } = u;
    let d = 0, f;
    for (; !f; ) try {
      return await e();
    } catch (h) {
      const p = l(d);
      d < a && p !== null && c(h) ? (d += 1, p !== 0 && await (0, r.wait)(p)) : f = h;
    }
    throw f;
  }
  function i(e) {
    return async (u, a) => t(u, { ...a, retryable: e });
  }
  function n(e, u = 100, a = 1e3) {
    const c = Math.pow(2, e) * u, l = Math.min(c, a);
    return o(l);
  }
  function o(e) {
    const u = e * 0.15;
    return e + s(-u, u);
  }
  function s(e, u) {
    return Math.random() * (u - e) + e;
  }
  return Sn;
}
var _d = {}, Mf;
function GA() {
  return Mf || (Mf = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.def = r.schema = void 0;
    const t = xo, i = oe(), n = i.z.any().refine((o) => t.CID.asCID(o) !== null, { message: "Not a CID" }).transform((o) => t.CID.asCID(o));
    r.schema = { cid: n, bytes: i.z.instanceof(Uint8Array), string: i.z.string(), array: i.z.array(i.z.unknown()), map: i.z.record(i.z.string(), i.z.unknown()), unknown: i.z.unknown() }, r.def = { cid: { name: "cid", schema: r.schema.cid }, bytes: { name: "bytes", schema: r.schema.bytes }, string: { name: "string", schema: r.schema.string }, map: { name: "map", schema: r.schema.map }, unknown: { name: "unknown", schema: r.schema.unknown } };
  }(_d)), _d;
}
var wd = {}, Vf;
function FA() {
  return Vf || (Vf = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.addHoursToDate = r.lessThanAgoMs = r.DAY = r.HOUR = r.MINUTE = r.SECOND = void 0, r.SECOND = 1e3, r.MINUTE = r.SECOND * 60, r.HOUR = r.MINUTE * 60, r.DAY = r.HOUR * 24;
    const t = (n, o) => Date.now() < n.getTime() + o;
    r.lessThanAgoMs = t;
    const i = (n, o) => {
      const s = o ? new Date(o) : /* @__PURE__ */ new Date();
      return s.setHours(s.getHours() + n), s;
    };
    r.addHoursToDate = i;
  }(wd)), wd;
}
var Re = {}, Cn = {}, Tn = {}, xd = {}, Nf;
function d_() {
  return Nf || (Nf = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.EXTENDED_PICTOGRAPHIC = r.CLUSTER_BREAK = void 0, function(t) {
      t[t.CR = 0] = "CR", t[t.LF = 1] = "LF", t[t.CONTROL = 2] = "CONTROL", t[t.EXTEND = 3] = "EXTEND", t[t.REGIONAL_INDICATOR = 4] = "REGIONAL_INDICATOR", t[t.SPACINGMARK = 5] = "SPACINGMARK", t[t.L = 6] = "L", t[t.V = 7] = "V", t[t.T = 8] = "T", t[t.LV = 9] = "LV", t[t.LVT = 10] = "LVT", t[t.OTHER = 11] = "OTHER", t[t.PREPEND = 12] = "PREPEND", t[t.E_BASE = 13] = "E_BASE", t[t.E_MODIFIER = 14] = "E_MODIFIER", t[t.ZWJ = 15] = "ZWJ", t[t.GLUE_AFTER_ZWJ = 16] = "GLUE_AFTER_ZWJ", t[t.E_BASE_GAZ = 17] = "E_BASE_GAZ";
    }(r.CLUSTER_BREAK || (r.CLUSTER_BREAK = {})), r.EXTENDED_PICTOGRAPHIC = 101;
  }(xd)), xd;
}
var Wa = {}, zf;
function $A() {
  if (zf) return Wa;
  zf = 1, Object.defineProperty(Wa, "__esModule", { value: true });
  const r = d_(), t = 0, i = 1, n = 2, o = 3, s = 4;
  let e = class {
    static isSurrogate(a, c) {
      return 55296 <= a.charCodeAt(c) && a.charCodeAt(c) <= 56319 && 56320 <= a.charCodeAt(c + 1) && a.charCodeAt(c + 1) <= 57343;
    }
    static codePointAt(a, c) {
      c === void 0 && (c = 0);
      const l = a.charCodeAt(c);
      if (55296 <= l && l <= 56319 && c < a.length - 1) {
        const d = l, f = a.charCodeAt(c + 1);
        return 56320 <= f && f <= 57343 ? (d - 55296) * 1024 + (f - 56320) + 65536 : d;
      }
      if (56320 <= l && l <= 57343 && c >= 1) {
        const d = a.charCodeAt(c - 1), f = l;
        return 55296 <= d && d <= 56319 ? (d - 55296) * 1024 + (f - 56320) + 65536 : f;
      }
      return l;
    }
    static shouldBreak(a, c, l, d, f, h) {
      const p = [a].concat(c).concat([l]), b = [d].concat(f).concat([h]), E = p[p.length - 2], g = l, x = h, T = p.lastIndexOf(r.CLUSTER_BREAK.REGIONAL_INDICATOR);
      if (T > 0 && p.slice(1, T).every(function(K) {
        return K === r.CLUSTER_BREAK.REGIONAL_INDICATOR;
      }) && [r.CLUSTER_BREAK.PREPEND, r.CLUSTER_BREAK.REGIONAL_INDICATOR].indexOf(E) === -1) return p.filter(function(K) {
        return K === r.CLUSTER_BREAK.REGIONAL_INDICATOR;
      }).length % 2 === 1 ? o : s;
      if (E === r.CLUSTER_BREAK.CR && g === r.CLUSTER_BREAK.LF) return t;
      if (E === r.CLUSTER_BREAK.CONTROL || E === r.CLUSTER_BREAK.CR || E === r.CLUSTER_BREAK.LF) return i;
      if (g === r.CLUSTER_BREAK.CONTROL || g === r.CLUSTER_BREAK.CR || g === r.CLUSTER_BREAK.LF) return i;
      if (E === r.CLUSTER_BREAK.L && (g === r.CLUSTER_BREAK.L || g === r.CLUSTER_BREAK.V || g === r.CLUSTER_BREAK.LV || g === r.CLUSTER_BREAK.LVT)) return t;
      if ((E === r.CLUSTER_BREAK.LV || E === r.CLUSTER_BREAK.V) && (g === r.CLUSTER_BREAK.V || g === r.CLUSTER_BREAK.T)) return t;
      if ((E === r.CLUSTER_BREAK.LVT || E === r.CLUSTER_BREAK.T) && g === r.CLUSTER_BREAK.T) return t;
      if (g === r.CLUSTER_BREAK.EXTEND || g === r.CLUSTER_BREAK.ZWJ) return t;
      if (g === r.CLUSTER_BREAK.SPACINGMARK) return t;
      if (E === r.CLUSTER_BREAK.PREPEND) return t;
      const A = b.slice(0, -1).lastIndexOf(r.EXTENDED_PICTOGRAPHIC);
      return A !== -1 && b[A] === r.EXTENDED_PICTOGRAPHIC && p.slice(A + 1, -2).every(function(K) {
        return K === r.CLUSTER_BREAK.EXTEND;
      }) && E === r.CLUSTER_BREAK.ZWJ && x === r.EXTENDED_PICTOGRAPHIC ? t : c.indexOf(r.CLUSTER_BREAK.REGIONAL_INDICATOR) !== -1 ? n : E === r.CLUSTER_BREAK.REGIONAL_INDICATOR && g === r.CLUSTER_BREAK.REGIONAL_INDICATOR ? t : i;
    }
  };
  return Wa.default = e, Wa;
}
var Ja = {}, Gf;
function HA() {
  if (Gf) return Ja;
  Gf = 1, Object.defineProperty(Ja, "__esModule", { value: true });
  let r = class {
    constructor(i, n) {
      this._index = 0, this._str = i, this._nextBreak = n;
    }
    [Symbol.iterator]() {
      return this;
    }
    next() {
      let i;
      if ((i = this._nextBreak(this._str, this._index)) < this._str.length) {
        const n = this._str.slice(this._index, i);
        return this._index = i, { value: n, done: false };
      }
      if (this._index < this._str.length) {
        const n = this._str.slice(this._index);
        return this._index = this._str.length, { value: n, done: false };
      }
      return { value: void 0, done: true };
    }
  };
  return Ja.default = r, Ja;
}
var Ff;
function XA() {
  if (Ff) return Tn;
  Ff = 1;
  var r = Tn && Tn.__importDefault || function(s) {
    return s && s.__esModule ? s : { default: s };
  };
  Object.defineProperty(Tn, "__esModule", { value: true });
  const t = d_(), i = r($A()), n = r(HA());
  let o = class Zr {
    static nextBreak(e, u) {
      if (u === void 0 && (u = 0), u < 0) return 0;
      if (u >= e.length - 1) return e.length;
      const a = i.default.codePointAt(e, u), c = Zr.getGraphemeBreakProperty(a), l = Zr.getEmojiProperty(a), d = [], f = [];
      for (let h = u + 1; h < e.length; h++) {
        if (i.default.isSurrogate(e, h - 1)) continue;
        const p = i.default.codePointAt(e, h), b = Zr.getGraphemeBreakProperty(p), E = Zr.getEmojiProperty(p);
        if (i.default.shouldBreak(c, d, b, l, f, E)) return h;
        d.push(b), f.push(E);
      }
      return e.length;
    }
    splitGraphemes(e) {
      const u = [];
      let a = 0, c;
      for (; (c = Zr.nextBreak(e, a)) < e.length; ) u.push(e.slice(a, c)), a = c;
      return a < e.length && u.push(e.slice(a)), u;
    }
    iterateGraphemes(e) {
      return new n.default(e, Zr.nextBreak);
    }
    countGraphemes(e) {
      let u = 0, a = 0, c;
      for (; (c = Zr.nextBreak(e, a)) < e.length; ) a = c, u++;
      return a < e.length && u++, u;
    }
    static getGraphemeBreakProperty(e) {
      if (e < 48905) {
        if (e < 44116) {
          if (e < 4141) {
            if (e < 2818) {
              if (e < 2363) if (e < 1759) {
                if (e < 1471) {
                  if (e < 127) {
                    if (e < 11) {
                      if (e < 10) {
                        if (0 <= e && e <= 9) return t.CLUSTER_BREAK.CONTROL;
                      } else if (e === 10) return t.CLUSTER_BREAK.LF;
                    } else if (e < 13) {
                      if (11 <= e && e <= 12) return t.CLUSTER_BREAK.CONTROL;
                    } else if (e < 14) {
                      if (e === 13) return t.CLUSTER_BREAK.CR;
                    } else if (14 <= e && e <= 31) return t.CLUSTER_BREAK.CONTROL;
                  } else if (e < 768) {
                    if (e < 173) {
                      if (127 <= e && e <= 159) return t.CLUSTER_BREAK.CONTROL;
                    } else if (e === 173) return t.CLUSTER_BREAK.CONTROL;
                  } else if (e < 1155) {
                    if (768 <= e && e <= 879) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e < 1425) {
                    if (1155 <= e && e <= 1161) return t.CLUSTER_BREAK.EXTEND;
                  } else if (1425 <= e && e <= 1469) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 1552) {
                  if (e < 1476) {
                    if (e < 1473) {
                      if (e === 1471) return t.CLUSTER_BREAK.EXTEND;
                    } else if (1473 <= e && e <= 1474) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e < 1479) {
                    if (1476 <= e && e <= 1477) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e < 1536) {
                    if (e === 1479) return t.CLUSTER_BREAK.EXTEND;
                  } else if (1536 <= e && e <= 1541) return t.CLUSTER_BREAK.PREPEND;
                } else if (e < 1648) {
                  if (e < 1564) {
                    if (1552 <= e && e <= 1562) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e < 1611) {
                    if (e === 1564) return t.CLUSTER_BREAK.CONTROL;
                  } else if (1611 <= e && e <= 1631) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 1750) {
                  if (e === 1648) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 1757) {
                  if (1750 <= e && e <= 1756) return t.CLUSTER_BREAK.EXTEND;
                } else if (e === 1757) return t.CLUSTER_BREAK.PREPEND;
              } else if (e < 2075) {
                if (e < 1840) if (e < 1770) {
                  if (e < 1767) {
                    if (1759 <= e && e <= 1764) return t.CLUSTER_BREAK.EXTEND;
                  } else if (1767 <= e && e <= 1768) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 1807) {
                  if (1770 <= e && e <= 1773) return t.CLUSTER_BREAK.EXTEND;
                } else {
                  if (e === 1807) return t.CLUSTER_BREAK.PREPEND;
                  if (e === 1809) return t.CLUSTER_BREAK.EXTEND;
                }
                else if (e < 2027) {
                  if (e < 1958) {
                    if (1840 <= e && e <= 1866) return t.CLUSTER_BREAK.EXTEND;
                  } else if (1958 <= e && e <= 1968) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 2045) {
                  if (2027 <= e && e <= 2035) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 2070) {
                  if (e === 2045) return t.CLUSTER_BREAK.EXTEND;
                } else if (2070 <= e && e <= 2073) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 2200) {
                if (e < 2089) {
                  if (e < 2085) {
                    if (2075 <= e && e <= 2083) return t.CLUSTER_BREAK.EXTEND;
                  } else if (2085 <= e && e <= 2087) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 2137) {
                  if (2089 <= e && e <= 2093) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 2192) {
                  if (2137 <= e && e <= 2139) return t.CLUSTER_BREAK.EXTEND;
                } else if (2192 <= e && e <= 2193) return t.CLUSTER_BREAK.PREPEND;
              } else if (e < 2275) {
                if (e < 2250) {
                  if (2200 <= e && e <= 2207) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 2274) {
                  if (2250 <= e && e <= 2273) return t.CLUSTER_BREAK.EXTEND;
                } else if (e === 2274) return t.CLUSTER_BREAK.PREPEND;
              } else if (e < 2307) {
                if (2275 <= e && e <= 2306) return t.CLUSTER_BREAK.EXTEND;
              } else {
                if (e === 2307) return t.CLUSTER_BREAK.SPACINGMARK;
                if (e === 2362) return t.CLUSTER_BREAK.EXTEND;
              }
              else if (e < 2561) {
                if (e < 2434) {
                  if (e < 2381) {
                    if (e < 2366) {
                      if (e === 2363) return t.CLUSTER_BREAK.SPACINGMARK;
                      if (e === 2364) return t.CLUSTER_BREAK.EXTEND;
                    } else if (e < 2369) {
                      if (2366 <= e && e <= 2368) return t.CLUSTER_BREAK.SPACINGMARK;
                    } else if (e < 2377) {
                      if (2369 <= e && e <= 2376) return t.CLUSTER_BREAK.EXTEND;
                    } else if (2377 <= e && e <= 2380) return t.CLUSTER_BREAK.SPACINGMARK;
                  } else if (e < 2385) {
                    if (e < 2382) {
                      if (e === 2381) return t.CLUSTER_BREAK.EXTEND;
                    } else if (2382 <= e && e <= 2383) return t.CLUSTER_BREAK.SPACINGMARK;
                  } else if (e < 2402) {
                    if (2385 <= e && e <= 2391) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e < 2433) {
                    if (2402 <= e && e <= 2403) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e === 2433) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 2503) {
                  if (e < 2494) {
                    if (e < 2492) {
                      if (2434 <= e && e <= 2435) return t.CLUSTER_BREAK.SPACINGMARK;
                    } else if (e === 2492) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e < 2495) {
                    if (e === 2494) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e < 2497) {
                    if (2495 <= e && e <= 2496) return t.CLUSTER_BREAK.SPACINGMARK;
                  } else if (2497 <= e && e <= 2500) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 2519) {
                  if (e < 2507) {
                    if (2503 <= e && e <= 2504) return t.CLUSTER_BREAK.SPACINGMARK;
                  } else if (e < 2509) {
                    if (2507 <= e && e <= 2508) return t.CLUSTER_BREAK.SPACINGMARK;
                  } else if (e === 2509) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 2530) {
                  if (e === 2519) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 2558) {
                  if (2530 <= e && e <= 2531) return t.CLUSTER_BREAK.EXTEND;
                } else if (e === 2558) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 2691) {
                if (e < 2631) {
                  if (e < 2620) {
                    if (e < 2563) {
                      if (2561 <= e && e <= 2562) return t.CLUSTER_BREAK.EXTEND;
                    } else if (e === 2563) return t.CLUSTER_BREAK.SPACINGMARK;
                  } else if (e < 2622) {
                    if (e === 2620) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e < 2625) {
                    if (2622 <= e && e <= 2624) return t.CLUSTER_BREAK.SPACINGMARK;
                  } else if (2625 <= e && e <= 2626) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 2672) {
                  if (e < 2635) {
                    if (2631 <= e && e <= 2632) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e < 2641) {
                    if (2635 <= e && e <= 2637) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e === 2641) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 2677) {
                  if (2672 <= e && e <= 2673) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 2689) {
                  if (e === 2677) return t.CLUSTER_BREAK.EXTEND;
                } else if (2689 <= e && e <= 2690) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 2761) {
                if (e < 2750) {
                  if (e === 2691) return t.CLUSTER_BREAK.SPACINGMARK;
                  if (e === 2748) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 2753) {
                  if (2750 <= e && e <= 2752) return t.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 2759) {
                  if (2753 <= e && e <= 2757) return t.CLUSTER_BREAK.EXTEND;
                } else if (2759 <= e && e <= 2760) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 2786) {
                if (e < 2763) {
                  if (e === 2761) return t.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 2765) {
                  if (2763 <= e && e <= 2764) return t.CLUSTER_BREAK.SPACINGMARK;
                } else if (e === 2765) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 2810) {
                if (2786 <= e && e <= 2787) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 2817) {
                if (2810 <= e && e <= 2815) return t.CLUSTER_BREAK.EXTEND;
              } else if (e === 2817) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 3315) {
              if (e < 3076) {
                if (e < 2946) {
                  if (e < 2887) {
                    if (e < 2878) {
                      if (e < 2876) {
                        if (2818 <= e && e <= 2819) return t.CLUSTER_BREAK.SPACINGMARK;
                      } else if (e === 2876) return t.CLUSTER_BREAK.EXTEND;
                    } else if (e < 2880) {
                      if (2878 <= e && e <= 2879) return t.CLUSTER_BREAK.EXTEND;
                    } else if (e < 2881) {
                      if (e === 2880) return t.CLUSTER_BREAK.SPACINGMARK;
                    } else if (2881 <= e && e <= 2884) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e < 2893) {
                    if (e < 2891) {
                      if (2887 <= e && e <= 2888) return t.CLUSTER_BREAK.SPACINGMARK;
                    } else if (2891 <= e && e <= 2892) return t.CLUSTER_BREAK.SPACINGMARK;
                  } else if (e < 2901) {
                    if (e === 2893) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e < 2914) {
                    if (2901 <= e && e <= 2903) return t.CLUSTER_BREAK.EXTEND;
                  } else if (2914 <= e && e <= 2915) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 3014) {
                  if (e < 3007) {
                    if (e === 2946 || e === 3006) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e < 3008) {
                    if (e === 3007) return t.CLUSTER_BREAK.SPACINGMARK;
                  } else if (e < 3009) {
                    if (e === 3008) return t.CLUSTER_BREAK.EXTEND;
                  } else if (3009 <= e && e <= 3010) return t.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 3031) {
                  if (e < 3018) {
                    if (3014 <= e && e <= 3016) return t.CLUSTER_BREAK.SPACINGMARK;
                  } else if (e < 3021) {
                    if (3018 <= e && e <= 3020) return t.CLUSTER_BREAK.SPACINGMARK;
                  } else if (e === 3021) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 3072) {
                  if (e === 3031) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 3073) {
                  if (e === 3072) return t.CLUSTER_BREAK.EXTEND;
                } else if (3073 <= e && e <= 3075) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 3262) {
                if (e < 3146) {
                  if (e < 3134) {
                    if (e === 3076 || e === 3132) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e < 3137) {
                    if (3134 <= e && e <= 3136) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e < 3142) {
                    if (3137 <= e && e <= 3140) return t.CLUSTER_BREAK.SPACINGMARK;
                  } else if (3142 <= e && e <= 3144) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 3201) {
                  if (e < 3157) {
                    if (3146 <= e && e <= 3149) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e < 3170) {
                    if (3157 <= e && e <= 3158) return t.CLUSTER_BREAK.EXTEND;
                  } else if (3170 <= e && e <= 3171) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 3202) {
                  if (e === 3201) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 3260) {
                  if (3202 <= e && e <= 3203) return t.CLUSTER_BREAK.SPACINGMARK;
                } else if (e === 3260) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 3270) {
                if (e < 3264) {
                  if (e === 3262) return t.CLUSTER_BREAK.SPACINGMARK;
                  if (e === 3263) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 3266) {
                  if (3264 <= e && e <= 3265) return t.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 3267) {
                  if (e === 3266) return t.CLUSTER_BREAK.EXTEND;
                } else if (3267 <= e && e <= 3268) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 3276) {
                if (e < 3271) {
                  if (e === 3270) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 3274) {
                  if (3271 <= e && e <= 3272) return t.CLUSTER_BREAK.SPACINGMARK;
                } else if (3274 <= e && e <= 3275) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 3285) {
                if (3276 <= e && e <= 3277) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 3298) {
                if (3285 <= e && e <= 3286) return t.CLUSTER_BREAK.EXTEND;
              } else if (3298 <= e && e <= 3299) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 3551) {
              if (e < 3406) {
                if (e < 3391) {
                  if (e < 3330) {
                    if (e < 3328) {
                      if (e === 3315) return t.CLUSTER_BREAK.SPACINGMARK;
                    } else if (3328 <= e && e <= 3329) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e < 3387) {
                    if (3330 <= e && e <= 3331) return t.CLUSTER_BREAK.SPACINGMARK;
                  } else if (e < 3390) {
                    if (3387 <= e && e <= 3388) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e === 3390) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 3398) {
                  if (e < 3393) {
                    if (3391 <= e && e <= 3392) return t.CLUSTER_BREAK.SPACINGMARK;
                  } else if (3393 <= e && e <= 3396) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 3402) {
                  if (3398 <= e && e <= 3400) return t.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 3405) {
                  if (3402 <= e && e <= 3404) return t.CLUSTER_BREAK.SPACINGMARK;
                } else if (e === 3405) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 3530) {
                if (e < 3426) {
                  if (e === 3406) return t.CLUSTER_BREAK.PREPEND;
                  if (e === 3415) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 3457) {
                  if (3426 <= e && e <= 3427) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 3458) {
                  if (e === 3457) return t.CLUSTER_BREAK.EXTEND;
                } else if (3458 <= e && e <= 3459) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 3538) {
                if (e < 3535) {
                  if (e === 3530) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 3536) {
                  if (e === 3535) return t.CLUSTER_BREAK.EXTEND;
                } else if (3536 <= e && e <= 3537) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 3542) {
                if (3538 <= e && e <= 3540) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 3544) {
                if (e === 3542) return t.CLUSTER_BREAK.EXTEND;
              } else if (3544 <= e && e <= 3550) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 3893) {
              if (e < 3655) {
                if (e < 3633) {
                  if (e < 3570) {
                    if (e === 3551) return t.CLUSTER_BREAK.EXTEND;
                  } else if (3570 <= e && e <= 3571) return t.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 3635) {
                  if (e === 3633) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 3636) {
                  if (e === 3635) return t.CLUSTER_BREAK.SPACINGMARK;
                } else if (3636 <= e && e <= 3642) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 3764) if (e < 3761) {
                if (3655 <= e && e <= 3662) return t.CLUSTER_BREAK.EXTEND;
              } else {
                if (e === 3761) return t.CLUSTER_BREAK.EXTEND;
                if (e === 3763) return t.CLUSTER_BREAK.SPACINGMARK;
              }
              else if (e < 3784) {
                if (3764 <= e && e <= 3772) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 3864) {
                if (3784 <= e && e <= 3790) return t.CLUSTER_BREAK.EXTEND;
              } else if (3864 <= e && e <= 3865) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 3967) {
              if (e < 3897) {
                if (e === 3893 || e === 3895) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 3902) {
                if (e === 3897) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 3953) {
                if (3902 <= e && e <= 3903) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (3953 <= e && e <= 3966) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 3981) {
              if (e < 3968) {
                if (e === 3967) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 3974) {
                if (3968 <= e && e <= 3972) return t.CLUSTER_BREAK.EXTEND;
              } else if (3974 <= e && e <= 3975) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 3993) {
              if (3981 <= e && e <= 3991) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 4038) {
              if (3993 <= e && e <= 4028) return t.CLUSTER_BREAK.EXTEND;
            } else if (e === 4038) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 7204) {
            if (e < 6448) {
              if (e < 5938) {
                if (e < 4226) {
                  if (e < 4157) {
                    if (e < 4146) {
                      if (e < 4145) {
                        if (4141 <= e && e <= 4144) return t.CLUSTER_BREAK.EXTEND;
                      } else if (e === 4145) return t.CLUSTER_BREAK.SPACINGMARK;
                    } else if (e < 4153) {
                      if (4146 <= e && e <= 4151) return t.CLUSTER_BREAK.EXTEND;
                    } else if (e < 4155) {
                      if (4153 <= e && e <= 4154) return t.CLUSTER_BREAK.EXTEND;
                    } else if (4155 <= e && e <= 4156) return t.CLUSTER_BREAK.SPACINGMARK;
                  } else if (e < 4184) {
                    if (e < 4182) {
                      if (4157 <= e && e <= 4158) return t.CLUSTER_BREAK.EXTEND;
                    } else if (4182 <= e && e <= 4183) return t.CLUSTER_BREAK.SPACINGMARK;
                  } else if (e < 4190) {
                    if (4184 <= e && e <= 4185) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e < 4209) {
                    if (4190 <= e && e <= 4192) return t.CLUSTER_BREAK.EXTEND;
                  } else if (4209 <= e && e <= 4212) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 4352) {
                  if (e < 4229) {
                    if (e === 4226) return t.CLUSTER_BREAK.EXTEND;
                    if (e === 4228) return t.CLUSTER_BREAK.SPACINGMARK;
                  } else if (e < 4237) {
                    if (4229 <= e && e <= 4230) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e === 4237 || e === 4253) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 4957) {
                  if (e < 4448) {
                    if (4352 <= e && e <= 4447) return t.CLUSTER_BREAK.L;
                  } else if (e < 4520) {
                    if (4448 <= e && e <= 4519) return t.CLUSTER_BREAK.V;
                  } else if (4520 <= e && e <= 4607) return t.CLUSTER_BREAK.T;
                } else if (e < 5906) {
                  if (4957 <= e && e <= 4959) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 5909) {
                  if (5906 <= e && e <= 5908) return t.CLUSTER_BREAK.EXTEND;
                } else if (e === 5909) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 6089) {
                if (e < 6070) {
                  if (e < 5970) {
                    if (e < 5940) {
                      if (5938 <= e && e <= 5939) return t.CLUSTER_BREAK.EXTEND;
                    } else if (e === 5940) return t.CLUSTER_BREAK.SPACINGMARK;
                  } else if (e < 6002) {
                    if (5970 <= e && e <= 5971) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e < 6068) {
                    if (6002 <= e && e <= 6003) return t.CLUSTER_BREAK.EXTEND;
                  } else if (6068 <= e && e <= 6069) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 6078) {
                  if (e < 6071) {
                    if (e === 6070) return t.CLUSTER_BREAK.SPACINGMARK;
                  } else if (6071 <= e && e <= 6077) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 6086) {
                  if (6078 <= e && e <= 6085) return t.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 6087) {
                  if (e === 6086) return t.CLUSTER_BREAK.EXTEND;
                } else if (6087 <= e && e <= 6088) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 6277) if (e < 6155) {
                if (e < 6109) {
                  if (6089 <= e && e <= 6099) return t.CLUSTER_BREAK.EXTEND;
                } else if (e === 6109) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 6158) {
                if (6155 <= e && e <= 6157) return t.CLUSTER_BREAK.EXTEND;
              } else {
                if (e === 6158) return t.CLUSTER_BREAK.CONTROL;
                if (e === 6159) return t.CLUSTER_BREAK.EXTEND;
              }
              else if (e < 6435) {
                if (e < 6313) {
                  if (6277 <= e && e <= 6278) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 6432) {
                  if (e === 6313) return t.CLUSTER_BREAK.EXTEND;
                } else if (6432 <= e && e <= 6434) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 6439) {
                if (6435 <= e && e <= 6438) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 6441) {
                if (6439 <= e && e <= 6440) return t.CLUSTER_BREAK.EXTEND;
              } else if (6441 <= e && e <= 6443) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 6971) {
              if (e < 6744) if (e < 6681) {
                if (e < 6451) {
                  if (e < 6450) {
                    if (6448 <= e && e <= 6449) return t.CLUSTER_BREAK.SPACINGMARK;
                  } else if (e === 6450) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 6457) {
                  if (6451 <= e && e <= 6456) return t.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 6679) {
                  if (6457 <= e && e <= 6459) return t.CLUSTER_BREAK.EXTEND;
                } else if (6679 <= e && e <= 6680) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 6741) {
                if (e < 6683) {
                  if (6681 <= e && e <= 6682) return t.CLUSTER_BREAK.SPACINGMARK;
                } else if (e === 6683) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 6742) {
                if (e === 6741) return t.CLUSTER_BREAK.SPACINGMARK;
              } else {
                if (e === 6742) return t.CLUSTER_BREAK.EXTEND;
                if (e === 6743) return t.CLUSTER_BREAK.SPACINGMARK;
              }
              else if (e < 6771) {
                if (e < 6754) {
                  if (e < 6752) {
                    if (6744 <= e && e <= 6750) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e === 6752) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 6757) {
                  if (e === 6754) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 6765) {
                  if (6757 <= e && e <= 6764) return t.CLUSTER_BREAK.EXTEND;
                } else if (6765 <= e && e <= 6770) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 6912) {
                if (e < 6783) {
                  if (6771 <= e && e <= 6780) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 6832) {
                  if (e === 6783) return t.CLUSTER_BREAK.EXTEND;
                } else if (6832 <= e && e <= 6862) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 6916) {
                if (6912 <= e && e <= 6915) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 6964) {
                if (e === 6916) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (6964 <= e && e <= 6970) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 7080) {
              if (e < 7019) {
                if (e < 6973) {
                  if (e === 6971) return t.CLUSTER_BREAK.SPACINGMARK;
                  if (e === 6972) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 6978) {
                  if (6973 <= e && e <= 6977) return t.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 6979) {
                  if (e === 6978) return t.CLUSTER_BREAK.EXTEND;
                } else if (6979 <= e && e <= 6980) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 7073) {
                if (e < 7040) {
                  if (7019 <= e && e <= 7027) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 7042) {
                  if (7040 <= e && e <= 7041) return t.CLUSTER_BREAK.EXTEND;
                } else if (e === 7042) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 7074) {
                if (e === 7073) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 7078) {
                if (7074 <= e && e <= 7077) return t.CLUSTER_BREAK.EXTEND;
              } else if (7078 <= e && e <= 7079) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 7144) if (e < 7083) {
              if (e < 7082) {
                if (7080 <= e && e <= 7081) return t.CLUSTER_BREAK.EXTEND;
              } else if (e === 7082) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 7142) {
              if (7083 <= e && e <= 7085) return t.CLUSTER_BREAK.EXTEND;
            } else {
              if (e === 7142) return t.CLUSTER_BREAK.EXTEND;
              if (e === 7143) return t.CLUSTER_BREAK.SPACINGMARK;
            }
            else if (e < 7150) {
              if (e < 7146) {
                if (7144 <= e && e <= 7145) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 7149) {
                if (7146 <= e && e <= 7148) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e === 7149) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 7151) {
              if (e === 7150) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 7154) {
              if (7151 <= e && e <= 7153) return t.CLUSTER_BREAK.EXTEND;
            } else if (7154 <= e && e <= 7155) return t.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 43346) {
            if (e < 11647) {
              if (e < 7415) {
                if (e < 7380) {
                  if (e < 7220) {
                    if (e < 7212) {
                      if (7204 <= e && e <= 7211) return t.CLUSTER_BREAK.SPACINGMARK;
                    } else if (7212 <= e && e <= 7219) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e < 7222) {
                    if (7220 <= e && e <= 7221) return t.CLUSTER_BREAK.SPACINGMARK;
                  } else if (e < 7376) {
                    if (7222 <= e && e <= 7223) return t.CLUSTER_BREAK.EXTEND;
                  } else if (7376 <= e && e <= 7378) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 7394) {
                  if (e < 7393) {
                    if (7380 <= e && e <= 7392) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e === 7393) return t.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 7405) {
                  if (7394 <= e && e <= 7400) return t.CLUSTER_BREAK.EXTEND;
                } else if (e === 7405 || e === 7412) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 8205) if (e < 7616) {
                if (e < 7416) {
                  if (e === 7415) return t.CLUSTER_BREAK.SPACINGMARK;
                } else if (7416 <= e && e <= 7417) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 8203) {
                if (7616 <= e && e <= 7679) return t.CLUSTER_BREAK.EXTEND;
              } else {
                if (e === 8203) return t.CLUSTER_BREAK.CONTROL;
                if (e === 8204) return t.CLUSTER_BREAK.EXTEND;
              }
              else if (e < 8288) {
                if (e < 8206) {
                  if (e === 8205) return t.CLUSTER_BREAK.ZWJ;
                } else if (e < 8232) {
                  if (8206 <= e && e <= 8207) return t.CLUSTER_BREAK.CONTROL;
                } else if (8232 <= e && e <= 8238) return t.CLUSTER_BREAK.CONTROL;
              } else if (e < 8400) {
                if (8288 <= e && e <= 8303) return t.CLUSTER_BREAK.CONTROL;
              } else if (e < 11503) {
                if (8400 <= e && e <= 8432) return t.CLUSTER_BREAK.EXTEND;
              } else if (11503 <= e && e <= 11505) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 43043) {
              if (e < 42612) {
                if (e < 12330) {
                  if (e < 11744) {
                    if (e === 11647) return t.CLUSTER_BREAK.EXTEND;
                  } else if (11744 <= e && e <= 11775) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 12441) {
                  if (12330 <= e && e <= 12335) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 42607) {
                  if (12441 <= e && e <= 12442) return t.CLUSTER_BREAK.EXTEND;
                } else if (42607 <= e && e <= 42610) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 43010) {
                if (e < 42654) {
                  if (42612 <= e && e <= 42621) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 42736) {
                  if (42654 <= e && e <= 42655) return t.CLUSTER_BREAK.EXTEND;
                } else if (42736 <= e && e <= 42737) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 43014) {
                if (e === 43010) return t.CLUSTER_BREAK.EXTEND;
              } else if (e === 43014 || e === 43019) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 43188) {
              if (e < 43047) {
                if (e < 43045) {
                  if (43043 <= e && e <= 43044) return t.CLUSTER_BREAK.SPACINGMARK;
                } else if (43045 <= e && e <= 43046) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 43052) {
                if (e === 43047) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 43136) {
                if (e === 43052) return t.CLUSTER_BREAK.EXTEND;
              } else if (43136 <= e && e <= 43137) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 43263) {
              if (e < 43204) {
                if (43188 <= e && e <= 43203) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 43232) {
                if (43204 <= e && e <= 43205) return t.CLUSTER_BREAK.EXTEND;
              } else if (43232 <= e && e <= 43249) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 43302) {
              if (e === 43263) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 43335) {
              if (43302 <= e && e <= 43309) return t.CLUSTER_BREAK.EXTEND;
            } else if (43335 <= e && e <= 43345) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 43698) {
            if (e < 43493) {
              if (e < 43444) if (e < 43392) {
                if (e < 43360) {
                  if (43346 <= e && e <= 43347) return t.CLUSTER_BREAK.SPACINGMARK;
                } else if (43360 <= e && e <= 43388) return t.CLUSTER_BREAK.L;
              } else if (e < 43395) {
                if (43392 <= e && e <= 43394) return t.CLUSTER_BREAK.EXTEND;
              } else {
                if (e === 43395) return t.CLUSTER_BREAK.SPACINGMARK;
                if (e === 43443) return t.CLUSTER_BREAK.EXTEND;
              }
              else if (e < 43450) {
                if (e < 43446) {
                  if (43444 <= e && e <= 43445) return t.CLUSTER_BREAK.SPACINGMARK;
                } else if (43446 <= e && e <= 43449) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 43452) {
                if (43450 <= e && e <= 43451) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 43454) {
                if (43452 <= e && e <= 43453) return t.CLUSTER_BREAK.EXTEND;
              } else if (43454 <= e && e <= 43456) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 43573) {
              if (e < 43567) {
                if (e < 43561) {
                  if (e === 43493) return t.CLUSTER_BREAK.EXTEND;
                } else if (43561 <= e && e <= 43566) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 43569) {
                if (43567 <= e && e <= 43568) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 43571) {
                if (43569 <= e && e <= 43570) return t.CLUSTER_BREAK.EXTEND;
              } else if (43571 <= e && e <= 43572) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 43597) {
              if (e < 43587) {
                if (43573 <= e && e <= 43574) return t.CLUSTER_BREAK.EXTEND;
              } else if (e === 43587 || e === 43596) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 43644) {
              if (e === 43597) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (e === 43644 || e === 43696) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 44006) {
            if (e < 43756) if (e < 43710) {
              if (e < 43703) {
                if (43698 <= e && e <= 43700) return t.CLUSTER_BREAK.EXTEND;
              } else if (43703 <= e && e <= 43704) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 43713) {
              if (43710 <= e && e <= 43711) return t.CLUSTER_BREAK.EXTEND;
            } else {
              if (e === 43713) return t.CLUSTER_BREAK.EXTEND;
              if (e === 43755) return t.CLUSTER_BREAK.SPACINGMARK;
            }
            else if (e < 43766) {
              if (e < 43758) {
                if (43756 <= e && e <= 43757) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 43765) {
                if (43758 <= e && e <= 43759) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e === 43765) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 44003) {
              if (e === 43766) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 44005) {
              if (44003 <= e && e <= 44004) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (e === 44005) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 44032) if (e < 44009) {
            if (e < 44008) {
              if (44006 <= e && e <= 44007) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (e === 44008) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 44012) {
            if (44009 <= e && e <= 44010) return t.CLUSTER_BREAK.SPACINGMARK;
          } else {
            if (e === 44012) return t.CLUSTER_BREAK.SPACINGMARK;
            if (e === 44013) return t.CLUSTER_BREAK.EXTEND;
          }
          else if (e < 44061) {
            if (e < 44033) {
              if (e === 44032) return t.CLUSTER_BREAK.LV;
            } else if (e < 44060) {
              if (44033 <= e && e <= 44059) return t.CLUSTER_BREAK.LVT;
            } else if (e === 44060) return t.CLUSTER_BREAK.LV;
          } else if (e < 44088) {
            if (44061 <= e && e <= 44087) return t.CLUSTER_BREAK.LVT;
          } else if (e < 44089) {
            if (e === 44088) return t.CLUSTER_BREAK.LV;
          } else if (44089 <= e && e <= 44115) return t.CLUSTER_BREAK.LVT;
        } else if (e < 46497) {
          if (e < 45293) {
            if (e < 44704) {
              if (e < 44397) {
                if (e < 44256) {
                  if (e < 44173) {
                    if (e < 44144) {
                      if (e < 44117) {
                        if (e === 44116) return t.CLUSTER_BREAK.LV;
                      } else if (44117 <= e && e <= 44143) return t.CLUSTER_BREAK.LVT;
                    } else if (e < 44145) {
                      if (e === 44144) return t.CLUSTER_BREAK.LV;
                    } else if (e < 44172) {
                      if (44145 <= e && e <= 44171) return t.CLUSTER_BREAK.LVT;
                    } else if (e === 44172) return t.CLUSTER_BREAK.LV;
                  } else if (e < 44201) {
                    if (e < 44200) {
                      if (44173 <= e && e <= 44199) return t.CLUSTER_BREAK.LVT;
                    } else if (e === 44200) return t.CLUSTER_BREAK.LV;
                  } else if (e < 44228) {
                    if (44201 <= e && e <= 44227) return t.CLUSTER_BREAK.LVT;
                  } else if (e < 44229) {
                    if (e === 44228) return t.CLUSTER_BREAK.LV;
                  } else if (44229 <= e && e <= 44255) return t.CLUSTER_BREAK.LVT;
                } else if (e < 44313) {
                  if (e < 44284) {
                    if (e < 44257) {
                      if (e === 44256) return t.CLUSTER_BREAK.LV;
                    } else if (44257 <= e && e <= 44283) return t.CLUSTER_BREAK.LVT;
                  } else if (e < 44285) {
                    if (e === 44284) return t.CLUSTER_BREAK.LV;
                  } else if (e < 44312) {
                    if (44285 <= e && e <= 44311) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 44312) return t.CLUSTER_BREAK.LV;
                } else if (e < 44368) {
                  if (e < 44340) {
                    if (44313 <= e && e <= 44339) return t.CLUSTER_BREAK.LVT;
                  } else if (e < 44341) {
                    if (e === 44340) return t.CLUSTER_BREAK.LV;
                  } else if (44341 <= e && e <= 44367) return t.CLUSTER_BREAK.LVT;
                } else if (e < 44369) {
                  if (e === 44368) return t.CLUSTER_BREAK.LV;
                } else if (e < 44396) {
                  if (44369 <= e && e <= 44395) return t.CLUSTER_BREAK.LVT;
                } else if (e === 44396) return t.CLUSTER_BREAK.LV;
              } else if (e < 44537) {
                if (e < 44480) {
                  if (e < 44425) {
                    if (e < 44424) {
                      if (44397 <= e && e <= 44423) return t.CLUSTER_BREAK.LVT;
                    } else if (e === 44424) return t.CLUSTER_BREAK.LV;
                  } else if (e < 44452) {
                    if (44425 <= e && e <= 44451) return t.CLUSTER_BREAK.LVT;
                  } else if (e < 44453) {
                    if (e === 44452) return t.CLUSTER_BREAK.LV;
                  } else if (44453 <= e && e <= 44479) return t.CLUSTER_BREAK.LVT;
                } else if (e < 44508) {
                  if (e < 44481) {
                    if (e === 44480) return t.CLUSTER_BREAK.LV;
                  } else if (44481 <= e && e <= 44507) return t.CLUSTER_BREAK.LVT;
                } else if (e < 44509) {
                  if (e === 44508) return t.CLUSTER_BREAK.LV;
                } else if (e < 44536) {
                  if (44509 <= e && e <= 44535) return t.CLUSTER_BREAK.LVT;
                } else if (e === 44536) return t.CLUSTER_BREAK.LV;
              } else if (e < 44620) {
                if (e < 44565) {
                  if (e < 44564) {
                    if (44537 <= e && e <= 44563) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 44564) return t.CLUSTER_BREAK.LV;
                } else if (e < 44592) {
                  if (44565 <= e && e <= 44591) return t.CLUSTER_BREAK.LVT;
                } else if (e < 44593) {
                  if (e === 44592) return t.CLUSTER_BREAK.LV;
                } else if (44593 <= e && e <= 44619) return t.CLUSTER_BREAK.LVT;
              } else if (e < 44649) {
                if (e < 44621) {
                  if (e === 44620) return t.CLUSTER_BREAK.LV;
                } else if (e < 44648) {
                  if (44621 <= e && e <= 44647) return t.CLUSTER_BREAK.LVT;
                } else if (e === 44648) return t.CLUSTER_BREAK.LV;
              } else if (e < 44676) {
                if (44649 <= e && e <= 44675) return t.CLUSTER_BREAK.LVT;
              } else if (e < 44677) {
                if (e === 44676) return t.CLUSTER_BREAK.LV;
              } else if (44677 <= e && e <= 44703) return t.CLUSTER_BREAK.LVT;
            } else if (e < 44985) {
              if (e < 44844) {
                if (e < 44761) {
                  if (e < 44732) {
                    if (e < 44705) {
                      if (e === 44704) return t.CLUSTER_BREAK.LV;
                    } else if (44705 <= e && e <= 44731) return t.CLUSTER_BREAK.LVT;
                  } else if (e < 44733) {
                    if (e === 44732) return t.CLUSTER_BREAK.LV;
                  } else if (e < 44760) {
                    if (44733 <= e && e <= 44759) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 44760) return t.CLUSTER_BREAK.LV;
                } else if (e < 44789) {
                  if (e < 44788) {
                    if (44761 <= e && e <= 44787) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 44788) return t.CLUSTER_BREAK.LV;
                } else if (e < 44816) {
                  if (44789 <= e && e <= 44815) return t.CLUSTER_BREAK.LVT;
                } else if (e < 44817) {
                  if (e === 44816) return t.CLUSTER_BREAK.LV;
                } else if (44817 <= e && e <= 44843) return t.CLUSTER_BREAK.LVT;
              } else if (e < 44901) {
                if (e < 44872) {
                  if (e < 44845) {
                    if (e === 44844) return t.CLUSTER_BREAK.LV;
                  } else if (44845 <= e && e <= 44871) return t.CLUSTER_BREAK.LVT;
                } else if (e < 44873) {
                  if (e === 44872) return t.CLUSTER_BREAK.LV;
                } else if (e < 44900) {
                  if (44873 <= e && e <= 44899) return t.CLUSTER_BREAK.LVT;
                } else if (e === 44900) return t.CLUSTER_BREAK.LV;
              } else if (e < 44956) {
                if (e < 44928) {
                  if (44901 <= e && e <= 44927) return t.CLUSTER_BREAK.LVT;
                } else if (e < 44929) {
                  if (e === 44928) return t.CLUSTER_BREAK.LV;
                } else if (44929 <= e && e <= 44955) return t.CLUSTER_BREAK.LVT;
              } else if (e < 44957) {
                if (e === 44956) return t.CLUSTER_BREAK.LV;
              } else if (e < 44984) {
                if (44957 <= e && e <= 44983) return t.CLUSTER_BREAK.LVT;
              } else if (e === 44984) return t.CLUSTER_BREAK.LV;
            } else if (e < 45152) {
              if (e < 45068) {
                if (e < 45013) {
                  if (e < 45012) {
                    if (44985 <= e && e <= 45011) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 45012) return t.CLUSTER_BREAK.LV;
                } else if (e < 45040) {
                  if (45013 <= e && e <= 45039) return t.CLUSTER_BREAK.LVT;
                } else if (e < 45041) {
                  if (e === 45040) return t.CLUSTER_BREAK.LV;
                } else if (45041 <= e && e <= 45067) return t.CLUSTER_BREAK.LVT;
              } else if (e < 45097) {
                if (e < 45069) {
                  if (e === 45068) return t.CLUSTER_BREAK.LV;
                } else if (e < 45096) {
                  if (45069 <= e && e <= 45095) return t.CLUSTER_BREAK.LVT;
                } else if (e === 45096) return t.CLUSTER_BREAK.LV;
              } else if (e < 45124) {
                if (45097 <= e && e <= 45123) return t.CLUSTER_BREAK.LVT;
              } else if (e < 45125) {
                if (e === 45124) return t.CLUSTER_BREAK.LV;
              } else if (45125 <= e && e <= 45151) return t.CLUSTER_BREAK.LVT;
            } else if (e < 45209) {
              if (e < 45180) {
                if (e < 45153) {
                  if (e === 45152) return t.CLUSTER_BREAK.LV;
                } else if (45153 <= e && e <= 45179) return t.CLUSTER_BREAK.LVT;
              } else if (e < 45181) {
                if (e === 45180) return t.CLUSTER_BREAK.LV;
              } else if (e < 45208) {
                if (45181 <= e && e <= 45207) return t.CLUSTER_BREAK.LVT;
              } else if (e === 45208) return t.CLUSTER_BREAK.LV;
            } else if (e < 45264) {
              if (e < 45236) {
                if (45209 <= e && e <= 45235) return t.CLUSTER_BREAK.LVT;
              } else if (e < 45237) {
                if (e === 45236) return t.CLUSTER_BREAK.LV;
              } else if (45237 <= e && e <= 45263) return t.CLUSTER_BREAK.LVT;
            } else if (e < 45265) {
              if (e === 45264) return t.CLUSTER_BREAK.LV;
            } else if (e < 45292) {
              if (45265 <= e && e <= 45291) return t.CLUSTER_BREAK.LVT;
            } else if (e === 45292) return t.CLUSTER_BREAK.LV;
          } else if (e < 45908) {
            if (e < 45600) {
              if (e < 45433) {
                if (e < 45376) {
                  if (e < 45321) {
                    if (e < 45320) {
                      if (45293 <= e && e <= 45319) return t.CLUSTER_BREAK.LVT;
                    } else if (e === 45320) return t.CLUSTER_BREAK.LV;
                  } else if (e < 45348) {
                    if (45321 <= e && e <= 45347) return t.CLUSTER_BREAK.LVT;
                  } else if (e < 45349) {
                    if (e === 45348) return t.CLUSTER_BREAK.LV;
                  } else if (45349 <= e && e <= 45375) return t.CLUSTER_BREAK.LVT;
                } else if (e < 45404) {
                  if (e < 45377) {
                    if (e === 45376) return t.CLUSTER_BREAK.LV;
                  } else if (45377 <= e && e <= 45403) return t.CLUSTER_BREAK.LVT;
                } else if (e < 45405) {
                  if (e === 45404) return t.CLUSTER_BREAK.LV;
                } else if (e < 45432) {
                  if (45405 <= e && e <= 45431) return t.CLUSTER_BREAK.LVT;
                } else if (e === 45432) return t.CLUSTER_BREAK.LV;
              } else if (e < 45516) {
                if (e < 45461) {
                  if (e < 45460) {
                    if (45433 <= e && e <= 45459) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 45460) return t.CLUSTER_BREAK.LV;
                } else if (e < 45488) {
                  if (45461 <= e && e <= 45487) return t.CLUSTER_BREAK.LVT;
                } else if (e < 45489) {
                  if (e === 45488) return t.CLUSTER_BREAK.LV;
                } else if (45489 <= e && e <= 45515) return t.CLUSTER_BREAK.LVT;
              } else if (e < 45545) {
                if (e < 45517) {
                  if (e === 45516) return t.CLUSTER_BREAK.LV;
                } else if (e < 45544) {
                  if (45517 <= e && e <= 45543) return t.CLUSTER_BREAK.LVT;
                } else if (e === 45544) return t.CLUSTER_BREAK.LV;
              } else if (e < 45572) {
                if (45545 <= e && e <= 45571) return t.CLUSTER_BREAK.LVT;
              } else if (e < 45573) {
                if (e === 45572) return t.CLUSTER_BREAK.LV;
              } else if (45573 <= e && e <= 45599) return t.CLUSTER_BREAK.LVT;
            } else if (e < 45741) {
              if (e < 45657) {
                if (e < 45628) {
                  if (e < 45601) {
                    if (e === 45600) return t.CLUSTER_BREAK.LV;
                  } else if (45601 <= e && e <= 45627) return t.CLUSTER_BREAK.LVT;
                } else if (e < 45629) {
                  if (e === 45628) return t.CLUSTER_BREAK.LV;
                } else if (e < 45656) {
                  if (45629 <= e && e <= 45655) return t.CLUSTER_BREAK.LVT;
                } else if (e === 45656) return t.CLUSTER_BREAK.LV;
              } else if (e < 45712) {
                if (e < 45684) {
                  if (45657 <= e && e <= 45683) return t.CLUSTER_BREAK.LVT;
                } else if (e < 45685) {
                  if (e === 45684) return t.CLUSTER_BREAK.LV;
                } else if (45685 <= e && e <= 45711) return t.CLUSTER_BREAK.LVT;
              } else if (e < 45713) {
                if (e === 45712) return t.CLUSTER_BREAK.LV;
              } else if (e < 45740) {
                if (45713 <= e && e <= 45739) return t.CLUSTER_BREAK.LVT;
              } else if (e === 45740) return t.CLUSTER_BREAK.LV;
            } else if (e < 45824) {
              if (e < 45769) {
                if (e < 45768) {
                  if (45741 <= e && e <= 45767) return t.CLUSTER_BREAK.LVT;
                } else if (e === 45768) return t.CLUSTER_BREAK.LV;
              } else if (e < 45796) {
                if (45769 <= e && e <= 45795) return t.CLUSTER_BREAK.LVT;
              } else if (e < 45797) {
                if (e === 45796) return t.CLUSTER_BREAK.LV;
              } else if (45797 <= e && e <= 45823) return t.CLUSTER_BREAK.LVT;
            } else if (e < 45853) {
              if (e < 45825) {
                if (e === 45824) return t.CLUSTER_BREAK.LV;
              } else if (e < 45852) {
                if (45825 <= e && e <= 45851) return t.CLUSTER_BREAK.LVT;
              } else if (e === 45852) return t.CLUSTER_BREAK.LV;
            } else if (e < 45880) {
              if (45853 <= e && e <= 45879) return t.CLUSTER_BREAK.LVT;
            } else if (e < 45881) {
              if (e === 45880) return t.CLUSTER_BREAK.LV;
            } else if (45881 <= e && e <= 45907) return t.CLUSTER_BREAK.LVT;
          } else if (e < 46189) {
            if (e < 46048) {
              if (e < 45965) {
                if (e < 45936) {
                  if (e < 45909) {
                    if (e === 45908) return t.CLUSTER_BREAK.LV;
                  } else if (45909 <= e && e <= 45935) return t.CLUSTER_BREAK.LVT;
                } else if (e < 45937) {
                  if (e === 45936) return t.CLUSTER_BREAK.LV;
                } else if (e < 45964) {
                  if (45937 <= e && e <= 45963) return t.CLUSTER_BREAK.LVT;
                } else if (e === 45964) return t.CLUSTER_BREAK.LV;
              } else if (e < 45993) {
                if (e < 45992) {
                  if (45965 <= e && e <= 45991) return t.CLUSTER_BREAK.LVT;
                } else if (e === 45992) return t.CLUSTER_BREAK.LV;
              } else if (e < 46020) {
                if (45993 <= e && e <= 46019) return t.CLUSTER_BREAK.LVT;
              } else if (e < 46021) {
                if (e === 46020) return t.CLUSTER_BREAK.LV;
              } else if (46021 <= e && e <= 46047) return t.CLUSTER_BREAK.LVT;
            } else if (e < 46105) {
              if (e < 46076) {
                if (e < 46049) {
                  if (e === 46048) return t.CLUSTER_BREAK.LV;
                } else if (46049 <= e && e <= 46075) return t.CLUSTER_BREAK.LVT;
              } else if (e < 46077) {
                if (e === 46076) return t.CLUSTER_BREAK.LV;
              } else if (e < 46104) {
                if (46077 <= e && e <= 46103) return t.CLUSTER_BREAK.LVT;
              } else if (e === 46104) return t.CLUSTER_BREAK.LV;
            } else if (e < 46160) {
              if (e < 46132) {
                if (46105 <= e && e <= 46131) return t.CLUSTER_BREAK.LVT;
              } else if (e < 46133) {
                if (e === 46132) return t.CLUSTER_BREAK.LV;
              } else if (46133 <= e && e <= 46159) return t.CLUSTER_BREAK.LVT;
            } else if (e < 46161) {
              if (e === 46160) return t.CLUSTER_BREAK.LV;
            } else if (e < 46188) {
              if (46161 <= e && e <= 46187) return t.CLUSTER_BREAK.LVT;
            } else if (e === 46188) return t.CLUSTER_BREAK.LV;
          } else if (e < 46356) {
            if (e < 46272) {
              if (e < 46217) {
                if (e < 46216) {
                  if (46189 <= e && e <= 46215) return t.CLUSTER_BREAK.LVT;
                } else if (e === 46216) return t.CLUSTER_BREAK.LV;
              } else if (e < 46244) {
                if (46217 <= e && e <= 46243) return t.CLUSTER_BREAK.LVT;
              } else if (e < 46245) {
                if (e === 46244) return t.CLUSTER_BREAK.LV;
              } else if (46245 <= e && e <= 46271) return t.CLUSTER_BREAK.LVT;
            } else if (e < 46301) {
              if (e < 46273) {
                if (e === 46272) return t.CLUSTER_BREAK.LV;
              } else if (e < 46300) {
                if (46273 <= e && e <= 46299) return t.CLUSTER_BREAK.LVT;
              } else if (e === 46300) return t.CLUSTER_BREAK.LV;
            } else if (e < 46328) {
              if (46301 <= e && e <= 46327) return t.CLUSTER_BREAK.LVT;
            } else if (e < 46329) {
              if (e === 46328) return t.CLUSTER_BREAK.LV;
            } else if (46329 <= e && e <= 46355) return t.CLUSTER_BREAK.LVT;
          } else if (e < 46413) {
            if (e < 46384) {
              if (e < 46357) {
                if (e === 46356) return t.CLUSTER_BREAK.LV;
              } else if (46357 <= e && e <= 46383) return t.CLUSTER_BREAK.LVT;
            } else if (e < 46385) {
              if (e === 46384) return t.CLUSTER_BREAK.LV;
            } else if (e < 46412) {
              if (46385 <= e && e <= 46411) return t.CLUSTER_BREAK.LVT;
            } else if (e === 46412) return t.CLUSTER_BREAK.LV;
          } else if (e < 46468) {
            if (e < 46440) {
              if (46413 <= e && e <= 46439) return t.CLUSTER_BREAK.LVT;
            } else if (e < 46441) {
              if (e === 46440) return t.CLUSTER_BREAK.LV;
            } else if (46441 <= e && e <= 46467) return t.CLUSTER_BREAK.LVT;
          } else if (e < 46469) {
            if (e === 46468) return t.CLUSTER_BREAK.LV;
          } else if (e < 46496) {
            if (46469 <= e && e <= 46495) return t.CLUSTER_BREAK.LVT;
          } else if (e === 46496) return t.CLUSTER_BREAK.LV;
        } else if (e < 47701) {
          if (e < 47112) {
            if (e < 46804) {
              if (e < 46637) {
                if (e < 46580) {
                  if (e < 46525) {
                    if (e < 46524) {
                      if (46497 <= e && e <= 46523) return t.CLUSTER_BREAK.LVT;
                    } else if (e === 46524) return t.CLUSTER_BREAK.LV;
                  } else if (e < 46552) {
                    if (46525 <= e && e <= 46551) return t.CLUSTER_BREAK.LVT;
                  } else if (e < 46553) {
                    if (e === 46552) return t.CLUSTER_BREAK.LV;
                  } else if (46553 <= e && e <= 46579) return t.CLUSTER_BREAK.LVT;
                } else if (e < 46608) {
                  if (e < 46581) {
                    if (e === 46580) return t.CLUSTER_BREAK.LV;
                  } else if (46581 <= e && e <= 46607) return t.CLUSTER_BREAK.LVT;
                } else if (e < 46609) {
                  if (e === 46608) return t.CLUSTER_BREAK.LV;
                } else if (e < 46636) {
                  if (46609 <= e && e <= 46635) return t.CLUSTER_BREAK.LVT;
                } else if (e === 46636) return t.CLUSTER_BREAK.LV;
              } else if (e < 46720) {
                if (e < 46665) {
                  if (e < 46664) {
                    if (46637 <= e && e <= 46663) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 46664) return t.CLUSTER_BREAK.LV;
                } else if (e < 46692) {
                  if (46665 <= e && e <= 46691) return t.CLUSTER_BREAK.LVT;
                } else if (e < 46693) {
                  if (e === 46692) return t.CLUSTER_BREAK.LV;
                } else if (46693 <= e && e <= 46719) return t.CLUSTER_BREAK.LVT;
              } else if (e < 46749) {
                if (e < 46721) {
                  if (e === 46720) return t.CLUSTER_BREAK.LV;
                } else if (e < 46748) {
                  if (46721 <= e && e <= 46747) return t.CLUSTER_BREAK.LVT;
                } else if (e === 46748) return t.CLUSTER_BREAK.LV;
              } else if (e < 46776) {
                if (46749 <= e && e <= 46775) return t.CLUSTER_BREAK.LVT;
              } else if (e < 46777) {
                if (e === 46776) return t.CLUSTER_BREAK.LV;
              } else if (46777 <= e && e <= 46803) return t.CLUSTER_BREAK.LVT;
            } else if (e < 46945) {
              if (e < 46861) {
                if (e < 46832) {
                  if (e < 46805) {
                    if (e === 46804) return t.CLUSTER_BREAK.LV;
                  } else if (46805 <= e && e <= 46831) return t.CLUSTER_BREAK.LVT;
                } else if (e < 46833) {
                  if (e === 46832) return t.CLUSTER_BREAK.LV;
                } else if (e < 46860) {
                  if (46833 <= e && e <= 46859) return t.CLUSTER_BREAK.LVT;
                } else if (e === 46860) return t.CLUSTER_BREAK.LV;
              } else if (e < 46916) {
                if (e < 46888) {
                  if (46861 <= e && e <= 46887) return t.CLUSTER_BREAK.LVT;
                } else if (e < 46889) {
                  if (e === 46888) return t.CLUSTER_BREAK.LV;
                } else if (46889 <= e && e <= 46915) return t.CLUSTER_BREAK.LVT;
              } else if (e < 46917) {
                if (e === 46916) return t.CLUSTER_BREAK.LV;
              } else if (e < 46944) {
                if (46917 <= e && e <= 46943) return t.CLUSTER_BREAK.LVT;
              } else if (e === 46944) return t.CLUSTER_BREAK.LV;
            } else if (e < 47028) {
              if (e < 46973) {
                if (e < 46972) {
                  if (46945 <= e && e <= 46971) return t.CLUSTER_BREAK.LVT;
                } else if (e === 46972) return t.CLUSTER_BREAK.LV;
              } else if (e < 47e3) {
                if (46973 <= e && e <= 46999) return t.CLUSTER_BREAK.LVT;
              } else if (e < 47001) {
                if (e === 47e3) return t.CLUSTER_BREAK.LV;
              } else if (47001 <= e && e <= 47027) return t.CLUSTER_BREAK.LVT;
            } else if (e < 47057) {
              if (e < 47029) {
                if (e === 47028) return t.CLUSTER_BREAK.LV;
              } else if (e < 47056) {
                if (47029 <= e && e <= 47055) return t.CLUSTER_BREAK.LVT;
              } else if (e === 47056) return t.CLUSTER_BREAK.LV;
            } else if (e < 47084) {
              if (47057 <= e && e <= 47083) return t.CLUSTER_BREAK.LVT;
            } else if (e < 47085) {
              if (e === 47084) return t.CLUSTER_BREAK.LV;
            } else if (47085 <= e && e <= 47111) return t.CLUSTER_BREAK.LVT;
          } else if (e < 47393) {
            if (e < 47252) {
              if (e < 47169) {
                if (e < 47140) {
                  if (e < 47113) {
                    if (e === 47112) return t.CLUSTER_BREAK.LV;
                  } else if (47113 <= e && e <= 47139) return t.CLUSTER_BREAK.LVT;
                } else if (e < 47141) {
                  if (e === 47140) return t.CLUSTER_BREAK.LV;
                } else if (e < 47168) {
                  if (47141 <= e && e <= 47167) return t.CLUSTER_BREAK.LVT;
                } else if (e === 47168) return t.CLUSTER_BREAK.LV;
              } else if (e < 47197) {
                if (e < 47196) {
                  if (47169 <= e && e <= 47195) return t.CLUSTER_BREAK.LVT;
                } else if (e === 47196) return t.CLUSTER_BREAK.LV;
              } else if (e < 47224) {
                if (47197 <= e && e <= 47223) return t.CLUSTER_BREAK.LVT;
              } else if (e < 47225) {
                if (e === 47224) return t.CLUSTER_BREAK.LV;
              } else if (47225 <= e && e <= 47251) return t.CLUSTER_BREAK.LVT;
            } else if (e < 47309) {
              if (e < 47280) {
                if (e < 47253) {
                  if (e === 47252) return t.CLUSTER_BREAK.LV;
                } else if (47253 <= e && e <= 47279) return t.CLUSTER_BREAK.LVT;
              } else if (e < 47281) {
                if (e === 47280) return t.CLUSTER_BREAK.LV;
              } else if (e < 47308) {
                if (47281 <= e && e <= 47307) return t.CLUSTER_BREAK.LVT;
              } else if (e === 47308) return t.CLUSTER_BREAK.LV;
            } else if (e < 47364) {
              if (e < 47336) {
                if (47309 <= e && e <= 47335) return t.CLUSTER_BREAK.LVT;
              } else if (e < 47337) {
                if (e === 47336) return t.CLUSTER_BREAK.LV;
              } else if (47337 <= e && e <= 47363) return t.CLUSTER_BREAK.LVT;
            } else if (e < 47365) {
              if (e === 47364) return t.CLUSTER_BREAK.LV;
            } else if (e < 47392) {
              if (47365 <= e && e <= 47391) return t.CLUSTER_BREAK.LVT;
            } else if (e === 47392) return t.CLUSTER_BREAK.LV;
          } else if (e < 47560) {
            if (e < 47476) {
              if (e < 47421) {
                if (e < 47420) {
                  if (47393 <= e && e <= 47419) return t.CLUSTER_BREAK.LVT;
                } else if (e === 47420) return t.CLUSTER_BREAK.LV;
              } else if (e < 47448) {
                if (47421 <= e && e <= 47447) return t.CLUSTER_BREAK.LVT;
              } else if (e < 47449) {
                if (e === 47448) return t.CLUSTER_BREAK.LV;
              } else if (47449 <= e && e <= 47475) return t.CLUSTER_BREAK.LVT;
            } else if (e < 47505) {
              if (e < 47477) {
                if (e === 47476) return t.CLUSTER_BREAK.LV;
              } else if (e < 47504) {
                if (47477 <= e && e <= 47503) return t.CLUSTER_BREAK.LVT;
              } else if (e === 47504) return t.CLUSTER_BREAK.LV;
            } else if (e < 47532) {
              if (47505 <= e && e <= 47531) return t.CLUSTER_BREAK.LVT;
            } else if (e < 47533) {
              if (e === 47532) return t.CLUSTER_BREAK.LV;
            } else if (47533 <= e && e <= 47559) return t.CLUSTER_BREAK.LVT;
          } else if (e < 47617) {
            if (e < 47588) {
              if (e < 47561) {
                if (e === 47560) return t.CLUSTER_BREAK.LV;
              } else if (47561 <= e && e <= 47587) return t.CLUSTER_BREAK.LVT;
            } else if (e < 47589) {
              if (e === 47588) return t.CLUSTER_BREAK.LV;
            } else if (e < 47616) {
              if (47589 <= e && e <= 47615) return t.CLUSTER_BREAK.LVT;
            } else if (e === 47616) return t.CLUSTER_BREAK.LV;
          } else if (e < 47672) {
            if (e < 47644) {
              if (47617 <= e && e <= 47643) return t.CLUSTER_BREAK.LVT;
            } else if (e < 47645) {
              if (e === 47644) return t.CLUSTER_BREAK.LV;
            } else if (47645 <= e && e <= 47671) return t.CLUSTER_BREAK.LVT;
          } else if (e < 47673) {
            if (e === 47672) return t.CLUSTER_BREAK.LV;
          } else if (e < 47700) {
            if (47673 <= e && e <= 47699) return t.CLUSTER_BREAK.LVT;
          } else if (e === 47700) return t.CLUSTER_BREAK.LV;
        } else if (e < 48316) {
          if (e < 48008) {
            if (e < 47841) {
              if (e < 47784) {
                if (e < 47729) {
                  if (e < 47728) {
                    if (47701 <= e && e <= 47727) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 47728) return t.CLUSTER_BREAK.LV;
                } else if (e < 47756) {
                  if (47729 <= e && e <= 47755) return t.CLUSTER_BREAK.LVT;
                } else if (e < 47757) {
                  if (e === 47756) return t.CLUSTER_BREAK.LV;
                } else if (47757 <= e && e <= 47783) return t.CLUSTER_BREAK.LVT;
              } else if (e < 47812) {
                if (e < 47785) {
                  if (e === 47784) return t.CLUSTER_BREAK.LV;
                } else if (47785 <= e && e <= 47811) return t.CLUSTER_BREAK.LVT;
              } else if (e < 47813) {
                if (e === 47812) return t.CLUSTER_BREAK.LV;
              } else if (e < 47840) {
                if (47813 <= e && e <= 47839) return t.CLUSTER_BREAK.LVT;
              } else if (e === 47840) return t.CLUSTER_BREAK.LV;
            } else if (e < 47924) {
              if (e < 47869) {
                if (e < 47868) {
                  if (47841 <= e && e <= 47867) return t.CLUSTER_BREAK.LVT;
                } else if (e === 47868) return t.CLUSTER_BREAK.LV;
              } else if (e < 47896) {
                if (47869 <= e && e <= 47895) return t.CLUSTER_BREAK.LVT;
              } else if (e < 47897) {
                if (e === 47896) return t.CLUSTER_BREAK.LV;
              } else if (47897 <= e && e <= 47923) return t.CLUSTER_BREAK.LVT;
            } else if (e < 47953) {
              if (e < 47925) {
                if (e === 47924) return t.CLUSTER_BREAK.LV;
              } else if (e < 47952) {
                if (47925 <= e && e <= 47951) return t.CLUSTER_BREAK.LVT;
              } else if (e === 47952) return t.CLUSTER_BREAK.LV;
            } else if (e < 47980) {
              if (47953 <= e && e <= 47979) return t.CLUSTER_BREAK.LVT;
            } else if (e < 47981) {
              if (e === 47980) return t.CLUSTER_BREAK.LV;
            } else if (47981 <= e && e <= 48007) return t.CLUSTER_BREAK.LVT;
          } else if (e < 48149) {
            if (e < 48065) {
              if (e < 48036) {
                if (e < 48009) {
                  if (e === 48008) return t.CLUSTER_BREAK.LV;
                } else if (48009 <= e && e <= 48035) return t.CLUSTER_BREAK.LVT;
              } else if (e < 48037) {
                if (e === 48036) return t.CLUSTER_BREAK.LV;
              } else if (e < 48064) {
                if (48037 <= e && e <= 48063) return t.CLUSTER_BREAK.LVT;
              } else if (e === 48064) return t.CLUSTER_BREAK.LV;
            } else if (e < 48120) {
              if (e < 48092) {
                if (48065 <= e && e <= 48091) return t.CLUSTER_BREAK.LVT;
              } else if (e < 48093) {
                if (e === 48092) return t.CLUSTER_BREAK.LV;
              } else if (48093 <= e && e <= 48119) return t.CLUSTER_BREAK.LVT;
            } else if (e < 48121) {
              if (e === 48120) return t.CLUSTER_BREAK.LV;
            } else if (e < 48148) {
              if (48121 <= e && e <= 48147) return t.CLUSTER_BREAK.LVT;
            } else if (e === 48148) return t.CLUSTER_BREAK.LV;
          } else if (e < 48232) {
            if (e < 48177) {
              if (e < 48176) {
                if (48149 <= e && e <= 48175) return t.CLUSTER_BREAK.LVT;
              } else if (e === 48176) return t.CLUSTER_BREAK.LV;
            } else if (e < 48204) {
              if (48177 <= e && e <= 48203) return t.CLUSTER_BREAK.LVT;
            } else if (e < 48205) {
              if (e === 48204) return t.CLUSTER_BREAK.LV;
            } else if (48205 <= e && e <= 48231) return t.CLUSTER_BREAK.LVT;
          } else if (e < 48261) {
            if (e < 48233) {
              if (e === 48232) return t.CLUSTER_BREAK.LV;
            } else if (e < 48260) {
              if (48233 <= e && e <= 48259) return t.CLUSTER_BREAK.LVT;
            } else if (e === 48260) return t.CLUSTER_BREAK.LV;
          } else if (e < 48288) {
            if (48261 <= e && e <= 48287) return t.CLUSTER_BREAK.LVT;
          } else if (e < 48289) {
            if (e === 48288) return t.CLUSTER_BREAK.LV;
          } else if (48289 <= e && e <= 48315) return t.CLUSTER_BREAK.LVT;
        } else if (e < 48597) {
          if (e < 48456) {
            if (e < 48373) {
              if (e < 48344) {
                if (e < 48317) {
                  if (e === 48316) return t.CLUSTER_BREAK.LV;
                } else if (48317 <= e && e <= 48343) return t.CLUSTER_BREAK.LVT;
              } else if (e < 48345) {
                if (e === 48344) return t.CLUSTER_BREAK.LV;
              } else if (e < 48372) {
                if (48345 <= e && e <= 48371) return t.CLUSTER_BREAK.LVT;
              } else if (e === 48372) return t.CLUSTER_BREAK.LV;
            } else if (e < 48401) {
              if (e < 48400) {
                if (48373 <= e && e <= 48399) return t.CLUSTER_BREAK.LVT;
              } else if (e === 48400) return t.CLUSTER_BREAK.LV;
            } else if (e < 48428) {
              if (48401 <= e && e <= 48427) return t.CLUSTER_BREAK.LVT;
            } else if (e < 48429) {
              if (e === 48428) return t.CLUSTER_BREAK.LV;
            } else if (48429 <= e && e <= 48455) return t.CLUSTER_BREAK.LVT;
          } else if (e < 48513) {
            if (e < 48484) {
              if (e < 48457) {
                if (e === 48456) return t.CLUSTER_BREAK.LV;
              } else if (48457 <= e && e <= 48483) return t.CLUSTER_BREAK.LVT;
            } else if (e < 48485) {
              if (e === 48484) return t.CLUSTER_BREAK.LV;
            } else if (e < 48512) {
              if (48485 <= e && e <= 48511) return t.CLUSTER_BREAK.LVT;
            } else if (e === 48512) return t.CLUSTER_BREAK.LV;
          } else if (e < 48568) {
            if (e < 48540) {
              if (48513 <= e && e <= 48539) return t.CLUSTER_BREAK.LVT;
            } else if (e < 48541) {
              if (e === 48540) return t.CLUSTER_BREAK.LV;
            } else if (48541 <= e && e <= 48567) return t.CLUSTER_BREAK.LVT;
          } else if (e < 48569) {
            if (e === 48568) return t.CLUSTER_BREAK.LV;
          } else if (e < 48596) {
            if (48569 <= e && e <= 48595) return t.CLUSTER_BREAK.LVT;
          } else if (e === 48596) return t.CLUSTER_BREAK.LV;
        } else if (e < 48764) {
          if (e < 48680) {
            if (e < 48625) {
              if (e < 48624) {
                if (48597 <= e && e <= 48623) return t.CLUSTER_BREAK.LVT;
              } else if (e === 48624) return t.CLUSTER_BREAK.LV;
            } else if (e < 48652) {
              if (48625 <= e && e <= 48651) return t.CLUSTER_BREAK.LVT;
            } else if (e < 48653) {
              if (e === 48652) return t.CLUSTER_BREAK.LV;
            } else if (48653 <= e && e <= 48679) return t.CLUSTER_BREAK.LVT;
          } else if (e < 48709) {
            if (e < 48681) {
              if (e === 48680) return t.CLUSTER_BREAK.LV;
            } else if (e < 48708) {
              if (48681 <= e && e <= 48707) return t.CLUSTER_BREAK.LVT;
            } else if (e === 48708) return t.CLUSTER_BREAK.LV;
          } else if (e < 48736) {
            if (48709 <= e && e <= 48735) return t.CLUSTER_BREAK.LVT;
          } else if (e < 48737) {
            if (e === 48736) return t.CLUSTER_BREAK.LV;
          } else if (48737 <= e && e <= 48763) return t.CLUSTER_BREAK.LVT;
        } else if (e < 48821) {
          if (e < 48792) {
            if (e < 48765) {
              if (e === 48764) return t.CLUSTER_BREAK.LV;
            } else if (48765 <= e && e <= 48791) return t.CLUSTER_BREAK.LVT;
          } else if (e < 48793) {
            if (e === 48792) return t.CLUSTER_BREAK.LV;
          } else if (e < 48820) {
            if (48793 <= e && e <= 48819) return t.CLUSTER_BREAK.LVT;
          } else if (e === 48820) return t.CLUSTER_BREAK.LV;
        } else if (e < 48876) {
          if (e < 48848) {
            if (48821 <= e && e <= 48847) return t.CLUSTER_BREAK.LVT;
          } else if (e < 48849) {
            if (e === 48848) return t.CLUSTER_BREAK.LV;
          } else if (48849 <= e && e <= 48875) return t.CLUSTER_BREAK.LVT;
        } else if (e < 48877) {
          if (e === 48876) return t.CLUSTER_BREAK.LV;
        } else if (e < 48904) {
          if (48877 <= e && e <= 48903) return t.CLUSTER_BREAK.LVT;
        } else if (e === 48904) return t.CLUSTER_BREAK.LV;
      } else if (e < 53720) {
        if (e < 51312) {
          if (e < 50108) {
            if (e < 49493) {
              if (e < 49212) {
                if (e < 49045) {
                  if (e < 48988) {
                    if (e < 48933) {
                      if (e < 48932) {
                        if (48905 <= e && e <= 48931) return t.CLUSTER_BREAK.LVT;
                      } else if (e === 48932) return t.CLUSTER_BREAK.LV;
                    } else if (e < 48960) {
                      if (48933 <= e && e <= 48959) return t.CLUSTER_BREAK.LVT;
                    } else if (e < 48961) {
                      if (e === 48960) return t.CLUSTER_BREAK.LV;
                    } else if (48961 <= e && e <= 48987) return t.CLUSTER_BREAK.LVT;
                  } else if (e < 49016) {
                    if (e < 48989) {
                      if (e === 48988) return t.CLUSTER_BREAK.LV;
                    } else if (48989 <= e && e <= 49015) return t.CLUSTER_BREAK.LVT;
                  } else if (e < 49017) {
                    if (e === 49016) return t.CLUSTER_BREAK.LV;
                  } else if (e < 49044) {
                    if (49017 <= e && e <= 49043) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 49044) return t.CLUSTER_BREAK.LV;
                } else if (e < 49128) {
                  if (e < 49073) {
                    if (e < 49072) {
                      if (49045 <= e && e <= 49071) return t.CLUSTER_BREAK.LVT;
                    } else if (e === 49072) return t.CLUSTER_BREAK.LV;
                  } else if (e < 49100) {
                    if (49073 <= e && e <= 49099) return t.CLUSTER_BREAK.LVT;
                  } else if (e < 49101) {
                    if (e === 49100) return t.CLUSTER_BREAK.LV;
                  } else if (49101 <= e && e <= 49127) return t.CLUSTER_BREAK.LVT;
                } else if (e < 49157) {
                  if (e < 49129) {
                    if (e === 49128) return t.CLUSTER_BREAK.LV;
                  } else if (e < 49156) {
                    if (49129 <= e && e <= 49155) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 49156) return t.CLUSTER_BREAK.LV;
                } else if (e < 49184) {
                  if (49157 <= e && e <= 49183) return t.CLUSTER_BREAK.LVT;
                } else if (e < 49185) {
                  if (e === 49184) return t.CLUSTER_BREAK.LV;
                } else if (49185 <= e && e <= 49211) return t.CLUSTER_BREAK.LVT;
              } else if (e < 49352) {
                if (e < 49269) {
                  if (e < 49240) {
                    if (e < 49213) {
                      if (e === 49212) return t.CLUSTER_BREAK.LV;
                    } else if (49213 <= e && e <= 49239) return t.CLUSTER_BREAK.LVT;
                  } else if (e < 49241) {
                    if (e === 49240) return t.CLUSTER_BREAK.LV;
                  } else if (e < 49268) {
                    if (49241 <= e && e <= 49267) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 49268) return t.CLUSTER_BREAK.LV;
                } else if (e < 49297) {
                  if (e < 49296) {
                    if (49269 <= e && e <= 49295) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 49296) return t.CLUSTER_BREAK.LV;
                } else if (e < 49324) {
                  if (49297 <= e && e <= 49323) return t.CLUSTER_BREAK.LVT;
                } else if (e < 49325) {
                  if (e === 49324) return t.CLUSTER_BREAK.LV;
                } else if (49325 <= e && e <= 49351) return t.CLUSTER_BREAK.LVT;
              } else if (e < 49409) {
                if (e < 49380) {
                  if (e < 49353) {
                    if (e === 49352) return t.CLUSTER_BREAK.LV;
                  } else if (49353 <= e && e <= 49379) return t.CLUSTER_BREAK.LVT;
                } else if (e < 49381) {
                  if (e === 49380) return t.CLUSTER_BREAK.LV;
                } else if (e < 49408) {
                  if (49381 <= e && e <= 49407) return t.CLUSTER_BREAK.LVT;
                } else if (e === 49408) return t.CLUSTER_BREAK.LV;
              } else if (e < 49464) {
                if (e < 49436) {
                  if (49409 <= e && e <= 49435) return t.CLUSTER_BREAK.LVT;
                } else if (e < 49437) {
                  if (e === 49436) return t.CLUSTER_BREAK.LV;
                } else if (49437 <= e && e <= 49463) return t.CLUSTER_BREAK.LVT;
              } else if (e < 49465) {
                if (e === 49464) return t.CLUSTER_BREAK.LV;
              } else if (e < 49492) {
                if (49465 <= e && e <= 49491) return t.CLUSTER_BREAK.LVT;
              } else if (e === 49492) return t.CLUSTER_BREAK.LV;
            } else if (e < 49800) {
              if (e < 49633) {
                if (e < 49576) {
                  if (e < 49521) {
                    if (e < 49520) {
                      if (49493 <= e && e <= 49519) return t.CLUSTER_BREAK.LVT;
                    } else if (e === 49520) return t.CLUSTER_BREAK.LV;
                  } else if (e < 49548) {
                    if (49521 <= e && e <= 49547) return t.CLUSTER_BREAK.LVT;
                  } else if (e < 49549) {
                    if (e === 49548) return t.CLUSTER_BREAK.LV;
                  } else if (49549 <= e && e <= 49575) return t.CLUSTER_BREAK.LVT;
                } else if (e < 49604) {
                  if (e < 49577) {
                    if (e === 49576) return t.CLUSTER_BREAK.LV;
                  } else if (49577 <= e && e <= 49603) return t.CLUSTER_BREAK.LVT;
                } else if (e < 49605) {
                  if (e === 49604) return t.CLUSTER_BREAK.LV;
                } else if (e < 49632) {
                  if (49605 <= e && e <= 49631) return t.CLUSTER_BREAK.LVT;
                } else if (e === 49632) return t.CLUSTER_BREAK.LV;
              } else if (e < 49716) {
                if (e < 49661) {
                  if (e < 49660) {
                    if (49633 <= e && e <= 49659) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 49660) return t.CLUSTER_BREAK.LV;
                } else if (e < 49688) {
                  if (49661 <= e && e <= 49687) return t.CLUSTER_BREAK.LVT;
                } else if (e < 49689) {
                  if (e === 49688) return t.CLUSTER_BREAK.LV;
                } else if (49689 <= e && e <= 49715) return t.CLUSTER_BREAK.LVT;
              } else if (e < 49745) {
                if (e < 49717) {
                  if (e === 49716) return t.CLUSTER_BREAK.LV;
                } else if (e < 49744) {
                  if (49717 <= e && e <= 49743) return t.CLUSTER_BREAK.LVT;
                } else if (e === 49744) return t.CLUSTER_BREAK.LV;
              } else if (e < 49772) {
                if (49745 <= e && e <= 49771) return t.CLUSTER_BREAK.LVT;
              } else if (e < 49773) {
                if (e === 49772) return t.CLUSTER_BREAK.LV;
              } else if (49773 <= e && e <= 49799) return t.CLUSTER_BREAK.LVT;
            } else if (e < 49941) {
              if (e < 49857) {
                if (e < 49828) {
                  if (e < 49801) {
                    if (e === 49800) return t.CLUSTER_BREAK.LV;
                  } else if (49801 <= e && e <= 49827) return t.CLUSTER_BREAK.LVT;
                } else if (e < 49829) {
                  if (e === 49828) return t.CLUSTER_BREAK.LV;
                } else if (e < 49856) {
                  if (49829 <= e && e <= 49855) return t.CLUSTER_BREAK.LVT;
                } else if (e === 49856) return t.CLUSTER_BREAK.LV;
              } else if (e < 49912) {
                if (e < 49884) {
                  if (49857 <= e && e <= 49883) return t.CLUSTER_BREAK.LVT;
                } else if (e < 49885) {
                  if (e === 49884) return t.CLUSTER_BREAK.LV;
                } else if (49885 <= e && e <= 49911) return t.CLUSTER_BREAK.LVT;
              } else if (e < 49913) {
                if (e === 49912) return t.CLUSTER_BREAK.LV;
              } else if (e < 49940) {
                if (49913 <= e && e <= 49939) return t.CLUSTER_BREAK.LVT;
              } else if (e === 49940) return t.CLUSTER_BREAK.LV;
            } else if (e < 50024) {
              if (e < 49969) {
                if (e < 49968) {
                  if (49941 <= e && e <= 49967) return t.CLUSTER_BREAK.LVT;
                } else if (e === 49968) return t.CLUSTER_BREAK.LV;
              } else if (e < 49996) {
                if (49969 <= e && e <= 49995) return t.CLUSTER_BREAK.LVT;
              } else if (e < 49997) {
                if (e === 49996) return t.CLUSTER_BREAK.LV;
              } else if (49997 <= e && e <= 50023) return t.CLUSTER_BREAK.LVT;
            } else if (e < 50053) {
              if (e < 50025) {
                if (e === 50024) return t.CLUSTER_BREAK.LV;
              } else if (e < 50052) {
                if (50025 <= e && e <= 50051) return t.CLUSTER_BREAK.LVT;
              } else if (e === 50052) return t.CLUSTER_BREAK.LV;
            } else if (e < 50080) {
              if (50053 <= e && e <= 50079) return t.CLUSTER_BREAK.LVT;
            } else if (e < 50081) {
              if (e === 50080) return t.CLUSTER_BREAK.LV;
            } else if (50081 <= e && e <= 50107) return t.CLUSTER_BREAK.LVT;
          } else if (e < 50697) {
            if (e < 50389) {
              if (e < 50248) {
                if (e < 50165) {
                  if (e < 50136) {
                    if (e < 50109) {
                      if (e === 50108) return t.CLUSTER_BREAK.LV;
                    } else if (50109 <= e && e <= 50135) return t.CLUSTER_BREAK.LVT;
                  } else if (e < 50137) {
                    if (e === 50136) return t.CLUSTER_BREAK.LV;
                  } else if (e < 50164) {
                    if (50137 <= e && e <= 50163) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 50164) return t.CLUSTER_BREAK.LV;
                } else if (e < 50193) {
                  if (e < 50192) {
                    if (50165 <= e && e <= 50191) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 50192) return t.CLUSTER_BREAK.LV;
                } else if (e < 50220) {
                  if (50193 <= e && e <= 50219) return t.CLUSTER_BREAK.LVT;
                } else if (e < 50221) {
                  if (e === 50220) return t.CLUSTER_BREAK.LV;
                } else if (50221 <= e && e <= 50247) return t.CLUSTER_BREAK.LVT;
              } else if (e < 50305) {
                if (e < 50276) {
                  if (e < 50249) {
                    if (e === 50248) return t.CLUSTER_BREAK.LV;
                  } else if (50249 <= e && e <= 50275) return t.CLUSTER_BREAK.LVT;
                } else if (e < 50277) {
                  if (e === 50276) return t.CLUSTER_BREAK.LV;
                } else if (e < 50304) {
                  if (50277 <= e && e <= 50303) return t.CLUSTER_BREAK.LVT;
                } else if (e === 50304) return t.CLUSTER_BREAK.LV;
              } else if (e < 50360) {
                if (e < 50332) {
                  if (50305 <= e && e <= 50331) return t.CLUSTER_BREAK.LVT;
                } else if (e < 50333) {
                  if (e === 50332) return t.CLUSTER_BREAK.LV;
                } else if (50333 <= e && e <= 50359) return t.CLUSTER_BREAK.LVT;
              } else if (e < 50361) {
                if (e === 50360) return t.CLUSTER_BREAK.LV;
              } else if (e < 50388) {
                if (50361 <= e && e <= 50387) return t.CLUSTER_BREAK.LVT;
              } else if (e === 50388) return t.CLUSTER_BREAK.LV;
            } else if (e < 50556) {
              if (e < 50472) {
                if (e < 50417) {
                  if (e < 50416) {
                    if (50389 <= e && e <= 50415) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 50416) return t.CLUSTER_BREAK.LV;
                } else if (e < 50444) {
                  if (50417 <= e && e <= 50443) return t.CLUSTER_BREAK.LVT;
                } else if (e < 50445) {
                  if (e === 50444) return t.CLUSTER_BREAK.LV;
                } else if (50445 <= e && e <= 50471) return t.CLUSTER_BREAK.LVT;
              } else if (e < 50501) {
                if (e < 50473) {
                  if (e === 50472) return t.CLUSTER_BREAK.LV;
                } else if (e < 50500) {
                  if (50473 <= e && e <= 50499) return t.CLUSTER_BREAK.LVT;
                } else if (e === 50500) return t.CLUSTER_BREAK.LV;
              } else if (e < 50528) {
                if (50501 <= e && e <= 50527) return t.CLUSTER_BREAK.LVT;
              } else if (e < 50529) {
                if (e === 50528) return t.CLUSTER_BREAK.LV;
              } else if (50529 <= e && e <= 50555) return t.CLUSTER_BREAK.LVT;
            } else if (e < 50613) {
              if (e < 50584) {
                if (e < 50557) {
                  if (e === 50556) return t.CLUSTER_BREAK.LV;
                } else if (50557 <= e && e <= 50583) return t.CLUSTER_BREAK.LVT;
              } else if (e < 50585) {
                if (e === 50584) return t.CLUSTER_BREAK.LV;
              } else if (e < 50612) {
                if (50585 <= e && e <= 50611) return t.CLUSTER_BREAK.LVT;
              } else if (e === 50612) return t.CLUSTER_BREAK.LV;
            } else if (e < 50668) {
              if (e < 50640) {
                if (50613 <= e && e <= 50639) return t.CLUSTER_BREAK.LVT;
              } else if (e < 50641) {
                if (e === 50640) return t.CLUSTER_BREAK.LV;
              } else if (50641 <= e && e <= 50667) return t.CLUSTER_BREAK.LVT;
            } else if (e < 50669) {
              if (e === 50668) return t.CLUSTER_BREAK.LV;
            } else if (e < 50696) {
              if (50669 <= e && e <= 50695) return t.CLUSTER_BREAK.LVT;
            } else if (e === 50696) return t.CLUSTER_BREAK.LV;
          } else if (e < 51004) {
            if (e < 50837) {
              if (e < 50780) {
                if (e < 50725) {
                  if (e < 50724) {
                    if (50697 <= e && e <= 50723) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 50724) return t.CLUSTER_BREAK.LV;
                } else if (e < 50752) {
                  if (50725 <= e && e <= 50751) return t.CLUSTER_BREAK.LVT;
                } else if (e < 50753) {
                  if (e === 50752) return t.CLUSTER_BREAK.LV;
                } else if (50753 <= e && e <= 50779) return t.CLUSTER_BREAK.LVT;
              } else if (e < 50808) {
                if (e < 50781) {
                  if (e === 50780) return t.CLUSTER_BREAK.LV;
                } else if (50781 <= e && e <= 50807) return t.CLUSTER_BREAK.LVT;
              } else if (e < 50809) {
                if (e === 50808) return t.CLUSTER_BREAK.LV;
              } else if (e < 50836) {
                if (50809 <= e && e <= 50835) return t.CLUSTER_BREAK.LVT;
              } else if (e === 50836) return t.CLUSTER_BREAK.LV;
            } else if (e < 50920) {
              if (e < 50865) {
                if (e < 50864) {
                  if (50837 <= e && e <= 50863) return t.CLUSTER_BREAK.LVT;
                } else if (e === 50864) return t.CLUSTER_BREAK.LV;
              } else if (e < 50892) {
                if (50865 <= e && e <= 50891) return t.CLUSTER_BREAK.LVT;
              } else if (e < 50893) {
                if (e === 50892) return t.CLUSTER_BREAK.LV;
              } else if (50893 <= e && e <= 50919) return t.CLUSTER_BREAK.LVT;
            } else if (e < 50949) {
              if (e < 50921) {
                if (e === 50920) return t.CLUSTER_BREAK.LV;
              } else if (e < 50948) {
                if (50921 <= e && e <= 50947) return t.CLUSTER_BREAK.LVT;
              } else if (e === 50948) return t.CLUSTER_BREAK.LV;
            } else if (e < 50976) {
              if (50949 <= e && e <= 50975) return t.CLUSTER_BREAK.LVT;
            } else if (e < 50977) {
              if (e === 50976) return t.CLUSTER_BREAK.LV;
            } else if (50977 <= e && e <= 51003) return t.CLUSTER_BREAK.LVT;
          } else if (e < 51145) {
            if (e < 51061) {
              if (e < 51032) {
                if (e < 51005) {
                  if (e === 51004) return t.CLUSTER_BREAK.LV;
                } else if (51005 <= e && e <= 51031) return t.CLUSTER_BREAK.LVT;
              } else if (e < 51033) {
                if (e === 51032) return t.CLUSTER_BREAK.LV;
              } else if (e < 51060) {
                if (51033 <= e && e <= 51059) return t.CLUSTER_BREAK.LVT;
              } else if (e === 51060) return t.CLUSTER_BREAK.LV;
            } else if (e < 51116) {
              if (e < 51088) {
                if (51061 <= e && e <= 51087) return t.CLUSTER_BREAK.LVT;
              } else if (e < 51089) {
                if (e === 51088) return t.CLUSTER_BREAK.LV;
              } else if (51089 <= e && e <= 51115) return t.CLUSTER_BREAK.LVT;
            } else if (e < 51117) {
              if (e === 51116) return t.CLUSTER_BREAK.LV;
            } else if (e < 51144) {
              if (51117 <= e && e <= 51143) return t.CLUSTER_BREAK.LVT;
            } else if (e === 51144) return t.CLUSTER_BREAK.LV;
          } else if (e < 51228) {
            if (e < 51173) {
              if (e < 51172) {
                if (51145 <= e && e <= 51171) return t.CLUSTER_BREAK.LVT;
              } else if (e === 51172) return t.CLUSTER_BREAK.LV;
            } else if (e < 51200) {
              if (51173 <= e && e <= 51199) return t.CLUSTER_BREAK.LVT;
            } else if (e < 51201) {
              if (e === 51200) return t.CLUSTER_BREAK.LV;
            } else if (51201 <= e && e <= 51227) return t.CLUSTER_BREAK.LVT;
          } else if (e < 51257) {
            if (e < 51229) {
              if (e === 51228) return t.CLUSTER_BREAK.LV;
            } else if (e < 51256) {
              if (51229 <= e && e <= 51255) return t.CLUSTER_BREAK.LVT;
            } else if (e === 51256) return t.CLUSTER_BREAK.LV;
          } else if (e < 51284) {
            if (51257 <= e && e <= 51283) return t.CLUSTER_BREAK.LVT;
          } else if (e < 51285) {
            if (e === 51284) return t.CLUSTER_BREAK.LV;
          } else if (51285 <= e && e <= 51311) return t.CLUSTER_BREAK.LVT;
        } else if (e < 52516) {
          if (e < 51901) {
            if (e < 51593) {
              if (e < 51452) {
                if (e < 51369) {
                  if (e < 51340) {
                    if (e < 51313) {
                      if (e === 51312) return t.CLUSTER_BREAK.LV;
                    } else if (51313 <= e && e <= 51339) return t.CLUSTER_BREAK.LVT;
                  } else if (e < 51341) {
                    if (e === 51340) return t.CLUSTER_BREAK.LV;
                  } else if (e < 51368) {
                    if (51341 <= e && e <= 51367) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 51368) return t.CLUSTER_BREAK.LV;
                } else if (e < 51397) {
                  if (e < 51396) {
                    if (51369 <= e && e <= 51395) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 51396) return t.CLUSTER_BREAK.LV;
                } else if (e < 51424) {
                  if (51397 <= e && e <= 51423) return t.CLUSTER_BREAK.LVT;
                } else if (e < 51425) {
                  if (e === 51424) return t.CLUSTER_BREAK.LV;
                } else if (51425 <= e && e <= 51451) return t.CLUSTER_BREAK.LVT;
              } else if (e < 51509) {
                if (e < 51480) {
                  if (e < 51453) {
                    if (e === 51452) return t.CLUSTER_BREAK.LV;
                  } else if (51453 <= e && e <= 51479) return t.CLUSTER_BREAK.LVT;
                } else if (e < 51481) {
                  if (e === 51480) return t.CLUSTER_BREAK.LV;
                } else if (e < 51508) {
                  if (51481 <= e && e <= 51507) return t.CLUSTER_BREAK.LVT;
                } else if (e === 51508) return t.CLUSTER_BREAK.LV;
              } else if (e < 51564) {
                if (e < 51536) {
                  if (51509 <= e && e <= 51535) return t.CLUSTER_BREAK.LVT;
                } else if (e < 51537) {
                  if (e === 51536) return t.CLUSTER_BREAK.LV;
                } else if (51537 <= e && e <= 51563) return t.CLUSTER_BREAK.LVT;
              } else if (e < 51565) {
                if (e === 51564) return t.CLUSTER_BREAK.LV;
              } else if (e < 51592) {
                if (51565 <= e && e <= 51591) return t.CLUSTER_BREAK.LVT;
              } else if (e === 51592) return t.CLUSTER_BREAK.LV;
            } else if (e < 51760) {
              if (e < 51676) {
                if (e < 51621) {
                  if (e < 51620) {
                    if (51593 <= e && e <= 51619) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 51620) return t.CLUSTER_BREAK.LV;
                } else if (e < 51648) {
                  if (51621 <= e && e <= 51647) return t.CLUSTER_BREAK.LVT;
                } else if (e < 51649) {
                  if (e === 51648) return t.CLUSTER_BREAK.LV;
                } else if (51649 <= e && e <= 51675) return t.CLUSTER_BREAK.LVT;
              } else if (e < 51705) {
                if (e < 51677) {
                  if (e === 51676) return t.CLUSTER_BREAK.LV;
                } else if (e < 51704) {
                  if (51677 <= e && e <= 51703) return t.CLUSTER_BREAK.LVT;
                } else if (e === 51704) return t.CLUSTER_BREAK.LV;
              } else if (e < 51732) {
                if (51705 <= e && e <= 51731) return t.CLUSTER_BREAK.LVT;
              } else if (e < 51733) {
                if (e === 51732) return t.CLUSTER_BREAK.LV;
              } else if (51733 <= e && e <= 51759) return t.CLUSTER_BREAK.LVT;
            } else if (e < 51817) {
              if (e < 51788) {
                if (e < 51761) {
                  if (e === 51760) return t.CLUSTER_BREAK.LV;
                } else if (51761 <= e && e <= 51787) return t.CLUSTER_BREAK.LVT;
              } else if (e < 51789) {
                if (e === 51788) return t.CLUSTER_BREAK.LV;
              } else if (e < 51816) {
                if (51789 <= e && e <= 51815) return t.CLUSTER_BREAK.LVT;
              } else if (e === 51816) return t.CLUSTER_BREAK.LV;
            } else if (e < 51872) {
              if (e < 51844) {
                if (51817 <= e && e <= 51843) return t.CLUSTER_BREAK.LVT;
              } else if (e < 51845) {
                if (e === 51844) return t.CLUSTER_BREAK.LV;
              } else if (51845 <= e && e <= 51871) return t.CLUSTER_BREAK.LVT;
            } else if (e < 51873) {
              if (e === 51872) return t.CLUSTER_BREAK.LV;
            } else if (e < 51900) {
              if (51873 <= e && e <= 51899) return t.CLUSTER_BREAK.LVT;
            } else if (e === 51900) return t.CLUSTER_BREAK.LV;
          } else if (e < 52208) {
            if (e < 52041) {
              if (e < 51984) {
                if (e < 51929) {
                  if (e < 51928) {
                    if (51901 <= e && e <= 51927) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 51928) return t.CLUSTER_BREAK.LV;
                } else if (e < 51956) {
                  if (51929 <= e && e <= 51955) return t.CLUSTER_BREAK.LVT;
                } else if (e < 51957) {
                  if (e === 51956) return t.CLUSTER_BREAK.LV;
                } else if (51957 <= e && e <= 51983) return t.CLUSTER_BREAK.LVT;
              } else if (e < 52012) {
                if (e < 51985) {
                  if (e === 51984) return t.CLUSTER_BREAK.LV;
                } else if (51985 <= e && e <= 52011) return t.CLUSTER_BREAK.LVT;
              } else if (e < 52013) {
                if (e === 52012) return t.CLUSTER_BREAK.LV;
              } else if (e < 52040) {
                if (52013 <= e && e <= 52039) return t.CLUSTER_BREAK.LVT;
              } else if (e === 52040) return t.CLUSTER_BREAK.LV;
            } else if (e < 52124) {
              if (e < 52069) {
                if (e < 52068) {
                  if (52041 <= e && e <= 52067) return t.CLUSTER_BREAK.LVT;
                } else if (e === 52068) return t.CLUSTER_BREAK.LV;
              } else if (e < 52096) {
                if (52069 <= e && e <= 52095) return t.CLUSTER_BREAK.LVT;
              } else if (e < 52097) {
                if (e === 52096) return t.CLUSTER_BREAK.LV;
              } else if (52097 <= e && e <= 52123) return t.CLUSTER_BREAK.LVT;
            } else if (e < 52153) {
              if (e < 52125) {
                if (e === 52124) return t.CLUSTER_BREAK.LV;
              } else if (e < 52152) {
                if (52125 <= e && e <= 52151) return t.CLUSTER_BREAK.LVT;
              } else if (e === 52152) return t.CLUSTER_BREAK.LV;
            } else if (e < 52180) {
              if (52153 <= e && e <= 52179) return t.CLUSTER_BREAK.LVT;
            } else if (e < 52181) {
              if (e === 52180) return t.CLUSTER_BREAK.LV;
            } else if (52181 <= e && e <= 52207) return t.CLUSTER_BREAK.LVT;
          } else if (e < 52349) {
            if (e < 52265) {
              if (e < 52236) {
                if (e < 52209) {
                  if (e === 52208) return t.CLUSTER_BREAK.LV;
                } else if (52209 <= e && e <= 52235) return t.CLUSTER_BREAK.LVT;
              } else if (e < 52237) {
                if (e === 52236) return t.CLUSTER_BREAK.LV;
              } else if (e < 52264) {
                if (52237 <= e && e <= 52263) return t.CLUSTER_BREAK.LVT;
              } else if (e === 52264) return t.CLUSTER_BREAK.LV;
            } else if (e < 52320) {
              if (e < 52292) {
                if (52265 <= e && e <= 52291) return t.CLUSTER_BREAK.LVT;
              } else if (e < 52293) {
                if (e === 52292) return t.CLUSTER_BREAK.LV;
              } else if (52293 <= e && e <= 52319) return t.CLUSTER_BREAK.LVT;
            } else if (e < 52321) {
              if (e === 52320) return t.CLUSTER_BREAK.LV;
            } else if (e < 52348) {
              if (52321 <= e && e <= 52347) return t.CLUSTER_BREAK.LVT;
            } else if (e === 52348) return t.CLUSTER_BREAK.LV;
          } else if (e < 52432) {
            if (e < 52377) {
              if (e < 52376) {
                if (52349 <= e && e <= 52375) return t.CLUSTER_BREAK.LVT;
              } else if (e === 52376) return t.CLUSTER_BREAK.LV;
            } else if (e < 52404) {
              if (52377 <= e && e <= 52403) return t.CLUSTER_BREAK.LVT;
            } else if (e < 52405) {
              if (e === 52404) return t.CLUSTER_BREAK.LV;
            } else if (52405 <= e && e <= 52431) return t.CLUSTER_BREAK.LVT;
          } else if (e < 52461) {
            if (e < 52433) {
              if (e === 52432) return t.CLUSTER_BREAK.LV;
            } else if (e < 52460) {
              if (52433 <= e && e <= 52459) return t.CLUSTER_BREAK.LVT;
            } else if (e === 52460) return t.CLUSTER_BREAK.LV;
          } else if (e < 52488) {
            if (52461 <= e && e <= 52487) return t.CLUSTER_BREAK.LVT;
          } else if (e < 52489) {
            if (e === 52488) return t.CLUSTER_BREAK.LV;
          } else if (52489 <= e && e <= 52515) return t.CLUSTER_BREAK.LVT;
        } else if (e < 53105) {
          if (e < 52797) {
            if (e < 52656) {
              if (e < 52573) {
                if (e < 52544) {
                  if (e < 52517) {
                    if (e === 52516) return t.CLUSTER_BREAK.LV;
                  } else if (52517 <= e && e <= 52543) return t.CLUSTER_BREAK.LVT;
                } else if (e < 52545) {
                  if (e === 52544) return t.CLUSTER_BREAK.LV;
                } else if (e < 52572) {
                  if (52545 <= e && e <= 52571) return t.CLUSTER_BREAK.LVT;
                } else if (e === 52572) return t.CLUSTER_BREAK.LV;
              } else if (e < 52601) {
                if (e < 52600) {
                  if (52573 <= e && e <= 52599) return t.CLUSTER_BREAK.LVT;
                } else if (e === 52600) return t.CLUSTER_BREAK.LV;
              } else if (e < 52628) {
                if (52601 <= e && e <= 52627) return t.CLUSTER_BREAK.LVT;
              } else if (e < 52629) {
                if (e === 52628) return t.CLUSTER_BREAK.LV;
              } else if (52629 <= e && e <= 52655) return t.CLUSTER_BREAK.LVT;
            } else if (e < 52713) {
              if (e < 52684) {
                if (e < 52657) {
                  if (e === 52656) return t.CLUSTER_BREAK.LV;
                } else if (52657 <= e && e <= 52683) return t.CLUSTER_BREAK.LVT;
              } else if (e < 52685) {
                if (e === 52684) return t.CLUSTER_BREAK.LV;
              } else if (e < 52712) {
                if (52685 <= e && e <= 52711) return t.CLUSTER_BREAK.LVT;
              } else if (e === 52712) return t.CLUSTER_BREAK.LV;
            } else if (e < 52768) {
              if (e < 52740) {
                if (52713 <= e && e <= 52739) return t.CLUSTER_BREAK.LVT;
              } else if (e < 52741) {
                if (e === 52740) return t.CLUSTER_BREAK.LV;
              } else if (52741 <= e && e <= 52767) return t.CLUSTER_BREAK.LVT;
            } else if (e < 52769) {
              if (e === 52768) return t.CLUSTER_BREAK.LV;
            } else if (e < 52796) {
              if (52769 <= e && e <= 52795) return t.CLUSTER_BREAK.LVT;
            } else if (e === 52796) return t.CLUSTER_BREAK.LV;
          } else if (e < 52964) {
            if (e < 52880) {
              if (e < 52825) {
                if (e < 52824) {
                  if (52797 <= e && e <= 52823) return t.CLUSTER_BREAK.LVT;
                } else if (e === 52824) return t.CLUSTER_BREAK.LV;
              } else if (e < 52852) {
                if (52825 <= e && e <= 52851) return t.CLUSTER_BREAK.LVT;
              } else if (e < 52853) {
                if (e === 52852) return t.CLUSTER_BREAK.LV;
              } else if (52853 <= e && e <= 52879) return t.CLUSTER_BREAK.LVT;
            } else if (e < 52909) {
              if (e < 52881) {
                if (e === 52880) return t.CLUSTER_BREAK.LV;
              } else if (e < 52908) {
                if (52881 <= e && e <= 52907) return t.CLUSTER_BREAK.LVT;
              } else if (e === 52908) return t.CLUSTER_BREAK.LV;
            } else if (e < 52936) {
              if (52909 <= e && e <= 52935) return t.CLUSTER_BREAK.LVT;
            } else if (e < 52937) {
              if (e === 52936) return t.CLUSTER_BREAK.LV;
            } else if (52937 <= e && e <= 52963) return t.CLUSTER_BREAK.LVT;
          } else if (e < 53021) {
            if (e < 52992) {
              if (e < 52965) {
                if (e === 52964) return t.CLUSTER_BREAK.LV;
              } else if (52965 <= e && e <= 52991) return t.CLUSTER_BREAK.LVT;
            } else if (e < 52993) {
              if (e === 52992) return t.CLUSTER_BREAK.LV;
            } else if (e < 53020) {
              if (52993 <= e && e <= 53019) return t.CLUSTER_BREAK.LVT;
            } else if (e === 53020) return t.CLUSTER_BREAK.LV;
          } else if (e < 53076) {
            if (e < 53048) {
              if (53021 <= e && e <= 53047) return t.CLUSTER_BREAK.LVT;
            } else if (e < 53049) {
              if (e === 53048) return t.CLUSTER_BREAK.LV;
            } else if (53049 <= e && e <= 53075) return t.CLUSTER_BREAK.LVT;
          } else if (e < 53077) {
            if (e === 53076) return t.CLUSTER_BREAK.LV;
          } else if (e < 53104) {
            if (53077 <= e && e <= 53103) return t.CLUSTER_BREAK.LVT;
          } else if (e === 53104) return t.CLUSTER_BREAK.LV;
        } else if (e < 53412) {
          if (e < 53245) {
            if (e < 53188) {
              if (e < 53133) {
                if (e < 53132) {
                  if (53105 <= e && e <= 53131) return t.CLUSTER_BREAK.LVT;
                } else if (e === 53132) return t.CLUSTER_BREAK.LV;
              } else if (e < 53160) {
                if (53133 <= e && e <= 53159) return t.CLUSTER_BREAK.LVT;
              } else if (e < 53161) {
                if (e === 53160) return t.CLUSTER_BREAK.LV;
              } else if (53161 <= e && e <= 53187) return t.CLUSTER_BREAK.LVT;
            } else if (e < 53216) {
              if (e < 53189) {
                if (e === 53188) return t.CLUSTER_BREAK.LV;
              } else if (53189 <= e && e <= 53215) return t.CLUSTER_BREAK.LVT;
            } else if (e < 53217) {
              if (e === 53216) return t.CLUSTER_BREAK.LV;
            } else if (e < 53244) {
              if (53217 <= e && e <= 53243) return t.CLUSTER_BREAK.LVT;
            } else if (e === 53244) return t.CLUSTER_BREAK.LV;
          } else if (e < 53328) {
            if (e < 53273) {
              if (e < 53272) {
                if (53245 <= e && e <= 53271) return t.CLUSTER_BREAK.LVT;
              } else if (e === 53272) return t.CLUSTER_BREAK.LV;
            } else if (e < 53300) {
              if (53273 <= e && e <= 53299) return t.CLUSTER_BREAK.LVT;
            } else if (e < 53301) {
              if (e === 53300) return t.CLUSTER_BREAK.LV;
            } else if (53301 <= e && e <= 53327) return t.CLUSTER_BREAK.LVT;
          } else if (e < 53357) {
            if (e < 53329) {
              if (e === 53328) return t.CLUSTER_BREAK.LV;
            } else if (e < 53356) {
              if (53329 <= e && e <= 53355) return t.CLUSTER_BREAK.LVT;
            } else if (e === 53356) return t.CLUSTER_BREAK.LV;
          } else if (e < 53384) {
            if (53357 <= e && e <= 53383) return t.CLUSTER_BREAK.LVT;
          } else if (e < 53385) {
            if (e === 53384) return t.CLUSTER_BREAK.LV;
          } else if (53385 <= e && e <= 53411) return t.CLUSTER_BREAK.LVT;
        } else if (e < 53553) {
          if (e < 53469) {
            if (e < 53440) {
              if (e < 53413) {
                if (e === 53412) return t.CLUSTER_BREAK.LV;
              } else if (53413 <= e && e <= 53439) return t.CLUSTER_BREAK.LVT;
            } else if (e < 53441) {
              if (e === 53440) return t.CLUSTER_BREAK.LV;
            } else if (e < 53468) {
              if (53441 <= e && e <= 53467) return t.CLUSTER_BREAK.LVT;
            } else if (e === 53468) return t.CLUSTER_BREAK.LV;
          } else if (e < 53524) {
            if (e < 53496) {
              if (53469 <= e && e <= 53495) return t.CLUSTER_BREAK.LVT;
            } else if (e < 53497) {
              if (e === 53496) return t.CLUSTER_BREAK.LV;
            } else if (53497 <= e && e <= 53523) return t.CLUSTER_BREAK.LVT;
          } else if (e < 53525) {
            if (e === 53524) return t.CLUSTER_BREAK.LV;
          } else if (e < 53552) {
            if (53525 <= e && e <= 53551) return t.CLUSTER_BREAK.LVT;
          } else if (e === 53552) return t.CLUSTER_BREAK.LV;
        } else if (e < 53636) {
          if (e < 53581) {
            if (e < 53580) {
              if (53553 <= e && e <= 53579) return t.CLUSTER_BREAK.LVT;
            } else if (e === 53580) return t.CLUSTER_BREAK.LV;
          } else if (e < 53608) {
            if (53581 <= e && e <= 53607) return t.CLUSTER_BREAK.LVT;
          } else if (e < 53609) {
            if (e === 53608) return t.CLUSTER_BREAK.LV;
          } else if (53609 <= e && e <= 53635) return t.CLUSTER_BREAK.LVT;
        } else if (e < 53665) {
          if (e < 53637) {
            if (e === 53636) return t.CLUSTER_BREAK.LV;
          } else if (e < 53664) {
            if (53637 <= e && e <= 53663) return t.CLUSTER_BREAK.LVT;
          } else if (e === 53664) return t.CLUSTER_BREAK.LV;
        } else if (e < 53692) {
          if (53665 <= e && e <= 53691) return t.CLUSTER_BREAK.LVT;
        } else if (e < 53693) {
          if (e === 53692) return t.CLUSTER_BREAK.LV;
        } else if (53693 <= e && e <= 53719) return t.CLUSTER_BREAK.LVT;
      } else if (e < 70459) {
        if (e < 54897) {
          if (e < 54308) {
            if (e < 54001) {
              if (e < 53860) {
                if (e < 53777) {
                  if (e < 53748) {
                    if (e < 53721) {
                      if (e === 53720) return t.CLUSTER_BREAK.LV;
                    } else if (53721 <= e && e <= 53747) return t.CLUSTER_BREAK.LVT;
                  } else if (e < 53749) {
                    if (e === 53748) return t.CLUSTER_BREAK.LV;
                  } else if (e < 53776) {
                    if (53749 <= e && e <= 53775) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 53776) return t.CLUSTER_BREAK.LV;
                } else if (e < 53805) {
                  if (e < 53804) {
                    if (53777 <= e && e <= 53803) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 53804) return t.CLUSTER_BREAK.LV;
                } else if (e < 53832) {
                  if (53805 <= e && e <= 53831) return t.CLUSTER_BREAK.LVT;
                } else if (e < 53833) {
                  if (e === 53832) return t.CLUSTER_BREAK.LV;
                } else if (53833 <= e && e <= 53859) return t.CLUSTER_BREAK.LVT;
              } else if (e < 53917) {
                if (e < 53888) {
                  if (e < 53861) {
                    if (e === 53860) return t.CLUSTER_BREAK.LV;
                  } else if (53861 <= e && e <= 53887) return t.CLUSTER_BREAK.LVT;
                } else if (e < 53889) {
                  if (e === 53888) return t.CLUSTER_BREAK.LV;
                } else if (e < 53916) {
                  if (53889 <= e && e <= 53915) return t.CLUSTER_BREAK.LVT;
                } else if (e === 53916) return t.CLUSTER_BREAK.LV;
              } else if (e < 53972) {
                if (e < 53944) {
                  if (53917 <= e && e <= 53943) return t.CLUSTER_BREAK.LVT;
                } else if (e < 53945) {
                  if (e === 53944) return t.CLUSTER_BREAK.LV;
                } else if (53945 <= e && e <= 53971) return t.CLUSTER_BREAK.LVT;
              } else if (e < 53973) {
                if (e === 53972) return t.CLUSTER_BREAK.LV;
              } else if (e < 54e3) {
                if (53973 <= e && e <= 53999) return t.CLUSTER_BREAK.LVT;
              } else if (e === 54e3) return t.CLUSTER_BREAK.LV;
            } else if (e < 54141) {
              if (e < 54084) {
                if (e < 54029) {
                  if (e < 54028) {
                    if (54001 <= e && e <= 54027) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 54028) return t.CLUSTER_BREAK.LV;
                } else if (e < 54056) {
                  if (54029 <= e && e <= 54055) return t.CLUSTER_BREAK.LVT;
                } else if (e < 54057) {
                  if (e === 54056) return t.CLUSTER_BREAK.LV;
                } else if (54057 <= e && e <= 54083) return t.CLUSTER_BREAK.LVT;
              } else if (e < 54112) {
                if (e < 54085) {
                  if (e === 54084) return t.CLUSTER_BREAK.LV;
                } else if (54085 <= e && e <= 54111) return t.CLUSTER_BREAK.LVT;
              } else if (e < 54113) {
                if (e === 54112) return t.CLUSTER_BREAK.LV;
              } else if (e < 54140) {
                if (54113 <= e && e <= 54139) return t.CLUSTER_BREAK.LVT;
              } else if (e === 54140) return t.CLUSTER_BREAK.LV;
            } else if (e < 54224) {
              if (e < 54169) {
                if (e < 54168) {
                  if (54141 <= e && e <= 54167) return t.CLUSTER_BREAK.LVT;
                } else if (e === 54168) return t.CLUSTER_BREAK.LV;
              } else if (e < 54196) {
                if (54169 <= e && e <= 54195) return t.CLUSTER_BREAK.LVT;
              } else if (e < 54197) {
                if (e === 54196) return t.CLUSTER_BREAK.LV;
              } else if (54197 <= e && e <= 54223) return t.CLUSTER_BREAK.LVT;
            } else if (e < 54253) {
              if (e < 54225) {
                if (e === 54224) return t.CLUSTER_BREAK.LV;
              } else if (e < 54252) {
                if (54225 <= e && e <= 54251) return t.CLUSTER_BREAK.LVT;
              } else if (e === 54252) return t.CLUSTER_BREAK.LV;
            } else if (e < 54280) {
              if (54253 <= e && e <= 54279) return t.CLUSTER_BREAK.LVT;
            } else if (e < 54281) {
              if (e === 54280) return t.CLUSTER_BREAK.LV;
            } else if (54281 <= e && e <= 54307) return t.CLUSTER_BREAK.LVT;
          } else if (e < 54589) {
            if (e < 54448) {
              if (e < 54365) {
                if (e < 54336) {
                  if (e < 54309) {
                    if (e === 54308) return t.CLUSTER_BREAK.LV;
                  } else if (54309 <= e && e <= 54335) return t.CLUSTER_BREAK.LVT;
                } else if (e < 54337) {
                  if (e === 54336) return t.CLUSTER_BREAK.LV;
                } else if (e < 54364) {
                  if (54337 <= e && e <= 54363) return t.CLUSTER_BREAK.LVT;
                } else if (e === 54364) return t.CLUSTER_BREAK.LV;
              } else if (e < 54393) {
                if (e < 54392) {
                  if (54365 <= e && e <= 54391) return t.CLUSTER_BREAK.LVT;
                } else if (e === 54392) return t.CLUSTER_BREAK.LV;
              } else if (e < 54420) {
                if (54393 <= e && e <= 54419) return t.CLUSTER_BREAK.LVT;
              } else if (e < 54421) {
                if (e === 54420) return t.CLUSTER_BREAK.LV;
              } else if (54421 <= e && e <= 54447) return t.CLUSTER_BREAK.LVT;
            } else if (e < 54505) {
              if (e < 54476) {
                if (e < 54449) {
                  if (e === 54448) return t.CLUSTER_BREAK.LV;
                } else if (54449 <= e && e <= 54475) return t.CLUSTER_BREAK.LVT;
              } else if (e < 54477) {
                if (e === 54476) return t.CLUSTER_BREAK.LV;
              } else if (e < 54504) {
                if (54477 <= e && e <= 54503) return t.CLUSTER_BREAK.LVT;
              } else if (e === 54504) return t.CLUSTER_BREAK.LV;
            } else if (e < 54560) {
              if (e < 54532) {
                if (54505 <= e && e <= 54531) return t.CLUSTER_BREAK.LVT;
              } else if (e < 54533) {
                if (e === 54532) return t.CLUSTER_BREAK.LV;
              } else if (54533 <= e && e <= 54559) return t.CLUSTER_BREAK.LVT;
            } else if (e < 54561) {
              if (e === 54560) return t.CLUSTER_BREAK.LV;
            } else if (e < 54588) {
              if (54561 <= e && e <= 54587) return t.CLUSTER_BREAK.LVT;
            } else if (e === 54588) return t.CLUSTER_BREAK.LV;
          } else if (e < 54756) {
            if (e < 54672) {
              if (e < 54617) {
                if (e < 54616) {
                  if (54589 <= e && e <= 54615) return t.CLUSTER_BREAK.LVT;
                } else if (e === 54616) return t.CLUSTER_BREAK.LV;
              } else if (e < 54644) {
                if (54617 <= e && e <= 54643) return t.CLUSTER_BREAK.LVT;
              } else if (e < 54645) {
                if (e === 54644) return t.CLUSTER_BREAK.LV;
              } else if (54645 <= e && e <= 54671) return t.CLUSTER_BREAK.LVT;
            } else if (e < 54701) {
              if (e < 54673) {
                if (e === 54672) return t.CLUSTER_BREAK.LV;
              } else if (e < 54700) {
                if (54673 <= e && e <= 54699) return t.CLUSTER_BREAK.LVT;
              } else if (e === 54700) return t.CLUSTER_BREAK.LV;
            } else if (e < 54728) {
              if (54701 <= e && e <= 54727) return t.CLUSTER_BREAK.LVT;
            } else if (e < 54729) {
              if (e === 54728) return t.CLUSTER_BREAK.LV;
            } else if (54729 <= e && e <= 54755) return t.CLUSTER_BREAK.LVT;
          } else if (e < 54813) {
            if (e < 54784) {
              if (e < 54757) {
                if (e === 54756) return t.CLUSTER_BREAK.LV;
              } else if (54757 <= e && e <= 54783) return t.CLUSTER_BREAK.LVT;
            } else if (e < 54785) {
              if (e === 54784) return t.CLUSTER_BREAK.LV;
            } else if (e < 54812) {
              if (54785 <= e && e <= 54811) return t.CLUSTER_BREAK.LVT;
            } else if (e === 54812) return t.CLUSTER_BREAK.LV;
          } else if (e < 54868) {
            if (e < 54840) {
              if (54813 <= e && e <= 54839) return t.CLUSTER_BREAK.LVT;
            } else if (e < 54841) {
              if (e === 54840) return t.CLUSTER_BREAK.LV;
            } else if (54841 <= e && e <= 54867) return t.CLUSTER_BREAK.LVT;
          } else if (e < 54869) {
            if (e === 54868) return t.CLUSTER_BREAK.LV;
          } else if (e < 54896) {
            if (54869 <= e && e <= 54895) return t.CLUSTER_BREAK.LVT;
          } else if (e === 54896) return t.CLUSTER_BREAK.LV;
        } else if (e < 69632) {
          if (e < 55216) {
            if (e < 55037) {
              if (e < 54980) {
                if (e < 54925) {
                  if (e < 54924) {
                    if (54897 <= e && e <= 54923) return t.CLUSTER_BREAK.LVT;
                  } else if (e === 54924) return t.CLUSTER_BREAK.LV;
                } else if (e < 54952) {
                  if (54925 <= e && e <= 54951) return t.CLUSTER_BREAK.LVT;
                } else if (e < 54953) {
                  if (e === 54952) return t.CLUSTER_BREAK.LV;
                } else if (54953 <= e && e <= 54979) return t.CLUSTER_BREAK.LVT;
              } else if (e < 55008) {
                if (e < 54981) {
                  if (e === 54980) return t.CLUSTER_BREAK.LV;
                } else if (54981 <= e && e <= 55007) return t.CLUSTER_BREAK.LVT;
              } else if (e < 55009) {
                if (e === 55008) return t.CLUSTER_BREAK.LV;
              } else if (e < 55036) {
                if (55009 <= e && e <= 55035) return t.CLUSTER_BREAK.LVT;
              } else if (e === 55036) return t.CLUSTER_BREAK.LV;
            } else if (e < 55120) {
              if (e < 55065) {
                if (e < 55064) {
                  if (55037 <= e && e <= 55063) return t.CLUSTER_BREAK.LVT;
                } else if (e === 55064) return t.CLUSTER_BREAK.LV;
              } else if (e < 55092) {
                if (55065 <= e && e <= 55091) return t.CLUSTER_BREAK.LVT;
              } else if (e < 55093) {
                if (e === 55092) return t.CLUSTER_BREAK.LV;
              } else if (55093 <= e && e <= 55119) return t.CLUSTER_BREAK.LVT;
            } else if (e < 55149) {
              if (e < 55121) {
                if (e === 55120) return t.CLUSTER_BREAK.LV;
              } else if (e < 55148) {
                if (55121 <= e && e <= 55147) return t.CLUSTER_BREAK.LVT;
              } else if (e === 55148) return t.CLUSTER_BREAK.LV;
            } else if (e < 55176) {
              if (55149 <= e && e <= 55175) return t.CLUSTER_BREAK.LVT;
            } else if (e < 55177) {
              if (e === 55176) return t.CLUSTER_BREAK.LV;
            } else if (55177 <= e && e <= 55203) return t.CLUSTER_BREAK.LVT;
          } else if (e < 68097) {
            if (e < 65279) {
              if (e < 64286) {
                if (e < 55243) {
                  if (55216 <= e && e <= 55238) return t.CLUSTER_BREAK.V;
                } else if (55243 <= e && e <= 55291) return t.CLUSTER_BREAK.T;
              } else if (e < 65024) {
                if (e === 64286) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 65056) {
                if (65024 <= e && e <= 65039) return t.CLUSTER_BREAK.EXTEND;
              } else if (65056 <= e && e <= 65071) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 66045) {
              if (e < 65438) {
                if (e === 65279) return t.CLUSTER_BREAK.CONTROL;
              } else if (e < 65520) {
                if (65438 <= e && e <= 65439) return t.CLUSTER_BREAK.EXTEND;
              } else if (65520 <= e && e <= 65531) return t.CLUSTER_BREAK.CONTROL;
            } else if (e < 66272) {
              if (e === 66045) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 66422) {
              if (e === 66272) return t.CLUSTER_BREAK.EXTEND;
            } else if (66422 <= e && e <= 66426) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 68325) {
            if (e < 68108) {
              if (e < 68101) {
                if (68097 <= e && e <= 68099) return t.CLUSTER_BREAK.EXTEND;
              } else if (68101 <= e && e <= 68102) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 68152) {
              if (68108 <= e && e <= 68111) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 68159) {
              if (68152 <= e && e <= 68154) return t.CLUSTER_BREAK.EXTEND;
            } else if (e === 68159) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 69373) {
            if (e < 68900) {
              if (68325 <= e && e <= 68326) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 69291) {
              if (68900 <= e && e <= 68903) return t.CLUSTER_BREAK.EXTEND;
            } else if (69291 <= e && e <= 69292) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 69446) {
            if (69373 <= e && e <= 69375) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 69506) {
            if (69446 <= e && e <= 69456) return t.CLUSTER_BREAK.EXTEND;
          } else if (69506 <= e && e <= 69509) return t.CLUSTER_BREAK.EXTEND;
        } else if (e < 70016) {
          if (e < 69815) {
            if (e < 69747) {
              if (e < 69634) {
                if (e === 69632) return t.CLUSTER_BREAK.SPACINGMARK;
                if (e === 69633) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 69688) {
                if (e === 69634) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 69744) {
                if (69688 <= e && e <= 69702) return t.CLUSTER_BREAK.EXTEND;
              } else if (e === 69744) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 69762) {
              if (e < 69759) {
                if (69747 <= e && e <= 69748) return t.CLUSTER_BREAK.EXTEND;
              } else if (69759 <= e && e <= 69761) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 69808) {
              if (e === 69762) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 69811) {
              if (69808 <= e && e <= 69810) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (69811 <= e && e <= 69814) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 69888) if (e < 69821) {
            if (e < 69817) {
              if (69815 <= e && e <= 69816) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (69817 <= e && e <= 69818) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 69826) {
            if (e === 69821) return t.CLUSTER_BREAK.PREPEND;
          } else {
            if (e === 69826) return t.CLUSTER_BREAK.EXTEND;
            if (e === 69837) return t.CLUSTER_BREAK.PREPEND;
          }
          else if (e < 69933) {
            if (e < 69927) {
              if (69888 <= e && e <= 69890) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 69932) {
              if (69927 <= e && e <= 69931) return t.CLUSTER_BREAK.EXTEND;
            } else if (e === 69932) return t.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 69957) {
            if (69933 <= e && e <= 69940) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 70003) {
            if (69957 <= e && e <= 69958) return t.CLUSTER_BREAK.SPACINGMARK;
          } else if (e === 70003) return t.CLUSTER_BREAK.EXTEND;
        } else if (e < 70194) {
          if (e < 70082) {
            if (e < 70067) {
              if (e < 70018) {
                if (70016 <= e && e <= 70017) return t.CLUSTER_BREAK.EXTEND;
              } else if (e === 70018) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 70070) {
              if (70067 <= e && e <= 70069) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 70079) {
              if (70070 <= e && e <= 70078) return t.CLUSTER_BREAK.EXTEND;
            } else if (70079 <= e && e <= 70080) return t.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 70095) {
            if (e < 70089) {
              if (70082 <= e && e <= 70083) return t.CLUSTER_BREAK.PREPEND;
            } else if (e < 70094) {
              if (70089 <= e && e <= 70092) return t.CLUSTER_BREAK.EXTEND;
            } else if (e === 70094) return t.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 70188) {
            if (e === 70095) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 70191) {
            if (70188 <= e && e <= 70190) return t.CLUSTER_BREAK.SPACINGMARK;
          } else if (70191 <= e && e <= 70193) return t.CLUSTER_BREAK.EXTEND;
        } else if (e < 70209) {
          if (e < 70197) {
            if (e < 70196) {
              if (70194 <= e && e <= 70195) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (e === 70196) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 70198) {
            if (e === 70197) return t.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 70206) {
            if (70198 <= e && e <= 70199) return t.CLUSTER_BREAK.EXTEND;
          } else if (e === 70206) return t.CLUSTER_BREAK.EXTEND;
        } else if (e < 70371) {
          if (e < 70367) {
            if (e === 70209) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 70368) {
            if (e === 70367) return t.CLUSTER_BREAK.EXTEND;
          } else if (70368 <= e && e <= 70370) return t.CLUSTER_BREAK.SPACINGMARK;
        } else if (e < 70400) {
          if (70371 <= e && e <= 70378) return t.CLUSTER_BREAK.EXTEND;
        } else if (e < 70402) {
          if (70400 <= e && e <= 70401) return t.CLUSTER_BREAK.EXTEND;
        } else if (70402 <= e && e <= 70403) return t.CLUSTER_BREAK.SPACINGMARK;
      } else if (e < 72343) {
        if (e < 71339) {
          if (e < 70841) {
            if (e < 70512) {
              if (e < 70471) {
                if (e < 70463) {
                  if (e < 70462) {
                    if (70459 <= e && e <= 70460) return t.CLUSTER_BREAK.EXTEND;
                  } else if (e === 70462) return t.CLUSTER_BREAK.EXTEND;
                } else if (e < 70464) {
                  if (e === 70463) return t.CLUSTER_BREAK.SPACINGMARK;
                } else if (e < 70465) {
                  if (e === 70464) return t.CLUSTER_BREAK.EXTEND;
                } else if (70465 <= e && e <= 70468) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 70487) {
                if (e < 70475) {
                  if (70471 <= e && e <= 70472) return t.CLUSTER_BREAK.SPACINGMARK;
                } else if (70475 <= e && e <= 70477) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 70498) {
                if (e === 70487) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 70502) {
                if (70498 <= e && e <= 70499) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (70502 <= e && e <= 70508) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 70725) {
              if (e < 70712) {
                if (e < 70709) {
                  if (70512 <= e && e <= 70516) return t.CLUSTER_BREAK.EXTEND;
                } else if (70709 <= e && e <= 70711) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 70720) {
                if (70712 <= e && e <= 70719) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 70722) {
                if (70720 <= e && e <= 70721) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (70722 <= e && e <= 70724) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 70832) {
              if (e < 70726) {
                if (e === 70725) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e === 70726 || e === 70750) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 70833) {
              if (e === 70832) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 70835) {
              if (70833 <= e && e <= 70834) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (70835 <= e && e <= 70840) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 71096) {
            if (e < 70847) if (e < 70843) {
              if (e === 70841) return t.CLUSTER_BREAK.SPACINGMARK;
              if (e === 70842) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 70845) {
              if (70843 <= e && e <= 70844) return t.CLUSTER_BREAK.SPACINGMARK;
            } else {
              if (e === 70845) return t.CLUSTER_BREAK.EXTEND;
              if (e === 70846) return t.CLUSTER_BREAK.SPACINGMARK;
            }
            else if (e < 71087) {
              if (e < 70849) {
                if (70847 <= e && e <= 70848) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 70850) {
                if (e === 70849) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (70850 <= e && e <= 70851) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 71088) {
              if (e === 71087) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 71090) {
              if (71088 <= e && e <= 71089) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (71090 <= e && e <= 71093) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 71216) {
            if (e < 71102) {
              if (e < 71100) {
                if (71096 <= e && e <= 71099) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (71100 <= e && e <= 71101) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 71103) {
              if (e === 71102) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 71132) {
              if (71103 <= e && e <= 71104) return t.CLUSTER_BREAK.EXTEND;
            } else if (71132 <= e && e <= 71133) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 71229) {
            if (e < 71219) {
              if (71216 <= e && e <= 71218) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 71227) {
              if (71219 <= e && e <= 71226) return t.CLUSTER_BREAK.EXTEND;
            } else if (71227 <= e && e <= 71228) return t.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 71230) {
            if (e === 71229) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 71231) {
            if (e === 71230) return t.CLUSTER_BREAK.SPACINGMARK;
          } else if (71231 <= e && e <= 71232) return t.CLUSTER_BREAK.EXTEND;
        } else if (e < 71999) if (e < 71463) {
          if (e < 71350) {
            if (e < 71341) {
              if (e === 71339) return t.CLUSTER_BREAK.EXTEND;
              if (e === 71340) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 71342) {
              if (e === 71341) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 71344) {
              if (71342 <= e && e <= 71343) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (71344 <= e && e <= 71349) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 71453) {
            if (e === 71350) return t.CLUSTER_BREAK.SPACINGMARK;
            if (e === 71351) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 71458) {
            if (71453 <= e && e <= 71455) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 71462) {
            if (71458 <= e && e <= 71461) return t.CLUSTER_BREAK.EXTEND;
          } else if (e === 71462) return t.CLUSTER_BREAK.SPACINGMARK;
        } else if (e < 71984) {
          if (e < 71727) {
            if (e < 71724) {
              if (71463 <= e && e <= 71467) return t.CLUSTER_BREAK.EXTEND;
            } else if (71724 <= e && e <= 71726) return t.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 71736) {
            if (71727 <= e && e <= 71735) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 71737) {
            if (e === 71736) return t.CLUSTER_BREAK.SPACINGMARK;
          } else if (71737 <= e && e <= 71738) return t.CLUSTER_BREAK.EXTEND;
        } else if (e < 71995) {
          if (e < 71985) {
            if (e === 71984) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 71991) {
            if (71985 <= e && e <= 71989) return t.CLUSTER_BREAK.SPACINGMARK;
          } else if (71991 <= e && e <= 71992) return t.CLUSTER_BREAK.SPACINGMARK;
        } else if (e < 71997) {
          if (71995 <= e && e <= 71996) return t.CLUSTER_BREAK.EXTEND;
        } else {
          if (e === 71997) return t.CLUSTER_BREAK.SPACINGMARK;
          if (e === 71998) return t.CLUSTER_BREAK.EXTEND;
        }
        else if (e < 72193) if (e < 72145) if (e < 72001) {
          if (e === 71999) return t.CLUSTER_BREAK.PREPEND;
          if (e === 72e3) return t.CLUSTER_BREAK.SPACINGMARK;
        } else if (e < 72002) {
          if (e === 72001) return t.CLUSTER_BREAK.PREPEND;
        } else {
          if (e === 72002) return t.CLUSTER_BREAK.SPACINGMARK;
          if (e === 72003) return t.CLUSTER_BREAK.EXTEND;
        }
        else if (e < 72156) {
          if (e < 72148) {
            if (72145 <= e && e <= 72147) return t.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 72154) {
            if (72148 <= e && e <= 72151) return t.CLUSTER_BREAK.EXTEND;
          } else if (72154 <= e && e <= 72155) return t.CLUSTER_BREAK.EXTEND;
        } else if (e < 72160) {
          if (72156 <= e && e <= 72159) return t.CLUSTER_BREAK.SPACINGMARK;
        } else {
          if (e === 72160) return t.CLUSTER_BREAK.EXTEND;
          if (e === 72164) return t.CLUSTER_BREAK.SPACINGMARK;
        }
        else if (e < 72263) {
          if (e < 72249) {
            if (e < 72243) {
              if (72193 <= e && e <= 72202) return t.CLUSTER_BREAK.EXTEND;
            } else if (72243 <= e && e <= 72248) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 72250) {
            if (e === 72249) return t.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 72251) {
            if (e === 72250) return t.CLUSTER_BREAK.PREPEND;
          } else if (72251 <= e && e <= 72254) return t.CLUSTER_BREAK.EXTEND;
        } else if (e < 72281) {
          if (e < 72273) {
            if (e === 72263) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 72279) {
            if (72273 <= e && e <= 72278) return t.CLUSTER_BREAK.EXTEND;
          } else if (72279 <= e && e <= 72280) return t.CLUSTER_BREAK.SPACINGMARK;
        } else if (e < 72324) {
          if (72281 <= e && e <= 72283) return t.CLUSTER_BREAK.EXTEND;
        } else if (e < 72330) {
          if (72324 <= e && e <= 72329) return t.CLUSTER_BREAK.PREPEND;
        } else if (72330 <= e && e <= 72342) return t.CLUSTER_BREAK.EXTEND;
      } else if (e < 94033) {
        if (e < 73104) {
          if (e < 72881) {
            if (e < 72766) {
              if (e < 72751) {
                if (e < 72344) {
                  if (e === 72343) return t.CLUSTER_BREAK.SPACINGMARK;
                } else if (72344 <= e && e <= 72345) return t.CLUSTER_BREAK.EXTEND;
              } else if (e < 72752) {
                if (e === 72751) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (e < 72760) {
                if (72752 <= e && e <= 72758) return t.CLUSTER_BREAK.EXTEND;
              } else if (72760 <= e && e <= 72765) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 72850) {
              if (e === 72766) return t.CLUSTER_BREAK.SPACINGMARK;
              if (e === 72767) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 72873) {
              if (72850 <= e && e <= 72871) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 72874) {
              if (e === 72873) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (72874 <= e && e <= 72880) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 73018) {
            if (e < 72884) {
              if (e < 72882) {
                if (e === 72881) return t.CLUSTER_BREAK.SPACINGMARK;
              } else if (72882 <= e && e <= 72883) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 72885) {
              if (e === 72884) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (e < 73009) {
              if (72885 <= e && e <= 72886) return t.CLUSTER_BREAK.EXTEND;
            } else if (73009 <= e && e <= 73014) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 73030) {
            if (e < 73020) {
              if (e === 73018) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 73023) {
              if (73020 <= e && e <= 73021) return t.CLUSTER_BREAK.EXTEND;
            } else if (73023 <= e && e <= 73029) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 73031) {
            if (e === 73030) return t.CLUSTER_BREAK.PREPEND;
          } else if (e < 73098) {
            if (e === 73031) return t.CLUSTER_BREAK.EXTEND;
          } else if (73098 <= e && e <= 73102) return t.CLUSTER_BREAK.SPACINGMARK;
        } else if (e < 73526) {
          if (e < 73459) if (e < 73109) {
            if (e < 73107) {
              if (73104 <= e && e <= 73105) return t.CLUSTER_BREAK.EXTEND;
            } else if (73107 <= e && e <= 73108) return t.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 73110) {
            if (e === 73109) return t.CLUSTER_BREAK.EXTEND;
          } else {
            if (e === 73110) return t.CLUSTER_BREAK.SPACINGMARK;
            if (e === 73111) return t.CLUSTER_BREAK.EXTEND;
          }
          else if (e < 73474) {
            if (e < 73461) {
              if (73459 <= e && e <= 73460) return t.CLUSTER_BREAK.EXTEND;
            } else if (e < 73472) {
              if (73461 <= e && e <= 73462) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (73472 <= e && e <= 73473) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 73475) {
            if (e === 73474) return t.CLUSTER_BREAK.PREPEND;
          } else if (e < 73524) {
            if (e === 73475) return t.CLUSTER_BREAK.SPACINGMARK;
          } else if (73524 <= e && e <= 73525) return t.CLUSTER_BREAK.SPACINGMARK;
        } else if (e < 78896) if (e < 73536) {
          if (e < 73534) {
            if (73526 <= e && e <= 73530) return t.CLUSTER_BREAK.EXTEND;
          } else if (73534 <= e && e <= 73535) return t.CLUSTER_BREAK.SPACINGMARK;
        } else if (e < 73537) {
          if (e === 73536) return t.CLUSTER_BREAK.EXTEND;
        } else {
          if (e === 73537) return t.CLUSTER_BREAK.SPACINGMARK;
          if (e === 73538) return t.CLUSTER_BREAK.EXTEND;
        }
        else if (e < 92912) {
          if (e < 78912) {
            if (78896 <= e && e <= 78911) return t.CLUSTER_BREAK.CONTROL;
          } else if (e < 78919) {
            if (e === 78912) return t.CLUSTER_BREAK.EXTEND;
          } else if (78919 <= e && e <= 78933) return t.CLUSTER_BREAK.EXTEND;
        } else if (e < 92976) {
          if (92912 <= e && e <= 92916) return t.CLUSTER_BREAK.EXTEND;
        } else if (e < 94031) {
          if (92976 <= e && e <= 92982) return t.CLUSTER_BREAK.EXTEND;
        } else if (e === 94031) return t.CLUSTER_BREAK.EXTEND;
      } else if (e < 121476) {
        if (e < 119143) if (e < 113824) {
          if (e < 94180) {
            if (e < 94095) {
              if (94033 <= e && e <= 94087) return t.CLUSTER_BREAK.SPACINGMARK;
            } else if (94095 <= e && e <= 94098) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 94192) {
            if (e === 94180) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 113821) {
            if (94192 <= e && e <= 94193) return t.CLUSTER_BREAK.SPACINGMARK;
          } else if (113821 <= e && e <= 113822) return t.CLUSTER_BREAK.EXTEND;
        } else if (e < 118576) {
          if (e < 118528) {
            if (113824 <= e && e <= 113827) return t.CLUSTER_BREAK.CONTROL;
          } else if (118528 <= e && e <= 118573) return t.CLUSTER_BREAK.EXTEND;
        } else if (e < 119141) {
          if (118576 <= e && e <= 118598) return t.CLUSTER_BREAK.EXTEND;
        } else {
          if (e === 119141) return t.CLUSTER_BREAK.EXTEND;
          if (e === 119142) return t.CLUSTER_BREAK.SPACINGMARK;
        }
        else if (e < 119173) {
          if (e < 119150) {
            if (e < 119149) {
              if (119143 <= e && e <= 119145) return t.CLUSTER_BREAK.EXTEND;
            } else if (e === 119149) return t.CLUSTER_BREAK.SPACINGMARK;
          } else if (e < 119155) {
            if (119150 <= e && e <= 119154) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 119163) {
            if (119155 <= e && e <= 119162) return t.CLUSTER_BREAK.CONTROL;
          } else if (119163 <= e && e <= 119170) return t.CLUSTER_BREAK.EXTEND;
        } else if (e < 121344) {
          if (e < 119210) {
            if (119173 <= e && e <= 119179) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 119362) {
            if (119210 <= e && e <= 119213) return t.CLUSTER_BREAK.EXTEND;
          } else if (119362 <= e && e <= 119364) return t.CLUSTER_BREAK.EXTEND;
        } else if (e < 121403) {
          if (121344 <= e && e <= 121398) return t.CLUSTER_BREAK.EXTEND;
        } else if (e < 121461) {
          if (121403 <= e && e <= 121452) return t.CLUSTER_BREAK.EXTEND;
        } else if (e === 121461) return t.CLUSTER_BREAK.EXTEND;
      } else if (e < 123628) {
        if (e < 122907) {
          if (e < 121505) {
            if (e < 121499) {
              if (e === 121476) return t.CLUSTER_BREAK.EXTEND;
            } else if (121499 <= e && e <= 121503) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 122880) {
            if (121505 <= e && e <= 121519) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 122888) {
            if (122880 <= e && e <= 122886) return t.CLUSTER_BREAK.EXTEND;
          } else if (122888 <= e && e <= 122904) return t.CLUSTER_BREAK.EXTEND;
        } else if (e < 123023) {
          if (e < 122915) {
            if (122907 <= e && e <= 122913) return t.CLUSTER_BREAK.EXTEND;
          } else if (e < 122918) {
            if (122915 <= e && e <= 122916) return t.CLUSTER_BREAK.EXTEND;
          } else if (122918 <= e && e <= 122922) return t.CLUSTER_BREAK.EXTEND;
        } else if (e < 123184) {
          if (e === 123023) return t.CLUSTER_BREAK.EXTEND;
        } else if (e < 123566) {
          if (123184 <= e && e <= 123190) return t.CLUSTER_BREAK.EXTEND;
        } else if (e === 123566) return t.CLUSTER_BREAK.EXTEND;
      } else if (e < 127995) {
        if (e < 125136) {
          if (e < 124140) {
            if (123628 <= e && e <= 123631) return t.CLUSTER_BREAK.EXTEND;
          } else if (124140 <= e && e <= 124143) return t.CLUSTER_BREAK.EXTEND;
        } else if (e < 125252) {
          if (125136 <= e && e <= 125142) return t.CLUSTER_BREAK.EXTEND;
        } else if (e < 127462) {
          if (125252 <= e && e <= 125258) return t.CLUSTER_BREAK.EXTEND;
        } else if (127462 <= e && e <= 127487) return t.CLUSTER_BREAK.REGIONAL_INDICATOR;
      } else if (e < 917632) {
        if (e < 917504) {
          if (127995 <= e && e <= 127999) return t.CLUSTER_BREAK.EXTEND;
        } else if (e < 917536) {
          if (917504 <= e && e <= 917535) return t.CLUSTER_BREAK.CONTROL;
        } else if (917536 <= e && e <= 917631) return t.CLUSTER_BREAK.EXTEND;
      } else if (e < 917760) {
        if (917632 <= e && e <= 917759) return t.CLUSTER_BREAK.CONTROL;
      } else if (e < 918e3) {
        if (917760 <= e && e <= 917999) return t.CLUSTER_BREAK.EXTEND;
      } else if (918e3 <= e && e <= 921599) return t.CLUSTER_BREAK.CONTROL;
      return t.CLUSTER_BREAK.OTHER;
    }
    static getEmojiProperty(e) {
      if (e < 10160) {
        if (e < 9728) {
          if (e < 9e3) {
            if (e < 8482) {
              if (e < 8252) {
                if (e === 169 || e === 174) return t.EXTENDED_PICTOGRAPHIC;
              } else if (e === 8252 || e === 8265) return t.EXTENDED_PICTOGRAPHIC;
            } else if (e < 8596) {
              if (e === 8482 || e === 8505) return t.EXTENDED_PICTOGRAPHIC;
            } else if (e < 8617) {
              if (8596 <= e && e <= 8601) return t.EXTENDED_PICTOGRAPHIC;
            } else if (e < 8986) {
              if (8617 <= e && e <= 8618) return t.EXTENDED_PICTOGRAPHIC;
            } else if (8986 <= e && e <= 8987) return t.EXTENDED_PICTOGRAPHIC;
          } else if (e < 9410) {
            if (e < 9167) {
              if (e === 9e3 || e === 9096) return t.EXTENDED_PICTOGRAPHIC;
            } else if (e < 9193) {
              if (e === 9167) return t.EXTENDED_PICTOGRAPHIC;
            } else if (e < 9208) {
              if (9193 <= e && e <= 9203) return t.EXTENDED_PICTOGRAPHIC;
            } else if (9208 <= e && e <= 9210) return t.EXTENDED_PICTOGRAPHIC;
          } else if (e < 9654) {
            if (e < 9642) {
              if (e === 9410) return t.EXTENDED_PICTOGRAPHIC;
            } else if (9642 <= e && e <= 9643) return t.EXTENDED_PICTOGRAPHIC;
          } else if (e < 9664) {
            if (e === 9654) return t.EXTENDED_PICTOGRAPHIC;
          } else if (e < 9723) {
            if (e === 9664) return t.EXTENDED_PICTOGRAPHIC;
          } else if (9723 <= e && e <= 9726) return t.EXTENDED_PICTOGRAPHIC;
        } else if (e < 10035) {
          if (e < 10004) {
            if (e < 9748) {
              if (e < 9735) {
                if (9728 <= e && e <= 9733) return t.EXTENDED_PICTOGRAPHIC;
              } else if (9735 <= e && e <= 9746) return t.EXTENDED_PICTOGRAPHIC;
            } else if (e < 9872) {
              if (9748 <= e && e <= 9861) return t.EXTENDED_PICTOGRAPHIC;
            } else if (e < 9992) {
              if (9872 <= e && e <= 9989) return t.EXTENDED_PICTOGRAPHIC;
            } else if (9992 <= e && e <= 10002) return t.EXTENDED_PICTOGRAPHIC;
          } else if (e < 10013) {
            if (e === 10004 || e === 10006) return t.EXTENDED_PICTOGRAPHIC;
          } else if (e < 10017) {
            if (e === 10013) return t.EXTENDED_PICTOGRAPHIC;
          } else if (e === 10017 || e === 10024) return t.EXTENDED_PICTOGRAPHIC;
        } else if (e < 10067) {
          if (e < 10055) {
            if (e < 10052) {
              if (10035 <= e && e <= 10036) return t.EXTENDED_PICTOGRAPHIC;
            } else if (e === 10052) return t.EXTENDED_PICTOGRAPHIC;
          } else if (e < 10060) {
            if (e === 10055) return t.EXTENDED_PICTOGRAPHIC;
          } else if (e === 10060 || e === 10062) return t.EXTENDED_PICTOGRAPHIC;
        } else if (e < 10083) {
          if (e < 10071) {
            if (10067 <= e && e <= 10069) return t.EXTENDED_PICTOGRAPHIC;
          } else if (e === 10071) return t.EXTENDED_PICTOGRAPHIC;
        } else if (e < 10133) {
          if (10083 <= e && e <= 10087) return t.EXTENDED_PICTOGRAPHIC;
        } else if (e < 10145) {
          if (10133 <= e && e <= 10135) return t.EXTENDED_PICTOGRAPHIC;
        } else if (e === 10145) return t.EXTENDED_PICTOGRAPHIC;
      } else if (e < 127489) {
        if (e < 12951) {
          if (e < 11035) {
            if (e < 10548) {
              if (e === 10160 || e === 10175) return t.EXTENDED_PICTOGRAPHIC;
            } else if (e < 11013) {
              if (10548 <= e && e <= 10549) return t.EXTENDED_PICTOGRAPHIC;
            } else if (11013 <= e && e <= 11015) return t.EXTENDED_PICTOGRAPHIC;
          } else if (e < 11093) {
            if (e < 11088) {
              if (11035 <= e && e <= 11036) return t.EXTENDED_PICTOGRAPHIC;
            } else if (e === 11088) return t.EXTENDED_PICTOGRAPHIC;
          } else if (e < 12336) {
            if (e === 11093) return t.EXTENDED_PICTOGRAPHIC;
          } else if (e === 12336 || e === 12349) return t.EXTENDED_PICTOGRAPHIC;
        } else if (e < 127340) {
          if (e < 126976) {
            if (e === 12951 || e === 12953) return t.EXTENDED_PICTOGRAPHIC;
          } else if (e < 127245) {
            if (126976 <= e && e <= 127231) return t.EXTENDED_PICTOGRAPHIC;
          } else if (e < 127279) {
            if (127245 <= e && e <= 127247) return t.EXTENDED_PICTOGRAPHIC;
          } else if (e === 127279) return t.EXTENDED_PICTOGRAPHIC;
        } else if (e < 127374) {
          if (e < 127358) {
            if (127340 <= e && e <= 127345) return t.EXTENDED_PICTOGRAPHIC;
          } else if (127358 <= e && e <= 127359) return t.EXTENDED_PICTOGRAPHIC;
        } else if (e < 127377) {
          if (e === 127374) return t.EXTENDED_PICTOGRAPHIC;
        } else if (e < 127405) {
          if (127377 <= e && e <= 127386) return t.EXTENDED_PICTOGRAPHIC;
        } else if (127405 <= e && e <= 127461) return t.EXTENDED_PICTOGRAPHIC;
      } else if (e < 128981) {
        if (e < 127561) {
          if (e < 127535) {
            if (e < 127514) {
              if (127489 <= e && e <= 127503) return t.EXTENDED_PICTOGRAPHIC;
            } else if (e === 127514) return t.EXTENDED_PICTOGRAPHIC;
          } else if (e < 127538) {
            if (e === 127535) return t.EXTENDED_PICTOGRAPHIC;
          } else if (e < 127548) {
            if (127538 <= e && e <= 127546) return t.EXTENDED_PICTOGRAPHIC;
          } else if (127548 <= e && e <= 127551) return t.EXTENDED_PICTOGRAPHIC;
        } else if (e < 128326) {
          if (e < 128e3) {
            if (127561 <= e && e <= 127994) return t.EXTENDED_PICTOGRAPHIC;
          } else if (128e3 <= e && e <= 128317) return t.EXTENDED_PICTOGRAPHIC;
        } else if (e < 128640) {
          if (128326 <= e && e <= 128591) return t.EXTENDED_PICTOGRAPHIC;
        } else if (e < 128884) {
          if (128640 <= e && e <= 128767) return t.EXTENDED_PICTOGRAPHIC;
        } else if (128884 <= e && e <= 128895) return t.EXTENDED_PICTOGRAPHIC;
      } else if (e < 129198) {
        if (e < 129096) {
          if (e < 129036) {
            if (128981 <= e && e <= 129023) return t.EXTENDED_PICTOGRAPHIC;
          } else if (129036 <= e && e <= 129039) return t.EXTENDED_PICTOGRAPHIC;
        } else if (e < 129114) {
          if (129096 <= e && e <= 129103) return t.EXTENDED_PICTOGRAPHIC;
        } else if (e < 129160) {
          if (129114 <= e && e <= 129119) return t.EXTENDED_PICTOGRAPHIC;
        } else if (129160 <= e && e <= 129167) return t.EXTENDED_PICTOGRAPHIC;
      } else if (e < 129340) {
        if (e < 129292) {
          if (129198 <= e && e <= 129279) return t.EXTENDED_PICTOGRAPHIC;
        } else if (129292 <= e && e <= 129338) return t.EXTENDED_PICTOGRAPHIC;
      } else if (e < 129351) {
        if (129340 <= e && e <= 129349) return t.EXTENDED_PICTOGRAPHIC;
      } else if (e < 130048) {
        if (129351 <= e && e <= 129791) return t.EXTENDED_PICTOGRAPHIC;
      } else if (130048 <= e && e <= 131069) return t.EXTENDED_PICTOGRAPHIC;
      return t.CLUSTER_BREAK.OTHER;
    }
  };
  return Tn.default = o, Tn;
}
var $f;
function WA() {
  if ($f) return Cn;
  $f = 1;
  var r = Cn && Cn.__importDefault || function(i) {
    return i && i.__esModule ? i : { default: i };
  };
  Object.defineProperty(Cn, "__esModule", { value: true });
  const t = r(XA());
  return Cn.default = t.default, Cn;
}
var Hf;
function JA() {
  if (Hf) return Re;
  Hf = 1;
  var r = Re && Re.__createBinding || (Object.create ? function(h, p, b, E) {
    E === void 0 && (E = b);
    var g = Object.getOwnPropertyDescriptor(p, b);
    (!g || ("get" in g ? !p.__esModule : g.writable || g.configurable)) && (g = { enumerable: true, get: function() {
      return p[b];
    } }), Object.defineProperty(h, E, g);
  } : function(h, p, b, E) {
    E === void 0 && (E = b), h[E] = p[b];
  }), t = Re && Re.__setModuleDefault || (Object.create ? function(h, p) {
    Object.defineProperty(h, "default", { enumerable: true, value: p });
  } : function(h, p) {
    h.default = p;
  }), i = Re && Re.__importStar || function(h) {
    if (h && h.__esModule) return h;
    var p = {};
    if (h != null) for (var b in h) b !== "default" && Object.prototype.hasOwnProperty.call(h, b) && r(p, h, b);
    return t(p, h), p;
  }, n = Re && Re.__importDefault || function(h) {
    return h && h.__esModule ? h : { default: h };
  };
  Object.defineProperty(Re, "__esModule", { value: true }), Re.validateLanguage = Re.parseLanguage = Re.b64UrlToUtf8 = Re.utf8ToB64Url = Re.graphemeLen = Re.utf8Len = void 0;
  const o = n(WA()), s = i(l_), e = (h) => new TextEncoder().encode(h).byteLength;
  Re.utf8Len = e;
  const u = (h) => new o.default().countGraphemes(h);
  Re.graphemeLen = u;
  const a = (h) => s.toString(s.fromString(h, "utf8"), "base64url");
  Re.utf8ToB64Url = a;
  const c = (h) => s.toString(s.fromString(h, "base64url"), "utf8");
  Re.b64UrlToUtf8 = c;
  const l = (h) => {
    const p = h.match(f);
    if (!p?.groups) return null;
    const b = p.groups;
    return { grandfathered: b.grandfathered, language: b.language, extlang: b.extlang, script: b.script, region: b.region, variant: b.variant, extension: b.extension, privateUse: b.privateUseA || b.privateUseB };
  };
  Re.parseLanguage = l;
  const d = (h) => f.test(h);
  Re.validateLanguage = d;
  const f = /^((?<grandfathered>(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((?<language>([A-Za-z]{2,3}(-(?<extlang>[A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-(?<script>[A-Za-z]{4}))?(-(?<region>[A-Za-z]{2}|[0-9]{3}))?(-(?<variant>[A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-(?<extension>[0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8})+))*(-(?<privateUseA>x(-[A-Za-z0-9]{1,8})+))?)|(?<privateUseB>x(-[A-Za-z0-9]{1,8})+))$/;
  return Re;
}
var Ad = {}, Xf;
function ZA() {
  return Xf || (Xf = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.didDocument = r.getServiceEndpoint = r.getNotifEndpoint = r.getFeedGenEndpoint = r.getPdsEndpoint = r.getSigningDidKey = r.getVerificationMaterial = r.getSigningKey = r.getHandle = r.getDid = r.isValidDidDoc = void 0;
    const t = oe(), i = (g) => r.didDocument.safeParse(g).success;
    r.isValidDidDoc = i;
    const n = (g) => {
      const x = g.id;
      if (typeof x != "string") throw new Error("No `id` on document");
      return x;
    };
    r.getDid = n;
    const o = (g) => {
      const x = g.alsoKnownAs;
      if (x) for (let T = 0; T < x.length; T++) {
        const A = x[T];
        if (A.startsWith("at://")) return A.slice(5);
      }
    };
    r.getHandle = o;
    const s = (g) => (0, r.getVerificationMaterial)(g, "atproto");
    r.getSigningKey = s;
    const e = (g, x) => {
      const T = f(g, "verificationMethod", `#${x}`);
      if (T && T.publicKeyMultibase) return { type: T.type, publicKeyMultibase: T.publicKeyMultibase };
    };
    r.getVerificationMaterial = e;
    const u = (g) => {
      const x = (0, r.getSigningKey)(g);
      if (x) return `did:key:${x.publicKeyMultibase}`;
    };
    r.getSigningDidKey = u;
    const a = (g) => (0, r.getServiceEndpoint)(g, { id: "#atproto_pds", type: "AtprotoPersonalDataServer" });
    r.getPdsEndpoint = a;
    const c = (g) => (0, r.getServiceEndpoint)(g, { id: "#bsky_fg", type: "BskyFeedGenerator" });
    r.getFeedGenEndpoint = c;
    const l = (g) => (0, r.getServiceEndpoint)(g, { id: "#bsky_notif", type: "BskyNotificationService" });
    r.getNotifEndpoint = l;
    const d = (g, x) => {
      const T = f(g, "service", x.id);
      if (T && !(x.type && T.type !== x.type) && typeof T.serviceEndpoint == "string") return h(T.serviceEndpoint);
    };
    r.getServiceEndpoint = d;
    function f(g, x, T) {
      const A = g[x];
      if (A) for (let K = 0; K < A.length; K++) {
        const j = A[K], O = j.id;
        if (O[0] === "#" ? O === T : O.length === g.id.length + T.length && O[g.id.length] === "#" && O.endsWith(T) && O.startsWith(g.id)) return j;
      }
    }
    const h = (g) => {
      if (!(!g.startsWith("http://") && !g.startsWith("https://")) && p(g)) return g;
    }, p = URL.canParse ?? ((g) => {
      try {
        return new URL(g), true;
      } catch {
        return false;
      }
    }), b = t.z.object({ id: t.z.string(), type: t.z.string(), controller: t.z.string(), publicKeyMultibase: t.z.string().optional() }), E = t.z.object({ id: t.z.string(), type: t.z.string(), serviceEndpoint: t.z.union([t.z.string(), t.z.record(t.z.unknown())]) });
    r.didDocument = t.z.object({ id: t.z.string(), alsoKnownAs: t.z.array(t.z.string()).optional(), verificationMethod: t.z.array(b).optional(), service: t.z.array(E).optional() });
  }(Ad)), Ad;
}
var Wf;
function Lr() {
  return Wf || (Wf = 1, function(r) {
    var t = Ht && Ht.__createBinding || (Object.create ? function(s, e, u, a) {
      a === void 0 && (a = u);
      var c = Object.getOwnPropertyDescriptor(e, u);
      (!c || ("get" in c ? !e.__esModule : c.writable || c.configurable)) && (c = { enumerable: true, get: function() {
        return e[u];
      } }), Object.defineProperty(s, a, c);
    } : function(s, e, u, a) {
      a === void 0 && (a = u), s[a] = e[u];
    }), i = Ht && Ht.__setModuleDefault || (Object.create ? function(s, e) {
      Object.defineProperty(s, "default", { enumerable: true, value: e });
    } : function(s, e) {
      s.default = e;
    }), n = Ht && Ht.__importStar || function(s) {
      if (s && s.__esModule) return s;
      var e = {};
      if (s != null) for (var u in s) u !== "default" && Object.prototype.hasOwnProperty.call(s, u) && t(e, s, u);
      return i(e, s), e;
    }, o = Ht && Ht.__exportStar || function(s, e) {
      for (var u in s) u !== "default" && !Object.prototype.hasOwnProperty.call(e, u) && t(e, s, u);
    };
    Object.defineProperty(r, "__esModule", { value: true }), r.util = r.check = void 0, r.check = n(aA()), r.util = n(La()), o(uA(), r), o(cA(), r), o(La(), r), o(lA(), r), o(NA(), r), o(zA(), r), o(GA(), r), o(FA(), r), o(JA(), r), o(ZA(), r);
  }(Ht)), Ht;
}
var Jf;
function _p() {
  return Jf || (Jf = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.BlobRef = r.jsonBlobRef = r.untypedJsonBlobRef = r.typedJsonBlobRef = void 0;
    const t = xo, i = oe(), n = Lr();
    r.typedJsonBlobRef = i.z.object({ $type: i.z.literal("blob"), ref: n.schema.cid, mimeType: i.z.string(), size: i.z.number() }).strict(), r.untypedJsonBlobRef = i.z.object({ cid: i.z.string(), mimeType: i.z.string() }).strict(), r.jsonBlobRef = i.z.union([r.typedJsonBlobRef, r.untypedJsonBlobRef]);
    class o {
      constructor(e, u, a, c) {
        Object.defineProperty(this, "ref", { enumerable: true, configurable: true, writable: true, value: e }), Object.defineProperty(this, "mimeType", { enumerable: true, configurable: true, writable: true, value: u }), Object.defineProperty(this, "size", { enumerable: true, configurable: true, writable: true, value: a }), Object.defineProperty(this, "original", { enumerable: true, configurable: true, writable: true, value: void 0 }), this.original = c ?? { $type: "blob", ref: e, mimeType: u, size: a };
      }
      static asBlobRef(e) {
        return n.check.is(e, r.jsonBlobRef) ? o.fromJsonRef(e) : null;
      }
      static fromJsonRef(e) {
        return n.check.is(e, r.typedJsonBlobRef) ? new o(e.ref, e.mimeType, e.size) : new o(t.CID.parse(e.cid), e.mimeType, -1, e);
      }
      ipld() {
        return { $type: "blob", ref: this.ref, mimeType: this.mimeType, size: this.size };
      }
      toJSON() {
        return (0, n.ipldToJson)(this.ipld());
      }
    }
    r.BlobRef = o;
  }(gd)), gd;
}
var Zf;
function QA() {
  if (Zf) return $a;
  Zf = 1, Object.defineProperty($a, "__esModule", { value: true }), $a.blob = i;
  const r = _p(), t = on();
  function i(n, o, s, e) {
    return !e || !(e instanceof r.BlobRef) ? { success: false, error: new t.ValidationError(`${o} should be a blob ref`) } : { success: true, value: e };
  }
  return $a;
}
var nr = {}, mt = {}, Sd = {}, Qf;
function YA() {
  return Qf || (Qf = 1, function(r) {
    (() => {
      var t = { d: (l, d) => {
        for (var f in d) t.o(d, f) && !t.o(l, f) && Object.defineProperty(l, f, { enumerable: true, get: d[f] });
      }, o: (l, d) => Object.prototype.hasOwnProperty.call(l, d), r: (l) => {
        typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(l, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(l, "__esModule", { value: true });
      } }, i = {};
      function n(l, d) {
        return d === void 0 && (d = "-"), new RegExp("^(?!0{4}" + d + "0{2}" + d + "0{2})((?=[0-9]{4}" + d + "(((0[^2])|1[0-2])|02(?=" + d + "(([0-1][0-9])|2[0-8])))" + d + "[0-9]{2})|(?=((([13579][26])|([2468][048])|(0[48]))0{2})|([0-9]{2}((((0|[2468])[48])|[2468][048])|([13579][26])))" + d + "02" + d + "29))([0-9]{4})" + d + "(?!((0[469])|11)" + d + "31)((0[1,3-9]|1[0-2])|(02(?!" + d + "3)))" + d + "(0[1-9]|[1-2][0-9]|3[0-1])$").test(l);
      }
      function o(l) {
        var d = /\D/.exec(l);
        return d ? d[0] : "";
      }
      function s(l, d, f) {
        d === void 0 && (d = ":"), f === void 0 && (f = false);
        var h = new RegExp("^([0-1]|2(?=([0-3])|4" + d + "00))[0-9]" + d + "[0-5][0-9](" + d + "([0-5]|6(?=0))[0-9])?(.[0-9]{1,9})?$");
        if (!f || !/[Z+\-]/.test(l)) return h.test(l);
        if (/Z$/.test(l)) return h.test(l.replace("Z", ""));
        var p = l.includes("+"), b = l.split(/[+-]/), E = b[0], g = b[1];
        return h.test(E) && function(x, T, A) {
          return A === void 0 && (A = ":"), new RegExp(T ? "^(0(?!(2" + A + "4)|0" + A + "3)|1(?=([0-1]|2(?=" + A + "[04])|[34](?=" + A + "0))))([03469](?=" + A + "[03])|[17](?=" + A + "0)|2(?=" + A + "[04])|5(?=" + A + "[034])|8(?=" + A + "[04]))" + A + "([03](?=0)|4(?=5))[05]$" : "^(0(?=[^0])|1(?=[0-2]))([39](?=" + A + "[03])|[0-24-8](?=" + A + "00))" + A + "[03]0$").test(x);
        }(g, p, o(g));
      }
      function e(l) {
        var d = l.split("T"), f = d[0], h = d[1], p = n(f, o(f));
        if (!h) return false;
        var b, E = (b = h.match(/([^Z+\-\d])(?=\d+\1)/), Array.isArray(b) ? b[0] : "");
        return p && s(h, E, true);
      }
      function u(l, d) {
        return d === void 0 && (d = "-"), new RegExp("^[0-9]{4}" + d + "(0(?=[^0])|1(?=[0-2]))[0-9]$").test(l);
      }
      t.r(i), t.d(i, { isValidDate: () => n, isValidISODateString: () => e, isValidTime: () => s, isValidYearMonth: () => u });
      var a = r;
      for (var c in i) a[c] = i[c];
      i.__esModule && Object.defineProperty(a, "__esModule", { value: true });
    })();
  }(Sd)), Sd;
}
var Yf;
function eS() {
  if (Yf) return mt;
  Yf = 1, Object.defineProperty(mt, "__esModule", { value: true }), mt.datetime = s, mt.uri = e, mt.atUri = u, mt.did = a, mt.handle = c, mt.atIdentifier = l, mt.nsid = d, mt.cid = f, mt.language = h, mt.tid = p, mt.recordKey = b;
  const r = YA(), t = xo, i = Lr(), n = nn(), o = on();
  function s(E, g) {
    try {
      if (!(0, r.isValidISODateString)(g)) throw new Error();
    } catch {
      return { success: false, error: new o.ValidationError(`${E} must be an valid atproto datetime (both RFC-3339 and ISO-8601)`) };
    }
    return { success: true, value: g };
  }
  function e(E, g) {
    return g.match(/^\w+:(?:\/\/)?[^\s/][^\s]*$/) !== null ? { success: true, value: g } : { success: false, error: new o.ValidationError(`${E} must be a uri`) };
  }
  function u(E, g) {
    try {
      (0, n.ensureValidAtUri)(g);
    } catch {
      return { success: false, error: new o.ValidationError(`${E} must be a valid at-uri`) };
    }
    return { success: true, value: g };
  }
  function a(E, g) {
    try {
      (0, n.ensureValidDid)(g);
    } catch {
      return { success: false, error: new o.ValidationError(`${E} must be a valid did`) };
    }
    return { success: true, value: g };
  }
  function c(E, g) {
    try {
      (0, n.ensureValidHandle)(g);
    } catch {
      return { success: false, error: new o.ValidationError(`${E} must be a valid handle`) };
    }
    return { success: true, value: g };
  }
  function l(E, g) {
    if (g.startsWith("did:")) {
      const x = a(E, g);
      if (x.success) return x;
    } else {
      const x = c(E, g);
      if (x.success) return x;
    }
    return { success: false, error: new o.ValidationError(`${E} must be a valid did or a handle`) };
  }
  function d(E, g) {
    try {
      (0, n.ensureValidNsid)(g);
    } catch {
      return { success: false, error: new o.ValidationError(`${E} must be a valid nsid`) };
    }
    return { success: true, value: g };
  }
  function f(E, g) {
    try {
      t.CID.parse(g);
    } catch {
      return { success: false, error: new o.ValidationError(`${E} must be a cid string`) };
    }
    return { success: true, value: g };
  }
  function h(E, g) {
    return (0, i.validateLanguage)(g) ? { success: true, value: g } : { success: false, error: new o.ValidationError(`${E} must be a well-formed BCP 47 language tag`) };
  }
  function p(E, g) {
    return (0, n.isValidTid)(g) ? { success: true, value: g } : { success: false, error: new o.ValidationError(`${E} must be a valid TID`) };
  }
  function b(E, g) {
    try {
      (0, n.ensureValidRecordKey)(g);
    } catch {
      return { success: false, error: new o.ValidationError(`${E} must be a valid Record Key`) };
    }
    return { success: true, value: g };
  }
  return mt;
}
var eh;
function p_() {
  if (eh) return nr;
  eh = 1;
  var r = nr && nr.__createBinding || (Object.create ? function(p, b, E, g) {
    g === void 0 && (g = E);
    var x = Object.getOwnPropertyDescriptor(b, E);
    (!x || ("get" in x ? !b.__esModule : x.writable || x.configurable)) && (x = { enumerable: true, get: function() {
      return b[E];
    } }), Object.defineProperty(p, g, x);
  } : function(p, b, E, g) {
    g === void 0 && (g = E), p[g] = b[E];
  }), t = nr && nr.__setModuleDefault || (Object.create ? function(p, b) {
    Object.defineProperty(p, "default", { enumerable: true, value: b });
  } : function(p, b) {
    p.default = b;
  }), i = nr && nr.__importStar || function(p) {
    if (p && p.__esModule) return p;
    var b = {};
    if (p != null) for (var E in p) E !== "default" && Object.prototype.hasOwnProperty.call(p, E) && r(b, p, E);
    return t(b, p), b;
  };
  Object.defineProperty(nr, "__esModule", { value: true }), nr.validate = u;
  const n = xo, o = Lr(), s = on(), e = i(eS());
  function u(p, b, E, g) {
    switch (E.type) {
      case "boolean":
        return a(p, b, E, g);
      case "integer":
        return c(p, b, E, g);
      case "string":
        return l(p, b, E, g);
      case "bytes":
        return d(p, b, E, g);
      case "cid-link":
        return f(p, b, E, g);
      case "unknown":
        return h(p, b, E, g);
      default:
        return { success: false, error: new s.ValidationError(`Unexpected lexicon type: ${E.type}`) };
    }
  }
  function a(p, b, E, g) {
    E = E;
    const x = typeof g;
    return x === "undefined" ? typeof E.default == "boolean" ? { success: true, value: E.default } : { success: false, error: new s.ValidationError(`${b} must be a boolean`) } : x !== "boolean" ? { success: false, error: new s.ValidationError(`${b} must be a boolean`) } : typeof E.const == "boolean" && g !== E.const ? { success: false, error: new s.ValidationError(`${b} must be ${E.const}`) } : { success: true, value: g };
  }
  function c(p, b, E, g) {
    return E = E, typeof g === "undefined" ? typeof E.default == "number" ? { success: true, value: E.default } : { success: false, error: new s.ValidationError(`${b} must be an integer`) } : Number.isInteger(g) ? typeof E.const == "number" && g !== E.const ? { success: false, error: new s.ValidationError(`${b} must be ${E.const}`) } : Array.isArray(E.enum) && !E.enum.includes(g) ? { success: false, error: new s.ValidationError(`${b} must be one of (${E.enum.join("|")})`) } : typeof E.maximum == "number" && g > E.maximum ? { success: false, error: new s.ValidationError(`${b} can not be greater than ${E.maximum}`) } : typeof E.minimum == "number" && g < E.minimum ? { success: false, error: new s.ValidationError(`${b} can not be less than ${E.minimum}`) } : { success: true, value: g } : { success: false, error: new s.ValidationError(`${b} must be an integer`) };
  }
  function l(p, b, E, g) {
    if (E = E, typeof g > "u") return typeof E.default == "string" ? { success: true, value: E.default } : { success: false, error: new s.ValidationError(`${b} must be a string`) };
    if (typeof g != "string") return { success: false, error: new s.ValidationError(`${b} must be a string`) };
    if (typeof E.const == "string" && g !== E.const) return { success: false, error: new s.ValidationError(`${b} must be ${E.const}`) };
    if (Array.isArray(E.enum) && !E.enum.includes(g)) return { success: false, error: new s.ValidationError(`${b} must be one of (${E.enum.join("|")})`) };
    if (typeof E.minLength == "number" || typeof E.maxLength == "number") {
      if (typeof E.minLength == "number" && g.length * 3 < E.minLength) return { success: false, error: new s.ValidationError(`${b} must not be shorter than ${E.minLength} characters`) };
      let x = false;
      if (typeof E.minLength > "u" && typeof E.maxLength == "number" && g.length * 3 <= E.maxLength && (x = true), !x) {
        const T = (0, o.utf8Len)(g);
        if (typeof E.maxLength == "number" && T > E.maxLength) return { success: false, error: new s.ValidationError(`${b} must not be longer than ${E.maxLength} characters`) };
        if (typeof E.minLength == "number" && T < E.minLength) return { success: false, error: new s.ValidationError(`${b} must not be shorter than ${E.minLength} characters`) };
      }
    }
    if (typeof E.maxGraphemes == "number" || typeof E.minGraphemes == "number") {
      let x = false, T = false;
      if (typeof E.maxGraphemes == "number" && (g.length <= E.maxGraphemes ? x = false : x = true), typeof E.minGraphemes == "number") {
        if (g.length < E.minGraphemes) return { success: false, error: new s.ValidationError(`${b} must not be shorter than ${E.minGraphemes} graphemes`) };
        T = true;
      }
      if (x || T) {
        const A = (0, o.graphemeLen)(g);
        if (typeof E.maxGraphemes == "number" && A > E.maxGraphemes) return { success: false, error: new s.ValidationError(`${b} must not be longer than ${E.maxGraphemes} graphemes`) };
        if (typeof E.minGraphemes == "number" && A < E.minGraphemes) return { success: false, error: new s.ValidationError(`${b} must not be shorter than ${E.minGraphemes} graphemes`) };
      }
    }
    if (typeof E.format == "string") switch (E.format) {
      case "datetime":
        return e.datetime(b, g);
      case "uri":
        return e.uri(b, g);
      case "at-uri":
        return e.atUri(b, g);
      case "did":
        return e.did(b, g);
      case "handle":
        return e.handle(b, g);
      case "at-identifier":
        return e.atIdentifier(b, g);
      case "nsid":
        return e.nsid(b, g);
      case "cid":
        return e.cid(b, g);
      case "language":
        return e.language(b, g);
      case "tid":
        return e.tid(b, g);
      case "record-key":
        return e.recordKey(b, g);
    }
    return { success: true, value: g };
  }
  function d(p, b, E, g) {
    return E = E, !g || !(g instanceof Uint8Array) ? { success: false, error: new s.ValidationError(`${b} must be a byte array`) } : typeof E.maxLength == "number" && g.byteLength > E.maxLength ? { success: false, error: new s.ValidationError(`${b} must not be larger than ${E.maxLength} bytes`) } : typeof E.minLength == "number" && g.byteLength < E.minLength ? { success: false, error: new s.ValidationError(`${b} must not be smaller than ${E.minLength} bytes`) } : { success: true, value: g };
  }
  function f(p, b, E, g) {
    return n.CID.asCID(g) === null ? { success: false, error: new s.ValidationError(`${b} must be a CID`) } : { success: true, value: g };
  }
  function h(p, b, E, g) {
    return !g || typeof g != "object" ? { success: false, error: new s.ValidationError(`${b} must be an object`) } : { success: true, value: g };
  }
  return nr;
}
var th;
function wp() {
  if (th) return vi;
  th = 1, Object.defineProperty(vi, "__esModule", { value: true }), vi.validate = o, vi.array = s, vi.object = e, vi.validateOneOf = u;
  const r = on(), t = Ep(), i = QA(), n = p_();
  function o(c, l, d, f) {
    switch (d.type) {
      case "object":
        return e(c, l, d, f);
      case "array":
        return s(c, l, d, f);
      case "blob":
        return (0, i.blob)(c, l, d, f);
      default:
        return (0, n.validate)(c, l, d, f);
    }
  }
  function s(c, l, d, f) {
    if (!Array.isArray(f)) return { success: false, error: new r.ValidationError(`${l} must be an array`) };
    if (typeof d.maxLength == "number" && f.length > d.maxLength) return { success: false, error: new r.ValidationError(`${l} must not have more than ${d.maxLength} elements`) };
    if (typeof d.minLength == "number" && f.length < d.minLength) return { success: false, error: new r.ValidationError(`${l} must not have fewer than ${d.minLength} elements`) };
    const h = d.items;
    for (let p = 0; p < f.length; p++) {
      const b = f[p], E = `${l}/${p}`, g = u(c, E, h, b);
      if (!g.success) return g;
    }
    return { success: true, value: f };
  }
  function e(c, l, d, f) {
    if (!(0, r.isObj)(f)) return { success: false, error: new r.ValidationError(`${l} must be an object`) };
    let h = f;
    if ("properties" in d && d.properties != null) for (const p in d.properties) {
      const b = f[p];
      if (b === null && d.nullable?.includes(p)) continue;
      const E = d.properties[p];
      if (b === void 0 && !d.required?.includes(p)) if (E.type === "integer" || E.type === "boolean" || E.type === "string") {
        if (E.default === void 0) continue;
      } else continue;
      const g = `${l}/${p}`, x = u(c, g, E, b), T = x.success ? x.value : b;
      if (T === void 0) {
        if (d.required?.includes(p)) return { success: false, error: new r.ValidationError(`${l} must have the property "${p}"`) };
      } else if (!x.success) return x;
      T !== b && (h === f && (h = { ...f }), h[p] = T);
    }
    return { success: true, value: h };
  }
  function u(c, l, d, f, h = false) {
    let p;
    if (d.type === "union") {
      if (!(0, r.isDiscriminatedObject)(f)) return { success: false, error: new r.ValidationError(`${l} must be an object which includes the "$type" property`) };
      if (a(d.refs, f.$type)) p = c.getDefOrThrow(f.$type);
      else return d.closed ? { success: false, error: new r.ValidationError(`${l} $type must be one of ${d.refs.join(", ")}`) } : { success: true, value: f };
    } else d.type === "ref" ? p = c.getDefOrThrow(d.ref) : p = d;
    return h ? e(c, l, p, f) : o(c, l, p, f);
  }
  const a = (c, l) => {
    const d = (0, t.toLexUri)(l);
    return c.includes(d) ? true : d.endsWith("#main") ? c.includes(d.slice(0, -5)) : !d.includes("#") && c.includes(`${d}#main`);
  };
  return vi;
}
var or = {}, rh;
function tS() {
  if (rh) return or;
  rh = 1;
  var r = or && or.__createBinding || (Object.create ? function(u, a, c, l) {
    l === void 0 && (l = c);
    var d = Object.getOwnPropertyDescriptor(a, c);
    (!d || ("get" in d ? !a.__esModule : d.writable || d.configurable)) && (d = { enumerable: true, get: function() {
      return a[c];
    } }), Object.defineProperty(u, l, d);
  } : function(u, a, c, l) {
    l === void 0 && (l = c), u[l] = a[c];
  }), t = or && or.__setModuleDefault || (Object.create ? function(u, a) {
    Object.defineProperty(u, "default", { enumerable: true, value: a });
  } : function(u, a) {
    u.default = a;
  }), i = or && or.__importStar || function(u) {
    if (u && u.__esModule) return u;
    var a = {};
    if (u != null) for (var c in u) c !== "default" && Object.prototype.hasOwnProperty.call(u, c) && r(a, u, c);
    return t(a, u), a;
  };
  Object.defineProperty(or, "__esModule", { value: true }), or.params = e;
  const n = on(), o = wp(), s = i(p_());
  function e(u, a, c, l) {
    const d = l && typeof l == "object" ? l : {}, f = new Set(c.required ?? []);
    let h = d;
    if (typeof c.properties == "object") for (const p in c.properties) {
      const b = c.properties[p], E = b.type === "array" ? (0, o.array)(u, p, b, d[p]) : s.validate(u, p, b, d[p]), g = E.success ? E.value : d[p], x = typeof g > "u";
      if (x && f.has(p)) return { success: false, error: new n.ValidationError(`${a} must have the property "${p}"`) };
      if (!x && !E.success) return E;
      g !== d[p] && (h === d && (h = { ...d }), h[p] = g);
    }
    return { success: true, value: h };
  }
  return or;
}
var ih;
function rS() {
  if (ih) return Br;
  ih = 1, Object.defineProperty(Br, "__esModule", { value: true }), Br.assertValidRecord = i, Br.assertValidXrpcParams = n, Br.assertValidXrpcInput = o, Br.assertValidXrpcOutput = s, Br.assertValidXrpcMessage = e;
  const r = wp(), t = tS();
  function i(a, c, l) {
    const d = (0, r.object)(a, "Record", c.record, l);
    if (!d.success) throw d.error;
    return d.value;
  }
  function n(a, c, l) {
    if (c.parameters) {
      const d = (0, t.params)(a, "Params", c.parameters, l);
      if (!d.success) throw d.error;
      return d.value;
    }
  }
  function o(a, c, l) {
    if (c.input?.schema) return u(a, "Input", c.input.schema, l, true);
  }
  function s(a, c, l) {
    if (c.output?.schema) return u(a, "Output", c.output.schema, l, true);
  }
  function e(a, c, l) {
    if (c.message?.schema) return u(a, "Message", c.message.schema, l, true);
  }
  function u(a, c, l, d, f = false) {
    const h = (0, r.validateOneOf)(a, c, l, d, f);
    if (!h.success) throw h.error;
    return h.value;
  }
  return Br;
}
var nh;
function iS() {
  if (nh) return ko;
  nh = 1, Object.defineProperty(ko, "__esModule", { value: true }), ko.Lexicons = void 0;
  const r = on(), t = Ep(), i = rS(), n = wp();
  class o {
    constructor(a) {
      if (Object.defineProperty(this, "docs", { enumerable: true, configurable: true, writable: true, value: /* @__PURE__ */ new Map() }), Object.defineProperty(this, "defs", { enumerable: true, configurable: true, writable: true, value: /* @__PURE__ */ new Map() }), a) for (const c of a) this.add(c);
    }
    [Symbol.iterator]() {
      return this.docs.values();
    }
    add(a) {
      const c = (0, t.toLexUri)(a.id);
      if (this.docs.has(c)) throw new Error(`${c} has already been registered`);
      e(a, c), this.docs.set(c, a);
      for (const [l, d] of s(a)) this.defs.set(l, d);
    }
    remove(a) {
      a = (0, t.toLexUri)(a);
      const c = this.docs.get(a);
      if (!c) throw new Error(`Unable to remove "${a}": does not exist`);
      for (const [l, d] of s(c)) this.defs.delete(l);
      this.docs.delete(a);
    }
    get(a) {
      return a = (0, t.toLexUri)(a), this.docs.get(a);
    }
    getDef(a) {
      return a = (0, t.toLexUri)(a), this.defs.get(a);
    }
    getDefOrThrow(a, c) {
      const l = this.getDef(a);
      if (!l) throw new r.LexiconDefNotFoundError(`Lexicon not found: ${a}`);
      if (c && !c.includes(l.type)) throw new r.InvalidLexiconError(`Not a ${c.join(" or ")} lexicon: ${a}`);
      return l;
    }
    validate(a, c) {
      if (!(0, r.isObj)(c)) throw new r.ValidationError("Value must be an object");
      const l = (0, t.toLexUri)(a), d = this.getDefOrThrow(l, ["record", "object"]);
      if (d.type === "record") return (0, n.object)(this, "Record", d.record, c);
      if (d.type === "object") return (0, n.object)(this, "Object", d, c);
      throw new r.InvalidLexiconError("Definition must be a record or object");
    }
    assertValidRecord(a, c) {
      if (!(0, r.isObj)(c)) throw new r.ValidationError("Record must be an object");
      if (!("$type" in c)) throw new r.ValidationError("Record/$type must be a string");
      const { $type: l } = c;
      if (typeof l != "string") throw new r.ValidationError("Record/$type must be a string");
      const d = (0, t.toLexUri)(a);
      if ((0, t.toLexUri)(l) !== d) throw new r.ValidationError(`Invalid $type: must be ${d}, got ${l}`);
      const f = this.getDefOrThrow(d, ["record"]);
      return (0, i.assertValidRecord)(this, f, c);
    }
    assertValidXrpcParams(a, c) {
      a = (0, t.toLexUri)(a);
      const l = this.getDefOrThrow(a, ["query", "procedure", "subscription"]);
      return (0, i.assertValidXrpcParams)(this, l, c);
    }
    assertValidXrpcInput(a, c) {
      a = (0, t.toLexUri)(a);
      const l = this.getDefOrThrow(a, ["procedure"]);
      return (0, i.assertValidXrpcInput)(this, l, c);
    }
    assertValidXrpcOutput(a, c) {
      a = (0, t.toLexUri)(a);
      const l = this.getDefOrThrow(a, ["query", "procedure"]);
      return (0, i.assertValidXrpcOutput)(this, l, c);
    }
    assertValidXrpcMessage(a, c) {
      a = (0, t.toLexUri)(a);
      const l = this.getDefOrThrow(a, ["subscription"]);
      return (0, i.assertValidXrpcMessage)(this, l, c);
    }
    resolveLexUri(a, c) {
      return a = (0, t.toLexUri)(a), (0, t.toLexUri)(c, a);
    }
  }
  ko.Lexicons = o;
  function* s(u) {
    for (const a in u.defs) yield [`lex:${u.id}#${a}`, u.defs[a]], a === "main" && (yield [`lex:${u.id}`, u.defs[a]]);
  }
  function e(u, a) {
    for (const c in u) u.type === "ref" ? u.ref = (0, t.toLexUri)(u.ref, a) : u.type === "union" ? u.refs = u.refs.map((l) => (0, t.toLexUri)(l, a)) : Array.isArray(u[c]) ? u[c] = u[c].map((l) => typeof l == "string" ? l.startsWith("#") ? (0, t.toLexUri)(l, a) : l : l && typeof l == "object" ? e(l, a) : l) : u[c] && typeof u[c] == "object" && (u[c] = e(u[c], a));
    return u;
  }
  return ko;
}
var Cd = {}, oh;
function nS() {
  return oh || (oh = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.jsonStringToLex = r.jsonToLex = r.stringifyLex = r.lexToJson = r.ipldToLex = r.lexToIpld = void 0;
    const t = xo, i = Lr(), n = _p(), o = (l) => {
      if (Array.isArray(l)) return l.map((d) => (0, r.lexToIpld)(d));
      if (l && typeof l == "object") {
        if (l instanceof n.BlobRef) return l.original;
        if (t.CID.asCID(l) || l instanceof Uint8Array) return l;
        const d = {};
        for (const f of Object.keys(l)) d[f] = (0, r.lexToIpld)(l[f]);
        return d;
      }
      return l;
    };
    r.lexToIpld = o;
    const s = (l) => {
      if (Array.isArray(l)) return l.map((d) => (0, r.ipldToLex)(d));
      if (l && typeof l == "object") {
        if ((l.$type === "blob" || typeof l.cid == "string" && typeof l.mimeType == "string") && i.check.is(l, n.jsonBlobRef)) return n.BlobRef.fromJsonRef(l);
        if (t.CID.asCID(l) || l instanceof Uint8Array) return l;
        const d = {};
        for (const f of Object.keys(l)) d[f] = (0, r.ipldToLex)(l[f]);
        return d;
      }
      return l;
    };
    r.ipldToLex = s;
    const e = (l) => (0, i.ipldToJson)((0, r.lexToIpld)(l));
    r.lexToJson = e;
    const u = (l) => JSON.stringify((0, r.lexToJson)(l));
    r.stringifyLex = u;
    const a = (l) => (0, r.ipldToLex)((0, i.jsonToIpld)(l));
    r.jsonToLex = a;
    const c = (l) => (0, r.jsonToLex)(JSON.parse(l));
    r.jsonStringToLex = c;
  }(Cd)), Cd;
}
var sh;
function rn() {
  return sh || (sh = 1, function(r) {
    var t = yi && yi.__createBinding || (Object.create ? function(n, o, s, e) {
      e === void 0 && (e = s);
      var u = Object.getOwnPropertyDescriptor(o, s);
      (!u || ("get" in u ? !o.__esModule : u.writable || u.configurable)) && (u = { enumerable: true, get: function() {
        return o[s];
      } }), Object.defineProperty(n, e, u);
    } : function(n, o, s, e) {
      e === void 0 && (e = s), n[e] = o[s];
    }), i = yi && yi.__exportStar || function(n, o) {
      for (var s in n) s !== "default" && !Object.prototype.hasOwnProperty.call(o, s) && t(o, n, s);
    };
    Object.defineProperty(r, "__esModule", { value: true }), i(on(), r), i(iS(), r), i(_p(), r), i(nS(), r);
  }(yi)), yi;
}
var Td = {}, Ln = {}, ah;
function P() {
  if (ah) return Ln;
  ah = 1, Object.defineProperty(Ln, "__esModule", { value: true }), Ln.is$typed = i, Ln.maybe$typed = n, Ln.asPredicate = o;
  function r(s) {
    return s != null && typeof s == "object";
  }
  function t(s, e, u) {
    return u === "main" ? s === e : typeof s == "string" && s.length === e.length + 1 + u.length && s.charCodeAt(e.length) === 35 && s.startsWith(e) && s.endsWith(u);
  }
  function i(s, e, u) {
    return r(s) && "$type" in s && t(s.$type, e, u);
  }
  function n(s, e, u) {
    return r(s) && ("$type" in s ? s.$type === void 0 || t(s.$type, e, u) : true);
  }
  function o(s) {
    return function(e) {
      return s(e).success;
    };
  }
  return Ln;
}
var uh;
function D() {
  return uh || (uh = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.ids = r.lexicons = r.schemas = r.schemaDict = void 0, r.validate = n;
    const t = rn(), i = P();
    r.schemaDict = { ComAtprotoAdminDefs: { lexicon: 1, id: "com.atproto.admin.defs", defs: { statusAttr: { type: "object", required: ["applied"], properties: { applied: { type: "boolean" }, ref: { type: "string" } } }, accountView: { type: "object", required: ["did", "handle", "indexedAt"], properties: { did: { type: "string", format: "did" }, handle: { type: "string", format: "handle" }, email: { type: "string" }, relatedRecords: { type: "array", items: { type: "unknown" } }, indexedAt: { type: "string", format: "datetime" }, invitedBy: { type: "ref", ref: "lex:com.atproto.server.defs#inviteCode" }, invites: { type: "array", items: { type: "ref", ref: "lex:com.atproto.server.defs#inviteCode" } }, invitesDisabled: { type: "boolean" }, emailConfirmedAt: { type: "string", format: "datetime" }, inviteNote: { type: "string" }, deactivatedAt: { type: "string", format: "datetime" }, threatSignatures: { type: "array", items: { type: "ref", ref: "lex:com.atproto.admin.defs#threatSignature" } } } }, repoRef: { type: "object", required: ["did"], properties: { did: { type: "string", format: "did" } } }, repoBlobRef: { type: "object", required: ["did", "cid"], properties: { did: { type: "string", format: "did" }, cid: { type: "string", format: "cid" }, recordUri: { type: "string", format: "at-uri" } } }, threatSignature: { type: "object", required: ["property", "value"], properties: { property: { type: "string" }, value: { type: "string" } } } } }, ComAtprotoAdminDeleteAccount: { lexicon: 1, id: "com.atproto.admin.deleteAccount", defs: { main: { type: "procedure", description: "Delete a user account as an administrator.", input: { encoding: "application/json", schema: { type: "object", required: ["did"], properties: { did: { type: "string", format: "did" } } } } } } }, ComAtprotoAdminDisableAccountInvites: { lexicon: 1, id: "com.atproto.admin.disableAccountInvites", defs: { main: { type: "procedure", description: "Disable an account from receiving new invite codes, but does not invalidate existing codes.", input: { encoding: "application/json", schema: { type: "object", required: ["account"], properties: { account: { type: "string", format: "did" }, note: { type: "string", description: "Optional reason for disabled invites." } } } } } } }, ComAtprotoAdminDisableInviteCodes: { lexicon: 1, id: "com.atproto.admin.disableInviteCodes", defs: { main: { type: "procedure", description: "Disable some set of codes and/or all codes associated with a set of users.", input: { encoding: "application/json", schema: { type: "object", properties: { codes: { type: "array", items: { type: "string" } }, accounts: { type: "array", items: { type: "string" } } } } } } } }, ComAtprotoAdminEnableAccountInvites: { lexicon: 1, id: "com.atproto.admin.enableAccountInvites", defs: { main: { type: "procedure", description: "Re-enable an account's ability to receive invite codes.", input: { encoding: "application/json", schema: { type: "object", required: ["account"], properties: { account: { type: "string", format: "did" }, note: { type: "string", description: "Optional reason for enabled invites." } } } } } } }, ComAtprotoAdminGetAccountInfo: { lexicon: 1, id: "com.atproto.admin.getAccountInfo", defs: { main: { type: "query", description: "Get details about an account.", parameters: { type: "params", required: ["did"], properties: { did: { type: "string", format: "did" } } }, output: { encoding: "application/json", schema: { type: "ref", ref: "lex:com.atproto.admin.defs#accountView" } } } } }, ComAtprotoAdminGetAccountInfos: { lexicon: 1, id: "com.atproto.admin.getAccountInfos", defs: { main: { type: "query", description: "Get details about some accounts.", parameters: { type: "params", required: ["dids"], properties: { dids: { type: "array", items: { type: "string", format: "did" } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["infos"], properties: { infos: { type: "array", items: { type: "ref", ref: "lex:com.atproto.admin.defs#accountView" } } } } } } } }, ComAtprotoAdminGetInviteCodes: { lexicon: 1, id: "com.atproto.admin.getInviteCodes", defs: { main: { type: "query", description: "Get an admin view of invite codes.", parameters: { type: "params", properties: { sort: { type: "string", knownValues: ["recent", "usage"], default: "recent" }, limit: { type: "integer", minimum: 1, maximum: 500, default: 100 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["codes"], properties: { cursor: { type: "string" }, codes: { type: "array", items: { type: "ref", ref: "lex:com.atproto.server.defs#inviteCode" } } } } } } } }, ComAtprotoAdminGetSubjectStatus: { lexicon: 1, id: "com.atproto.admin.getSubjectStatus", defs: { main: { type: "query", description: "Get the service-specific admin status of a subject (account, record, or blob).", parameters: { type: "params", properties: { did: { type: "string", format: "did" }, uri: { type: "string", format: "at-uri" }, blob: { type: "string", format: "cid" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["subject"], properties: { subject: { type: "union", refs: ["lex:com.atproto.admin.defs#repoRef", "lex:com.atproto.repo.strongRef", "lex:com.atproto.admin.defs#repoBlobRef"] }, takedown: { type: "ref", ref: "lex:com.atproto.admin.defs#statusAttr" }, deactivated: { type: "ref", ref: "lex:com.atproto.admin.defs#statusAttr" } } } } } } }, ComAtprotoAdminSearchAccounts: { lexicon: 1, id: "com.atproto.admin.searchAccounts", defs: { main: { type: "query", description: "Get list of accounts that matches your search query.", parameters: { type: "params", properties: { email: { type: "string" }, cursor: { type: "string" }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 } } }, output: { encoding: "application/json", schema: { type: "object", required: ["accounts"], properties: { cursor: { type: "string" }, accounts: { type: "array", items: { type: "ref", ref: "lex:com.atproto.admin.defs#accountView" } } } } } } } }, ComAtprotoAdminSendEmail: { lexicon: 1, id: "com.atproto.admin.sendEmail", defs: { main: { type: "procedure", description: "Send email to a user's account email address.", input: { encoding: "application/json", schema: { type: "object", required: ["recipientDid", "content", "senderDid"], properties: { recipientDid: { type: "string", format: "did" }, content: { type: "string" }, subject: { type: "string" }, senderDid: { type: "string", format: "did" }, comment: { type: "string", description: "Additional comment by the sender that won't be used in the email itself but helpful to provide more context for moderators/reviewers" } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["sent"], properties: { sent: { type: "boolean" } } } } } } }, ComAtprotoAdminUpdateAccountEmail: { lexicon: 1, id: "com.atproto.admin.updateAccountEmail", defs: { main: { type: "procedure", description: "Administrative action to update an account's email.", input: { encoding: "application/json", schema: { type: "object", required: ["account", "email"], properties: { account: { type: "string", format: "at-identifier", description: "The handle or DID of the repo." }, email: { type: "string" } } } } } } }, ComAtprotoAdminUpdateAccountHandle: { lexicon: 1, id: "com.atproto.admin.updateAccountHandle", defs: { main: { type: "procedure", description: "Administrative action to update an account's handle.", input: { encoding: "application/json", schema: { type: "object", required: ["did", "handle"], properties: { did: { type: "string", format: "did" }, handle: { type: "string", format: "handle" } } } } } } }, ComAtprotoAdminUpdateAccountPassword: { lexicon: 1, id: "com.atproto.admin.updateAccountPassword", defs: { main: { type: "procedure", description: "Update the password for a user account as an administrator.", input: { encoding: "application/json", schema: { type: "object", required: ["did", "password"], properties: { did: { type: "string", format: "did" }, password: { type: "string" } } } } } } }, ComAtprotoAdminUpdateSubjectStatus: { lexicon: 1, id: "com.atproto.admin.updateSubjectStatus", defs: { main: { type: "procedure", description: "Update the service-specific admin status of a subject (account, record, or blob).", input: { encoding: "application/json", schema: { type: "object", required: ["subject"], properties: { subject: { type: "union", refs: ["lex:com.atproto.admin.defs#repoRef", "lex:com.atproto.repo.strongRef", "lex:com.atproto.admin.defs#repoBlobRef"] }, takedown: { type: "ref", ref: "lex:com.atproto.admin.defs#statusAttr" }, deactivated: { type: "ref", ref: "lex:com.atproto.admin.defs#statusAttr" } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["subject"], properties: { subject: { type: "union", refs: ["lex:com.atproto.admin.defs#repoRef", "lex:com.atproto.repo.strongRef", "lex:com.atproto.admin.defs#repoBlobRef"] }, takedown: { type: "ref", ref: "lex:com.atproto.admin.defs#statusAttr" } } } } } } }, ComAtprotoIdentityDefs: { lexicon: 1, id: "com.atproto.identity.defs", defs: { identityInfo: { type: "object", required: ["did", "handle", "didDoc"], properties: { did: { type: "string", format: "did" }, handle: { type: "string", format: "handle", description: "The validated handle of the account; or 'handle.invalid' if the handle did not bi-directionally match the DID document." }, didDoc: { type: "unknown", description: "The complete DID document for the identity." } } } } }, ComAtprotoIdentityGetRecommendedDidCredentials: { lexicon: 1, id: "com.atproto.identity.getRecommendedDidCredentials", defs: { main: { type: "query", description: "Describe the credentials that should be included in the DID doc of an account that is migrating to this service.", output: { encoding: "application/json", schema: { type: "object", properties: { rotationKeys: { description: "Recommended rotation keys for PLC dids. Should be undefined (or ignored) for did:webs.", type: "array", items: { type: "string" } }, alsoKnownAs: { type: "array", items: { type: "string" } }, verificationMethods: { type: "unknown" }, services: { type: "unknown" } } } } } } }, ComAtprotoIdentityRefreshIdentity: { lexicon: 1, id: "com.atproto.identity.refreshIdentity", defs: { main: { type: "procedure", description: "Request that the server re-resolve an identity (DID and handle). The server may ignore this request, or require authentication, depending on the role, implementation, and policy of the server.", input: { encoding: "application/json", schema: { type: "object", required: ["identifier"], properties: { identifier: { type: "string", format: "at-identifier" } } } }, output: { encoding: "application/json", schema: { type: "ref", ref: "lex:com.atproto.identity.defs#identityInfo" } }, errors: [{ name: "HandleNotFound", description: "The resolution process confirmed that the handle does not resolve to any DID." }, { name: "DidNotFound", description: "The DID resolution process confirmed that there is no current DID." }, { name: "DidDeactivated", description: "The DID previously existed, but has been deactivated." }] } } }, ComAtprotoIdentityRequestPlcOperationSignature: { lexicon: 1, id: "com.atproto.identity.requestPlcOperationSignature", defs: { main: { type: "procedure", description: "Request an email with a code to in order to request a signed PLC operation. Requires Auth." } } }, ComAtprotoIdentityResolveDid: { lexicon: 1, id: "com.atproto.identity.resolveDid", defs: { main: { type: "query", description: "Resolves DID to DID document. Does not bi-directionally verify handle.", parameters: { type: "params", required: ["did"], properties: { did: { type: "string", format: "did", description: "DID to resolve." } } }, output: { encoding: "application/json", schema: { type: "object", required: ["didDoc"], properties: { didDoc: { type: "unknown", description: "The complete DID document for the identity." } } } }, errors: [{ name: "DidNotFound", description: "The DID resolution process confirmed that there is no current DID." }, { name: "DidDeactivated", description: "The DID previously existed, but has been deactivated." }] } } }, ComAtprotoIdentityResolveHandle: { lexicon: 1, id: "com.atproto.identity.resolveHandle", defs: { main: { type: "query", description: "Resolves an atproto handle (hostname) to a DID. Does not necessarily bi-directionally verify against the the DID document.", parameters: { type: "params", required: ["handle"], properties: { handle: { type: "string", format: "handle", description: "The handle to resolve." } } }, output: { encoding: "application/json", schema: { type: "object", required: ["did"], properties: { did: { type: "string", format: "did" } } } }, errors: [{ name: "HandleNotFound", description: "The resolution process confirmed that the handle does not resolve to any DID." }] } } }, ComAtprotoIdentityResolveIdentity: { lexicon: 1, id: "com.atproto.identity.resolveIdentity", defs: { main: { type: "query", description: "Resolves an identity (DID or Handle) to a full identity (DID document and verified handle).", parameters: { type: "params", required: ["identifier"], properties: { identifier: { type: "string", format: "at-identifier", description: "Handle or DID to resolve." } } }, output: { encoding: "application/json", schema: { type: "ref", ref: "lex:com.atproto.identity.defs#identityInfo" } }, errors: [{ name: "HandleNotFound", description: "The resolution process confirmed that the handle does not resolve to any DID." }, { name: "DidNotFound", description: "The DID resolution process confirmed that there is no current DID." }, { name: "DidDeactivated", description: "The DID previously existed, but has been deactivated." }] } } }, ComAtprotoIdentitySignPlcOperation: { lexicon: 1, id: "com.atproto.identity.signPlcOperation", defs: { main: { type: "procedure", description: "Signs a PLC operation to update some value(s) in the requesting DID's document.", input: { encoding: "application/json", schema: { type: "object", properties: { token: { description: "A token received through com.atproto.identity.requestPlcOperationSignature", type: "string" }, rotationKeys: { type: "array", items: { type: "string" } }, alsoKnownAs: { type: "array", items: { type: "string" } }, verificationMethods: { type: "unknown" }, services: { type: "unknown" } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["operation"], properties: { operation: { type: "unknown", description: "A signed DID PLC operation." } } } } } } }, ComAtprotoIdentitySubmitPlcOperation: { lexicon: 1, id: "com.atproto.identity.submitPlcOperation", defs: { main: { type: "procedure", description: "Validates a PLC operation to ensure that it doesn't violate a service's constraints or get the identity into a bad state, then submits it to the PLC registry", input: { encoding: "application/json", schema: { type: "object", required: ["operation"], properties: { operation: { type: "unknown" } } } } } } }, ComAtprotoIdentityUpdateHandle: { lexicon: 1, id: "com.atproto.identity.updateHandle", defs: { main: { type: "procedure", description: "Updates the current account's handle. Verifies handle validity, and updates did:plc document if necessary. Implemented by PDS, and requires auth.", input: { encoding: "application/json", schema: { type: "object", required: ["handle"], properties: { handle: { type: "string", format: "handle", description: "The new handle." } } } } } } }, ComAtprotoLabelDefs: { lexicon: 1, id: "com.atproto.label.defs", defs: { label: { type: "object", description: "Metadata tag on an atproto resource (eg, repo or record).", required: ["src", "uri", "val", "cts"], properties: { ver: { type: "integer", description: "The AT Protocol version of the label object." }, src: { type: "string", format: "did", description: "DID of the actor who created this label." }, uri: { type: "string", format: "uri", description: "AT URI of the record, repository (account), or other resource that this label applies to." }, cid: { type: "string", format: "cid", description: "Optionally, CID specifying the specific version of 'uri' resource this label applies to." }, val: { type: "string", maxLength: 128, description: "The short string name of the value or type of this label." }, neg: { type: "boolean", description: "If true, this is a negation label, overwriting a previous label." }, cts: { type: "string", format: "datetime", description: "Timestamp when this label was created." }, exp: { type: "string", format: "datetime", description: "Timestamp at which this label expires (no longer applies)." }, sig: { type: "bytes", description: "Signature of dag-cbor encoded label." } } }, selfLabels: { type: "object", description: "Metadata tags on an atproto record, published by the author within the record.", required: ["values"], properties: { values: { type: "array", items: { type: "ref", ref: "lex:com.atproto.label.defs#selfLabel" }, maxLength: 10 } } }, selfLabel: { type: "object", description: "Metadata tag on an atproto record, published by the author within the record. Note that schemas should use #selfLabels, not #selfLabel.", required: ["val"], properties: { val: { type: "string", maxLength: 128, description: "The short string name of the value or type of this label." } } }, labelValueDefinition: { type: "object", description: "Declares a label value and its expected interpretations and behaviors.", required: ["identifier", "severity", "blurs", "locales"], properties: { identifier: { type: "string", description: "The value of the label being defined. Must only include lowercase ascii and the '-' character ([a-z-]+).", maxLength: 100, maxGraphemes: 100 }, severity: { type: "string", description: "How should a client visually convey this label? 'inform' means neutral and informational; 'alert' means negative and warning; 'none' means show nothing.", knownValues: ["inform", "alert", "none"] }, blurs: { type: "string", description: "What should this label hide in the UI, if applied? 'content' hides all of the target; 'media' hides the images/video/audio; 'none' hides nothing.", knownValues: ["content", "media", "none"] }, defaultSetting: { type: "string", description: "The default setting for this label.", knownValues: ["ignore", "warn", "hide"], default: "warn" }, adultOnly: { type: "boolean", description: "Does the user need to have adult content enabled in order to configure this label?" }, locales: { type: "array", items: { type: "ref", ref: "lex:com.atproto.label.defs#labelValueDefinitionStrings" } } } }, labelValueDefinitionStrings: { type: "object", description: "Strings which describe the label in the UI, localized into a specific language.", required: ["lang", "name", "description"], properties: { lang: { type: "string", description: "The code of the language these strings are written in.", format: "language" }, name: { type: "string", description: "A short human-readable name for the label.", maxGraphemes: 64, maxLength: 640 }, description: { type: "string", description: "A longer description of what the label means and why it might be applied.", maxGraphemes: 1e4, maxLength: 1e5 } } }, labelValue: { type: "string", knownValues: ["!hide", "!no-promote", "!warn", "!no-unauthenticated", "dmca-violation", "doxxing", "porn", "sexual", "nudity", "nsfl", "gore"] } } }, ComAtprotoLabelQueryLabels: { lexicon: 1, id: "com.atproto.label.queryLabels", defs: { main: { type: "query", description: "Find labels relevant to the provided AT-URI patterns. Public endpoint for moderation services, though may return different or additional results with auth.", parameters: { type: "params", required: ["uriPatterns"], properties: { uriPatterns: { type: "array", items: { type: "string" }, description: "List of AT URI patterns to match (boolean 'OR'). Each may be a prefix (ending with '*'; will match inclusive of the string leading to '*'), or a full URI." }, sources: { type: "array", items: { type: "string", format: "did" }, description: "Optional list of label sources (DIDs) to filter on." }, limit: { type: "integer", minimum: 1, maximum: 250, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["labels"], properties: { cursor: { type: "string" }, labels: { type: "array", items: { type: "ref", ref: "lex:com.atproto.label.defs#label" } } } } } } } }, ComAtprotoLabelSubscribeLabels: { lexicon: 1, id: "com.atproto.label.subscribeLabels", defs: { main: { type: "subscription", description: "Subscribe to stream of labels (and negations). Public endpoint implemented by mod services. Uses same sequencing scheme as repo event stream.", parameters: { type: "params", properties: { cursor: { type: "integer", description: "The last known event seq number to backfill from." } } }, message: { schema: { type: "union", refs: ["lex:com.atproto.label.subscribeLabels#labels", "lex:com.atproto.label.subscribeLabels#info"] } }, errors: [{ name: "FutureCursor" }] }, labels: { type: "object", required: ["seq", "labels"], properties: { seq: { type: "integer" }, labels: { type: "array", items: { type: "ref", ref: "lex:com.atproto.label.defs#label" } } } }, info: { type: "object", required: ["name"], properties: { name: { type: "string", knownValues: ["OutdatedCursor"] }, message: { type: "string" } } } } }, ComAtprotoLexiconSchema: { lexicon: 1, id: "com.atproto.lexicon.schema", defs: { main: { type: "record", description: "Representation of Lexicon schemas themselves, when published as atproto records. Note that the schema language is not defined in Lexicon; this meta schema currently only includes a single version field ('lexicon'). See the atproto specifications for description of the other expected top-level fields ('id', 'defs', etc).", key: "nsid", record: { type: "object", required: ["lexicon"], properties: { lexicon: { type: "integer", description: "Indicates the 'version' of the Lexicon language. Must be '1' for the current atproto/Lexicon schema system." } } } } } }, ComAtprotoModerationCreateReport: { lexicon: 1, id: "com.atproto.moderation.createReport", defs: { main: { type: "procedure", description: "Submit a moderation report regarding an atproto account or record. Implemented by moderation services (with PDS proxying), and requires auth.", input: { encoding: "application/json", schema: { type: "object", required: ["reasonType", "subject"], properties: { reasonType: { type: "ref", description: "Indicates the broad category of violation the report is for.", ref: "lex:com.atproto.moderation.defs#reasonType" }, reason: { type: "string", maxGraphemes: 2e3, maxLength: 2e4, description: "Additional context about the content and violation." }, subject: { type: "union", refs: ["lex:com.atproto.admin.defs#repoRef", "lex:com.atproto.repo.strongRef"] } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["id", "reasonType", "subject", "reportedBy", "createdAt"], properties: { id: { type: "integer" }, reasonType: { type: "ref", ref: "lex:com.atproto.moderation.defs#reasonType" }, reason: { type: "string", maxGraphemes: 2e3, maxLength: 2e4 }, subject: { type: "union", refs: ["lex:com.atproto.admin.defs#repoRef", "lex:com.atproto.repo.strongRef"] }, reportedBy: { type: "string", format: "did" }, createdAt: { type: "string", format: "datetime" } } } } } } }, ComAtprotoModerationDefs: { lexicon: 1, id: "com.atproto.moderation.defs", defs: { reasonType: { type: "string", knownValues: ["com.atproto.moderation.defs#reasonSpam", "com.atproto.moderation.defs#reasonViolation", "com.atproto.moderation.defs#reasonMisleading", "com.atproto.moderation.defs#reasonSexual", "com.atproto.moderation.defs#reasonRude", "com.atproto.moderation.defs#reasonOther", "com.atproto.moderation.defs#reasonAppeal"] }, reasonSpam: { type: "token", description: "Spam: frequent unwanted promotion, replies, mentions" }, reasonViolation: { type: "token", description: "Direct violation of server rules, laws, terms of service" }, reasonMisleading: { type: "token", description: "Misleading identity, affiliation, or content" }, reasonSexual: { type: "token", description: "Unwanted or mislabeled sexual content" }, reasonRude: { type: "token", description: "Rude, harassing, explicit, or otherwise unwelcoming behavior" }, reasonOther: { type: "token", description: "Other: reports not falling under another report category" }, reasonAppeal: { type: "token", description: "Appeal: appeal a previously taken moderation action" }, subjectType: { type: "string", description: "Tag describing a type of subject that might be reported.", knownValues: ["account", "record", "chat"] } } }, ComAtprotoRepoApplyWrites: { lexicon: 1, id: "com.atproto.repo.applyWrites", defs: { main: { type: "procedure", description: "Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.", input: { encoding: "application/json", schema: { type: "object", required: ["repo", "writes"], properties: { repo: { type: "string", format: "at-identifier", description: "The handle or DID of the repo (aka, current account)." }, validate: { type: "boolean", description: "Can be set to 'false' to skip Lexicon schema validation of record data across all operations, 'true' to require it, or leave unset to validate only for known Lexicons." }, writes: { type: "array", items: { type: "union", refs: ["lex:com.atproto.repo.applyWrites#create", "lex:com.atproto.repo.applyWrites#update", "lex:com.atproto.repo.applyWrites#delete"], closed: true } }, swapCommit: { type: "string", description: "If provided, the entire operation will fail if the current repo commit CID does not match this value. Used to prevent conflicting repo mutations.", format: "cid" } } } }, output: { encoding: "application/json", schema: { type: "object", required: [], properties: { commit: { type: "ref", ref: "lex:com.atproto.repo.defs#commitMeta" }, results: { type: "array", items: { type: "union", refs: ["lex:com.atproto.repo.applyWrites#createResult", "lex:com.atproto.repo.applyWrites#updateResult", "lex:com.atproto.repo.applyWrites#deleteResult"], closed: true } } } } }, errors: [{ name: "InvalidSwap", description: "Indicates that the 'swapCommit' parameter did not match current commit." }] }, create: { type: "object", description: "Operation which creates a new record.", required: ["collection", "value"], properties: { collection: { type: "string", format: "nsid" }, rkey: { type: "string", maxLength: 512, format: "record-key", description: "NOTE: maxLength is redundant with record-key format. Keeping it temporarily to ensure backwards compatibility." }, value: { type: "unknown" } } }, update: { type: "object", description: "Operation which updates an existing record.", required: ["collection", "rkey", "value"], properties: { collection: { type: "string", format: "nsid" }, rkey: { type: "string", format: "record-key" }, value: { type: "unknown" } } }, delete: { type: "object", description: "Operation which deletes an existing record.", required: ["collection", "rkey"], properties: { collection: { type: "string", format: "nsid" }, rkey: { type: "string", format: "record-key" } } }, createResult: { type: "object", required: ["uri", "cid"], properties: { uri: { type: "string", format: "at-uri" }, cid: { type: "string", format: "cid" }, validationStatus: { type: "string", knownValues: ["valid", "unknown"] } } }, updateResult: { type: "object", required: ["uri", "cid"], properties: { uri: { type: "string", format: "at-uri" }, cid: { type: "string", format: "cid" }, validationStatus: { type: "string", knownValues: ["valid", "unknown"] } } }, deleteResult: { type: "object", required: [], properties: {} } } }, ComAtprotoRepoCreateRecord: { lexicon: 1, id: "com.atproto.repo.createRecord", defs: { main: { type: "procedure", description: "Create a single new repository record. Requires auth, implemented by PDS.", input: { encoding: "application/json", schema: { type: "object", required: ["repo", "collection", "record"], properties: { repo: { type: "string", format: "at-identifier", description: "The handle or DID of the repo (aka, current account)." }, collection: { type: "string", format: "nsid", description: "The NSID of the record collection." }, rkey: { type: "string", format: "record-key", description: "The Record Key.", maxLength: 512 }, validate: { type: "boolean", description: "Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons." }, record: { type: "unknown", description: "The record itself. Must contain a $type field." }, swapCommit: { type: "string", format: "cid", description: "Compare and swap with the previous commit by CID." } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["uri", "cid"], properties: { uri: { type: "string", format: "at-uri" }, cid: { type: "string", format: "cid" }, commit: { type: "ref", ref: "lex:com.atproto.repo.defs#commitMeta" }, validationStatus: { type: "string", knownValues: ["valid", "unknown"] } } } }, errors: [{ name: "InvalidSwap", description: "Indicates that 'swapCommit' didn't match current repo commit." }] } } }, ComAtprotoRepoDefs: { lexicon: 1, id: "com.atproto.repo.defs", defs: { commitMeta: { type: "object", required: ["cid", "rev"], properties: { cid: { type: "string", format: "cid" }, rev: { type: "string", format: "tid" } } } } }, ComAtprotoRepoDeleteRecord: { lexicon: 1, id: "com.atproto.repo.deleteRecord", defs: { main: { type: "procedure", description: "Delete a repository record, or ensure it doesn't exist. Requires auth, implemented by PDS.", input: { encoding: "application/json", schema: { type: "object", required: ["repo", "collection", "rkey"], properties: { repo: { type: "string", format: "at-identifier", description: "The handle or DID of the repo (aka, current account)." }, collection: { type: "string", format: "nsid", description: "The NSID of the record collection." }, rkey: { type: "string", format: "record-key", description: "The Record Key." }, swapRecord: { type: "string", format: "cid", description: "Compare and swap with the previous record by CID." }, swapCommit: { type: "string", format: "cid", description: "Compare and swap with the previous commit by CID." } } } }, output: { encoding: "application/json", schema: { type: "object", properties: { commit: { type: "ref", ref: "lex:com.atproto.repo.defs#commitMeta" } } } }, errors: [{ name: "InvalidSwap" }] } } }, ComAtprotoRepoDescribeRepo: { lexicon: 1, id: "com.atproto.repo.describeRepo", defs: { main: { type: "query", description: "Get information about an account and repository, including the list of collections. Does not require auth.", parameters: { type: "params", required: ["repo"], properties: { repo: { type: "string", format: "at-identifier", description: "The handle or DID of the repo." } } }, output: { encoding: "application/json", schema: { type: "object", required: ["handle", "did", "didDoc", "collections", "handleIsCorrect"], properties: { handle: { type: "string", format: "handle" }, did: { type: "string", format: "did" }, didDoc: { type: "unknown", description: "The complete DID document for this account." }, collections: { type: "array", description: "List of all the collections (NSIDs) for which this repo contains at least one record.", items: { type: "string", format: "nsid" } }, handleIsCorrect: { type: "boolean", description: "Indicates if handle is currently valid (resolves bi-directionally)" } } } } } } }, ComAtprotoRepoGetRecord: { lexicon: 1, id: "com.atproto.repo.getRecord", defs: { main: { type: "query", description: "Get a single record from a repository. Does not require auth.", parameters: { type: "params", required: ["repo", "collection", "rkey"], properties: { repo: { type: "string", format: "at-identifier", description: "The handle or DID of the repo." }, collection: { type: "string", format: "nsid", description: "The NSID of the record collection." }, rkey: { type: "string", description: "The Record Key.", format: "record-key" }, cid: { type: "string", format: "cid", description: "The CID of the version of the record. If not specified, then return the most recent version." } } }, output: { encoding: "application/json", schema: { type: "object", required: ["uri", "value"], properties: { uri: { type: "string", format: "at-uri" }, cid: { type: "string", format: "cid" }, value: { type: "unknown" } } } }, errors: [{ name: "RecordNotFound" }] } } }, ComAtprotoRepoImportRepo: { lexicon: 1, id: "com.atproto.repo.importRepo", defs: { main: { type: "procedure", description: "Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.", input: { encoding: "application/vnd.ipld.car" } } } }, ComAtprotoRepoListMissingBlobs: { lexicon: 1, id: "com.atproto.repo.listMissingBlobs", defs: { main: { type: "query", description: "Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.", parameters: { type: "params", properties: { limit: { type: "integer", minimum: 1, maximum: 1e3, default: 500 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["blobs"], properties: { cursor: { type: "string" }, blobs: { type: "array", items: { type: "ref", ref: "lex:com.atproto.repo.listMissingBlobs#recordBlob" } } } } } }, recordBlob: { type: "object", required: ["cid", "recordUri"], properties: { cid: { type: "string", format: "cid" }, recordUri: { type: "string", format: "at-uri" } } } } }, ComAtprotoRepoListRecords: { lexicon: 1, id: "com.atproto.repo.listRecords", defs: { main: { type: "query", description: "List a range of records in a repository, matching a specific collection. Does not require auth.", parameters: { type: "params", required: ["repo", "collection"], properties: { repo: { type: "string", format: "at-identifier", description: "The handle or DID of the repo." }, collection: { type: "string", format: "nsid", description: "The NSID of the record type." }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50, description: "The number of records to return." }, cursor: { type: "string" }, reverse: { type: "boolean", description: "Flag to reverse the order of the returned records." } } }, output: { encoding: "application/json", schema: { type: "object", required: ["records"], properties: { cursor: { type: "string" }, records: { type: "array", items: { type: "ref", ref: "lex:com.atproto.repo.listRecords#record" } } } } } }, record: { type: "object", required: ["uri", "cid", "value"], properties: { uri: { type: "string", format: "at-uri" }, cid: { type: "string", format: "cid" }, value: { type: "unknown" } } } } }, ComAtprotoRepoPutRecord: { lexicon: 1, id: "com.atproto.repo.putRecord", defs: { main: { type: "procedure", description: "Write a repository record, creating or updating it as needed. Requires auth, implemented by PDS.", input: { encoding: "application/json", schema: { type: "object", required: ["repo", "collection", "rkey", "record"], nullable: ["swapRecord"], properties: { repo: { type: "string", format: "at-identifier", description: "The handle or DID of the repo (aka, current account)." }, collection: { type: "string", format: "nsid", description: "The NSID of the record collection." }, rkey: { type: "string", format: "record-key", description: "The Record Key.", maxLength: 512 }, validate: { type: "boolean", description: "Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons." }, record: { type: "unknown", description: "The record to write." }, swapRecord: { type: "string", format: "cid", description: "Compare and swap with the previous record by CID. WARNING: nullable and optional field; may cause problems with golang implementation" }, swapCommit: { type: "string", format: "cid", description: "Compare and swap with the previous commit by CID." } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["uri", "cid"], properties: { uri: { type: "string", format: "at-uri" }, cid: { type: "string", format: "cid" }, commit: { type: "ref", ref: "lex:com.atproto.repo.defs#commitMeta" }, validationStatus: { type: "string", knownValues: ["valid", "unknown"] } } } }, errors: [{ name: "InvalidSwap" }] } } }, ComAtprotoRepoStrongRef: { lexicon: 1, id: "com.atproto.repo.strongRef", description: "A URI with a content-hash fingerprint.", defs: { main: { type: "object", required: ["uri", "cid"], properties: { uri: { type: "string", format: "at-uri" }, cid: { type: "string", format: "cid" } } } } }, ComAtprotoRepoUploadBlob: { lexicon: 1, id: "com.atproto.repo.uploadBlob", defs: { main: { type: "procedure", description: "Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.", input: { encoding: "*/*" }, output: { encoding: "application/json", schema: { type: "object", required: ["blob"], properties: { blob: { type: "blob" } } } } } } }, ComAtprotoServerActivateAccount: { lexicon: 1, id: "com.atproto.server.activateAccount", defs: { main: { type: "procedure", description: "Activates a currently deactivated account. Used to finalize account migration after the account's repo is imported and identity is setup." } } }, ComAtprotoServerCheckAccountStatus: { lexicon: 1, id: "com.atproto.server.checkAccountStatus", defs: { main: { type: "query", description: "Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.", output: { encoding: "application/json", schema: { type: "object", required: ["activated", "validDid", "repoCommit", "repoRev", "repoBlocks", "indexedRecords", "privateStateValues", "expectedBlobs", "importedBlobs"], properties: { activated: { type: "boolean" }, validDid: { type: "boolean" }, repoCommit: { type: "string", format: "cid" }, repoRev: { type: "string" }, repoBlocks: { type: "integer" }, indexedRecords: { type: "integer" }, privateStateValues: { type: "integer" }, expectedBlobs: { type: "integer" }, importedBlobs: { type: "integer" } } } } } } }, ComAtprotoServerConfirmEmail: { lexicon: 1, id: "com.atproto.server.confirmEmail", defs: { main: { type: "procedure", description: "Confirm an email using a token from com.atproto.server.requestEmailConfirmation.", input: { encoding: "application/json", schema: { type: "object", required: ["email", "token"], properties: { email: { type: "string" }, token: { type: "string" } } } }, errors: [{ name: "AccountNotFound" }, { name: "ExpiredToken" }, { name: "InvalidToken" }, { name: "InvalidEmail" }] } } }, ComAtprotoServerCreateAccount: { lexicon: 1, id: "com.atproto.server.createAccount", defs: { main: { type: "procedure", description: "Create an account. Implemented by PDS.", input: { encoding: "application/json", schema: { type: "object", required: ["handle"], properties: { email: { type: "string" }, handle: { type: "string", format: "handle", description: "Requested handle for the account." }, did: { type: "string", format: "did", description: "Pre-existing atproto DID, being imported to a new account." }, inviteCode: { type: "string" }, verificationCode: { type: "string" }, verificationPhone: { type: "string" }, password: { type: "string", description: "Initial account password. May need to meet instance-specific password strength requirements." }, recoveryKey: { type: "string", description: "DID PLC rotation key (aka, recovery key) to be included in PLC creation operation." }, plcOp: { type: "unknown", description: "A signed DID PLC operation to be submitted as part of importing an existing account to this instance. NOTE: this optional field may be updated when full account migration is implemented." } } } }, output: { encoding: "application/json", schema: { type: "object", description: "Account login session returned on successful account creation.", required: ["accessJwt", "refreshJwt", "handle", "did"], properties: { accessJwt: { type: "string" }, refreshJwt: { type: "string" }, handle: { type: "string", format: "handle" }, did: { type: "string", format: "did", description: "The DID of the new account." }, didDoc: { type: "unknown", description: "Complete DID document." } } } }, errors: [{ name: "InvalidHandle" }, { name: "InvalidPassword" }, { name: "InvalidInviteCode" }, { name: "HandleNotAvailable" }, { name: "UnsupportedDomain" }, { name: "UnresolvableDid" }, { name: "IncompatibleDidDoc" }] } } }, ComAtprotoServerCreateAppPassword: { lexicon: 1, id: "com.atproto.server.createAppPassword", defs: { main: { type: "procedure", description: "Create an App Password.", input: { encoding: "application/json", schema: { type: "object", required: ["name"], properties: { name: { type: "string", description: "A short name for the App Password, to help distinguish them." }, privileged: { type: "boolean", description: "If an app password has 'privileged' access to possibly sensitive account state. Meant for use with trusted clients." } } } }, output: { encoding: "application/json", schema: { type: "ref", ref: "lex:com.atproto.server.createAppPassword#appPassword" } }, errors: [{ name: "AccountTakedown" }] }, appPassword: { type: "object", required: ["name", "password", "createdAt"], properties: { name: { type: "string" }, password: { type: "string" }, createdAt: { type: "string", format: "datetime" }, privileged: { type: "boolean" } } } } }, ComAtprotoServerCreateInviteCode: { lexicon: 1, id: "com.atproto.server.createInviteCode", defs: { main: { type: "procedure", description: "Create an invite code.", input: { encoding: "application/json", schema: { type: "object", required: ["useCount"], properties: { useCount: { type: "integer" }, forAccount: { type: "string", format: "did" } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["code"], properties: { code: { type: "string" } } } } } } }, ComAtprotoServerCreateInviteCodes: { lexicon: 1, id: "com.atproto.server.createInviteCodes", defs: { main: { type: "procedure", description: "Create invite codes.", input: { encoding: "application/json", schema: { type: "object", required: ["codeCount", "useCount"], properties: { codeCount: { type: "integer", default: 1 }, useCount: { type: "integer" }, forAccounts: { type: "array", items: { type: "string", format: "did" } } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["codes"], properties: { codes: { type: "array", items: { type: "ref", ref: "lex:com.atproto.server.createInviteCodes#accountCodes" } } } } } }, accountCodes: { type: "object", required: ["account", "codes"], properties: { account: { type: "string" }, codes: { type: "array", items: { type: "string" } } } } } }, ComAtprotoServerCreateSession: { lexicon: 1, id: "com.atproto.server.createSession", defs: { main: { type: "procedure", description: "Create an authentication session.", input: { encoding: "application/json", schema: { type: "object", required: ["identifier", "password"], properties: { identifier: { type: "string", description: "Handle or other identifier supported by the server for the authenticating user." }, password: { type: "string" }, authFactorToken: { type: "string" }, allowTakendown: { type: "boolean", description: "When true, instead of throwing error for takendown accounts, a valid response with a narrow scoped token will be returned" } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["accessJwt", "refreshJwt", "handle", "did"], properties: { accessJwt: { type: "string" }, refreshJwt: { type: "string" }, handle: { type: "string", format: "handle" }, did: { type: "string", format: "did" }, didDoc: { type: "unknown" }, email: { type: "string" }, emailConfirmed: { type: "boolean" }, emailAuthFactor: { type: "boolean" }, active: { type: "boolean" }, status: { type: "string", description: "If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.", knownValues: ["takendown", "suspended", "deactivated"] } } } }, errors: [{ name: "AccountTakedown" }, { name: "AuthFactorTokenRequired" }] } } }, ComAtprotoServerDeactivateAccount: { lexicon: 1, id: "com.atproto.server.deactivateAccount", defs: { main: { type: "procedure", description: "Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.", input: { encoding: "application/json", schema: { type: "object", properties: { deleteAfter: { type: "string", format: "datetime", description: "A recommendation to server as to how long they should hold onto the deactivated account before deleting." } } } } } } }, ComAtprotoServerDefs: { lexicon: 1, id: "com.atproto.server.defs", defs: { inviteCode: { type: "object", required: ["code", "available", "disabled", "forAccount", "createdBy", "createdAt", "uses"], properties: { code: { type: "string" }, available: { type: "integer" }, disabled: { type: "boolean" }, forAccount: { type: "string" }, createdBy: { type: "string" }, createdAt: { type: "string", format: "datetime" }, uses: { type: "array", items: { type: "ref", ref: "lex:com.atproto.server.defs#inviteCodeUse" } } } }, inviteCodeUse: { type: "object", required: ["usedBy", "usedAt"], properties: { usedBy: { type: "string", format: "did" }, usedAt: { type: "string", format: "datetime" } } } } }, ComAtprotoServerDeleteAccount: { lexicon: 1, id: "com.atproto.server.deleteAccount", defs: { main: { type: "procedure", description: "Delete an actor's account with a token and password. Can only be called after requesting a deletion token. Requires auth.", input: { encoding: "application/json", schema: { type: "object", required: ["did", "password", "token"], properties: { did: { type: "string", format: "did" }, password: { type: "string" }, token: { type: "string" } } } }, errors: [{ name: "ExpiredToken" }, { name: "InvalidToken" }] } } }, ComAtprotoServerDeleteSession: { lexicon: 1, id: "com.atproto.server.deleteSession", defs: { main: { type: "procedure", description: "Delete the current session. Requires auth." } } }, ComAtprotoServerDescribeServer: { lexicon: 1, id: "com.atproto.server.describeServer", defs: { main: { type: "query", description: "Describes the server's account creation requirements and capabilities. Implemented by PDS.", output: { encoding: "application/json", schema: { type: "object", required: ["did", "availableUserDomains"], properties: { inviteCodeRequired: { type: "boolean", description: "If true, an invite code must be supplied to create an account on this instance." }, phoneVerificationRequired: { type: "boolean", description: "If true, a phone verification token must be supplied to create an account on this instance." }, availableUserDomains: { type: "array", description: "List of domain suffixes that can be used in account handles.", items: { type: "string" } }, links: { type: "ref", description: "URLs of service policy documents.", ref: "lex:com.atproto.server.describeServer#links" }, contact: { type: "ref", description: "Contact information", ref: "lex:com.atproto.server.describeServer#contact" }, did: { type: "string", format: "did" } } } } }, links: { type: "object", properties: { privacyPolicy: { type: "string", format: "uri" }, termsOfService: { type: "string", format: "uri" } } }, contact: { type: "object", properties: { email: { type: "string" } } } } }, ComAtprotoServerGetAccountInviteCodes: { lexicon: 1, id: "com.atproto.server.getAccountInviteCodes", defs: { main: { type: "query", description: "Get all invite codes for the current account. Requires auth.", parameters: { type: "params", properties: { includeUsed: { type: "boolean", default: true }, createAvailable: { type: "boolean", default: true, description: "Controls whether any new 'earned' but not 'created' invites should be created." } } }, output: { encoding: "application/json", schema: { type: "object", required: ["codes"], properties: { codes: { type: "array", items: { type: "ref", ref: "lex:com.atproto.server.defs#inviteCode" } } } } }, errors: [{ name: "DuplicateCreate" }] } } }, ComAtprotoServerGetServiceAuth: { lexicon: 1, id: "com.atproto.server.getServiceAuth", defs: { main: { type: "query", description: "Get a signed token on behalf of the requesting DID for the requested service.", parameters: { type: "params", required: ["aud"], properties: { aud: { type: "string", format: "did", description: "The DID of the service that the token will be used to authenticate with" }, exp: { type: "integer", description: "The time in Unix Epoch seconds that the JWT expires. Defaults to 60 seconds in the future. The service may enforce certain time bounds on tokens depending on the requested scope." }, lxm: { type: "string", format: "nsid", description: "Lexicon (XRPC) method to bind the requested token to" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["token"], properties: { token: { type: "string" } } } }, errors: [{ name: "BadExpiration", description: "Indicates that the requested expiration date is not a valid. May be in the past or may be reliant on the requested scopes." }] } } }, ComAtprotoServerGetSession: { lexicon: 1, id: "com.atproto.server.getSession", defs: { main: { type: "query", description: "Get information about the current auth session. Requires auth.", output: { encoding: "application/json", schema: { type: "object", required: ["handle", "did"], properties: { handle: { type: "string", format: "handle" }, did: { type: "string", format: "did" }, email: { type: "string" }, emailConfirmed: { type: "boolean" }, emailAuthFactor: { type: "boolean" }, didDoc: { type: "unknown" }, active: { type: "boolean" }, status: { type: "string", description: "If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.", knownValues: ["takendown", "suspended", "deactivated"] } } } } } } }, ComAtprotoServerListAppPasswords: { lexicon: 1, id: "com.atproto.server.listAppPasswords", defs: { main: { type: "query", description: "List all App Passwords.", output: { encoding: "application/json", schema: { type: "object", required: ["passwords"], properties: { passwords: { type: "array", items: { type: "ref", ref: "lex:com.atproto.server.listAppPasswords#appPassword" } } } } }, errors: [{ name: "AccountTakedown" }] }, appPassword: { type: "object", required: ["name", "createdAt"], properties: { name: { type: "string" }, createdAt: { type: "string", format: "datetime" }, privileged: { type: "boolean" } } } } }, ComAtprotoServerRefreshSession: { lexicon: 1, id: "com.atproto.server.refreshSession", defs: { main: { type: "procedure", description: "Refresh an authentication session. Requires auth using the 'refreshJwt' (not the 'accessJwt').", output: { encoding: "application/json", schema: { type: "object", required: ["accessJwt", "refreshJwt", "handle", "did"], properties: { accessJwt: { type: "string" }, refreshJwt: { type: "string" }, handle: { type: "string", format: "handle" }, did: { type: "string", format: "did" }, didDoc: { type: "unknown" }, active: { type: "boolean" }, status: { type: "string", description: "Hosting status of the account. If not specified, then assume 'active'.", knownValues: ["takendown", "suspended", "deactivated"] } } } }, errors: [{ name: "AccountTakedown" }] } } }, ComAtprotoServerRequestAccountDelete: { lexicon: 1, id: "com.atproto.server.requestAccountDelete", defs: { main: { type: "procedure", description: "Initiate a user account deletion via email." } } }, ComAtprotoServerRequestEmailConfirmation: { lexicon: 1, id: "com.atproto.server.requestEmailConfirmation", defs: { main: { type: "procedure", description: "Request an email with a code to confirm ownership of email." } } }, ComAtprotoServerRequestEmailUpdate: { lexicon: 1, id: "com.atproto.server.requestEmailUpdate", defs: { main: { type: "procedure", description: "Request a token in order to update email.", output: { encoding: "application/json", schema: { type: "object", required: ["tokenRequired"], properties: { tokenRequired: { type: "boolean" } } } } } } }, ComAtprotoServerRequestPasswordReset: { lexicon: 1, id: "com.atproto.server.requestPasswordReset", defs: { main: { type: "procedure", description: "Initiate a user account password reset via email.", input: { encoding: "application/json", schema: { type: "object", required: ["email"], properties: { email: { type: "string" } } } } } } }, ComAtprotoServerReserveSigningKey: { lexicon: 1, id: "com.atproto.server.reserveSigningKey", defs: { main: { type: "procedure", description: "Reserve a repo signing key, for use with account creation. Necessary so that a DID PLC update operation can be constructed during an account migraiton. Public and does not require auth; implemented by PDS. NOTE: this endpoint may change when full account migration is implemented.", input: { encoding: "application/json", schema: { type: "object", properties: { did: { type: "string", format: "did", description: "The DID to reserve a key for." } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["signingKey"], properties: { signingKey: { type: "string", description: "The public key for the reserved signing key, in did:key serialization." } } } } } } }, ComAtprotoServerResetPassword: { lexicon: 1, id: "com.atproto.server.resetPassword", defs: { main: { type: "procedure", description: "Reset a user account password using a token.", input: { encoding: "application/json", schema: { type: "object", required: ["token", "password"], properties: { token: { type: "string" }, password: { type: "string" } } } }, errors: [{ name: "ExpiredToken" }, { name: "InvalidToken" }] } } }, ComAtprotoServerRevokeAppPassword: { lexicon: 1, id: "com.atproto.server.revokeAppPassword", defs: { main: { type: "procedure", description: "Revoke an App Password by name.", input: { encoding: "application/json", schema: { type: "object", required: ["name"], properties: { name: { type: "string" } } } } } } }, ComAtprotoServerUpdateEmail: { lexicon: 1, id: "com.atproto.server.updateEmail", defs: { main: { type: "procedure", description: "Update an account's email.", input: { encoding: "application/json", schema: { type: "object", required: ["email"], properties: { email: { type: "string" }, emailAuthFactor: { type: "boolean" }, token: { type: "string", description: "Requires a token from com.atproto.sever.requestEmailUpdate if the account's email has been confirmed." } } } }, errors: [{ name: "ExpiredToken" }, { name: "InvalidToken" }, { name: "TokenRequired" }] } } }, ComAtprotoSyncGetBlob: { lexicon: 1, id: "com.atproto.sync.getBlob", defs: { main: { type: "query", description: "Get a blob associated with a given account. Returns the full blob as originally uploaded. Does not require auth; implemented by PDS.", parameters: { type: "params", required: ["did", "cid"], properties: { did: { type: "string", format: "did", description: "The DID of the account." }, cid: { type: "string", format: "cid", description: "The CID of the blob to fetch" } } }, output: { encoding: "*/*" }, errors: [{ name: "BlobNotFound" }, { name: "RepoNotFound" }, { name: "RepoTakendown" }, { name: "RepoSuspended" }, { name: "RepoDeactivated" }] } } }, ComAtprotoSyncGetBlocks: { lexicon: 1, id: "com.atproto.sync.getBlocks", defs: { main: { type: "query", description: "Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.", parameters: { type: "params", required: ["did", "cids"], properties: { did: { type: "string", format: "did", description: "The DID of the repo." }, cids: { type: "array", items: { type: "string", format: "cid" } } } }, output: { encoding: "application/vnd.ipld.car" }, errors: [{ name: "BlockNotFound" }, { name: "RepoNotFound" }, { name: "RepoTakendown" }, { name: "RepoSuspended" }, { name: "RepoDeactivated" }] } } }, ComAtprotoSyncGetCheckout: { lexicon: 1, id: "com.atproto.sync.getCheckout", defs: { main: { type: "query", description: "DEPRECATED - please use com.atproto.sync.getRepo instead", parameters: { type: "params", required: ["did"], properties: { did: { type: "string", format: "did", description: "The DID of the repo." } } }, output: { encoding: "application/vnd.ipld.car" } } } }, ComAtprotoSyncGetHead: { lexicon: 1, id: "com.atproto.sync.getHead", defs: { main: { type: "query", description: "DEPRECATED - please use com.atproto.sync.getLatestCommit instead", parameters: { type: "params", required: ["did"], properties: { did: { type: "string", format: "did", description: "The DID of the repo." } } }, output: { encoding: "application/json", schema: { type: "object", required: ["root"], properties: { root: { type: "string", format: "cid" } } } }, errors: [{ name: "HeadNotFound" }] } } }, ComAtprotoSyncGetLatestCommit: { lexicon: 1, id: "com.atproto.sync.getLatestCommit", defs: { main: { type: "query", description: "Get the current commit CID & revision of the specified repo. Does not require auth.", parameters: { type: "params", required: ["did"], properties: { did: { type: "string", format: "did", description: "The DID of the repo." } } }, output: { encoding: "application/json", schema: { type: "object", required: ["cid", "rev"], properties: { cid: { type: "string", format: "cid" }, rev: { type: "string", format: "tid" } } } }, errors: [{ name: "RepoNotFound" }, { name: "RepoTakendown" }, { name: "RepoSuspended" }, { name: "RepoDeactivated" }] } } }, ComAtprotoSyncGetRecord: { lexicon: 1, id: "com.atproto.sync.getRecord", defs: { main: { type: "query", description: "Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.", parameters: { type: "params", required: ["did", "collection", "rkey"], properties: { did: { type: "string", format: "did", description: "The DID of the repo." }, collection: { type: "string", format: "nsid" }, rkey: { type: "string", description: "Record Key", format: "record-key" } } }, output: { encoding: "application/vnd.ipld.car" }, errors: [{ name: "RecordNotFound" }, { name: "RepoNotFound" }, { name: "RepoTakendown" }, { name: "RepoSuspended" }, { name: "RepoDeactivated" }] } } }, ComAtprotoSyncGetRepo: { lexicon: 1, id: "com.atproto.sync.getRepo", defs: { main: { type: "query", description: "Download a repository export as CAR file. Optionally only a 'diff' since a previous revision. Does not require auth; implemented by PDS.", parameters: { type: "params", required: ["did"], properties: { did: { type: "string", format: "did", description: "The DID of the repo." }, since: { type: "string", format: "tid", description: "The revision ('rev') of the repo to create a diff from." } } }, output: { encoding: "application/vnd.ipld.car" }, errors: [{ name: "RepoNotFound" }, { name: "RepoTakendown" }, { name: "RepoSuspended" }, { name: "RepoDeactivated" }] } } }, ComAtprotoSyncGetRepoStatus: { lexicon: 1, id: "com.atproto.sync.getRepoStatus", defs: { main: { type: "query", description: "Get the hosting status for a repository, on this server. Expected to be implemented by PDS and Relay.", parameters: { type: "params", required: ["did"], properties: { did: { type: "string", format: "did", description: "The DID of the repo." } } }, output: { encoding: "application/json", schema: { type: "object", required: ["did", "active"], properties: { did: { type: "string", format: "did" }, active: { type: "boolean" }, status: { type: "string", description: "If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.", knownValues: ["takendown", "suspended", "deleted", "deactivated", "desynchronized", "throttled"] }, rev: { type: "string", format: "tid", description: "Optional field, the current rev of the repo, if active=true" } } } }, errors: [{ name: "RepoNotFound" }] } } }, ComAtprotoSyncListBlobs: { lexicon: 1, id: "com.atproto.sync.listBlobs", defs: { main: { type: "query", description: "List blob CIDs for an account, since some repo revision. Does not require auth; implemented by PDS.", parameters: { type: "params", required: ["did"], properties: { did: { type: "string", format: "did", description: "The DID of the repo." }, since: { type: "string", format: "tid", description: "Optional revision of the repo to list blobs since." }, limit: { type: "integer", minimum: 1, maximum: 1e3, default: 500 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["cids"], properties: { cursor: { type: "string" }, cids: { type: "array", items: { type: "string", format: "cid" } } } } }, errors: [{ name: "RepoNotFound" }, { name: "RepoTakendown" }, { name: "RepoSuspended" }, { name: "RepoDeactivated" }] } } }, ComAtprotoSyncListRepos: { lexicon: 1, id: "com.atproto.sync.listRepos", defs: { main: { type: "query", description: "Enumerates all the DID, rev, and commit CID for all repos hosted by this service. Does not require auth; implemented by PDS and Relay.", parameters: { type: "params", properties: { limit: { type: "integer", minimum: 1, maximum: 1e3, default: 500 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["repos"], properties: { cursor: { type: "string" }, repos: { type: "array", items: { type: "ref", ref: "lex:com.atproto.sync.listRepos#repo" } } } } } }, repo: { type: "object", required: ["did", "head", "rev"], properties: { did: { type: "string", format: "did" }, head: { type: "string", format: "cid", description: "Current repo commit CID" }, rev: { type: "string", format: "tid" }, active: { type: "boolean" }, status: { type: "string", description: "If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.", knownValues: ["takendown", "suspended", "deleted", "deactivated", "desynchronized", "throttled"] } } } } }, ComAtprotoSyncListReposByCollection: { lexicon: 1, id: "com.atproto.sync.listReposByCollection", defs: { main: { type: "query", description: "Enumerates all the DIDs which have records with the given collection NSID.", parameters: { type: "params", required: ["collection"], properties: { collection: { type: "string", format: "nsid" }, limit: { type: "integer", description: "Maximum size of response set. Recommend setting a large maximum (1000+) when enumerating large DID lists.", minimum: 1, maximum: 2e3, default: 500 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["repos"], properties: { cursor: { type: "string" }, repos: { type: "array", items: { type: "ref", ref: "lex:com.atproto.sync.listReposByCollection#repo" } } } } } }, repo: { type: "object", required: ["did"], properties: { did: { type: "string", format: "did" } } } } }, ComAtprotoSyncNotifyOfUpdate: { lexicon: 1, id: "com.atproto.sync.notifyOfUpdate", defs: { main: { type: "procedure", description: "Notify a crawling service of a recent update, and that crawling should resume. Intended use is after a gap between repo stream events caused the crawling service to disconnect. Does not require auth; implemented by Relay. DEPRECATED: just use com.atproto.sync.requestCrawl", input: { encoding: "application/json", schema: { type: "object", required: ["hostname"], properties: { hostname: { type: "string", description: "Hostname of the current service (usually a PDS) that is notifying of update." } } } } } } }, ComAtprotoSyncRequestCrawl: { lexicon: 1, id: "com.atproto.sync.requestCrawl", defs: { main: { type: "procedure", description: "Request a service to persistently crawl hosted repos. Expected use is new PDS instances declaring their existence to Relays. Does not require auth.", input: { encoding: "application/json", schema: { type: "object", required: ["hostname"], properties: { hostname: { type: "string", description: "Hostname of the current service (eg, PDS) that is requesting to be crawled." } } } } } } }, ComAtprotoSyncSubscribeRepos: { lexicon: 1, id: "com.atproto.sync.subscribeRepos", defs: { main: { type: "subscription", description: "Repository event stream, aka Firehose endpoint. Outputs repo commits with diff data, and identity update events, for all repositories on the current server. See the atproto specifications for details around stream sequencing, repo versioning, CAR diff format, and more. Public and does not require auth; implemented by PDS and Relay.", parameters: { type: "params", properties: { cursor: { type: "integer", description: "The last known event seq number to backfill from." } } }, message: { schema: { type: "union", refs: ["lex:com.atproto.sync.subscribeRepos#commit", "lex:com.atproto.sync.subscribeRepos#sync", "lex:com.atproto.sync.subscribeRepos#identity", "lex:com.atproto.sync.subscribeRepos#account", "lex:com.atproto.sync.subscribeRepos#info"] } }, errors: [{ name: "FutureCursor" }, { name: "ConsumerTooSlow", description: "If the consumer of the stream can not keep up with events, and a backlog gets too large, the server will drop the connection." }] }, commit: { type: "object", description: "Represents an update of repository state. Note that empty commits are allowed, which include no repo data changes, but an update to rev and signature.", required: ["seq", "rebase", "tooBig", "repo", "commit", "rev", "since", "blocks", "ops", "blobs", "time"], nullable: ["since"], properties: { seq: { type: "integer", description: "The stream sequence number of this message." }, rebase: { type: "boolean", description: "DEPRECATED -- unused" }, tooBig: { type: "boolean", description: "DEPRECATED -- replaced by #sync event and data limits. Indicates that this commit contained too many ops, or data size was too large. Consumers will need to make a separate request to get missing data." }, repo: { type: "string", format: "did", description: "The repo this event comes from. Note that all other message types name this field 'did'." }, commit: { type: "cid-link", description: "Repo commit object CID." }, rev: { type: "string", format: "tid", description: "The rev of the emitted commit. Note that this information is also in the commit object included in blocks, unless this is a tooBig event." }, since: { type: "string", format: "tid", description: "The rev of the last emitted commit from this repo (if any)." }, blocks: { type: "bytes", description: "CAR file containing relevant blocks, as a diff since the previous repo state. The commit must be included as a block, and the commit block CID must be the first entry in the CAR header 'roots' list.", maxLength: 2e6 }, ops: { type: "array", items: { type: "ref", ref: "lex:com.atproto.sync.subscribeRepos#repoOp", description: "List of repo mutation operations in this commit (eg, records created, updated, or deleted)." }, maxLength: 200 }, blobs: { type: "array", items: { type: "cid-link", description: "DEPRECATED -- will soon always be empty. List of new blobs (by CID) referenced by records in this commit." } }, prevData: { type: "cid-link", description: "The root CID of the MST tree for the previous commit from this repo (indicated by the 'since' revision field in this message). Corresponds to the 'data' field in the repo commit object. NOTE: this field is effectively required for the 'inductive' version of firehose." }, time: { type: "string", format: "datetime", description: "Timestamp of when this message was originally broadcast." } } }, sync: { type: "object", description: "Updates the repo to a new state, without necessarily including that state on the firehose. Used to recover from broken commit streams, data loss incidents, or in situations where upstream host does not know recent state of the repository.", required: ["seq", "did", "blocks", "rev", "time"], properties: { seq: { type: "integer", description: "The stream sequence number of this message." }, did: { type: "string", format: "did", description: "The account this repo event corresponds to. Must match that in the commit object." }, blocks: { type: "bytes", description: "CAR file containing the commit, as a block. The CAR header must include the commit block CID as the first 'root'.", maxLength: 1e4 }, rev: { type: "string", description: "The rev of the commit. This value must match that in the commit object." }, time: { type: "string", format: "datetime", description: "Timestamp of when this message was originally broadcast." } } }, identity: { type: "object", description: "Represents a change to an account's identity. Could be an updated handle, signing key, or pds hosting endpoint. Serves as a prod to all downstream services to refresh their identity cache.", required: ["seq", "did", "time"], properties: { seq: { type: "integer" }, did: { type: "string", format: "did" }, time: { type: "string", format: "datetime" }, handle: { type: "string", format: "handle", description: "The current handle for the account, or 'handle.invalid' if validation fails. This field is optional, might have been validated or passed-through from an upstream source. Semantics and behaviors for PDS vs Relay may evolve in the future; see atproto specs for more details." } } }, account: { type: "object", description: "Represents a change to an account's status on a host (eg, PDS or Relay). The semantics of this event are that the status is at the host which emitted the event, not necessarily that at the currently active PDS. Eg, a Relay takedown would emit a takedown with active=false, even if the PDS is still active.", required: ["seq", "did", "time", "active"], properties: { seq: { type: "integer" }, did: { type: "string", format: "did" }, time: { type: "string", format: "datetime" }, active: { type: "boolean", description: "Indicates that the account has a repository which can be fetched from the host that emitted this event." }, status: { type: "string", description: "If active=false, this optional field indicates a reason for why the account is not active.", knownValues: ["takendown", "suspended", "deleted", "deactivated", "desynchronized", "throttled"] } } }, info: { type: "object", required: ["name"], properties: { name: { type: "string", knownValues: ["OutdatedCursor"] }, message: { type: "string" } } }, repoOp: { type: "object", description: "A repo operation, ie a mutation of a single record.", required: ["action", "path", "cid"], nullable: ["cid"], properties: { action: { type: "string", knownValues: ["create", "update", "delete"] }, path: { type: "string" }, cid: { type: "cid-link", description: "For creates and updates, the new record CID. For deletions, null." }, prev: { type: "cid-link", description: "For updates and deletes, the previous record CID (required for inductive firehose). For creations, field should not be defined." } } } } }, ComAtprotoTempAddReservedHandle: { lexicon: 1, id: "com.atproto.temp.addReservedHandle", defs: { main: { type: "procedure", description: "Add a handle to the set of reserved handles.", input: { encoding: "application/json", schema: { type: "object", required: ["handle"], properties: { handle: { type: "string" } } } }, output: { encoding: "application/json", schema: { type: "object", properties: {} } } } } }, ComAtprotoTempCheckSignupQueue: { lexicon: 1, id: "com.atproto.temp.checkSignupQueue", defs: { main: { type: "query", description: "Check accounts location in signup queue.", output: { encoding: "application/json", schema: { type: "object", required: ["activated"], properties: { activated: { type: "boolean" }, placeInQueue: { type: "integer" }, estimatedTimeMs: { type: "integer" } } } } } } }, ComAtprotoTempFetchLabels: { lexicon: 1, id: "com.atproto.temp.fetchLabels", defs: { main: { type: "query", description: "DEPRECATED: use queryLabels or subscribeLabels instead -- Fetch all labels from a labeler created after a certain date.", parameters: { type: "params", properties: { since: { type: "integer" }, limit: { type: "integer", minimum: 1, maximum: 250, default: 50 } } }, output: { encoding: "application/json", schema: { type: "object", required: ["labels"], properties: { labels: { type: "array", items: { type: "ref", ref: "lex:com.atproto.label.defs#label" } } } } } } } }, ComAtprotoTempRequestPhoneVerification: { lexicon: 1, id: "com.atproto.temp.requestPhoneVerification", defs: { main: { type: "procedure", description: "Request a verification code to be sent to the supplied phone number", input: { encoding: "application/json", schema: { type: "object", required: ["phoneNumber"], properties: { phoneNumber: { type: "string" } } } } } } }, AppBskyActorDefs: { lexicon: 1, id: "app.bsky.actor.defs", defs: { profileViewBasic: { type: "object", required: ["did", "handle"], properties: { did: { type: "string", format: "did" }, handle: { type: "string", format: "handle" }, displayName: { type: "string", maxGraphemes: 64, maxLength: 640 }, avatar: { type: "string", format: "uri" }, associated: { type: "ref", ref: "lex:app.bsky.actor.defs#profileAssociated" }, viewer: { type: "ref", ref: "lex:app.bsky.actor.defs#viewerState" }, labels: { type: "array", items: { type: "ref", ref: "lex:com.atproto.label.defs#label" } }, createdAt: { type: "string", format: "datetime" } } }, profileView: { type: "object", required: ["did", "handle"], properties: { did: { type: "string", format: "did" }, handle: { type: "string", format: "handle" }, displayName: { type: "string", maxGraphemes: 64, maxLength: 640 }, description: { type: "string", maxGraphemes: 256, maxLength: 2560 }, avatar: { type: "string", format: "uri" }, associated: { type: "ref", ref: "lex:app.bsky.actor.defs#profileAssociated" }, indexedAt: { type: "string", format: "datetime" }, createdAt: { type: "string", format: "datetime" }, viewer: { type: "ref", ref: "lex:app.bsky.actor.defs#viewerState" }, labels: { type: "array", items: { type: "ref", ref: "lex:com.atproto.label.defs#label" } } } }, profileViewDetailed: { type: "object", required: ["did", "handle"], properties: { did: { type: "string", format: "did" }, handle: { type: "string", format: "handle" }, displayName: { type: "string", maxGraphemes: 64, maxLength: 640 }, description: { type: "string", maxGraphemes: 256, maxLength: 2560 }, avatar: { type: "string", format: "uri" }, banner: { type: "string", format: "uri" }, followersCount: { type: "integer" }, followsCount: { type: "integer" }, postsCount: { type: "integer" }, associated: { type: "ref", ref: "lex:app.bsky.actor.defs#profileAssociated" }, joinedViaStarterPack: { type: "ref", ref: "lex:app.bsky.graph.defs#starterPackViewBasic" }, indexedAt: { type: "string", format: "datetime" }, createdAt: { type: "string", format: "datetime" }, viewer: { type: "ref", ref: "lex:app.bsky.actor.defs#viewerState" }, labels: { type: "array", items: { type: "ref", ref: "lex:com.atproto.label.defs#label" } }, pinnedPost: { type: "ref", ref: "lex:com.atproto.repo.strongRef" } } }, profileAssociated: { type: "object", properties: { lists: { type: "integer" }, feedgens: { type: "integer" }, starterPacks: { type: "integer" }, labeler: { type: "boolean" }, chat: { type: "ref", ref: "lex:app.bsky.actor.defs#profileAssociatedChat" } } }, profileAssociatedChat: { type: "object", required: ["allowIncoming"], properties: { allowIncoming: { type: "string", knownValues: ["all", "none", "following"] } } }, viewerState: { type: "object", description: "Metadata about the requesting account's relationship with the subject account. Only has meaningful content for authed requests.", properties: { muted: { type: "boolean" }, mutedByList: { type: "ref", ref: "lex:app.bsky.graph.defs#listViewBasic" }, blockedBy: { type: "boolean" }, blocking: { type: "string", format: "at-uri" }, blockingByList: { type: "ref", ref: "lex:app.bsky.graph.defs#listViewBasic" }, following: { type: "string", format: "at-uri" }, followedBy: { type: "string", format: "at-uri" }, knownFollowers: { type: "ref", ref: "lex:app.bsky.actor.defs#knownFollowers" } } }, knownFollowers: { type: "object", description: "The subject's followers whom you also follow", required: ["count", "followers"], properties: { count: { type: "integer" }, followers: { type: "array", minLength: 0, maxLength: 5, items: { type: "ref", ref: "lex:app.bsky.actor.defs#profileViewBasic" } } } }, preferences: { type: "array", items: { type: "union", refs: ["lex:app.bsky.actor.defs#adultContentPref", "lex:app.bsky.actor.defs#contentLabelPref", "lex:app.bsky.actor.defs#savedFeedsPref", "lex:app.bsky.actor.defs#savedFeedsPrefV2", "lex:app.bsky.actor.defs#personalDetailsPref", "lex:app.bsky.actor.defs#feedViewPref", "lex:app.bsky.actor.defs#threadViewPref", "lex:app.bsky.actor.defs#interestsPref", "lex:app.bsky.actor.defs#mutedWordsPref", "lex:app.bsky.actor.defs#hiddenPostsPref", "lex:app.bsky.actor.defs#bskyAppStatePref", "lex:app.bsky.actor.defs#labelersPref", "lex:app.bsky.actor.defs#postInteractionSettingsPref"] } }, adultContentPref: { type: "object", required: ["enabled"], properties: { enabled: { type: "boolean", default: false } } }, contentLabelPref: { type: "object", required: ["label", "visibility"], properties: { labelerDid: { type: "string", description: "Which labeler does this preference apply to? If undefined, applies globally.", format: "did" }, label: { type: "string" }, visibility: { type: "string", knownValues: ["ignore", "show", "warn", "hide"] } } }, savedFeed: { type: "object", required: ["id", "type", "value", "pinned"], properties: { id: { type: "string" }, type: { type: "string", knownValues: ["feed", "list", "timeline"] }, value: { type: "string" }, pinned: { type: "boolean" } } }, savedFeedsPrefV2: { type: "object", required: ["items"], properties: { items: { type: "array", items: { type: "ref", ref: "lex:app.bsky.actor.defs#savedFeed" } } } }, savedFeedsPref: { type: "object", required: ["pinned", "saved"], properties: { pinned: { type: "array", items: { type: "string", format: "at-uri" } }, saved: { type: "array", items: { type: "string", format: "at-uri" } }, timelineIndex: { type: "integer" } } }, personalDetailsPref: { type: "object", properties: { birthDate: { type: "string", format: "datetime", description: "The birth date of account owner." } } }, feedViewPref: { type: "object", required: ["feed"], properties: { feed: { type: "string", description: "The URI of the feed, or an identifier which describes the feed." }, hideReplies: { type: "boolean", description: "Hide replies in the feed." }, hideRepliesByUnfollowed: { type: "boolean", description: "Hide replies in the feed if they are not by followed users.", default: true }, hideRepliesByLikeCount: { type: "integer", description: "Hide replies in the feed if they do not have this number of likes." }, hideReposts: { type: "boolean", description: "Hide reposts in the feed." }, hideQuotePosts: { type: "boolean", description: "Hide quote posts in the feed." } } }, threadViewPref: { type: "object", properties: { sort: { type: "string", description: "Sorting mode for threads.", knownValues: ["oldest", "newest", "most-likes", "random", "hotness"] }, prioritizeFollowedUsers: { type: "boolean", description: "Show followed users at the top of all replies." } } }, interestsPref: { type: "object", required: ["tags"], properties: { tags: { type: "array", maxLength: 100, items: { type: "string", maxLength: 640, maxGraphemes: 64 }, description: "A list of tags which describe the account owner's interests gathered during onboarding." } } }, mutedWordTarget: { type: "string", knownValues: ["content", "tag"], maxLength: 640, maxGraphemes: 64 }, mutedWord: { type: "object", description: "A word that the account owner has muted.", required: ["value", "targets"], properties: { id: { type: "string" }, value: { type: "string", description: "The muted word itself.", maxLength: 1e4, maxGraphemes: 1e3 }, targets: { type: "array", description: "The intended targets of the muted word.", items: { type: "ref", ref: "lex:app.bsky.actor.defs#mutedWordTarget" } }, actorTarget: { type: "string", description: "Groups of users to apply the muted word to. If undefined, applies to all users.", knownValues: ["all", "exclude-following"], default: "all" }, expiresAt: { type: "string", format: "datetime", description: "The date and time at which the muted word will expire and no longer be applied." } } }, mutedWordsPref: { type: "object", required: ["items"], properties: { items: { type: "array", items: { type: "ref", ref: "lex:app.bsky.actor.defs#mutedWord" }, description: "A list of words the account owner has muted." } } }, hiddenPostsPref: { type: "object", required: ["items"], properties: { items: { type: "array", items: { type: "string", format: "at-uri" }, description: "A list of URIs of posts the account owner has hidden." } } }, labelersPref: { type: "object", required: ["labelers"], properties: { labelers: { type: "array", items: { type: "ref", ref: "lex:app.bsky.actor.defs#labelerPrefItem" } } } }, labelerPrefItem: { type: "object", required: ["did"], properties: { did: { type: "string", format: "did" } } }, bskyAppStatePref: { description: "A grab bag of state that's specific to the bsky.app program. Third-party apps shouldn't use this.", type: "object", properties: { activeProgressGuide: { type: "ref", ref: "lex:app.bsky.actor.defs#bskyAppProgressGuide" }, queuedNudges: { description: "An array of tokens which identify nudges (modals, popups, tours, highlight dots) that should be shown to the user.", type: "array", maxLength: 1e3, items: { type: "string", maxLength: 100 } }, nuxs: { description: "Storage for NUXs the user has encountered.", type: "array", maxLength: 100, items: { type: "ref", ref: "lex:app.bsky.actor.defs#nux" } } } }, bskyAppProgressGuide: { description: "If set, an active progress guide. Once completed, can be set to undefined. Should have unspecced fields tracking progress.", type: "object", required: ["guide"], properties: { guide: { type: "string", maxLength: 100 } } }, nux: { type: "object", description: "A new user experiences (NUX) storage object", required: ["id", "completed"], properties: { id: { type: "string", maxLength: 100 }, completed: { type: "boolean", default: false }, data: { description: "Arbitrary data for the NUX. The structure is defined by the NUX itself. Limited to 300 characters.", type: "string", maxLength: 3e3, maxGraphemes: 300 }, expiresAt: { type: "string", format: "datetime", description: "The date and time at which the NUX will expire and should be considered completed." } } }, postInteractionSettingsPref: { type: "object", description: "Default post interaction settings for the account. These values should be applied as default values when creating new posts. These refs should mirror the threadgate and postgate records exactly.", required: [], properties: { threadgateAllowRules: { description: "Matches threadgate record. List of rules defining who can reply to this users posts. If value is an empty array, no one can reply. If value is undefined, anyone can reply.", type: "array", maxLength: 5, items: { type: "union", refs: ["lex:app.bsky.feed.threadgate#mentionRule", "lex:app.bsky.feed.threadgate#followerRule", "lex:app.bsky.feed.threadgate#followingRule", "lex:app.bsky.feed.threadgate#listRule"] } }, postgateEmbeddingRules: { description: "Matches postgate record. List of rules defining who can embed this users posts. If value is an empty array or is undefined, no particular rules apply and anyone can embed.", type: "array", maxLength: 5, items: { type: "union", refs: ["lex:app.bsky.feed.postgate#disableRule"] } } } } } }, AppBskyActorGetPreferences: { lexicon: 1, id: "app.bsky.actor.getPreferences", defs: { main: { type: "query", description: "Get private preferences attached to the current account. Expected use is synchronization between multiple devices, and import/export during account migration. Requires auth.", parameters: { type: "params", properties: {} }, output: { encoding: "application/json", schema: { type: "object", required: ["preferences"], properties: { preferences: { type: "ref", ref: "lex:app.bsky.actor.defs#preferences" } } } } } } }, AppBskyActorGetProfile: { lexicon: 1, id: "app.bsky.actor.getProfile", defs: { main: { type: "query", description: "Get detailed profile view of an actor. Does not require auth, but contains relevant metadata with auth.", parameters: { type: "params", required: ["actor"], properties: { actor: { type: "string", format: "at-identifier", description: "Handle or DID of account to fetch profile of." } } }, output: { encoding: "application/json", schema: { type: "ref", ref: "lex:app.bsky.actor.defs#profileViewDetailed" } } } } }, AppBskyActorGetProfiles: { lexicon: 1, id: "app.bsky.actor.getProfiles", defs: { main: { type: "query", description: "Get detailed profile views of multiple actors.", parameters: { type: "params", required: ["actors"], properties: { actors: { type: "array", items: { type: "string", format: "at-identifier" }, maxLength: 25 } } }, output: { encoding: "application/json", schema: { type: "object", required: ["profiles"], properties: { profiles: { type: "array", items: { type: "ref", ref: "lex:app.bsky.actor.defs#profileViewDetailed" } } } } } } } }, AppBskyActorGetSuggestions: { lexicon: 1, id: "app.bsky.actor.getSuggestions", defs: { main: { type: "query", description: "Get a list of suggested actors. Expected use is discovery of accounts to follow during new account onboarding.", parameters: { type: "params", properties: { limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["actors"], properties: { cursor: { type: "string" }, actors: { type: "array", items: { type: "ref", ref: "lex:app.bsky.actor.defs#profileView" } }, recId: { type: "integer", description: "Snowflake for this recommendation, use when submitting recommendation events." } } } } } } }, AppBskyActorProfile: { lexicon: 1, id: "app.bsky.actor.profile", defs: { main: { type: "record", description: "A declaration of a Bluesky account profile.", key: "literal:self", record: { type: "object", properties: { displayName: { type: "string", maxGraphemes: 64, maxLength: 640 }, description: { type: "string", description: "Free-form profile description text.", maxGraphemes: 256, maxLength: 2560 }, avatar: { type: "blob", description: "Small image to be displayed next to posts from account. AKA, 'profile picture'", accept: ["image/png", "image/jpeg"], maxSize: 1e6 }, banner: { type: "blob", description: "Larger horizontal image to display behind profile view.", accept: ["image/png", "image/jpeg"], maxSize: 1e6 }, labels: { type: "union", description: "Self-label values, specific to the Bluesky application, on the overall account.", refs: ["lex:com.atproto.label.defs#selfLabels"] }, joinedViaStarterPack: { type: "ref", ref: "lex:com.atproto.repo.strongRef" }, pinnedPost: { type: "ref", ref: "lex:com.atproto.repo.strongRef" }, createdAt: { type: "string", format: "datetime" } } } } } }, AppBskyActorPutPreferences: { lexicon: 1, id: "app.bsky.actor.putPreferences", defs: { main: { type: "procedure", description: "Set the private preferences attached to the account.", input: { encoding: "application/json", schema: { type: "object", required: ["preferences"], properties: { preferences: { type: "ref", ref: "lex:app.bsky.actor.defs#preferences" } } } } } } }, AppBskyActorSearchActors: { lexicon: 1, id: "app.bsky.actor.searchActors", defs: { main: { type: "query", description: "Find actors (profiles) matching search criteria. Does not require auth.", parameters: { type: "params", properties: { term: { type: "string", description: "DEPRECATED: use 'q' instead." }, q: { type: "string", description: "Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended." }, limit: { type: "integer", minimum: 1, maximum: 100, default: 25 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["actors"], properties: { cursor: { type: "string" }, actors: { type: "array", items: { type: "ref", ref: "lex:app.bsky.actor.defs#profileView" } } } } } } } }, AppBskyActorSearchActorsTypeahead: { lexicon: 1, id: "app.bsky.actor.searchActorsTypeahead", defs: { main: { type: "query", description: "Find actor suggestions for a prefix search term. Expected use is for auto-completion during text field entry. Does not require auth.", parameters: { type: "params", properties: { term: { type: "string", description: "DEPRECATED: use 'q' instead." }, q: { type: "string", description: "Search query prefix; not a full query string." }, limit: { type: "integer", minimum: 1, maximum: 100, default: 10 } } }, output: { encoding: "application/json", schema: { type: "object", required: ["actors"], properties: { actors: { type: "array", items: { type: "ref", ref: "lex:app.bsky.actor.defs#profileViewBasic" } } } } } } } }, AppBskyEmbedDefs: { lexicon: 1, id: "app.bsky.embed.defs", defs: { aspectRatio: { type: "object", description: "width:height represents an aspect ratio. It may be approximate, and may not correspond to absolute dimensions in any given unit.", required: ["width", "height"], properties: { width: { type: "integer", minimum: 1 }, height: { type: "integer", minimum: 1 } } } } }, AppBskyEmbedExternal: { lexicon: 1, id: "app.bsky.embed.external", defs: { main: { type: "object", description: "A representation of some externally linked content (eg, a URL and 'card'), embedded in a Bluesky record (eg, a post).", required: ["external"], properties: { external: { type: "ref", ref: "lex:app.bsky.embed.external#external" } } }, external: { type: "object", required: ["uri", "title", "description"], properties: { uri: { type: "string", format: "uri" }, title: { type: "string" }, description: { type: "string" }, thumb: { type: "blob", accept: ["image/*"], maxSize: 1e6 } } }, view: { type: "object", required: ["external"], properties: { external: { type: "ref", ref: "lex:app.bsky.embed.external#viewExternal" } } }, viewExternal: { type: "object", required: ["uri", "title", "description"], properties: { uri: { type: "string", format: "uri" }, title: { type: "string" }, description: { type: "string" }, thumb: { type: "string", format: "uri" } } } } }, AppBskyEmbedImages: { lexicon: 1, id: "app.bsky.embed.images", description: "A set of images embedded in a Bluesky record (eg, a post).", defs: { main: { type: "object", required: ["images"], properties: { images: { type: "array", items: { type: "ref", ref: "lex:app.bsky.embed.images#image" }, maxLength: 4 } } }, image: { type: "object", required: ["image", "alt"], properties: { image: { type: "blob", accept: ["image/*"], maxSize: 1e6 }, alt: { type: "string", description: "Alt text description of the image, for accessibility." }, aspectRatio: { type: "ref", ref: "lex:app.bsky.embed.defs#aspectRatio" } } }, view: { type: "object", required: ["images"], properties: { images: { type: "array", items: { type: "ref", ref: "lex:app.bsky.embed.images#viewImage" }, maxLength: 4 } } }, viewImage: { type: "object", required: ["thumb", "fullsize", "alt"], properties: { thumb: { type: "string", format: "uri", description: "Fully-qualified URL where a thumbnail of the image can be fetched. For example, CDN location provided by the App View." }, fullsize: { type: "string", format: "uri", description: "Fully-qualified URL where a large version of the image can be fetched. May or may not be the exact original blob. For example, CDN location provided by the App View." }, alt: { type: "string", description: "Alt text description of the image, for accessibility." }, aspectRatio: { type: "ref", ref: "lex:app.bsky.embed.defs#aspectRatio" } } } } }, AppBskyEmbedRecord: { lexicon: 1, id: "app.bsky.embed.record", description: "A representation of a record embedded in a Bluesky record (eg, a post). For example, a quote-post, or sharing a feed generator record.", defs: { main: { type: "object", required: ["record"], properties: { record: { type: "ref", ref: "lex:com.atproto.repo.strongRef" } } }, view: { type: "object", required: ["record"], properties: { record: { type: "union", refs: ["lex:app.bsky.embed.record#viewRecord", "lex:app.bsky.embed.record#viewNotFound", "lex:app.bsky.embed.record#viewBlocked", "lex:app.bsky.embed.record#viewDetached", "lex:app.bsky.feed.defs#generatorView", "lex:app.bsky.graph.defs#listView", "lex:app.bsky.labeler.defs#labelerView", "lex:app.bsky.graph.defs#starterPackViewBasic"] } } }, viewRecord: { type: "object", required: ["uri", "cid", "author", "value", "indexedAt"], properties: { uri: { type: "string", format: "at-uri" }, cid: { type: "string", format: "cid" }, author: { type: "ref", ref: "lex:app.bsky.actor.defs#profileViewBasic" }, value: { type: "unknown", description: "The record data itself." }, labels: { type: "array", items: { type: "ref", ref: "lex:com.atproto.label.defs#label" } }, replyCount: { type: "integer" }, repostCount: { type: "integer" }, likeCount: { type: "integer" }, quoteCount: { type: "integer" }, embeds: { type: "array", items: { type: "union", refs: ["lex:app.bsky.embed.images#view", "lex:app.bsky.embed.video#view", "lex:app.bsky.embed.external#view", "lex:app.bsky.embed.record#view", "lex:app.bsky.embed.recordWithMedia#view"] } }, indexedAt: { type: "string", format: "datetime" } } }, viewNotFound: { type: "object", required: ["uri", "notFound"], properties: { uri: { type: "string", format: "at-uri" }, notFound: { type: "boolean", const: true } } }, viewBlocked: { type: "object", required: ["uri", "blocked", "author"], properties: { uri: { type: "string", format: "at-uri" }, blocked: { type: "boolean", const: true }, author: { type: "ref", ref: "lex:app.bsky.feed.defs#blockedAuthor" } } }, viewDetached: { type: "object", required: ["uri", "detached"], properties: { uri: { type: "string", format: "at-uri" }, detached: { type: "boolean", const: true } } } } }, AppBskyEmbedRecordWithMedia: { lexicon: 1, id: "app.bsky.embed.recordWithMedia", description: "A representation of a record embedded in a Bluesky record (eg, a post), alongside other compatible embeds. For example, a quote post and image, or a quote post and external URL card.", defs: { main: { type: "object", required: ["record", "media"], properties: { record: { type: "ref", ref: "lex:app.bsky.embed.record" }, media: { type: "union", refs: ["lex:app.bsky.embed.images", "lex:app.bsky.embed.video", "lex:app.bsky.embed.external"] } } }, view: { type: "object", required: ["record", "media"], properties: { record: { type: "ref", ref: "lex:app.bsky.embed.record#view" }, media: { type: "union", refs: ["lex:app.bsky.embed.images#view", "lex:app.bsky.embed.video#view", "lex:app.bsky.embed.external#view"] } } } } }, AppBskyEmbedVideo: { lexicon: 1, id: "app.bsky.embed.video", description: "A video embedded in a Bluesky record (eg, a post).", defs: { main: { type: "object", required: ["video"], properties: { video: { type: "blob", description: "The mp4 video file. May be up to 100mb, formerly limited to 50mb.", accept: ["video/mp4"], maxSize: 1e8 }, captions: { type: "array", items: { type: "ref", ref: "lex:app.bsky.embed.video#caption" }, maxLength: 20 }, alt: { type: "string", description: "Alt text description of the video, for accessibility.", maxGraphemes: 1e3, maxLength: 1e4 }, aspectRatio: { type: "ref", ref: "lex:app.bsky.embed.defs#aspectRatio" } } }, caption: { type: "object", required: ["lang", "file"], properties: { lang: { type: "string", format: "language" }, file: { type: "blob", accept: ["text/vtt"], maxSize: 2e4 } } }, view: { type: "object", required: ["cid", "playlist"], properties: { cid: { type: "string", format: "cid" }, playlist: { type: "string", format: "uri" }, thumbnail: { type: "string", format: "uri" }, alt: { type: "string", maxGraphemes: 1e3, maxLength: 1e4 }, aspectRatio: { type: "ref", ref: "lex:app.bsky.embed.defs#aspectRatio" } } } } }, AppBskyFeedDefs: { lexicon: 1, id: "app.bsky.feed.defs", defs: { postView: { type: "object", required: ["uri", "cid", "author", "record", "indexedAt"], properties: { uri: { type: "string", format: "at-uri" }, cid: { type: "string", format: "cid" }, author: { type: "ref", ref: "lex:app.bsky.actor.defs#profileViewBasic" }, record: { type: "unknown" }, embed: { type: "union", refs: ["lex:app.bsky.embed.images#view", "lex:app.bsky.embed.video#view", "lex:app.bsky.embed.external#view", "lex:app.bsky.embed.record#view", "lex:app.bsky.embed.recordWithMedia#view"] }, replyCount: { type: "integer" }, repostCount: { type: "integer" }, likeCount: { type: "integer" }, quoteCount: { type: "integer" }, indexedAt: { type: "string", format: "datetime" }, viewer: { type: "ref", ref: "lex:app.bsky.feed.defs#viewerState" }, labels: { type: "array", items: { type: "ref", ref: "lex:com.atproto.label.defs#label" } }, threadgate: { type: "ref", ref: "lex:app.bsky.feed.defs#threadgateView" } } }, viewerState: { type: "object", description: "Metadata about the requesting account's relationship with the subject content. Only has meaningful content for authed requests.", properties: { repost: { type: "string", format: "at-uri" }, like: { type: "string", format: "at-uri" }, threadMuted: { type: "boolean" }, replyDisabled: { type: "boolean" }, embeddingDisabled: { type: "boolean" }, pinned: { type: "boolean" } } }, threadContext: { type: "object", description: "Metadata about this post within the context of the thread it is in.", properties: { rootAuthorLike: { type: "string", format: "at-uri" } } }, feedViewPost: { type: "object", required: ["post"], properties: { post: { type: "ref", ref: "lex:app.bsky.feed.defs#postView" }, reply: { type: "ref", ref: "lex:app.bsky.feed.defs#replyRef" }, reason: { type: "union", refs: ["lex:app.bsky.feed.defs#reasonRepost", "lex:app.bsky.feed.defs#reasonPin"] }, feedContext: { type: "string", description: "Context provided by feed generator that may be passed back alongside interactions.", maxLength: 2e3 } } }, replyRef: { type: "object", required: ["root", "parent"], properties: { root: { type: "union", refs: ["lex:app.bsky.feed.defs#postView", "lex:app.bsky.feed.defs#notFoundPost", "lex:app.bsky.feed.defs#blockedPost"] }, parent: { type: "union", refs: ["lex:app.bsky.feed.defs#postView", "lex:app.bsky.feed.defs#notFoundPost", "lex:app.bsky.feed.defs#blockedPost"] }, grandparentAuthor: { type: "ref", ref: "lex:app.bsky.actor.defs#profileViewBasic", description: "When parent is a reply to another post, this is the author of that post." } } }, reasonRepost: { type: "object", required: ["by", "indexedAt"], properties: { by: { type: "ref", ref: "lex:app.bsky.actor.defs#profileViewBasic" }, indexedAt: { type: "string", format: "datetime" } } }, reasonPin: { type: "object", properties: {} }, threadViewPost: { type: "object", required: ["post"], properties: { post: { type: "ref", ref: "lex:app.bsky.feed.defs#postView" }, parent: { type: "union", refs: ["lex:app.bsky.feed.defs#threadViewPost", "lex:app.bsky.feed.defs#notFoundPost", "lex:app.bsky.feed.defs#blockedPost"] }, replies: { type: "array", items: { type: "union", refs: ["lex:app.bsky.feed.defs#threadViewPost", "lex:app.bsky.feed.defs#notFoundPost", "lex:app.bsky.feed.defs#blockedPost"] } }, threadContext: { type: "ref", ref: "lex:app.bsky.feed.defs#threadContext" } } }, notFoundPost: { type: "object", required: ["uri", "notFound"], properties: { uri: { type: "string", format: "at-uri" }, notFound: { type: "boolean", const: true } } }, blockedPost: { type: "object", required: ["uri", "blocked", "author"], properties: { uri: { type: "string", format: "at-uri" }, blocked: { type: "boolean", const: true }, author: { type: "ref", ref: "lex:app.bsky.feed.defs#blockedAuthor" } } }, blockedAuthor: { type: "object", required: ["did"], properties: { did: { type: "string", format: "did" }, viewer: { type: "ref", ref: "lex:app.bsky.actor.defs#viewerState" } } }, generatorView: { type: "object", required: ["uri", "cid", "did", "creator", "displayName", "indexedAt"], properties: { uri: { type: "string", format: "at-uri" }, cid: { type: "string", format: "cid" }, did: { type: "string", format: "did" }, creator: { type: "ref", ref: "lex:app.bsky.actor.defs#profileView" }, displayName: { type: "string" }, description: { type: "string", maxGraphemes: 300, maxLength: 3e3 }, descriptionFacets: { type: "array", items: { type: "ref", ref: "lex:app.bsky.richtext.facet" } }, avatar: { type: "string", format: "uri" }, likeCount: { type: "integer", minimum: 0 }, acceptsInteractions: { type: "boolean" }, labels: { type: "array", items: { type: "ref", ref: "lex:com.atproto.label.defs#label" } }, viewer: { type: "ref", ref: "lex:app.bsky.feed.defs#generatorViewerState" }, contentMode: { type: "string", knownValues: ["app.bsky.feed.defs#contentModeUnspecified", "app.bsky.feed.defs#contentModeVideo"] }, indexedAt: { type: "string", format: "datetime" } } }, generatorViewerState: { type: "object", properties: { like: { type: "string", format: "at-uri" } } }, skeletonFeedPost: { type: "object", required: ["post"], properties: { post: { type: "string", format: "at-uri" }, reason: { type: "union", refs: ["lex:app.bsky.feed.defs#skeletonReasonRepost", "lex:app.bsky.feed.defs#skeletonReasonPin"] }, feedContext: { type: "string", description: "Context that will be passed through to client and may be passed to feed generator back alongside interactions.", maxLength: 2e3 } } }, skeletonReasonRepost: { type: "object", required: ["repost"], properties: { repost: { type: "string", format: "at-uri" } } }, skeletonReasonPin: { type: "object", properties: {} }, threadgateView: { type: "object", properties: { uri: { type: "string", format: "at-uri" }, cid: { type: "string", format: "cid" }, record: { type: "unknown" }, lists: { type: "array", items: { type: "ref", ref: "lex:app.bsky.graph.defs#listViewBasic" } } } }, interaction: { type: "object", properties: { item: { type: "string", format: "at-uri" }, event: { type: "string", knownValues: ["app.bsky.feed.defs#requestLess", "app.bsky.feed.defs#requestMore", "app.bsky.feed.defs#clickthroughItem", "app.bsky.feed.defs#clickthroughAuthor", "app.bsky.feed.defs#clickthroughReposter", "app.bsky.feed.defs#clickthroughEmbed", "app.bsky.feed.defs#interactionSeen", "app.bsky.feed.defs#interactionLike", "app.bsky.feed.defs#interactionRepost", "app.bsky.feed.defs#interactionReply", "app.bsky.feed.defs#interactionQuote", "app.bsky.feed.defs#interactionShare"] }, feedContext: { type: "string", description: "Context on a feed item that was originally supplied by the feed generator on getFeedSkeleton.", maxLength: 2e3 } } }, requestLess: { type: "token", description: "Request that less content like the given feed item be shown in the feed" }, requestMore: { type: "token", description: "Request that more content like the given feed item be shown in the feed" }, clickthroughItem: { type: "token", description: "User clicked through to the feed item" }, clickthroughAuthor: { type: "token", description: "User clicked through to the author of the feed item" }, clickthroughReposter: { type: "token", description: "User clicked through to the reposter of the feed item" }, clickthroughEmbed: { type: "token", description: "User clicked through to the embedded content of the feed item" }, contentModeUnspecified: { type: "token", description: "Declares the feed generator returns any types of posts." }, contentModeVideo: { type: "token", description: "Declares the feed generator returns posts containing app.bsky.embed.video embeds." }, interactionSeen: { type: "token", description: "Feed item was seen by user" }, interactionLike: { type: "token", description: "User liked the feed item" }, interactionRepost: { type: "token", description: "User reposted the feed item" }, interactionReply: { type: "token", description: "User replied to the feed item" }, interactionQuote: { type: "token", description: "User quoted the feed item" }, interactionShare: { type: "token", description: "User shared the feed item" } } }, AppBskyFeedDescribeFeedGenerator: { lexicon: 1, id: "app.bsky.feed.describeFeedGenerator", defs: { main: { type: "query", description: "Get information about a feed generator, including policies and offered feed URIs. Does not require auth; implemented by Feed Generator services (not App View).", output: { encoding: "application/json", schema: { type: "object", required: ["did", "feeds"], properties: { did: { type: "string", format: "did" }, feeds: { type: "array", items: { type: "ref", ref: "lex:app.bsky.feed.describeFeedGenerator#feed" } }, links: { type: "ref", ref: "lex:app.bsky.feed.describeFeedGenerator#links" } } } } }, feed: { type: "object", required: ["uri"], properties: { uri: { type: "string", format: "at-uri" } } }, links: { type: "object", properties: { privacyPolicy: { type: "string" }, termsOfService: { type: "string" } } } } }, AppBskyFeedGenerator: { lexicon: 1, id: "app.bsky.feed.generator", defs: { main: { type: "record", description: "Record declaring of the existence of a feed generator, and containing metadata about it. The record can exist in any repository.", key: "any", record: { type: "object", required: ["did", "displayName", "createdAt"], properties: { did: { type: "string", format: "did" }, displayName: { type: "string", maxGraphemes: 24, maxLength: 240 }, description: { type: "string", maxGraphemes: 300, maxLength: 3e3 }, descriptionFacets: { type: "array", items: { type: "ref", ref: "lex:app.bsky.richtext.facet" } }, avatar: { type: "blob", accept: ["image/png", "image/jpeg"], maxSize: 1e6 }, acceptsInteractions: { type: "boolean", description: "Declaration that a feed accepts feedback interactions from a client through app.bsky.feed.sendInteractions" }, labels: { type: "union", description: "Self-label values", refs: ["lex:com.atproto.label.defs#selfLabels"] }, contentMode: { type: "string", knownValues: ["app.bsky.feed.defs#contentModeUnspecified", "app.bsky.feed.defs#contentModeVideo"] }, createdAt: { type: "string", format: "datetime" } } } } } }, AppBskyFeedGetActorFeeds: { lexicon: 1, id: "app.bsky.feed.getActorFeeds", defs: { main: { type: "query", description: "Get a list of feeds (feed generator records) created by the actor (in the actor's repo).", parameters: { type: "params", required: ["actor"], properties: { actor: { type: "string", format: "at-identifier" }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["feeds"], properties: { cursor: { type: "string" }, feeds: { type: "array", items: { type: "ref", ref: "lex:app.bsky.feed.defs#generatorView" } } } } } } } }, AppBskyFeedGetActorLikes: { lexicon: 1, id: "app.bsky.feed.getActorLikes", defs: { main: { type: "query", description: "Get a list of posts liked by an actor. Requires auth, actor must be the requesting account.", parameters: { type: "params", required: ["actor"], properties: { actor: { type: "string", format: "at-identifier" }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["feed"], properties: { cursor: { type: "string" }, feed: { type: "array", items: { type: "ref", ref: "lex:app.bsky.feed.defs#feedViewPost" } } } } }, errors: [{ name: "BlockedActor" }, { name: "BlockedByActor" }] } } }, AppBskyFeedGetAuthorFeed: { lexicon: 1, id: "app.bsky.feed.getAuthorFeed", defs: { main: { type: "query", description: "Get a view of an actor's 'author feed' (post and reposts by the author). Does not require auth.", parameters: { type: "params", required: ["actor"], properties: { actor: { type: "string", format: "at-identifier" }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" }, filter: { type: "string", description: "Combinations of post/repost types to include in response.", knownValues: ["posts_with_replies", "posts_no_replies", "posts_with_media", "posts_and_author_threads", "posts_with_video"], default: "posts_with_replies" }, includePins: { type: "boolean", default: false } } }, output: { encoding: "application/json", schema: { type: "object", required: ["feed"], properties: { cursor: { type: "string" }, feed: { type: "array", items: { type: "ref", ref: "lex:app.bsky.feed.defs#feedViewPost" } } } } }, errors: [{ name: "BlockedActor" }, { name: "BlockedByActor" }] } } }, AppBskyFeedGetFeed: { lexicon: 1, id: "app.bsky.feed.getFeed", defs: { main: { type: "query", description: "Get a hydrated feed from an actor's selected feed generator. Implemented by App View.", parameters: { type: "params", required: ["feed"], properties: { feed: { type: "string", format: "at-uri" }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["feed"], properties: { cursor: { type: "string" }, feed: { type: "array", items: { type: "ref", ref: "lex:app.bsky.feed.defs#feedViewPost" } } } } }, errors: [{ name: "UnknownFeed" }] } } }, AppBskyFeedGetFeedGenerator: { lexicon: 1, id: "app.bsky.feed.getFeedGenerator", defs: { main: { type: "query", description: "Get information about a feed generator. Implemented by AppView.", parameters: { type: "params", required: ["feed"], properties: { feed: { type: "string", format: "at-uri", description: "AT-URI of the feed generator record." } } }, output: { encoding: "application/json", schema: { type: "object", required: ["view", "isOnline", "isValid"], properties: { view: { type: "ref", ref: "lex:app.bsky.feed.defs#generatorView" }, isOnline: { type: "boolean", description: "Indicates whether the feed generator service has been online recently, or else seems to be inactive." }, isValid: { type: "boolean", description: "Indicates whether the feed generator service is compatible with the record declaration." } } } } } } }, AppBskyFeedGetFeedGenerators: { lexicon: 1, id: "app.bsky.feed.getFeedGenerators", defs: { main: { type: "query", description: "Get information about a list of feed generators.", parameters: { type: "params", required: ["feeds"], properties: { feeds: { type: "array", items: { type: "string", format: "at-uri" } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["feeds"], properties: { feeds: { type: "array", items: { type: "ref", ref: "lex:app.bsky.feed.defs#generatorView" } } } } } } } }, AppBskyFeedGetFeedSkeleton: { lexicon: 1, id: "app.bsky.feed.getFeedSkeleton", defs: { main: { type: "query", description: "Get a skeleton of a feed provided by a feed generator. Auth is optional, depending on provider requirements, and provides the DID of the requester. Implemented by Feed Generator Service.", parameters: { type: "params", required: ["feed"], properties: { feed: { type: "string", format: "at-uri", description: "Reference to feed generator record describing the specific feed being requested." }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["feed"], properties: { cursor: { type: "string" }, feed: { type: "array", items: { type: "ref", ref: "lex:app.bsky.feed.defs#skeletonFeedPost" } } } } }, errors: [{ name: "UnknownFeed" }] } } }, AppBskyFeedGetLikes: { lexicon: 1, id: "app.bsky.feed.getLikes", defs: { main: { type: "query", description: "Get like records which reference a subject (by AT-URI and CID).", parameters: { type: "params", required: ["uri"], properties: { uri: { type: "string", format: "at-uri", description: "AT-URI of the subject (eg, a post record)." }, cid: { type: "string", format: "cid", description: "CID of the subject record (aka, specific version of record), to filter likes." }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["uri", "likes"], properties: { uri: { type: "string", format: "at-uri" }, cid: { type: "string", format: "cid" }, cursor: { type: "string" }, likes: { type: "array", items: { type: "ref", ref: "lex:app.bsky.feed.getLikes#like" } } } } } }, like: { type: "object", required: ["indexedAt", "createdAt", "actor"], properties: { indexedAt: { type: "string", format: "datetime" }, createdAt: { type: "string", format: "datetime" }, actor: { type: "ref", ref: "lex:app.bsky.actor.defs#profileView" } } } } }, AppBskyFeedGetListFeed: { lexicon: 1, id: "app.bsky.feed.getListFeed", defs: { main: { type: "query", description: "Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.", parameters: { type: "params", required: ["list"], properties: { list: { type: "string", format: "at-uri", description: "Reference (AT-URI) to the list record." }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["feed"], properties: { cursor: { type: "string" }, feed: { type: "array", items: { type: "ref", ref: "lex:app.bsky.feed.defs#feedViewPost" } } } } }, errors: [{ name: "UnknownList" }] } } }, AppBskyFeedGetPostThread: { lexicon: 1, id: "app.bsky.feed.getPostThread", defs: { main: { type: "query", description: "Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.", parameters: { type: "params", required: ["uri"], properties: { uri: { type: "string", format: "at-uri", description: "Reference (AT-URI) to post record." }, depth: { type: "integer", description: "How many levels of reply depth should be included in response.", default: 6, minimum: 0, maximum: 1e3 }, parentHeight: { type: "integer", description: "How many levels of parent (and grandparent, etc) post to include.", default: 80, minimum: 0, maximum: 1e3 } } }, output: { encoding: "application/json", schema: { type: "object", required: ["thread"], properties: { thread: { type: "union", refs: ["lex:app.bsky.feed.defs#threadViewPost", "lex:app.bsky.feed.defs#notFoundPost", "lex:app.bsky.feed.defs#blockedPost"] }, threadgate: { type: "ref", ref: "lex:app.bsky.feed.defs#threadgateView" } } } }, errors: [{ name: "NotFound" }] } } }, AppBskyFeedGetPosts: { lexicon: 1, id: "app.bsky.feed.getPosts", defs: { main: { type: "query", description: "Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as 'hydrating' a 'feed skeleton'.", parameters: { type: "params", required: ["uris"], properties: { uris: { type: "array", description: "List of post AT-URIs to return hydrated views for.", items: { type: "string", format: "at-uri" }, maxLength: 25 } } }, output: { encoding: "application/json", schema: { type: "object", required: ["posts"], properties: { posts: { type: "array", items: { type: "ref", ref: "lex:app.bsky.feed.defs#postView" } } } } } } } }, AppBskyFeedGetQuotes: { lexicon: 1, id: "app.bsky.feed.getQuotes", defs: { main: { type: "query", description: "Get a list of quotes for a given post.", parameters: { type: "params", required: ["uri"], properties: { uri: { type: "string", format: "at-uri", description: "Reference (AT-URI) of post record" }, cid: { type: "string", format: "cid", description: "If supplied, filters to quotes of specific version (by CID) of the post record." }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["uri", "posts"], properties: { uri: { type: "string", format: "at-uri" }, cid: { type: "string", format: "cid" }, cursor: { type: "string" }, posts: { type: "array", items: { type: "ref", ref: "lex:app.bsky.feed.defs#postView" } } } } } } } }, AppBskyFeedGetRepostedBy: { lexicon: 1, id: "app.bsky.feed.getRepostedBy", defs: { main: { type: "query", description: "Get a list of reposts for a given post.", parameters: { type: "params", required: ["uri"], properties: { uri: { type: "string", format: "at-uri", description: "Reference (AT-URI) of post record" }, cid: { type: "string", format: "cid", description: "If supplied, filters to reposts of specific version (by CID) of the post record." }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["uri", "repostedBy"], properties: { uri: { type: "string", format: "at-uri" }, cid: { type: "string", format: "cid" }, cursor: { type: "string" }, repostedBy: { type: "array", items: { type: "ref", ref: "lex:app.bsky.actor.defs#profileView" } } } } } } } }, AppBskyFeedGetSuggestedFeeds: { lexicon: 1, id: "app.bsky.feed.getSuggestedFeeds", defs: { main: { type: "query", description: "Get a list of suggested feeds (feed generators) for the requesting account.", parameters: { type: "params", properties: { limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["feeds"], properties: { cursor: { type: "string" }, feeds: { type: "array", items: { type: "ref", ref: "lex:app.bsky.feed.defs#generatorView" } } } } } } } }, AppBskyFeedGetTimeline: { lexicon: 1, id: "app.bsky.feed.getTimeline", defs: { main: { type: "query", description: "Get a view of the requesting account's home timeline. This is expected to be some form of reverse-chronological feed.", parameters: { type: "params", properties: { algorithm: { type: "string", description: "Variant 'algorithm' for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism." }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["feed"], properties: { cursor: { type: "string" }, feed: { type: "array", items: { type: "ref", ref: "lex:app.bsky.feed.defs#feedViewPost" } } } } } } } }, AppBskyFeedLike: { lexicon: 1, id: "app.bsky.feed.like", defs: { main: { type: "record", description: "Record declaring a 'like' of a piece of subject content.", key: "tid", record: { type: "object", required: ["subject", "createdAt"], properties: { subject: { type: "ref", ref: "lex:com.atproto.repo.strongRef" }, createdAt: { type: "string", format: "datetime" } } } } } }, AppBskyFeedPost: { lexicon: 1, id: "app.bsky.feed.post", defs: { main: { type: "record", description: "Record containing a Bluesky post.", key: "tid", record: { type: "object", required: ["text", "createdAt"], properties: { text: { type: "string", maxLength: 3e3, maxGraphemes: 300, description: "The primary post content. May be an empty string, if there are embeds." }, entities: { type: "array", description: "DEPRECATED: replaced by app.bsky.richtext.facet.", items: { type: "ref", ref: "lex:app.bsky.feed.post#entity" } }, facets: { type: "array", description: "Annotations of text (mentions, URLs, hashtags, etc)", items: { type: "ref", ref: "lex:app.bsky.richtext.facet" } }, reply: { type: "ref", ref: "lex:app.bsky.feed.post#replyRef" }, embed: { type: "union", refs: ["lex:app.bsky.embed.images", "lex:app.bsky.embed.video", "lex:app.bsky.embed.external", "lex:app.bsky.embed.record", "lex:app.bsky.embed.recordWithMedia"] }, langs: { type: "array", description: "Indicates human language of post primary text content.", maxLength: 3, items: { type: "string", format: "language" } }, labels: { type: "union", description: "Self-label values for this post. Effectively content warnings.", refs: ["lex:com.atproto.label.defs#selfLabels"] }, tags: { type: "array", description: "Additional hashtags, in addition to any included in post text and facets.", maxLength: 8, items: { type: "string", maxLength: 640, maxGraphemes: 64 } }, createdAt: { type: "string", format: "datetime", description: "Client-declared timestamp when this post was originally created." } } } }, replyRef: { type: "object", required: ["root", "parent"], properties: { root: { type: "ref", ref: "lex:com.atproto.repo.strongRef" }, parent: { type: "ref", ref: "lex:com.atproto.repo.strongRef" } } }, entity: { type: "object", description: "Deprecated: use facets instead.", required: ["index", "type", "value"], properties: { index: { type: "ref", ref: "lex:app.bsky.feed.post#textSlice" }, type: { type: "string", description: "Expected values are 'mention' and 'link'." }, value: { type: "string" } } }, textSlice: { type: "object", description: "Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings.", required: ["start", "end"], properties: { start: { type: "integer", minimum: 0 }, end: { type: "integer", minimum: 0 } } } } }, AppBskyFeedPostgate: { lexicon: 1, id: "app.bsky.feed.postgate", defs: { main: { type: "record", key: "tid", description: "Record defining interaction rules for a post. The record key (rkey) of the postgate record must match the record key of the post, and that record must be in the same repository.", record: { type: "object", required: ["post", "createdAt"], properties: { createdAt: { type: "string", format: "datetime" }, post: { type: "string", format: "at-uri", description: "Reference (AT-URI) to the post record." }, detachedEmbeddingUris: { type: "array", maxLength: 50, items: { type: "string", format: "at-uri" }, description: "List of AT-URIs embedding this post that the author has detached from." }, embeddingRules: { description: "List of rules defining who can embed this post. If value is an empty array or is undefined, no particular rules apply and anyone can embed.", type: "array", maxLength: 5, items: { type: "union", refs: ["lex:app.bsky.feed.postgate#disableRule"] } } } } }, disableRule: { type: "object", description: "Disables embedding of this post.", properties: {} } } }, AppBskyFeedRepost: { lexicon: 1, id: "app.bsky.feed.repost", defs: { main: { description: "Record representing a 'repost' of an existing Bluesky post.", type: "record", key: "tid", record: { type: "object", required: ["subject", "createdAt"], properties: { subject: { type: "ref", ref: "lex:com.atproto.repo.strongRef" }, createdAt: { type: "string", format: "datetime" } } } } } }, AppBskyFeedSearchPosts: { lexicon: 1, id: "app.bsky.feed.searchPosts", defs: { main: { type: "query", description: "Find posts matching search criteria, returning views of those posts.", parameters: { type: "params", required: ["q"], properties: { q: { type: "string", description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended." }, sort: { type: "string", knownValues: ["top", "latest"], default: "latest", description: "Specifies the ranking order of results." }, since: { type: "string", description: "Filter results for posts after the indicated datetime (inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYYY-MM-DD)." }, until: { type: "string", description: "Filter results for posts before the indicated datetime (not inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYY-MM-DD)." }, mentions: { type: "string", format: "at-identifier", description: "Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions." }, author: { type: "string", format: "at-identifier", description: "Filter to posts by the given account. Handles are resolved to DID before query-time." }, lang: { type: "string", format: "language", description: "Filter to posts in the given language. Expected to be based on post language field, though server may override language detection." }, domain: { type: "string", description: "Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization." }, url: { type: "string", format: "uri", description: "Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching." }, tag: { type: "array", items: { type: "string", maxLength: 640, maxGraphemes: 64 }, description: "Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with 'AND' matching." }, limit: { type: "integer", minimum: 1, maximum: 100, default: 25 }, cursor: { type: "string", description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set." } } }, output: { encoding: "application/json", schema: { type: "object", required: ["posts"], properties: { cursor: { type: "string" }, hitsTotal: { type: "integer", description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits." }, posts: { type: "array", items: { type: "ref", ref: "lex:app.bsky.feed.defs#postView" } } } } }, errors: [{ name: "BadQueryString" }] } } }, AppBskyFeedSendInteractions: { lexicon: 1, id: "app.bsky.feed.sendInteractions", defs: { main: { type: "procedure", description: "Send information about interactions with feed items back to the feed generator that served them.", input: { encoding: "application/json", schema: { type: "object", required: ["interactions"], properties: { interactions: { type: "array", items: { type: "ref", ref: "lex:app.bsky.feed.defs#interaction" } } } } }, output: { encoding: "application/json", schema: { type: "object", properties: {} } } } } }, AppBskyFeedThreadgate: { lexicon: 1, id: "app.bsky.feed.threadgate", defs: { main: { type: "record", key: "tid", description: "Record defining interaction gating rules for a thread (aka, reply controls). The record key (rkey) of the threadgate record must match the record key of the thread's root post, and that record must be in the same repository.", record: { type: "object", required: ["post", "createdAt"], properties: { post: { type: "string", format: "at-uri", description: "Reference (AT-URI) to the post record." }, allow: { description: "List of rules defining who can reply to this post. If value is an empty array, no one can reply. If value is undefined, anyone can reply.", type: "array", maxLength: 5, items: { type: "union", refs: ["lex:app.bsky.feed.threadgate#mentionRule", "lex:app.bsky.feed.threadgate#followerRule", "lex:app.bsky.feed.threadgate#followingRule", "lex:app.bsky.feed.threadgate#listRule"] } }, createdAt: { type: "string", format: "datetime" }, hiddenReplies: { type: "array", maxLength: 50, items: { type: "string", format: "at-uri" }, description: "List of hidden reply URIs." } } } }, mentionRule: { type: "object", description: "Allow replies from actors mentioned in your post.", properties: {} }, followerRule: { type: "object", description: "Allow replies from actors who follow you.", properties: {} }, followingRule: { type: "object", description: "Allow replies from actors you follow.", properties: {} }, listRule: { type: "object", description: "Allow replies from actors on a list.", required: ["list"], properties: { list: { type: "string", format: "at-uri" } } } } }, AppBskyGraphBlock: { lexicon: 1, id: "app.bsky.graph.block", defs: { main: { type: "record", description: "Record declaring a 'block' relationship against another account. NOTE: blocks are public in Bluesky; see blog posts for details.", key: "tid", record: { type: "object", required: ["subject", "createdAt"], properties: { subject: { type: "string", format: "did", description: "DID of the account to be blocked." }, createdAt: { type: "string", format: "datetime" } } } } } }, AppBskyGraphDefs: { lexicon: 1, id: "app.bsky.graph.defs", defs: { listViewBasic: { type: "object", required: ["uri", "cid", "name", "purpose"], properties: { uri: { type: "string", format: "at-uri" }, cid: { type: "string", format: "cid" }, name: { type: "string", maxLength: 64, minLength: 1 }, purpose: { type: "ref", ref: "lex:app.bsky.graph.defs#listPurpose" }, avatar: { type: "string", format: "uri" }, listItemCount: { type: "integer", minimum: 0 }, labels: { type: "array", items: { type: "ref", ref: "lex:com.atproto.label.defs#label" } }, viewer: { type: "ref", ref: "lex:app.bsky.graph.defs#listViewerState" }, indexedAt: { type: "string", format: "datetime" } } }, listView: { type: "object", required: ["uri", "cid", "creator", "name", "purpose", "indexedAt"], properties: { uri: { type: "string", format: "at-uri" }, cid: { type: "string", format: "cid" }, creator: { type: "ref", ref: "lex:app.bsky.actor.defs#profileView" }, name: { type: "string", maxLength: 64, minLength: 1 }, purpose: { type: "ref", ref: "lex:app.bsky.graph.defs#listPurpose" }, description: { type: "string", maxGraphemes: 300, maxLength: 3e3 }, descriptionFacets: { type: "array", items: { type: "ref", ref: "lex:app.bsky.richtext.facet" } }, avatar: { type: "string", format: "uri" }, listItemCount: { type: "integer", minimum: 0 }, labels: { type: "array", items: { type: "ref", ref: "lex:com.atproto.label.defs#label" } }, viewer: { type: "ref", ref: "lex:app.bsky.graph.defs#listViewerState" }, indexedAt: { type: "string", format: "datetime" } } }, listItemView: { type: "object", required: ["uri", "subject"], properties: { uri: { type: "string", format: "at-uri" }, subject: { type: "ref", ref: "lex:app.bsky.actor.defs#profileView" } } }, starterPackView: { type: "object", required: ["uri", "cid", "record", "creator", "indexedAt"], properties: { uri: { type: "string", format: "at-uri" }, cid: { type: "string", format: "cid" }, record: { type: "unknown" }, creator: { type: "ref", ref: "lex:app.bsky.actor.defs#profileViewBasic" }, list: { type: "ref", ref: "lex:app.bsky.graph.defs#listViewBasic" }, listItemsSample: { type: "array", maxLength: 12, items: { type: "ref", ref: "lex:app.bsky.graph.defs#listItemView" } }, feeds: { type: "array", maxLength: 3, items: { type: "ref", ref: "lex:app.bsky.feed.defs#generatorView" } }, joinedWeekCount: { type: "integer", minimum: 0 }, joinedAllTimeCount: { type: "integer", minimum: 0 }, labels: { type: "array", items: { type: "ref", ref: "lex:com.atproto.label.defs#label" } }, indexedAt: { type: "string", format: "datetime" } } }, starterPackViewBasic: { type: "object", required: ["uri", "cid", "record", "creator", "indexedAt"], properties: { uri: { type: "string", format: "at-uri" }, cid: { type: "string", format: "cid" }, record: { type: "unknown" }, creator: { type: "ref", ref: "lex:app.bsky.actor.defs#profileViewBasic" }, listItemCount: { type: "integer", minimum: 0 }, joinedWeekCount: { type: "integer", minimum: 0 }, joinedAllTimeCount: { type: "integer", minimum: 0 }, labels: { type: "array", items: { type: "ref", ref: "lex:com.atproto.label.defs#label" } }, indexedAt: { type: "string", format: "datetime" } } }, listPurpose: { type: "string", knownValues: ["app.bsky.graph.defs#modlist", "app.bsky.graph.defs#curatelist", "app.bsky.graph.defs#referencelist"] }, modlist: { type: "token", description: "A list of actors to apply an aggregate moderation action (mute/block) on." }, curatelist: { type: "token", description: "A list of actors used for curation purposes such as list feeds or interaction gating." }, referencelist: { type: "token", description: "A list of actors used for only for reference purposes such as within a starter pack." }, listViewerState: { type: "object", properties: { muted: { type: "boolean" }, blocked: { type: "string", format: "at-uri" } } }, notFoundActor: { type: "object", description: "indicates that a handle or DID could not be resolved", required: ["actor", "notFound"], properties: { actor: { type: "string", format: "at-identifier" }, notFound: { type: "boolean", const: true } } }, relationship: { type: "object", description: "lists the bi-directional graph relationships between one actor (not indicated in the object), and the target actors (the DID included in the object)", required: ["did"], properties: { did: { type: "string", format: "did" }, following: { type: "string", format: "at-uri", description: "if the actor follows this DID, this is the AT-URI of the follow record" }, followedBy: { type: "string", format: "at-uri", description: "if the actor is followed by this DID, contains the AT-URI of the follow record" } } } } }, AppBskyGraphFollow: { lexicon: 1, id: "app.bsky.graph.follow", defs: { main: { type: "record", description: "Record declaring a social 'follow' relationship of another account. Duplicate follows will be ignored by the AppView.", key: "tid", record: { type: "object", required: ["subject", "createdAt"], properties: { subject: { type: "string", format: "did" }, createdAt: { type: "string", format: "datetime" } } } } } }, AppBskyGraphGetActorStarterPacks: { lexicon: 1, id: "app.bsky.graph.getActorStarterPacks", defs: { main: { type: "query", description: "Get a list of starter packs created by the actor.", parameters: { type: "params", required: ["actor"], properties: { actor: { type: "string", format: "at-identifier" }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["starterPacks"], properties: { cursor: { type: "string" }, starterPacks: { type: "array", items: { type: "ref", ref: "lex:app.bsky.graph.defs#starterPackViewBasic" } } } } } } } }, AppBskyGraphGetBlocks: { lexicon: 1, id: "app.bsky.graph.getBlocks", defs: { main: { type: "query", description: "Enumerates which accounts the requesting account is currently blocking. Requires auth.", parameters: { type: "params", properties: { limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["blocks"], properties: { cursor: { type: "string" }, blocks: { type: "array", items: { type: "ref", ref: "lex:app.bsky.actor.defs#profileView" } } } } } } } }, AppBskyGraphGetFollowers: { lexicon: 1, id: "app.bsky.graph.getFollowers", defs: { main: { type: "query", description: "Enumerates accounts which follow a specified account (actor).", parameters: { type: "params", required: ["actor"], properties: { actor: { type: "string", format: "at-identifier" }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["subject", "followers"], properties: { subject: { type: "ref", ref: "lex:app.bsky.actor.defs#profileView" }, cursor: { type: "string" }, followers: { type: "array", items: { type: "ref", ref: "lex:app.bsky.actor.defs#profileView" } } } } } } } }, AppBskyGraphGetFollows: { lexicon: 1, id: "app.bsky.graph.getFollows", defs: { main: { type: "query", description: "Enumerates accounts which a specified account (actor) follows.", parameters: { type: "params", required: ["actor"], properties: { actor: { type: "string", format: "at-identifier" }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["subject", "follows"], properties: { subject: { type: "ref", ref: "lex:app.bsky.actor.defs#profileView" }, cursor: { type: "string" }, follows: { type: "array", items: { type: "ref", ref: "lex:app.bsky.actor.defs#profileView" } } } } } } } }, AppBskyGraphGetKnownFollowers: { lexicon: 1, id: "app.bsky.graph.getKnownFollowers", defs: { main: { type: "query", description: "Enumerates accounts which follow a specified account (actor) and are followed by the viewer.", parameters: { type: "params", required: ["actor"], properties: { actor: { type: "string", format: "at-identifier" }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["subject", "followers"], properties: { subject: { type: "ref", ref: "lex:app.bsky.actor.defs#profileView" }, cursor: { type: "string" }, followers: { type: "array", items: { type: "ref", ref: "lex:app.bsky.actor.defs#profileView" } } } } } } } }, AppBskyGraphGetList: { lexicon: 1, id: "app.bsky.graph.getList", defs: { main: { type: "query", description: "Gets a 'view' (with additional context) of a specified list.", parameters: { type: "params", required: ["list"], properties: { list: { type: "string", format: "at-uri", description: "Reference (AT-URI) of the list record to hydrate." }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["list", "items"], properties: { cursor: { type: "string" }, list: { type: "ref", ref: "lex:app.bsky.graph.defs#listView" }, items: { type: "array", items: { type: "ref", ref: "lex:app.bsky.graph.defs#listItemView" } } } } } } } }, AppBskyGraphGetListBlocks: { lexicon: 1, id: "app.bsky.graph.getListBlocks", defs: { main: { type: "query", description: "Get mod lists that the requesting account (actor) is blocking. Requires auth.", parameters: { type: "params", properties: { limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["lists"], properties: { cursor: { type: "string" }, lists: { type: "array", items: { type: "ref", ref: "lex:app.bsky.graph.defs#listView" } } } } } } } }, AppBskyGraphGetListMutes: { lexicon: 1, id: "app.bsky.graph.getListMutes", defs: { main: { type: "query", description: "Enumerates mod lists that the requesting account (actor) currently has muted. Requires auth.", parameters: { type: "params", properties: { limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["lists"], properties: { cursor: { type: "string" }, lists: { type: "array", items: { type: "ref", ref: "lex:app.bsky.graph.defs#listView" } } } } } } } }, AppBskyGraphGetLists: { lexicon: 1, id: "app.bsky.graph.getLists", defs: { main: { type: "query", description: "Enumerates the lists created by a specified account (actor).", parameters: { type: "params", required: ["actor"], properties: { actor: { type: "string", format: "at-identifier", description: "The account (actor) to enumerate lists from." }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["lists"], properties: { cursor: { type: "string" }, lists: { type: "array", items: { type: "ref", ref: "lex:app.bsky.graph.defs#listView" } } } } } } } }, AppBskyGraphGetMutes: { lexicon: 1, id: "app.bsky.graph.getMutes", defs: { main: { type: "query", description: "Enumerates accounts that the requesting account (actor) currently has muted. Requires auth.", parameters: { type: "params", properties: { limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["mutes"], properties: { cursor: { type: "string" }, mutes: { type: "array", items: { type: "ref", ref: "lex:app.bsky.actor.defs#profileView" } } } } } } } }, AppBskyGraphGetRelationships: { lexicon: 1, id: "app.bsky.graph.getRelationships", defs: { main: { type: "query", description: "Enumerates public relationships between one account, and a list of other accounts. Does not require auth.", parameters: { type: "params", required: ["actor"], properties: { actor: { type: "string", format: "at-identifier", description: "Primary account requesting relationships for." }, others: { type: "array", description: "List of 'other' accounts to be related back to the primary.", maxLength: 30, items: { type: "string", format: "at-identifier" } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["relationships"], properties: { actor: { type: "string", format: "did" }, relationships: { type: "array", items: { type: "union", refs: ["lex:app.bsky.graph.defs#relationship", "lex:app.bsky.graph.defs#notFoundActor"] } } } } }, errors: [{ name: "ActorNotFound", description: "the primary actor at-identifier could not be resolved" }] } } }, AppBskyGraphGetStarterPack: { lexicon: 1, id: "app.bsky.graph.getStarterPack", defs: { main: { type: "query", description: "Gets a view of a starter pack.", parameters: { type: "params", required: ["starterPack"], properties: { starterPack: { type: "string", format: "at-uri", description: "Reference (AT-URI) of the starter pack record." } } }, output: { encoding: "application/json", schema: { type: "object", required: ["starterPack"], properties: { starterPack: { type: "ref", ref: "lex:app.bsky.graph.defs#starterPackView" } } } } } } }, AppBskyGraphGetStarterPacks: { lexicon: 1, id: "app.bsky.graph.getStarterPacks", defs: { main: { type: "query", description: "Get views for a list of starter packs.", parameters: { type: "params", required: ["uris"], properties: { uris: { type: "array", items: { type: "string", format: "at-uri" }, maxLength: 25 } } }, output: { encoding: "application/json", schema: { type: "object", required: ["starterPacks"], properties: { starterPacks: { type: "array", items: { type: "ref", ref: "lex:app.bsky.graph.defs#starterPackViewBasic" } } } } } } } }, AppBskyGraphGetSuggestedFollowsByActor: { lexicon: 1, id: "app.bsky.graph.getSuggestedFollowsByActor", defs: { main: { type: "query", description: "Enumerates follows similar to a given account (actor). Expected use is to recommend additional accounts immediately after following one account.", parameters: { type: "params", required: ["actor"], properties: { actor: { type: "string", format: "at-identifier" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["suggestions"], properties: { suggestions: { type: "array", items: { type: "ref", ref: "lex:app.bsky.actor.defs#profileView" } }, isFallback: { type: "boolean", description: "If true, response has fallen-back to generic results, and is not scoped using relativeToDid", default: false }, recId: { type: "integer", description: "Snowflake for this recommendation, use when submitting recommendation events." } } } } } } }, AppBskyGraphList: { lexicon: 1, id: "app.bsky.graph.list", defs: { main: { type: "record", description: "Record representing a list of accounts (actors). Scope includes both moderation-oriented lists and curration-oriented lists.", key: "tid", record: { type: "object", required: ["name", "purpose", "createdAt"], properties: { purpose: { type: "ref", description: "Defines the purpose of the list (aka, moderation-oriented or curration-oriented)", ref: "lex:app.bsky.graph.defs#listPurpose" }, name: { type: "string", maxLength: 64, minLength: 1, description: "Display name for list; can not be empty." }, description: { type: "string", maxGraphemes: 300, maxLength: 3e3 }, descriptionFacets: { type: "array", items: { type: "ref", ref: "lex:app.bsky.richtext.facet" } }, avatar: { type: "blob", accept: ["image/png", "image/jpeg"], maxSize: 1e6 }, labels: { type: "union", refs: ["lex:com.atproto.label.defs#selfLabels"] }, createdAt: { type: "string", format: "datetime" } } } } } }, AppBskyGraphListblock: { lexicon: 1, id: "app.bsky.graph.listblock", defs: { main: { type: "record", description: "Record representing a block relationship against an entire an entire list of accounts (actors).", key: "tid", record: { type: "object", required: ["subject", "createdAt"], properties: { subject: { type: "string", format: "at-uri", description: "Reference (AT-URI) to the mod list record." }, createdAt: { type: "string", format: "datetime" } } } } } }, AppBskyGraphListitem: { lexicon: 1, id: "app.bsky.graph.listitem", defs: { main: { type: "record", description: "Record representing an account's inclusion on a specific list. The AppView will ignore duplicate listitem records.", key: "tid", record: { type: "object", required: ["subject", "list", "createdAt"], properties: { subject: { type: "string", format: "did", description: "The account which is included on the list." }, list: { type: "string", format: "at-uri", description: "Reference (AT-URI) to the list record (app.bsky.graph.list)." }, createdAt: { type: "string", format: "datetime" } } } } } }, AppBskyGraphMuteActor: { lexicon: 1, id: "app.bsky.graph.muteActor", defs: { main: { type: "procedure", description: "Creates a mute relationship for the specified account. Mutes are private in Bluesky. Requires auth.", input: { encoding: "application/json", schema: { type: "object", required: ["actor"], properties: { actor: { type: "string", format: "at-identifier" } } } } } } }, AppBskyGraphMuteActorList: { lexicon: 1, id: "app.bsky.graph.muteActorList", defs: { main: { type: "procedure", description: "Creates a mute relationship for the specified list of accounts. Mutes are private in Bluesky. Requires auth.", input: { encoding: "application/json", schema: { type: "object", required: ["list"], properties: { list: { type: "string", format: "at-uri" } } } } } } }, AppBskyGraphMuteThread: { lexicon: 1, id: "app.bsky.graph.muteThread", defs: { main: { type: "procedure", description: "Mutes a thread preventing notifications from the thread and any of its children. Mutes are private in Bluesky. Requires auth.", input: { encoding: "application/json", schema: { type: "object", required: ["root"], properties: { root: { type: "string", format: "at-uri" } } } } } } }, AppBskyGraphSearchStarterPacks: { lexicon: 1, id: "app.bsky.graph.searchStarterPacks", defs: { main: { type: "query", description: "Find starter packs matching search criteria. Does not require auth.", parameters: { type: "params", required: ["q"], properties: { q: { type: "string", description: "Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended." }, limit: { type: "integer", minimum: 1, maximum: 100, default: 25 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["starterPacks"], properties: { cursor: { type: "string" }, starterPacks: { type: "array", items: { type: "ref", ref: "lex:app.bsky.graph.defs#starterPackViewBasic" } } } } } } } }, AppBskyGraphStarterpack: { lexicon: 1, id: "app.bsky.graph.starterpack", defs: { main: { type: "record", description: "Record defining a starter pack of actors and feeds for new users.", key: "tid", record: { type: "object", required: ["name", "list", "createdAt"], properties: { name: { type: "string", maxGraphemes: 50, maxLength: 500, minLength: 1, description: "Display name for starter pack; can not be empty." }, description: { type: "string", maxGraphemes: 300, maxLength: 3e3 }, descriptionFacets: { type: "array", items: { type: "ref", ref: "lex:app.bsky.richtext.facet" } }, list: { type: "string", format: "at-uri", description: "Reference (AT-URI) to the list record." }, feeds: { type: "array", maxLength: 3, items: { type: "ref", ref: "lex:app.bsky.graph.starterpack#feedItem" } }, createdAt: { type: "string", format: "datetime" } } } }, feedItem: { type: "object", required: ["uri"], properties: { uri: { type: "string", format: "at-uri" } } } } }, AppBskyGraphUnmuteActor: { lexicon: 1, id: "app.bsky.graph.unmuteActor", defs: { main: { type: "procedure", description: "Unmutes the specified account. Requires auth.", input: { encoding: "application/json", schema: { type: "object", required: ["actor"], properties: { actor: { type: "string", format: "at-identifier" } } } } } } }, AppBskyGraphUnmuteActorList: { lexicon: 1, id: "app.bsky.graph.unmuteActorList", defs: { main: { type: "procedure", description: "Unmutes the specified list of accounts. Requires auth.", input: { encoding: "application/json", schema: { type: "object", required: ["list"], properties: { list: { type: "string", format: "at-uri" } } } } } } }, AppBskyGraphUnmuteThread: { lexicon: 1, id: "app.bsky.graph.unmuteThread", defs: { main: { type: "procedure", description: "Unmutes the specified thread. Requires auth.", input: { encoding: "application/json", schema: { type: "object", required: ["root"], properties: { root: { type: "string", format: "at-uri" } } } } } } }, AppBskyLabelerDefs: { lexicon: 1, id: "app.bsky.labeler.defs", defs: { labelerView: { type: "object", required: ["uri", "cid", "creator", "indexedAt"], properties: { uri: { type: "string", format: "at-uri" }, cid: { type: "string", format: "cid" }, creator: { type: "ref", ref: "lex:app.bsky.actor.defs#profileView" }, likeCount: { type: "integer", minimum: 0 }, viewer: { type: "ref", ref: "lex:app.bsky.labeler.defs#labelerViewerState" }, indexedAt: { type: "string", format: "datetime" }, labels: { type: "array", items: { type: "ref", ref: "lex:com.atproto.label.defs#label" } } } }, labelerViewDetailed: { type: "object", required: ["uri", "cid", "creator", "policies", "indexedAt"], properties: { uri: { type: "string", format: "at-uri" }, cid: { type: "string", format: "cid" }, creator: { type: "ref", ref: "lex:app.bsky.actor.defs#profileView" }, policies: { type: "ref", ref: "lex:app.bsky.labeler.defs#labelerPolicies" }, likeCount: { type: "integer", minimum: 0 }, viewer: { type: "ref", ref: "lex:app.bsky.labeler.defs#labelerViewerState" }, indexedAt: { type: "string", format: "datetime" }, labels: { type: "array", items: { type: "ref", ref: "lex:com.atproto.label.defs#label" } }, reasonTypes: { description: "The set of report reason 'codes' which are in-scope for this service to review and action. These usually align to policy categories. If not defined (distinct from empty array), all reason types are allowed.", type: "array", items: { type: "ref", ref: "lex:com.atproto.moderation.defs#reasonType" } }, subjectTypes: { description: "The set of subject types (account, record, etc) this service accepts reports on.", type: "array", items: { type: "ref", ref: "lex:com.atproto.moderation.defs#subjectType" } }, subjectCollections: { type: "array", description: "Set of record types (collection NSIDs) which can be reported to this service. If not defined (distinct from empty array), default is any record type.", items: { type: "string", format: "nsid" } } } }, labelerViewerState: { type: "object", properties: { like: { type: "string", format: "at-uri" } } }, labelerPolicies: { type: "object", required: ["labelValues"], properties: { labelValues: { type: "array", description: "The label values which this labeler publishes. May include global or custom labels.", items: { type: "ref", ref: "lex:com.atproto.label.defs#labelValue" } }, labelValueDefinitions: { type: "array", description: "Label values created by this labeler and scoped exclusively to it. Labels defined here will override global label definitions for this labeler.", items: { type: "ref", ref: "lex:com.atproto.label.defs#labelValueDefinition" } } } } } }, AppBskyLabelerGetServices: { lexicon: 1, id: "app.bsky.labeler.getServices", defs: { main: { type: "query", description: "Get information about a list of labeler services.", parameters: { type: "params", required: ["dids"], properties: { dids: { type: "array", items: { type: "string", format: "did" } }, detailed: { type: "boolean", default: false } } }, output: { encoding: "application/json", schema: { type: "object", required: ["views"], properties: { views: { type: "array", items: { type: "union", refs: ["lex:app.bsky.labeler.defs#labelerView", "lex:app.bsky.labeler.defs#labelerViewDetailed"] } } } } } } } }, AppBskyLabelerService: { lexicon: 1, id: "app.bsky.labeler.service", defs: { main: { type: "record", description: "A declaration of the existence of labeler service.", key: "literal:self", record: { type: "object", required: ["policies", "createdAt"], properties: { policies: { type: "ref", ref: "lex:app.bsky.labeler.defs#labelerPolicies" }, labels: { type: "union", refs: ["lex:com.atproto.label.defs#selfLabels"] }, createdAt: { type: "string", format: "datetime" }, reasonTypes: { description: "The set of report reason 'codes' which are in-scope for this service to review and action. These usually align to policy categories. If not defined (distinct from empty array), all reason types are allowed.", type: "array", items: { type: "ref", ref: "lex:com.atproto.moderation.defs#reasonType" } }, subjectTypes: { description: "The set of subject types (account, record, etc) this service accepts reports on.", type: "array", items: { type: "ref", ref: "lex:com.atproto.moderation.defs#subjectType" } }, subjectCollections: { type: "array", description: "Set of record types (collection NSIDs) which can be reported to this service. If not defined (distinct from empty array), default is any record type.", items: { type: "string", format: "nsid" } } } } } } }, AppBskyNotificationGetUnreadCount: { lexicon: 1, id: "app.bsky.notification.getUnreadCount", defs: { main: { type: "query", description: "Count the number of unread notifications for the requesting account. Requires auth.", parameters: { type: "params", properties: { priority: { type: "boolean" }, seenAt: { type: "string", format: "datetime" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["count"], properties: { count: { type: "integer" } } } } } } }, AppBskyNotificationListNotifications: { lexicon: 1, id: "app.bsky.notification.listNotifications", defs: { main: { type: "query", description: "Enumerate notifications for the requesting account. Requires auth.", parameters: { type: "params", properties: { reasons: { description: "Notification reasons to include in response.", type: "array", items: { type: "string", description: "A reason that matches the reason property of #notification." } }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, priority: { type: "boolean" }, cursor: { type: "string" }, seenAt: { type: "string", format: "datetime" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["notifications"], properties: { cursor: { type: "string" }, notifications: { type: "array", items: { type: "ref", ref: "lex:app.bsky.notification.listNotifications#notification" } }, priority: { type: "boolean" }, seenAt: { type: "string", format: "datetime" } } } } }, notification: { type: "object", required: ["uri", "cid", "author", "reason", "record", "isRead", "indexedAt"], properties: { uri: { type: "string", format: "at-uri" }, cid: { type: "string", format: "cid" }, author: { type: "ref", ref: "lex:app.bsky.actor.defs#profileView" }, reason: { type: "string", description: "Expected values are 'like', 'repost', 'follow', 'mention', 'reply', 'quote', and 'starterpack-joined'.", knownValues: ["like", "repost", "follow", "mention", "reply", "quote", "starterpack-joined"] }, reasonSubject: { type: "string", format: "at-uri" }, record: { type: "unknown" }, isRead: { type: "boolean" }, indexedAt: { type: "string", format: "datetime" }, labels: { type: "array", items: { type: "ref", ref: "lex:com.atproto.label.defs#label" } } } } } }, AppBskyNotificationPutPreferences: { lexicon: 1, id: "app.bsky.notification.putPreferences", defs: { main: { type: "procedure", description: "Set notification-related preferences for an account. Requires auth.", input: { encoding: "application/json", schema: { type: "object", required: ["priority"], properties: { priority: { type: "boolean" } } } } } } }, AppBskyNotificationRegisterPush: { lexicon: 1, id: "app.bsky.notification.registerPush", defs: { main: { type: "procedure", description: "Register to receive push notifications, via a specified service, for the requesting account. Requires auth.", input: { encoding: "application/json", schema: { type: "object", required: ["serviceDid", "token", "platform", "appId"], properties: { serviceDid: { type: "string", format: "did" }, token: { type: "string" }, platform: { type: "string", knownValues: ["ios", "android", "web"] }, appId: { type: "string" } } } } } } }, AppBskyNotificationUpdateSeen: { lexicon: 1, id: "app.bsky.notification.updateSeen", defs: { main: { type: "procedure", description: "Notify server that the requesting account has seen notifications. Requires auth.", input: { encoding: "application/json", schema: { type: "object", required: ["seenAt"], properties: { seenAt: { type: "string", format: "datetime" } } } } } } }, AppBskyRichtextFacet: { lexicon: 1, id: "app.bsky.richtext.facet", defs: { main: { type: "object", description: "Annotation of a sub-string within rich text.", required: ["index", "features"], properties: { index: { type: "ref", ref: "lex:app.bsky.richtext.facet#byteSlice" }, features: { type: "array", items: { type: "union", refs: ["lex:app.bsky.richtext.facet#mention", "lex:app.bsky.richtext.facet#link", "lex:app.bsky.richtext.facet#tag"] } } } }, mention: { type: "object", description: "Facet feature for mention of another account. The text is usually a handle, including a '@' prefix, but the facet reference is a DID.", required: ["did"], properties: { did: { type: "string", format: "did" } } }, link: { type: "object", description: "Facet feature for a URL. The text URL may have been simplified or truncated, but the facet reference should be a complete URL.", required: ["uri"], properties: { uri: { type: "string", format: "uri" } } }, tag: { type: "object", description: "Facet feature for a hashtag. The text usually includes a '#' prefix, but the facet reference should not (except in the case of 'double hash tags').", required: ["tag"], properties: { tag: { type: "string", maxLength: 640, maxGraphemes: 64 } } }, byteSlice: { type: "object", description: "Specifies the sub-string range a facet feature applies to. Start index is inclusive, end index is exclusive. Indices are zero-indexed, counting bytes of the UTF-8 encoded text. NOTE: some languages, like Javascript, use UTF-16 or Unicode codepoints for string slice indexing; in these languages, convert to byte arrays before working with facets.", required: ["byteStart", "byteEnd"], properties: { byteStart: { type: "integer", minimum: 0 }, byteEnd: { type: "integer", minimum: 0 } } } } }, AppBskyUnspeccedDefs: { lexicon: 1, id: "app.bsky.unspecced.defs", defs: { skeletonSearchPost: { type: "object", required: ["uri"], properties: { uri: { type: "string", format: "at-uri" } } }, skeletonSearchActor: { type: "object", required: ["did"], properties: { did: { type: "string", format: "did" } } }, skeletonSearchStarterPack: { type: "object", required: ["uri"], properties: { uri: { type: "string", format: "at-uri" } } }, trendingTopic: { type: "object", required: ["topic", "link"], properties: { topic: { type: "string" }, displayName: { type: "string" }, description: { type: "string" }, link: { type: "string" } } } } }, AppBskyUnspeccedGetConfig: { lexicon: 1, id: "app.bsky.unspecced.getConfig", defs: { main: { type: "query", description: "Get miscellaneous runtime configuration.", output: { encoding: "application/json", schema: { type: "object", required: [], properties: { checkEmailConfirmed: { type: "boolean" } } } } } } }, AppBskyUnspeccedGetPopularFeedGenerators: { lexicon: 1, id: "app.bsky.unspecced.getPopularFeedGenerators", defs: { main: { type: "query", description: "An unspecced view of globally popular feed generators.", parameters: { type: "params", properties: { limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" }, query: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["feeds"], properties: { cursor: { type: "string" }, feeds: { type: "array", items: { type: "ref", ref: "lex:app.bsky.feed.defs#generatorView" } } } } } } } }, AppBskyUnspeccedGetSuggestionsSkeleton: { lexicon: 1, id: "app.bsky.unspecced.getSuggestionsSkeleton", defs: { main: { type: "query", description: "Get a skeleton of suggested actors. Intended to be called and then hydrated through app.bsky.actor.getSuggestions", parameters: { type: "params", properties: { viewer: { type: "string", format: "did", description: "DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking." }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" }, relativeToDid: { type: "string", format: "did", description: "DID of the account to get suggestions relative to. If not provided, suggestions will be based on the viewer." } } }, output: { encoding: "application/json", schema: { type: "object", required: ["actors"], properties: { cursor: { type: "string" }, actors: { type: "array", items: { type: "ref", ref: "lex:app.bsky.unspecced.defs#skeletonSearchActor" } }, relativeToDid: { type: "string", format: "did", description: "DID of the account these suggestions are relative to. If this is returned undefined, suggestions are based on the viewer." }, recId: { type: "integer", description: "Snowflake for this recommendation, use when submitting recommendation events." } } } } } } }, AppBskyUnspeccedGetTaggedSuggestions: { lexicon: 1, id: "app.bsky.unspecced.getTaggedSuggestions", defs: { main: { type: "query", description: "Get a list of suggestions (feeds and users) tagged with categories", parameters: { type: "params", properties: {} }, output: { encoding: "application/json", schema: { type: "object", required: ["suggestions"], properties: { suggestions: { type: "array", items: { type: "ref", ref: "lex:app.bsky.unspecced.getTaggedSuggestions#suggestion" } } } } } }, suggestion: { type: "object", required: ["tag", "subjectType", "subject"], properties: { tag: { type: "string" }, subjectType: { type: "string", knownValues: ["actor", "feed"] }, subject: { type: "string", format: "uri" } } } } }, AppBskyUnspeccedGetTrendingTopics: { lexicon: 1, id: "app.bsky.unspecced.getTrendingTopics", defs: { main: { type: "query", description: "Get a list of trending topics", parameters: { type: "params", properties: { viewer: { type: "string", format: "did", description: "DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking." }, limit: { type: "integer", minimum: 1, maximum: 25, default: 10 } } }, output: { encoding: "application/json", schema: { type: "object", required: ["topics", "suggested"], properties: { topics: { type: "array", items: { type: "ref", ref: "lex:app.bsky.unspecced.defs#trendingTopic" } }, suggested: { type: "array", items: { type: "ref", ref: "lex:app.bsky.unspecced.defs#trendingTopic" } } } } } } } }, AppBskyUnspeccedSearchActorsSkeleton: { lexicon: 1, id: "app.bsky.unspecced.searchActorsSkeleton", defs: { main: { type: "query", description: "Backend Actors (profile) search, returns only skeleton.", parameters: { type: "params", required: ["q"], properties: { q: { type: "string", description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. For typeahead search, only simple term match is supported, not full syntax." }, viewer: { type: "string", format: "did", description: "DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking." }, typeahead: { type: "boolean", description: "If true, acts as fast/simple 'typeahead' query." }, limit: { type: "integer", minimum: 1, maximum: 100, default: 25 }, cursor: { type: "string", description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set." } } }, output: { encoding: "application/json", schema: { type: "object", required: ["actors"], properties: { cursor: { type: "string" }, hitsTotal: { type: "integer", description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits." }, actors: { type: "array", items: { type: "ref", ref: "lex:app.bsky.unspecced.defs#skeletonSearchActor" } } } } }, errors: [{ name: "BadQueryString" }] } } }, AppBskyUnspeccedSearchPostsSkeleton: { lexicon: 1, id: "app.bsky.unspecced.searchPostsSkeleton", defs: { main: { type: "query", description: "Backend Posts search, returns only skeleton", parameters: { type: "params", required: ["q"], properties: { q: { type: "string", description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended." }, sort: { type: "string", knownValues: ["top", "latest"], default: "latest", description: "Specifies the ranking order of results." }, since: { type: "string", description: "Filter results for posts after the indicated datetime (inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYYY-MM-DD)." }, until: { type: "string", description: "Filter results for posts before the indicated datetime (not inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYY-MM-DD)." }, mentions: { type: "string", format: "at-identifier", description: "Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions." }, author: { type: "string", format: "at-identifier", description: "Filter to posts by the given account. Handles are resolved to DID before query-time." }, lang: { type: "string", format: "language", description: "Filter to posts in the given language. Expected to be based on post language field, though server may override language detection." }, domain: { type: "string", description: "Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization." }, url: { type: "string", format: "uri", description: "Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching." }, tag: { type: "array", items: { type: "string", maxLength: 640, maxGraphemes: 64 }, description: "Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with 'AND' matching." }, viewer: { type: "string", format: "did", description: "DID of the account making the request (not included for public/unauthenticated queries). Used for 'from:me' queries." }, limit: { type: "integer", minimum: 1, maximum: 100, default: 25 }, cursor: { type: "string", description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set." } } }, output: { encoding: "application/json", schema: { type: "object", required: ["posts"], properties: { cursor: { type: "string" }, hitsTotal: { type: "integer", description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits." }, posts: { type: "array", items: { type: "ref", ref: "lex:app.bsky.unspecced.defs#skeletonSearchPost" } } } } }, errors: [{ name: "BadQueryString" }] } } }, AppBskyUnspeccedSearchStarterPacksSkeleton: { lexicon: 1, id: "app.bsky.unspecced.searchStarterPacksSkeleton", defs: { main: { type: "query", description: "Backend Starter Pack search, returns only skeleton.", parameters: { type: "params", required: ["q"], properties: { q: { type: "string", description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended." }, viewer: { type: "string", format: "did", description: "DID of the account making the request (not included for public/unauthenticated queries)." }, limit: { type: "integer", minimum: 1, maximum: 100, default: 25 }, cursor: { type: "string", description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set." } } }, output: { encoding: "application/json", schema: { type: "object", required: ["starterPacks"], properties: { cursor: { type: "string" }, hitsTotal: { type: "integer", description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits." }, starterPacks: { type: "array", items: { type: "ref", ref: "lex:app.bsky.unspecced.defs#skeletonSearchStarterPack" } } } } }, errors: [{ name: "BadQueryString" }] } } }, AppBskyVideoDefs: { lexicon: 1, id: "app.bsky.video.defs", defs: { jobStatus: { type: "object", required: ["jobId", "did", "state"], properties: { jobId: { type: "string" }, did: { type: "string", format: "did" }, state: { type: "string", description: "The state of the video processing job. All values not listed as a known value indicate that the job is in process.", knownValues: ["JOB_STATE_COMPLETED", "JOB_STATE_FAILED"] }, progress: { type: "integer", minimum: 0, maximum: 100, description: "Progress within the current processing state." }, blob: { type: "blob" }, error: { type: "string" }, message: { type: "string" } } } } }, AppBskyVideoGetJobStatus: { lexicon: 1, id: "app.bsky.video.getJobStatus", defs: { main: { type: "query", description: "Get status details for a video processing job.", parameters: { type: "params", required: ["jobId"], properties: { jobId: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["jobStatus"], properties: { jobStatus: { type: "ref", ref: "lex:app.bsky.video.defs#jobStatus" } } } } } } }, AppBskyVideoGetUploadLimits: { lexicon: 1, id: "app.bsky.video.getUploadLimits", defs: { main: { type: "query", description: "Get video upload limits for the authenticated user.", output: { encoding: "application/json", schema: { type: "object", required: ["canUpload"], properties: { canUpload: { type: "boolean" }, remainingDailyVideos: { type: "integer" }, remainingDailyBytes: { type: "integer" }, message: { type: "string" }, error: { type: "string" } } } } } } }, AppBskyVideoUploadVideo: { lexicon: 1, id: "app.bsky.video.uploadVideo", defs: { main: { type: "procedure", description: "Upload a video to be processed then stored on the PDS.", input: { encoding: "video/mp4" }, output: { encoding: "application/json", schema: { type: "object", required: ["jobStatus"], properties: { jobStatus: { type: "ref", ref: "lex:app.bsky.video.defs#jobStatus" } } } } } } }, ChatBskyActorDeclaration: { lexicon: 1, id: "chat.bsky.actor.declaration", defs: { main: { type: "record", description: "A declaration of a Bluesky chat account.", key: "literal:self", record: { type: "object", required: ["allowIncoming"], properties: { allowIncoming: { type: "string", knownValues: ["all", "none", "following"] } } } } } }, ChatBskyActorDefs: { lexicon: 1, id: "chat.bsky.actor.defs", defs: { profileViewBasic: { type: "object", required: ["did", "handle"], properties: { did: { type: "string", format: "did" }, handle: { type: "string", format: "handle" }, displayName: { type: "string", maxGraphemes: 64, maxLength: 640 }, avatar: { type: "string", format: "uri" }, associated: { type: "ref", ref: "lex:app.bsky.actor.defs#profileAssociated" }, viewer: { type: "ref", ref: "lex:app.bsky.actor.defs#viewerState" }, labels: { type: "array", items: { type: "ref", ref: "lex:com.atproto.label.defs#label" } }, chatDisabled: { type: "boolean", description: "Set to true when the actor cannot actively participate in converations" } } } } }, ChatBskyActorDeleteAccount: { lexicon: 1, id: "chat.bsky.actor.deleteAccount", defs: { main: { type: "procedure", output: { encoding: "application/json", schema: { type: "object", properties: {} } } } } }, ChatBskyActorExportAccountData: { lexicon: 1, id: "chat.bsky.actor.exportAccountData", defs: { main: { type: "query", output: { encoding: "application/jsonl" } } } }, ChatBskyConvoAcceptConvo: { lexicon: 1, id: "chat.bsky.convo.acceptConvo", defs: { main: { type: "procedure", input: { encoding: "application/json", schema: { type: "object", required: ["convoId"], properties: { convoId: { type: "string" } } } }, output: { encoding: "application/json", schema: { type: "object", properties: { rev: { description: "Rev when the convo was accepted. If not present, the convo was already accepted.", type: "string" } } } } } } }, ChatBskyConvoDefs: { lexicon: 1, id: "chat.bsky.convo.defs", defs: { messageRef: { type: "object", required: ["did", "messageId", "convoId"], properties: { did: { type: "string", format: "did" }, convoId: { type: "string" }, messageId: { type: "string" } } }, messageInput: { type: "object", required: ["text"], properties: { text: { type: "string", maxLength: 1e4, maxGraphemes: 1e3 }, facets: { type: "array", description: "Annotations of text (mentions, URLs, hashtags, etc)", items: { type: "ref", ref: "lex:app.bsky.richtext.facet" } }, embed: { type: "union", refs: ["lex:app.bsky.embed.record"] } } }, messageView: { type: "object", required: ["id", "rev", "text", "sender", "sentAt"], properties: { id: { type: "string" }, rev: { type: "string" }, text: { type: "string", maxLength: 1e4, maxGraphemes: 1e3 }, facets: { type: "array", description: "Annotations of text (mentions, URLs, hashtags, etc)", items: { type: "ref", ref: "lex:app.bsky.richtext.facet" } }, embed: { type: "union", refs: ["lex:app.bsky.embed.record#view"] }, sender: { type: "ref", ref: "lex:chat.bsky.convo.defs#messageViewSender" }, sentAt: { type: "string", format: "datetime" } } }, deletedMessageView: { type: "object", required: ["id", "rev", "sender", "sentAt"], properties: { id: { type: "string" }, rev: { type: "string" }, sender: { type: "ref", ref: "lex:chat.bsky.convo.defs#messageViewSender" }, sentAt: { type: "string", format: "datetime" } } }, messageViewSender: { type: "object", required: ["did"], properties: { did: { type: "string", format: "did" } } }, convoView: { type: "object", required: ["id", "rev", "members", "muted", "unreadCount"], properties: { id: { type: "string" }, rev: { type: "string" }, members: { type: "array", items: { type: "ref", ref: "lex:chat.bsky.actor.defs#profileViewBasic" } }, lastMessage: { type: "union", refs: ["lex:chat.bsky.convo.defs#messageView", "lex:chat.bsky.convo.defs#deletedMessageView"] }, muted: { type: "boolean" }, status: { type: "string", knownValues: ["request", "accepted"] }, unreadCount: { type: "integer" } } }, logBeginConvo: { type: "object", required: ["rev", "convoId"], properties: { rev: { type: "string" }, convoId: { type: "string" } } }, logAcceptConvo: { type: "object", required: ["rev", "convoId"], properties: { rev: { type: "string" }, convoId: { type: "string" } } }, logLeaveConvo: { type: "object", required: ["rev", "convoId"], properties: { rev: { type: "string" }, convoId: { type: "string" } } }, logMuteConvo: { type: "object", required: ["rev", "convoId"], properties: { rev: { type: "string" }, convoId: { type: "string" } } }, logUnmuteConvo: { type: "object", required: ["rev", "convoId"], properties: { rev: { type: "string" }, convoId: { type: "string" } } }, logCreateMessage: { type: "object", required: ["rev", "convoId", "message"], properties: { rev: { type: "string" }, convoId: { type: "string" }, message: { type: "union", refs: ["lex:chat.bsky.convo.defs#messageView", "lex:chat.bsky.convo.defs#deletedMessageView"] } } }, logDeleteMessage: { type: "object", required: ["rev", "convoId", "message"], properties: { rev: { type: "string" }, convoId: { type: "string" }, message: { type: "union", refs: ["lex:chat.bsky.convo.defs#messageView", "lex:chat.bsky.convo.defs#deletedMessageView"] } } }, logReadMessage: { type: "object", required: ["rev", "convoId", "message"], properties: { rev: { type: "string" }, convoId: { type: "string" }, message: { type: "union", refs: ["lex:chat.bsky.convo.defs#messageView", "lex:chat.bsky.convo.defs#deletedMessageView"] } } } } }, ChatBskyConvoDeleteMessageForSelf: { lexicon: 1, id: "chat.bsky.convo.deleteMessageForSelf", defs: { main: { type: "procedure", input: { encoding: "application/json", schema: { type: "object", required: ["convoId", "messageId"], properties: { convoId: { type: "string" }, messageId: { type: "string" } } } }, output: { encoding: "application/json", schema: { type: "ref", ref: "lex:chat.bsky.convo.defs#deletedMessageView" } } } } }, ChatBskyConvoGetConvo: { lexicon: 1, id: "chat.bsky.convo.getConvo", defs: { main: { type: "query", parameters: { type: "params", required: ["convoId"], properties: { convoId: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["convo"], properties: { convo: { type: "ref", ref: "lex:chat.bsky.convo.defs#convoView" } } } } } } }, ChatBskyConvoGetConvoAvailability: { lexicon: 1, id: "chat.bsky.convo.getConvoAvailability", defs: { main: { type: "query", description: "Get whether the requester and the other members can chat. If an existing convo is found for these members, it is returned.", parameters: { type: "params", required: ["members"], properties: { members: { type: "array", minLength: 1, maxLength: 10, items: { type: "string", format: "did" } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["canChat"], properties: { canChat: { type: "boolean" }, convo: { type: "ref", ref: "lex:chat.bsky.convo.defs#convoView" } } } } } } }, ChatBskyConvoGetConvoForMembers: { lexicon: 1, id: "chat.bsky.convo.getConvoForMembers", defs: { main: { type: "query", parameters: { type: "params", required: ["members"], properties: { members: { type: "array", minLength: 1, maxLength: 10, items: { type: "string", format: "did" } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["convo"], properties: { convo: { type: "ref", ref: "lex:chat.bsky.convo.defs#convoView" } } } } } } }, ChatBskyConvoGetLog: { lexicon: 1, id: "chat.bsky.convo.getLog", defs: { main: { type: "query", parameters: { type: "params", required: [], properties: { cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["logs"], properties: { cursor: { type: "string" }, logs: { type: "array", items: { type: "union", refs: ["lex:chat.bsky.convo.defs#logBeginConvo", "lex:chat.bsky.convo.defs#logAcceptConvo", "lex:chat.bsky.convo.defs#logLeaveConvo", "lex:chat.bsky.convo.defs#logCreateMessage", "lex:chat.bsky.convo.defs#logDeleteMessage"] } } } } } } } }, ChatBskyConvoGetMessages: { lexicon: 1, id: "chat.bsky.convo.getMessages", defs: { main: { type: "query", parameters: { type: "params", required: ["convoId"], properties: { convoId: { type: "string" }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["messages"], properties: { cursor: { type: "string" }, messages: { type: "array", items: { type: "union", refs: ["lex:chat.bsky.convo.defs#messageView", "lex:chat.bsky.convo.defs#deletedMessageView"] } } } } } } } }, ChatBskyConvoLeaveConvo: { lexicon: 1, id: "chat.bsky.convo.leaveConvo", defs: { main: { type: "procedure", input: { encoding: "application/json", schema: { type: "object", required: ["convoId"], properties: { convoId: { type: "string" } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["convoId", "rev"], properties: { convoId: { type: "string" }, rev: { type: "string" } } } } } } }, ChatBskyConvoListConvos: { lexicon: 1, id: "chat.bsky.convo.listConvos", defs: { main: { type: "query", parameters: { type: "params", properties: { limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" }, readState: { type: "string", knownValues: ["unread"] }, status: { type: "string", knownValues: ["request", "accepted"] } } }, output: { encoding: "application/json", schema: { type: "object", required: ["convos"], properties: { cursor: { type: "string" }, convos: { type: "array", items: { type: "ref", ref: "lex:chat.bsky.convo.defs#convoView" } } } } } } } }, ChatBskyConvoMuteConvo: { lexicon: 1, id: "chat.bsky.convo.muteConvo", defs: { main: { type: "procedure", input: { encoding: "application/json", schema: { type: "object", required: ["convoId"], properties: { convoId: { type: "string" } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["convo"], properties: { convo: { type: "ref", ref: "lex:chat.bsky.convo.defs#convoView" } } } } } } }, ChatBskyConvoSendMessage: { lexicon: 1, id: "chat.bsky.convo.sendMessage", defs: { main: { type: "procedure", input: { encoding: "application/json", schema: { type: "object", required: ["convoId", "message"], properties: { convoId: { type: "string" }, message: { type: "ref", ref: "lex:chat.bsky.convo.defs#messageInput" } } } }, output: { encoding: "application/json", schema: { type: "ref", ref: "lex:chat.bsky.convo.defs#messageView" } } } } }, ChatBskyConvoSendMessageBatch: { lexicon: 1, id: "chat.bsky.convo.sendMessageBatch", defs: { main: { type: "procedure", input: { encoding: "application/json", schema: { type: "object", required: ["items"], properties: { items: { type: "array", maxLength: 100, items: { type: "ref", ref: "lex:chat.bsky.convo.sendMessageBatch#batchItem" } } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["items"], properties: { items: { type: "array", items: { type: "ref", ref: "lex:chat.bsky.convo.defs#messageView" } } } } } }, batchItem: { type: "object", required: ["convoId", "message"], properties: { convoId: { type: "string" }, message: { type: "ref", ref: "lex:chat.bsky.convo.defs#messageInput" } } } } }, ChatBskyConvoUnmuteConvo: { lexicon: 1, id: "chat.bsky.convo.unmuteConvo", defs: { main: { type: "procedure", input: { encoding: "application/json", schema: { type: "object", required: ["convoId"], properties: { convoId: { type: "string" } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["convo"], properties: { convo: { type: "ref", ref: "lex:chat.bsky.convo.defs#convoView" } } } } } } }, ChatBskyConvoUpdateAllRead: { lexicon: 1, id: "chat.bsky.convo.updateAllRead", defs: { main: { type: "procedure", input: { encoding: "application/json", schema: { type: "object", properties: { status: { type: "string", knownValues: ["request", "accepted"] } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["updatedCount"], properties: { updatedCount: { description: "The count of updated convos.", type: "integer" } } } } } } }, ChatBskyConvoUpdateRead: { lexicon: 1, id: "chat.bsky.convo.updateRead", defs: { main: { type: "procedure", input: { encoding: "application/json", schema: { type: "object", required: ["convoId"], properties: { convoId: { type: "string" }, messageId: { type: "string" } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["convo"], properties: { convo: { type: "ref", ref: "lex:chat.bsky.convo.defs#convoView" } } } } } } }, ChatBskyModerationGetActorMetadata: { lexicon: 1, id: "chat.bsky.moderation.getActorMetadata", defs: { main: { type: "query", parameters: { type: "params", required: ["actor"], properties: { actor: { type: "string", format: "did" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["day", "month", "all"], properties: { day: { type: "ref", ref: "lex:chat.bsky.moderation.getActorMetadata#metadata" }, month: { type: "ref", ref: "lex:chat.bsky.moderation.getActorMetadata#metadata" }, all: { type: "ref", ref: "lex:chat.bsky.moderation.getActorMetadata#metadata" } } } } }, metadata: { type: "object", required: ["messagesSent", "messagesReceived", "convos", "convosStarted"], properties: { messagesSent: { type: "integer" }, messagesReceived: { type: "integer" }, convos: { type: "integer" }, convosStarted: { type: "integer" } } } } }, ChatBskyModerationGetMessageContext: { lexicon: 1, id: "chat.bsky.moderation.getMessageContext", defs: { main: { type: "query", parameters: { type: "params", required: ["messageId"], properties: { convoId: { type: "string", description: "Conversation that the message is from. NOTE: this field will eventually be required." }, messageId: { type: "string" }, before: { type: "integer", default: 5 }, after: { type: "integer", default: 5 } } }, output: { encoding: "application/json", schema: { type: "object", required: ["messages"], properties: { messages: { type: "array", items: { type: "union", refs: ["lex:chat.bsky.convo.defs#messageView", "lex:chat.bsky.convo.defs#deletedMessageView"] } } } } } } } }, ChatBskyModerationUpdateActorAccess: { lexicon: 1, id: "chat.bsky.moderation.updateActorAccess", defs: { main: { type: "procedure", input: { encoding: "application/json", schema: { type: "object", required: ["actor", "allowAccess"], properties: { actor: { type: "string", format: "did" }, allowAccess: { type: "boolean" }, ref: { type: "string" } } } } } } }, ToolsOzoneCommunicationCreateTemplate: { lexicon: 1, id: "tools.ozone.communication.createTemplate", defs: { main: { type: "procedure", description: "Administrative action to create a new, re-usable communication (email for now) template.", input: { encoding: "application/json", schema: { type: "object", required: ["subject", "contentMarkdown", "name"], properties: { name: { type: "string", description: "Name of the template." }, contentMarkdown: { type: "string", description: "Content of the template, markdown supported, can contain variable placeholders." }, subject: { type: "string", description: "Subject of the message, used in emails." }, lang: { type: "string", format: "language", description: "Message language." }, createdBy: { type: "string", format: "did", description: "DID of the user who is creating the template." } } } }, output: { encoding: "application/json", schema: { type: "ref", ref: "lex:tools.ozone.communication.defs#templateView" } }, errors: [{ name: "DuplicateTemplateName" }] } } }, ToolsOzoneCommunicationDefs: { lexicon: 1, id: "tools.ozone.communication.defs", defs: { templateView: { type: "object", required: ["id", "name", "contentMarkdown", "disabled", "lastUpdatedBy", "createdAt", "updatedAt"], properties: { id: { type: "string" }, name: { type: "string", description: "Name of the template." }, subject: { type: "string", description: "Content of the template, can contain markdown and variable placeholders." }, contentMarkdown: { type: "string", description: "Subject of the message, used in emails." }, disabled: { type: "boolean" }, lang: { type: "string", format: "language", description: "Message language." }, lastUpdatedBy: { type: "string", format: "did", description: "DID of the user who last updated the template." }, createdAt: { type: "string", format: "datetime" }, updatedAt: { type: "string", format: "datetime" } } } } }, ToolsOzoneCommunicationDeleteTemplate: { lexicon: 1, id: "tools.ozone.communication.deleteTemplate", defs: { main: { type: "procedure", description: "Delete a communication template.", input: { encoding: "application/json", schema: { type: "object", required: ["id"], properties: { id: { type: "string" } } } } } } }, ToolsOzoneCommunicationListTemplates: { lexicon: 1, id: "tools.ozone.communication.listTemplates", defs: { main: { type: "query", description: "Get list of all communication templates.", output: { encoding: "application/json", schema: { type: "object", required: ["communicationTemplates"], properties: { communicationTemplates: { type: "array", items: { type: "ref", ref: "lex:tools.ozone.communication.defs#templateView" } } } } } } } }, ToolsOzoneCommunicationUpdateTemplate: { lexicon: 1, id: "tools.ozone.communication.updateTemplate", defs: { main: { type: "procedure", description: "Administrative action to update an existing communication template. Allows passing partial fields to patch specific fields only.", input: { encoding: "application/json", schema: { type: "object", required: ["id"], properties: { id: { type: "string", description: "ID of the template to be updated." }, name: { type: "string", description: "Name of the template." }, lang: { type: "string", format: "language", description: "Message language." }, contentMarkdown: { type: "string", description: "Content of the template, markdown supported, can contain variable placeholders." }, subject: { type: "string", description: "Subject of the message, used in emails." }, updatedBy: { type: "string", format: "did", description: "DID of the user who is updating the template." }, disabled: { type: "boolean" } } } }, output: { encoding: "application/json", schema: { type: "ref", ref: "lex:tools.ozone.communication.defs#templateView" } }, errors: [{ name: "DuplicateTemplateName" }] } } }, ToolsOzoneModerationDefs: { lexicon: 1, id: "tools.ozone.moderation.defs", defs: { modEventView: { type: "object", required: ["id", "event", "subject", "subjectBlobCids", "createdBy", "createdAt"], properties: { id: { type: "integer" }, event: { type: "union", refs: ["lex:tools.ozone.moderation.defs#modEventTakedown", "lex:tools.ozone.moderation.defs#modEventReverseTakedown", "lex:tools.ozone.moderation.defs#modEventComment", "lex:tools.ozone.moderation.defs#modEventReport", "lex:tools.ozone.moderation.defs#modEventLabel", "lex:tools.ozone.moderation.defs#modEventAcknowledge", "lex:tools.ozone.moderation.defs#modEventEscalate", "lex:tools.ozone.moderation.defs#modEventMute", "lex:tools.ozone.moderation.defs#modEventUnmute", "lex:tools.ozone.moderation.defs#modEventMuteReporter", "lex:tools.ozone.moderation.defs#modEventUnmuteReporter", "lex:tools.ozone.moderation.defs#modEventEmail", "lex:tools.ozone.moderation.defs#modEventResolveAppeal", "lex:tools.ozone.moderation.defs#modEventDivert", "lex:tools.ozone.moderation.defs#modEventTag", "lex:tools.ozone.moderation.defs#accountEvent", "lex:tools.ozone.moderation.defs#identityEvent", "lex:tools.ozone.moderation.defs#recordEvent", "lex:tools.ozone.moderation.defs#modEventPriorityScore"] }, subject: { type: "union", refs: ["lex:com.atproto.admin.defs#repoRef", "lex:com.atproto.repo.strongRef", "lex:chat.bsky.convo.defs#messageRef"] }, subjectBlobCids: { type: "array", items: { type: "string" } }, createdBy: { type: "string", format: "did" }, createdAt: { type: "string", format: "datetime" }, creatorHandle: { type: "string" }, subjectHandle: { type: "string" } } }, modEventViewDetail: { type: "object", required: ["id", "event", "subject", "subjectBlobs", "createdBy", "createdAt"], properties: { id: { type: "integer" }, event: { type: "union", refs: ["lex:tools.ozone.moderation.defs#modEventTakedown", "lex:tools.ozone.moderation.defs#modEventReverseTakedown", "lex:tools.ozone.moderation.defs#modEventComment", "lex:tools.ozone.moderation.defs#modEventReport", "lex:tools.ozone.moderation.defs#modEventLabel", "lex:tools.ozone.moderation.defs#modEventAcknowledge", "lex:tools.ozone.moderation.defs#modEventEscalate", "lex:tools.ozone.moderation.defs#modEventMute", "lex:tools.ozone.moderation.defs#modEventUnmute", "lex:tools.ozone.moderation.defs#modEventMuteReporter", "lex:tools.ozone.moderation.defs#modEventUnmuteReporter", "lex:tools.ozone.moderation.defs#modEventEmail", "lex:tools.ozone.moderation.defs#modEventResolveAppeal", "lex:tools.ozone.moderation.defs#modEventDivert", "lex:tools.ozone.moderation.defs#modEventTag", "lex:tools.ozone.moderation.defs#accountEvent", "lex:tools.ozone.moderation.defs#identityEvent", "lex:tools.ozone.moderation.defs#recordEvent", "lex:tools.ozone.moderation.defs#modEventPriorityScore"] }, subject: { type: "union", refs: ["lex:tools.ozone.moderation.defs#repoView", "lex:tools.ozone.moderation.defs#repoViewNotFound", "lex:tools.ozone.moderation.defs#recordView", "lex:tools.ozone.moderation.defs#recordViewNotFound"] }, subjectBlobs: { type: "array", items: { type: "ref", ref: "lex:tools.ozone.moderation.defs#blobView" } }, createdBy: { type: "string", format: "did" }, createdAt: { type: "string", format: "datetime" } } }, subjectStatusView: { type: "object", required: ["id", "subject", "createdAt", "updatedAt", "reviewState"], properties: { id: { type: "integer" }, subject: { type: "union", refs: ["lex:com.atproto.admin.defs#repoRef", "lex:com.atproto.repo.strongRef"] }, hosting: { type: "union", refs: ["lex:tools.ozone.moderation.defs#accountHosting", "lex:tools.ozone.moderation.defs#recordHosting"] }, subjectBlobCids: { type: "array", items: { type: "string", format: "cid" } }, subjectRepoHandle: { type: "string" }, updatedAt: { type: "string", format: "datetime", description: "Timestamp referencing when the last update was made to the moderation status of the subject" }, createdAt: { type: "string", format: "datetime", description: "Timestamp referencing the first moderation status impacting event was emitted on the subject" }, reviewState: { type: "ref", ref: "lex:tools.ozone.moderation.defs#subjectReviewState" }, comment: { type: "string", description: "Sticky comment on the subject." }, priorityScore: { type: "integer", description: "Numeric value representing the level of priority. Higher score means higher priority.", minimum: 0, maximum: 100 }, muteUntil: { type: "string", format: "datetime" }, muteReportingUntil: { type: "string", format: "datetime" }, lastReviewedBy: { type: "string", format: "did" }, lastReviewedAt: { type: "string", format: "datetime" }, lastReportedAt: { type: "string", format: "datetime" }, lastAppealedAt: { type: "string", format: "datetime", description: "Timestamp referencing when the author of the subject appealed a moderation action" }, takendown: { type: "boolean" }, appealed: { type: "boolean", description: "True indicates that the a previously taken moderator action was appealed against, by the author of the content. False indicates last appeal was resolved by moderators." }, suspendUntil: { type: "string", format: "datetime" }, tags: { type: "array", items: { type: "string" } }, accountStats: { description: "Statistics related to the account subject", type: "ref", ref: "lex:tools.ozone.moderation.defs#accountStats" }, recordsStats: { description: "Statistics related to the record subjects authored by the subject's account", type: "ref", ref: "lex:tools.ozone.moderation.defs#recordsStats" } } }, accountStats: { description: "Statistics about a particular account subject", type: "object", properties: { reportCount: { description: "Total number of reports on the account", type: "integer" }, appealCount: { description: "Total number of appeals against a moderation action on the account", type: "integer" }, suspendCount: { description: "Number of times the account was suspended", type: "integer" }, escalateCount: { description: "Number of times the account was escalated", type: "integer" }, takedownCount: { description: "Number of times the account was taken down", type: "integer" } } }, recordsStats: { description: "Statistics about a set of record subject items", type: "object", properties: { totalReports: { description: "Cumulative sum of the number of reports on the items in the set", type: "integer" }, reportedCount: { description: "Number of items that were reported at least once", type: "integer" }, escalatedCount: { description: "Number of items that were escalated at least once", type: "integer" }, appealedCount: { description: "Number of items that were appealed at least once", type: "integer" }, subjectCount: { description: "Total number of item in the set", type: "integer" }, pendingCount: { description: 'Number of item currently in "reviewOpen" or "reviewEscalated" state', type: "integer" }, processedCount: { description: 'Number of item currently in "reviewNone" or "reviewClosed" state', type: "integer" }, takendownCount: { description: "Number of item currently taken down", type: "integer" } } }, subjectReviewState: { type: "string", knownValues: ["lex:tools.ozone.moderation.defs#reviewOpen", "lex:tools.ozone.moderation.defs#reviewEscalated", "lex:tools.ozone.moderation.defs#reviewClosed", "lex:tools.ozone.moderation.defs#reviewNone"] }, reviewOpen: { type: "token", description: "Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator" }, reviewEscalated: { type: "token", description: "Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator" }, reviewClosed: { type: "token", description: "Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator" }, reviewNone: { type: "token", description: "Moderator review status of a subject: Unnecessary. Indicates that the subject does not need a review at the moment but there is probably some moderation related metadata available for it" }, modEventTakedown: { type: "object", description: "Take down a subject permanently or temporarily", properties: { comment: { type: "string" }, durationInHours: { type: "integer", description: "Indicates how long the takedown should be in effect before automatically expiring." }, acknowledgeAccountSubjects: { type: "boolean", description: "If true, all other reports on content authored by this account will be resolved (acknowledged)." }, policies: { type: "array", maxLength: 5, items: { type: "string" }, description: "Names/Keywords of the policies that drove the decision." } } }, modEventReverseTakedown: { type: "object", description: "Revert take down action on a subject", properties: { comment: { type: "string", description: "Describe reasoning behind the reversal." } } }, modEventResolveAppeal: { type: "object", description: "Resolve appeal on a subject", properties: { comment: { type: "string", description: "Describe resolution." } } }, modEventComment: { type: "object", description: "Add a comment to a subject. An empty comment will clear any previously set sticky comment.", properties: { comment: { type: "string" }, sticky: { type: "boolean", description: "Make the comment persistent on the subject" } } }, modEventReport: { type: "object", description: "Report a subject", required: ["reportType"], properties: { comment: { type: "string" }, isReporterMuted: { type: "boolean", description: "Set to true if the reporter was muted from reporting at the time of the event. These reports won't impact the reviewState of the subject." }, reportType: { type: "ref", ref: "lex:com.atproto.moderation.defs#reasonType" } } }, modEventLabel: { type: "object", description: "Apply/Negate labels on a subject", required: ["createLabelVals", "negateLabelVals"], properties: { comment: { type: "string" }, createLabelVals: { type: "array", items: { type: "string" } }, negateLabelVals: { type: "array", items: { type: "string" } }, durationInHours: { type: "integer", description: "Indicates how long the label will remain on the subject. Only applies on labels that are being added." } } }, modEventPriorityScore: { type: "object", description: "Set priority score of the subject. Higher score means higher priority.", required: ["score"], properties: { comment: { type: "string" }, score: { type: "integer", minimum: 0, maximum: 100 } } }, modEventAcknowledge: { type: "object", properties: { comment: { type: "string" }, acknowledgeAccountSubjects: { type: "boolean", description: "If true, all other reports on content authored by this account will be resolved (acknowledged)." } } }, modEventEscalate: { type: "object", properties: { comment: { type: "string" } } }, modEventMute: { type: "object", description: "Mute incoming reports on a subject", required: ["durationInHours"], properties: { comment: { type: "string" }, durationInHours: { type: "integer", description: "Indicates how long the subject should remain muted." } } }, modEventUnmute: { type: "object", description: "Unmute action on a subject", properties: { comment: { type: "string", description: "Describe reasoning behind the reversal." } } }, modEventMuteReporter: { type: "object", description: "Mute incoming reports from an account", properties: { comment: { type: "string" }, durationInHours: { type: "integer", description: "Indicates how long the account should remain muted. Falsy value here means a permanent mute." } } }, modEventUnmuteReporter: { type: "object", description: "Unmute incoming reports from an account", properties: { comment: { type: "string", description: "Describe reasoning behind the reversal." } } }, modEventEmail: { type: "object", description: "Keep a log of outgoing email to a user", required: ["subjectLine"], properties: { subjectLine: { type: "string", description: "The subject line of the email sent to the user." }, content: { type: "string", description: "The content of the email sent to the user." }, comment: { type: "string", description: "Additional comment about the outgoing comm." } } }, modEventDivert: { type: "object", description: "Divert a record's blobs to a 3rd party service for further scanning/tagging", properties: { comment: { type: "string" } } }, modEventTag: { type: "object", description: "Add/Remove a tag on a subject", required: ["add", "remove"], properties: { add: { type: "array", items: { type: "string" }, description: "Tags to be added to the subject. If already exists, won't be duplicated." }, remove: { type: "array", items: { type: "string" }, description: "Tags to be removed to the subject. Ignores a tag If it doesn't exist, won't be duplicated." }, comment: { type: "string", description: "Additional comment about added/removed tags." } } }, accountEvent: { type: "object", description: "Logs account status related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.", required: ["timestamp", "active"], properties: { comment: { type: "string" }, active: { type: "boolean", description: "Indicates that the account has a repository which can be fetched from the host that emitted this event." }, status: { type: "string", knownValues: ["unknown", "deactivated", "deleted", "takendown", "suspended", "tombstoned"] }, timestamp: { type: "string", format: "datetime" } } }, identityEvent: { type: "object", description: "Logs identity related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.", required: ["timestamp"], properties: { comment: { type: "string" }, handle: { type: "string", format: "handle" }, pdsHost: { type: "string", format: "uri" }, tombstone: { type: "boolean" }, timestamp: { type: "string", format: "datetime" } } }, recordEvent: { type: "object", description: "Logs lifecycle event on a record subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.", required: ["timestamp", "op"], properties: { comment: { type: "string" }, op: { type: "string", knownValues: ["create", "update", "delete"] }, cid: { type: "string", format: "cid" }, timestamp: { type: "string", format: "datetime" } } }, repoView: { type: "object", required: ["did", "handle", "relatedRecords", "indexedAt", "moderation"], properties: { did: { type: "string", format: "did" }, handle: { type: "string", format: "handle" }, email: { type: "string" }, relatedRecords: { type: "array", items: { type: "unknown" } }, indexedAt: { type: "string", format: "datetime" }, moderation: { type: "ref", ref: "lex:tools.ozone.moderation.defs#moderation" }, invitedBy: { type: "ref", ref: "lex:com.atproto.server.defs#inviteCode" }, invitesDisabled: { type: "boolean" }, inviteNote: { type: "string" }, deactivatedAt: { type: "string", format: "datetime" }, threatSignatures: { type: "array", items: { type: "ref", ref: "lex:com.atproto.admin.defs#threatSignature" } } } }, repoViewDetail: { type: "object", required: ["did", "handle", "relatedRecords", "indexedAt", "moderation"], properties: { did: { type: "string", format: "did" }, handle: { type: "string", format: "handle" }, email: { type: "string" }, relatedRecords: { type: "array", items: { type: "unknown" } }, indexedAt: { type: "string", format: "datetime" }, moderation: { type: "ref", ref: "lex:tools.ozone.moderation.defs#moderationDetail" }, labels: { type: "array", items: { type: "ref", ref: "lex:com.atproto.label.defs#label" } }, invitedBy: { type: "ref", ref: "lex:com.atproto.server.defs#inviteCode" }, invites: { type: "array", items: { type: "ref", ref: "lex:com.atproto.server.defs#inviteCode" } }, invitesDisabled: { type: "boolean" }, inviteNote: { type: "string" }, emailConfirmedAt: { type: "string", format: "datetime" }, deactivatedAt: { type: "string", format: "datetime" }, threatSignatures: { type: "array", items: { type: "ref", ref: "lex:com.atproto.admin.defs#threatSignature" } } } }, repoViewNotFound: { type: "object", required: ["did"], properties: { did: { type: "string", format: "did" } } }, recordView: { type: "object", required: ["uri", "cid", "value", "blobCids", "indexedAt", "moderation", "repo"], properties: { uri: { type: "string", format: "at-uri" }, cid: { type: "string", format: "cid" }, value: { type: "unknown" }, blobCids: { type: "array", items: { type: "string", format: "cid" } }, indexedAt: { type: "string", format: "datetime" }, moderation: { type: "ref", ref: "lex:tools.ozone.moderation.defs#moderation" }, repo: { type: "ref", ref: "lex:tools.ozone.moderation.defs#repoView" } } }, recordViewDetail: { type: "object", required: ["uri", "cid", "value", "blobs", "indexedAt", "moderation", "repo"], properties: { uri: { type: "string", format: "at-uri" }, cid: { type: "string", format: "cid" }, value: { type: "unknown" }, blobs: { type: "array", items: { type: "ref", ref: "lex:tools.ozone.moderation.defs#blobView" } }, labels: { type: "array", items: { type: "ref", ref: "lex:com.atproto.label.defs#label" } }, indexedAt: { type: "string", format: "datetime" }, moderation: { type: "ref", ref: "lex:tools.ozone.moderation.defs#moderationDetail" }, repo: { type: "ref", ref: "lex:tools.ozone.moderation.defs#repoView" } } }, recordViewNotFound: { type: "object", required: ["uri"], properties: { uri: { type: "string", format: "at-uri" } } }, moderation: { type: "object", properties: { subjectStatus: { type: "ref", ref: "lex:tools.ozone.moderation.defs#subjectStatusView" } } }, moderationDetail: { type: "object", properties: { subjectStatus: { type: "ref", ref: "lex:tools.ozone.moderation.defs#subjectStatusView" } } }, blobView: { type: "object", required: ["cid", "mimeType", "size", "createdAt"], properties: { cid: { type: "string", format: "cid" }, mimeType: { type: "string" }, size: { type: "integer" }, createdAt: { type: "string", format: "datetime" }, details: { type: "union", refs: ["lex:tools.ozone.moderation.defs#imageDetails", "lex:tools.ozone.moderation.defs#videoDetails"] }, moderation: { type: "ref", ref: "lex:tools.ozone.moderation.defs#moderation" } } }, imageDetails: { type: "object", required: ["width", "height"], properties: { width: { type: "integer" }, height: { type: "integer" } } }, videoDetails: { type: "object", required: ["width", "height", "length"], properties: { width: { type: "integer" }, height: { type: "integer" }, length: { type: "integer" } } }, accountHosting: { type: "object", required: ["status"], properties: { status: { type: "string", knownValues: ["takendown", "suspended", "deleted", "deactivated", "unknown"] }, updatedAt: { type: "string", format: "datetime" }, createdAt: { type: "string", format: "datetime" }, deletedAt: { type: "string", format: "datetime" }, deactivatedAt: { type: "string", format: "datetime" }, reactivatedAt: { type: "string", format: "datetime" } } }, recordHosting: { type: "object", required: ["status"], properties: { status: { type: "string", knownValues: ["deleted", "unknown"] }, updatedAt: { type: "string", format: "datetime" }, createdAt: { type: "string", format: "datetime" }, deletedAt: { type: "string", format: "datetime" } } }, reporterStats: { type: "object", required: ["did", "accountReportCount", "recordReportCount", "reportedAccountCount", "reportedRecordCount", "takendownAccountCount", "takendownRecordCount", "labeledAccountCount", "labeledRecordCount"], properties: { did: { type: "string", format: "did" }, accountReportCount: { type: "integer", description: "The total number of reports made by the user on accounts." }, recordReportCount: { type: "integer", description: "The total number of reports made by the user on records." }, reportedAccountCount: { type: "integer", description: "The total number of accounts reported by the user." }, reportedRecordCount: { type: "integer", description: "The total number of records reported by the user." }, takendownAccountCount: { type: "integer", description: "The total number of accounts taken down as a result of the user's reports." }, takendownRecordCount: { type: "integer", description: "The total number of records taken down as a result of the user's reports." }, labeledAccountCount: { type: "integer", description: "The total number of accounts labeled as a result of the user's reports." }, labeledRecordCount: { type: "integer", description: "The total number of records labeled as a result of the user's reports." } } } } }, ToolsOzoneModerationEmitEvent: { lexicon: 1, id: "tools.ozone.moderation.emitEvent", defs: { main: { type: "procedure", description: "Take a moderation action on an actor.", input: { encoding: "application/json", schema: { type: "object", required: ["event", "subject", "createdBy"], properties: { event: { type: "union", refs: ["lex:tools.ozone.moderation.defs#modEventTakedown", "lex:tools.ozone.moderation.defs#modEventAcknowledge", "lex:tools.ozone.moderation.defs#modEventEscalate", "lex:tools.ozone.moderation.defs#modEventComment", "lex:tools.ozone.moderation.defs#modEventLabel", "lex:tools.ozone.moderation.defs#modEventReport", "lex:tools.ozone.moderation.defs#modEventMute", "lex:tools.ozone.moderation.defs#modEventUnmute", "lex:tools.ozone.moderation.defs#modEventMuteReporter", "lex:tools.ozone.moderation.defs#modEventUnmuteReporter", "lex:tools.ozone.moderation.defs#modEventReverseTakedown", "lex:tools.ozone.moderation.defs#modEventResolveAppeal", "lex:tools.ozone.moderation.defs#modEventEmail", "lex:tools.ozone.moderation.defs#modEventDivert", "lex:tools.ozone.moderation.defs#modEventTag", "lex:tools.ozone.moderation.defs#accountEvent", "lex:tools.ozone.moderation.defs#identityEvent", "lex:tools.ozone.moderation.defs#recordEvent", "lex:tools.ozone.moderation.defs#modEventPriorityScore"] }, subject: { type: "union", refs: ["lex:com.atproto.admin.defs#repoRef", "lex:com.atproto.repo.strongRef"] }, subjectBlobCids: { type: "array", items: { type: "string", format: "cid" } }, createdBy: { type: "string", format: "did" } } } }, output: { encoding: "application/json", schema: { type: "ref", ref: "lex:tools.ozone.moderation.defs#modEventView" } }, errors: [{ name: "SubjectHasAction" }] } } }, ToolsOzoneModerationGetEvent: { lexicon: 1, id: "tools.ozone.moderation.getEvent", defs: { main: { type: "query", description: "Get details about a moderation event.", parameters: { type: "params", required: ["id"], properties: { id: { type: "integer" } } }, output: { encoding: "application/json", schema: { type: "ref", ref: "lex:tools.ozone.moderation.defs#modEventViewDetail" } } } } }, ToolsOzoneModerationGetRecord: { lexicon: 1, id: "tools.ozone.moderation.getRecord", defs: { main: { type: "query", description: "Get details about a record.", parameters: { type: "params", required: ["uri"], properties: { uri: { type: "string", format: "at-uri" }, cid: { type: "string", format: "cid" } } }, output: { encoding: "application/json", schema: { type: "ref", ref: "lex:tools.ozone.moderation.defs#recordViewDetail" } }, errors: [{ name: "RecordNotFound" }] } } }, ToolsOzoneModerationGetRecords: { lexicon: 1, id: "tools.ozone.moderation.getRecords", defs: { main: { type: "query", description: "Get details about some records.", parameters: { type: "params", required: ["uris"], properties: { uris: { type: "array", maxLength: 100, items: { type: "string", format: "at-uri" } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["records"], properties: { records: { type: "array", items: { type: "union", refs: ["lex:tools.ozone.moderation.defs#recordViewDetail", "lex:tools.ozone.moderation.defs#recordViewNotFound"] } } } } } } } }, ToolsOzoneModerationGetRepo: { lexicon: 1, id: "tools.ozone.moderation.getRepo", defs: { main: { type: "query", description: "Get details about a repository.", parameters: { type: "params", required: ["did"], properties: { did: { type: "string", format: "did" } } }, output: { encoding: "application/json", schema: { type: "ref", ref: "lex:tools.ozone.moderation.defs#repoViewDetail" } }, errors: [{ name: "RepoNotFound" }] } } }, ToolsOzoneModerationGetReporterStats: { lexicon: 1, id: "tools.ozone.moderation.getReporterStats", defs: { main: { type: "query", description: "Get reporter stats for a list of users.", parameters: { type: "params", required: ["dids"], properties: { dids: { type: "array", maxLength: 100, items: { type: "string", format: "did" } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["stats"], properties: { stats: { type: "array", items: { type: "ref", ref: "lex:tools.ozone.moderation.defs#reporterStats" } } } } } } } }, ToolsOzoneModerationGetRepos: { lexicon: 1, id: "tools.ozone.moderation.getRepos", defs: { main: { type: "query", description: "Get details about some repositories.", parameters: { type: "params", required: ["dids"], properties: { dids: { type: "array", maxLength: 100, items: { type: "string", format: "did" } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["repos"], properties: { repos: { type: "array", items: { type: "union", refs: ["lex:tools.ozone.moderation.defs#repoViewDetail", "lex:tools.ozone.moderation.defs#repoViewNotFound"] } } } } } } } }, ToolsOzoneModerationQueryEvents: { lexicon: 1, id: "tools.ozone.moderation.queryEvents", defs: { main: { type: "query", description: "List moderation events related to a subject.", parameters: { type: "params", properties: { types: { type: "array", items: { type: "string" }, description: "The types of events (fully qualified string in the format of tools.ozone.moderation.defs#modEvent<name>) to filter by. If not specified, all events are returned." }, createdBy: { type: "string", format: "did" }, sortDirection: { type: "string", default: "desc", enum: ["asc", "desc"], description: "Sort direction for the events. Defaults to descending order of created at timestamp." }, createdAfter: { type: "string", format: "datetime", description: "Retrieve events created after a given timestamp" }, createdBefore: { type: "string", format: "datetime", description: "Retrieve events created before a given timestamp" }, subject: { type: "string", format: "uri" }, collections: { type: "array", maxLength: 20, description: "If specified, only events where the subject belongs to the given collections will be returned. When subjectType is set to 'account', this will be ignored.", items: { type: "string", format: "nsid" } }, subjectType: { type: "string", description: "If specified, only events where the subject is of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.", knownValues: ["account", "record"] }, includeAllUserRecords: { type: "boolean", default: false, description: "If true, events on all record types (posts, lists, profile etc.) or records from given 'collections' param, owned by the did are returned." }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, hasComment: { type: "boolean", description: "If true, only events with comments are returned" }, comment: { type: "string", description: "If specified, only events with comments containing the keyword are returned. Apply || separator to use multiple keywords and match using OR condition." }, addedLabels: { type: "array", items: { type: "string" }, description: "If specified, only events where all of these labels were added are returned" }, removedLabels: { type: "array", items: { type: "string" }, description: "If specified, only events where all of these labels were removed are returned" }, addedTags: { type: "array", items: { type: "string" }, description: "If specified, only events where all of these tags were added are returned" }, removedTags: { type: "array", items: { type: "string" }, description: "If specified, only events where all of these tags were removed are returned" }, reportTypes: { type: "array", items: { type: "string" } }, policies: { type: "array", items: { type: "string", description: "If specified, only events where the action policies match any of the given policies are returned" } }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["events"], properties: { cursor: { type: "string" }, events: { type: "array", items: { type: "ref", ref: "lex:tools.ozone.moderation.defs#modEventView" } } } } } } } }, ToolsOzoneModerationQueryStatuses: { lexicon: 1, id: "tools.ozone.moderation.queryStatuses", defs: { main: { type: "query", description: "View moderation statuses of subjects (record or repo).", parameters: { type: "params", properties: { queueCount: { type: "integer", description: "Number of queues being used by moderators. Subjects will be split among all queues." }, queueIndex: { type: "integer", description: "Index of the queue to fetch subjects from. Works only when queueCount value is specified." }, queueSeed: { type: "string", description: "A seeder to shuffle/balance the queue items." }, includeAllUserRecords: { type: "boolean", description: "All subjects, or subjects from given 'collections' param, belonging to the account specified in the 'subject' param will be returned." }, subject: { type: "string", format: "uri", description: "The subject to get the status for." }, comment: { type: "string", description: "Search subjects by keyword from comments" }, reportedAfter: { type: "string", format: "datetime", description: "Search subjects reported after a given timestamp" }, reportedBefore: { type: "string", format: "datetime", description: "Search subjects reported before a given timestamp" }, reviewedAfter: { type: "string", format: "datetime", description: "Search subjects reviewed after a given timestamp" }, hostingDeletedAfter: { type: "string", format: "datetime", description: "Search subjects where the associated record/account was deleted after a given timestamp" }, hostingDeletedBefore: { type: "string", format: "datetime", description: "Search subjects where the associated record/account was deleted before a given timestamp" }, hostingUpdatedAfter: { type: "string", format: "datetime", description: "Search subjects where the associated record/account was updated after a given timestamp" }, hostingUpdatedBefore: { type: "string", format: "datetime", description: "Search subjects where the associated record/account was updated before a given timestamp" }, hostingStatuses: { type: "array", items: { type: "string" }, description: "Search subjects by the status of the associated record/account" }, reviewedBefore: { type: "string", format: "datetime", description: "Search subjects reviewed before a given timestamp" }, includeMuted: { type: "boolean", description: "By default, we don't include muted subjects in the results. Set this to true to include them." }, onlyMuted: { type: "boolean", description: "When set to true, only muted subjects and reporters will be returned." }, reviewState: { type: "string", description: "Specify when fetching subjects in a certain state" }, ignoreSubjects: { type: "array", items: { type: "string", format: "uri" } }, lastReviewedBy: { type: "string", format: "did", description: "Get all subject statuses that were reviewed by a specific moderator" }, sortField: { type: "string", default: "lastReportedAt", enum: ["lastReviewedAt", "lastReportedAt", "reportedRecordsCount", "takendownRecordsCount", "priorityScore"] }, sortDirection: { type: "string", default: "desc", enum: ["asc", "desc"] }, takendown: { type: "boolean", description: "Get subjects that were taken down" }, appealed: { type: "boolean", description: "Get subjects in unresolved appealed status" }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, tags: { type: "array", maxLength: 25, items: { type: "string", description: "Items in this array are applied with OR filters. To apply AND filter, put all tags in the same string and separate using && characters" } }, excludeTags: { type: "array", items: { type: "string" } }, cursor: { type: "string" }, collections: { type: "array", maxLength: 20, description: "If specified, subjects belonging to the given collections will be returned. When subjectType is set to 'account', this will be ignored.", items: { type: "string", format: "nsid" } }, subjectType: { type: "string", description: "If specified, subjects of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.", knownValues: ["account", "record"] }, minAccountSuspendCount: { type: "integer", description: "If specified, only subjects that belong to an account that has at least this many suspensions will be returned." }, minReportedRecordsCount: { type: "integer", description: "If specified, only subjects that belong to an account that has at least this many reported records will be returned." }, minTakendownRecordsCount: { type: "integer", description: "If specified, only subjects that belong to an account that has at least this many taken down records will be returned." }, minPriorityScore: { minimum: 0, maximum: 100, type: "integer", description: "If specified, only subjects that have priority score value above the given value will be returned." } } }, output: { encoding: "application/json", schema: { type: "object", required: ["subjectStatuses"], properties: { cursor: { type: "string" }, subjectStatuses: { type: "array", items: { type: "ref", ref: "lex:tools.ozone.moderation.defs#subjectStatusView" } } } } } } } }, ToolsOzoneModerationSearchRepos: { lexicon: 1, id: "tools.ozone.moderation.searchRepos", defs: { main: { type: "query", description: "Find repositories based on a search term.", parameters: { type: "params", properties: { term: { type: "string", description: "DEPRECATED: use 'q' instead" }, q: { type: "string" }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["repos"], properties: { cursor: { type: "string" }, repos: { type: "array", items: { type: "ref", ref: "lex:tools.ozone.moderation.defs#repoView" } } } } } } } }, ToolsOzoneServerGetConfig: { lexicon: 1, id: "tools.ozone.server.getConfig", defs: { main: { type: "query", description: "Get details about ozone's server configuration.", output: { encoding: "application/json", schema: { type: "object", properties: { appview: { type: "ref", ref: "lex:tools.ozone.server.getConfig#serviceConfig" }, pds: { type: "ref", ref: "lex:tools.ozone.server.getConfig#serviceConfig" }, blobDivert: { type: "ref", ref: "lex:tools.ozone.server.getConfig#serviceConfig" }, chat: { type: "ref", ref: "lex:tools.ozone.server.getConfig#serviceConfig" }, viewer: { type: "ref", ref: "lex:tools.ozone.server.getConfig#viewerConfig" } } } } }, serviceConfig: { type: "object", properties: { url: { type: "string", format: "uri" } } }, viewerConfig: { type: "object", properties: { role: { type: "string", knownValues: ["tools.ozone.team.defs#roleAdmin", "tools.ozone.team.defs#roleModerator", "tools.ozone.team.defs#roleTriage"] } } } } }, ToolsOzoneSetAddValues: { lexicon: 1, id: "tools.ozone.set.addValues", defs: { main: { type: "procedure", description: "Add values to a specific set. Attempting to add values to a set that does not exist will result in an error.", input: { encoding: "application/json", schema: { type: "object", required: ["name", "values"], properties: { name: { type: "string", description: "Name of the set to add values to" }, values: { type: "array", minLength: 1, maxLength: 1e3, items: { type: "string" }, description: "Array of string values to add to the set" } } } } } } }, ToolsOzoneSetDefs: { lexicon: 1, id: "tools.ozone.set.defs", defs: { set: { type: "object", required: ["name"], properties: { name: { type: "string", minLength: 3, maxLength: 128 }, description: { type: "string", maxGraphemes: 1024, maxLength: 10240 } } }, setView: { type: "object", required: ["name", "setSize", "createdAt", "updatedAt"], properties: { name: { type: "string", minLength: 3, maxLength: 128 }, description: { type: "string", maxGraphemes: 1024, maxLength: 10240 }, setSize: { type: "integer" }, createdAt: { type: "string", format: "datetime" }, updatedAt: { type: "string", format: "datetime" } } } } }, ToolsOzoneSetDeleteSet: { lexicon: 1, id: "tools.ozone.set.deleteSet", defs: { main: { type: "procedure", description: "Delete an entire set. Attempting to delete a set that does not exist will result in an error.", input: { encoding: "application/json", schema: { type: "object", required: ["name"], properties: { name: { type: "string", description: "Name of the set to delete" } } } }, output: { encoding: "application/json", schema: { type: "object", properties: {} } }, errors: [{ name: "SetNotFound", description: "set with the given name does not exist" }] } } }, ToolsOzoneSetDeleteValues: { lexicon: 1, id: "tools.ozone.set.deleteValues", defs: { main: { type: "procedure", description: "Delete values from a specific set. Attempting to delete values that are not in the set will not result in an error", input: { encoding: "application/json", schema: { type: "object", required: ["name", "values"], properties: { name: { type: "string", description: "Name of the set to delete values from" }, values: { type: "array", minLength: 1, items: { type: "string" }, description: "Array of string values to delete from the set" } } } }, errors: [{ name: "SetNotFound", description: "set with the given name does not exist" }] } } }, ToolsOzoneSetGetValues: { lexicon: 1, id: "tools.ozone.set.getValues", defs: { main: { type: "query", description: "Get a specific set and its values", parameters: { type: "params", required: ["name"], properties: { name: { type: "string" }, limit: { type: "integer", minimum: 1, maximum: 1e3, default: 100 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["set", "values"], properties: { set: { type: "ref", ref: "lex:tools.ozone.set.defs#setView" }, values: { type: "array", items: { type: "string" } }, cursor: { type: "string" } } } }, errors: [{ name: "SetNotFound", description: "set with the given name does not exist" }] } } }, ToolsOzoneSetQuerySets: { lexicon: 1, id: "tools.ozone.set.querySets", defs: { main: { type: "query", description: "Query available sets", parameters: { type: "params", properties: { limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" }, namePrefix: { type: "string" }, sortBy: { type: "string", enum: ["name", "createdAt", "updatedAt"], default: "name" }, sortDirection: { type: "string", default: "asc", enum: ["asc", "desc"], description: "Defaults to ascending order of name field." } } }, output: { encoding: "application/json", schema: { type: "object", required: ["sets"], properties: { sets: { type: "array", items: { type: "ref", ref: "lex:tools.ozone.set.defs#setView" } }, cursor: { type: "string" } } } } } } }, ToolsOzoneSetUpsertSet: { lexicon: 1, id: "tools.ozone.set.upsertSet", defs: { main: { type: "procedure", description: "Create or update set metadata", input: { encoding: "application/json", schema: { type: "ref", ref: "lex:tools.ozone.set.defs#set" } }, output: { encoding: "application/json", schema: { type: "ref", ref: "lex:tools.ozone.set.defs#setView" } } } } }, ToolsOzoneSettingDefs: { lexicon: 1, id: "tools.ozone.setting.defs", defs: { option: { type: "object", required: ["key", "value", "did", "scope", "createdBy", "lastUpdatedBy"], properties: { key: { type: "string", format: "nsid" }, did: { type: "string", format: "did" }, value: { type: "unknown" }, description: { type: "string", maxGraphemes: 1024, maxLength: 10240 }, createdAt: { type: "string", format: "datetime" }, updatedAt: { type: "string", format: "datetime" }, managerRole: { type: "string", knownValues: ["tools.ozone.team.defs#roleModerator", "tools.ozone.team.defs#roleTriage", "tools.ozone.team.defs#roleAdmin"] }, scope: { type: "string", knownValues: ["instance", "personal"] }, createdBy: { type: "string", format: "did" }, lastUpdatedBy: { type: "string", format: "did" } } } } }, ToolsOzoneSettingListOptions: { lexicon: 1, id: "tools.ozone.setting.listOptions", defs: { main: { type: "query", description: "List settings with optional filtering", parameters: { type: "params", properties: { limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" }, scope: { type: "string", knownValues: ["instance", "personal"], default: "instance" }, prefix: { type: "string", description: "Filter keys by prefix" }, keys: { type: "array", maxLength: 100, items: { type: "string", format: "nsid" }, description: "Filter for only the specified keys. Ignored if prefix is provided" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["options"], properties: { cursor: { type: "string" }, options: { type: "array", items: { type: "ref", ref: "lex:tools.ozone.setting.defs#option" } } } } } } } }, ToolsOzoneSettingRemoveOptions: { lexicon: 1, id: "tools.ozone.setting.removeOptions", defs: { main: { type: "procedure", description: "Delete settings by key", input: { encoding: "application/json", schema: { type: "object", required: ["keys", "scope"], properties: { keys: { type: "array", minLength: 1, maxLength: 200, items: { type: "string", format: "nsid" } }, scope: { type: "string", knownValues: ["instance", "personal"] } } } }, output: { encoding: "application/json", schema: { type: "object", properties: {} } } } } }, ToolsOzoneSettingUpsertOption: { lexicon: 1, id: "tools.ozone.setting.upsertOption", defs: { main: { type: "procedure", description: "Create or update setting option", input: { encoding: "application/json", schema: { type: "object", required: ["key", "scope", "value"], properties: { key: { type: "string", format: "nsid" }, scope: { type: "string", knownValues: ["instance", "personal"] }, value: { type: "unknown" }, description: { type: "string", maxLength: 2e3 }, managerRole: { type: "string", knownValues: ["tools.ozone.team.defs#roleModerator", "tools.ozone.team.defs#roleTriage", "tools.ozone.team.defs#roleAdmin"] } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["option"], properties: { option: { type: "ref", ref: "lex:tools.ozone.setting.defs#option" } } } } } } }, ToolsOzoneSignatureDefs: { lexicon: 1, id: "tools.ozone.signature.defs", defs: { sigDetail: { type: "object", required: ["property", "value"], properties: { property: { type: "string" }, value: { type: "string" } } } } }, ToolsOzoneSignatureFindCorrelation: { lexicon: 1, id: "tools.ozone.signature.findCorrelation", defs: { main: { type: "query", description: "Find all correlated threat signatures between 2 or more accounts.", parameters: { type: "params", required: ["dids"], properties: { dids: { type: "array", items: { type: "string", format: "did" } } } }, output: { encoding: "application/json", schema: { type: "object", required: ["details"], properties: { details: { type: "array", items: { type: "ref", ref: "lex:tools.ozone.signature.defs#sigDetail" } } } } } } } }, ToolsOzoneSignatureFindRelatedAccounts: { lexicon: 1, id: "tools.ozone.signature.findRelatedAccounts", defs: { main: { type: "query", description: "Get accounts that share some matching threat signatures with the root account.", parameters: { type: "params", required: ["did"], properties: { did: { type: "string", format: "did" }, cursor: { type: "string" }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 } } }, output: { encoding: "application/json", schema: { type: "object", required: ["accounts"], properties: { cursor: { type: "string" }, accounts: { type: "array", items: { type: "ref", ref: "lex:tools.ozone.signature.findRelatedAccounts#relatedAccount" } } } } } }, relatedAccount: { type: "object", required: ["account"], properties: { account: { type: "ref", ref: "lex:com.atproto.admin.defs#accountView" }, similarities: { type: "array", items: { type: "ref", ref: "lex:tools.ozone.signature.defs#sigDetail" } } } } } }, ToolsOzoneSignatureSearchAccounts: { lexicon: 1, id: "tools.ozone.signature.searchAccounts", defs: { main: { type: "query", description: "Search for accounts that match one or more threat signature values.", parameters: { type: "params", required: ["values"], properties: { values: { type: "array", items: { type: "string" } }, cursor: { type: "string" }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 } } }, output: { encoding: "application/json", schema: { type: "object", required: ["accounts"], properties: { cursor: { type: "string" }, accounts: { type: "array", items: { type: "ref", ref: "lex:com.atproto.admin.defs#accountView" } } } } } } } }, ToolsOzoneTeamAddMember: { lexicon: 1, id: "tools.ozone.team.addMember", defs: { main: { type: "procedure", description: "Add a member to the ozone team. Requires admin role.", input: { encoding: "application/json", schema: { type: "object", required: ["did", "role"], properties: { did: { type: "string", format: "did" }, role: { type: "string", knownValues: ["tools.ozone.team.defs#roleAdmin", "tools.ozone.team.defs#roleModerator", "tools.ozone.team.defs#roleTriage"] } } } }, output: { encoding: "application/json", schema: { type: "ref", ref: "lex:tools.ozone.team.defs#member" } }, errors: [{ name: "MemberAlreadyExists", description: "Member already exists in the team." }] } } }, ToolsOzoneTeamDefs: { lexicon: 1, id: "tools.ozone.team.defs", defs: { member: { type: "object", required: ["did", "role"], properties: { did: { type: "string", format: "did" }, disabled: { type: "boolean" }, profile: { type: "ref", ref: "lex:app.bsky.actor.defs#profileViewDetailed" }, createdAt: { type: "string", format: "datetime" }, updatedAt: { type: "string", format: "datetime" }, lastUpdatedBy: { type: "string" }, role: { type: "string", knownValues: ["lex:tools.ozone.team.defs#roleAdmin", "lex:tools.ozone.team.defs#roleModerator", "lex:tools.ozone.team.defs#roleTriage"] } } }, roleAdmin: { type: "token", description: "Admin role. Highest level of access, can perform all actions." }, roleModerator: { type: "token", description: "Moderator role. Can perform most actions." }, roleTriage: { type: "token", description: "Triage role. Mostly intended for monitoring and escalating issues." } } }, ToolsOzoneTeamDeleteMember: { lexicon: 1, id: "tools.ozone.team.deleteMember", defs: { main: { type: "procedure", description: "Delete a member from ozone team. Requires admin role.", input: { encoding: "application/json", schema: { type: "object", required: ["did"], properties: { did: { type: "string", format: "did" } } } }, errors: [{ name: "MemberNotFound", description: "The member being deleted does not exist" }, { name: "CannotDeleteSelf", description: "You can not delete yourself from the team" }] } } }, ToolsOzoneTeamListMembers: { lexicon: 1, id: "tools.ozone.team.listMembers", defs: { main: { type: "query", description: "List all members with access to the ozone service.", parameters: { type: "params", properties: { q: { type: "string" }, disabled: { type: "boolean" }, roles: { type: "array", items: { type: "string" } }, limit: { type: "integer", minimum: 1, maximum: 100, default: 50 }, cursor: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", required: ["members"], properties: { cursor: { type: "string" }, members: { type: "array", items: { type: "ref", ref: "lex:tools.ozone.team.defs#member" } } } } } } } }, ToolsOzoneTeamUpdateMember: { lexicon: 1, id: "tools.ozone.team.updateMember", defs: { main: { type: "procedure", description: "Update a member in the ozone service. Requires admin role.", input: { encoding: "application/json", schema: { type: "object", required: ["did"], properties: { did: { type: "string", format: "did" }, disabled: { type: "boolean" }, role: { type: "string", knownValues: ["tools.ozone.team.defs#roleAdmin", "tools.ozone.team.defs#roleModerator", "tools.ozone.team.defs#roleTriage"] } } } }, output: { encoding: "application/json", schema: { type: "ref", ref: "lex:tools.ozone.team.defs#member" } }, errors: [{ name: "MemberNotFound", description: "The member being updated does not exist in the team" }] } } } }, r.schemas = Object.values(r.schemaDict), r.lexicons = new t.Lexicons(r.schemas);
    function n(o, s, e, u) {
      return (u ? i.is$typed : i.maybe$typed)(o, s, e) ? r.lexicons.validate(`${s}#${e}`, o) : { success: false, error: new t.ValidationError(`Must be an object with "${e === "main" ? s : `${s}#${e}`}" $type property`) };
    }
    r.ids = { ComAtprotoAdminDefs: "com.atproto.admin.defs", ComAtprotoAdminDeleteAccount: "com.atproto.admin.deleteAccount", ComAtprotoAdminDisableAccountInvites: "com.atproto.admin.disableAccountInvites", ComAtprotoAdminDisableInviteCodes: "com.atproto.admin.disableInviteCodes", ComAtprotoAdminEnableAccountInvites: "com.atproto.admin.enableAccountInvites", ComAtprotoAdminGetAccountInfo: "com.atproto.admin.getAccountInfo", ComAtprotoAdminGetAccountInfos: "com.atproto.admin.getAccountInfos", ComAtprotoAdminGetInviteCodes: "com.atproto.admin.getInviteCodes", ComAtprotoAdminGetSubjectStatus: "com.atproto.admin.getSubjectStatus", ComAtprotoAdminSearchAccounts: "com.atproto.admin.searchAccounts", ComAtprotoAdminSendEmail: "com.atproto.admin.sendEmail", ComAtprotoAdminUpdateAccountEmail: "com.atproto.admin.updateAccountEmail", ComAtprotoAdminUpdateAccountHandle: "com.atproto.admin.updateAccountHandle", ComAtprotoAdminUpdateAccountPassword: "com.atproto.admin.updateAccountPassword", ComAtprotoAdminUpdateSubjectStatus: "com.atproto.admin.updateSubjectStatus", ComAtprotoIdentityDefs: "com.atproto.identity.defs", ComAtprotoIdentityGetRecommendedDidCredentials: "com.atproto.identity.getRecommendedDidCredentials", ComAtprotoIdentityRefreshIdentity: "com.atproto.identity.refreshIdentity", ComAtprotoIdentityRequestPlcOperationSignature: "com.atproto.identity.requestPlcOperationSignature", ComAtprotoIdentityResolveDid: "com.atproto.identity.resolveDid", ComAtprotoIdentityResolveHandle: "com.atproto.identity.resolveHandle", ComAtprotoIdentityResolveIdentity: "com.atproto.identity.resolveIdentity", ComAtprotoIdentitySignPlcOperation: "com.atproto.identity.signPlcOperation", ComAtprotoIdentitySubmitPlcOperation: "com.atproto.identity.submitPlcOperation", ComAtprotoIdentityUpdateHandle: "com.atproto.identity.updateHandle", ComAtprotoLabelDefs: "com.atproto.label.defs", ComAtprotoLabelQueryLabels: "com.atproto.label.queryLabels", ComAtprotoLabelSubscribeLabels: "com.atproto.label.subscribeLabels", ComAtprotoLexiconSchema: "com.atproto.lexicon.schema", ComAtprotoModerationCreateReport: "com.atproto.moderation.createReport", ComAtprotoModerationDefs: "com.atproto.moderation.defs", ComAtprotoRepoApplyWrites: "com.atproto.repo.applyWrites", ComAtprotoRepoCreateRecord: "com.atproto.repo.createRecord", ComAtprotoRepoDefs: "com.atproto.repo.defs", ComAtprotoRepoDeleteRecord: "com.atproto.repo.deleteRecord", ComAtprotoRepoDescribeRepo: "com.atproto.repo.describeRepo", ComAtprotoRepoGetRecord: "com.atproto.repo.getRecord", ComAtprotoRepoImportRepo: "com.atproto.repo.importRepo", ComAtprotoRepoListMissingBlobs: "com.atproto.repo.listMissingBlobs", ComAtprotoRepoListRecords: "com.atproto.repo.listRecords", ComAtprotoRepoPutRecord: "com.atproto.repo.putRecord", ComAtprotoRepoStrongRef: "com.atproto.repo.strongRef", ComAtprotoRepoUploadBlob: "com.atproto.repo.uploadBlob", ComAtprotoServerActivateAccount: "com.atproto.server.activateAccount", ComAtprotoServerCheckAccountStatus: "com.atproto.server.checkAccountStatus", ComAtprotoServerConfirmEmail: "com.atproto.server.confirmEmail", ComAtprotoServerCreateAccount: "com.atproto.server.createAccount", ComAtprotoServerCreateAppPassword: "com.atproto.server.createAppPassword", ComAtprotoServerCreateInviteCode: "com.atproto.server.createInviteCode", ComAtprotoServerCreateInviteCodes: "com.atproto.server.createInviteCodes", ComAtprotoServerCreateSession: "com.atproto.server.createSession", ComAtprotoServerDeactivateAccount: "com.atproto.server.deactivateAccount", ComAtprotoServerDefs: "com.atproto.server.defs", ComAtprotoServerDeleteAccount: "com.atproto.server.deleteAccount", ComAtprotoServerDeleteSession: "com.atproto.server.deleteSession", ComAtprotoServerDescribeServer: "com.atproto.server.describeServer", ComAtprotoServerGetAccountInviteCodes: "com.atproto.server.getAccountInviteCodes", ComAtprotoServerGetServiceAuth: "com.atproto.server.getServiceAuth", ComAtprotoServerGetSession: "com.atproto.server.getSession", ComAtprotoServerListAppPasswords: "com.atproto.server.listAppPasswords", ComAtprotoServerRefreshSession: "com.atproto.server.refreshSession", ComAtprotoServerRequestAccountDelete: "com.atproto.server.requestAccountDelete", ComAtprotoServerRequestEmailConfirmation: "com.atproto.server.requestEmailConfirmation", ComAtprotoServerRequestEmailUpdate: "com.atproto.server.requestEmailUpdate", ComAtprotoServerRequestPasswordReset: "com.atproto.server.requestPasswordReset", ComAtprotoServerReserveSigningKey: "com.atproto.server.reserveSigningKey", ComAtprotoServerResetPassword: "com.atproto.server.resetPassword", ComAtprotoServerRevokeAppPassword: "com.atproto.server.revokeAppPassword", ComAtprotoServerUpdateEmail: "com.atproto.server.updateEmail", ComAtprotoSyncGetBlob: "com.atproto.sync.getBlob", ComAtprotoSyncGetBlocks: "com.atproto.sync.getBlocks", ComAtprotoSyncGetCheckout: "com.atproto.sync.getCheckout", ComAtprotoSyncGetHead: "com.atproto.sync.getHead", ComAtprotoSyncGetLatestCommit: "com.atproto.sync.getLatestCommit", ComAtprotoSyncGetRecord: "com.atproto.sync.getRecord", ComAtprotoSyncGetRepo: "com.atproto.sync.getRepo", ComAtprotoSyncGetRepoStatus: "com.atproto.sync.getRepoStatus", ComAtprotoSyncListBlobs: "com.atproto.sync.listBlobs", ComAtprotoSyncListRepos: "com.atproto.sync.listRepos", ComAtprotoSyncListReposByCollection: "com.atproto.sync.listReposByCollection", ComAtprotoSyncNotifyOfUpdate: "com.atproto.sync.notifyOfUpdate", ComAtprotoSyncRequestCrawl: "com.atproto.sync.requestCrawl", ComAtprotoSyncSubscribeRepos: "com.atproto.sync.subscribeRepos", ComAtprotoTempAddReservedHandle: "com.atproto.temp.addReservedHandle", ComAtprotoTempCheckSignupQueue: "com.atproto.temp.checkSignupQueue", ComAtprotoTempFetchLabels: "com.atproto.temp.fetchLabels", ComAtprotoTempRequestPhoneVerification: "com.atproto.temp.requestPhoneVerification", AppBskyActorDefs: "app.bsky.actor.defs", AppBskyActorGetPreferences: "app.bsky.actor.getPreferences", AppBskyActorGetProfile: "app.bsky.actor.getProfile", AppBskyActorGetProfiles: "app.bsky.actor.getProfiles", AppBskyActorGetSuggestions: "app.bsky.actor.getSuggestions", AppBskyActorProfile: "app.bsky.actor.profile", AppBskyActorPutPreferences: "app.bsky.actor.putPreferences", AppBskyActorSearchActors: "app.bsky.actor.searchActors", AppBskyActorSearchActorsTypeahead: "app.bsky.actor.searchActorsTypeahead", AppBskyEmbedDefs: "app.bsky.embed.defs", AppBskyEmbedExternal: "app.bsky.embed.external", AppBskyEmbedImages: "app.bsky.embed.images", AppBskyEmbedRecord: "app.bsky.embed.record", AppBskyEmbedRecordWithMedia: "app.bsky.embed.recordWithMedia", AppBskyEmbedVideo: "app.bsky.embed.video", AppBskyFeedDefs: "app.bsky.feed.defs", AppBskyFeedDescribeFeedGenerator: "app.bsky.feed.describeFeedGenerator", AppBskyFeedGenerator: "app.bsky.feed.generator", AppBskyFeedGetActorFeeds: "app.bsky.feed.getActorFeeds", AppBskyFeedGetActorLikes: "app.bsky.feed.getActorLikes", AppBskyFeedGetAuthorFeed: "app.bsky.feed.getAuthorFeed", AppBskyFeedGetFeed: "app.bsky.feed.getFeed", AppBskyFeedGetFeedGenerator: "app.bsky.feed.getFeedGenerator", AppBskyFeedGetFeedGenerators: "app.bsky.feed.getFeedGenerators", AppBskyFeedGetFeedSkeleton: "app.bsky.feed.getFeedSkeleton", AppBskyFeedGetLikes: "app.bsky.feed.getLikes", AppBskyFeedGetListFeed: "app.bsky.feed.getListFeed", AppBskyFeedGetPostThread: "app.bsky.feed.getPostThread", AppBskyFeedGetPosts: "app.bsky.feed.getPosts", AppBskyFeedGetQuotes: "app.bsky.feed.getQuotes", AppBskyFeedGetRepostedBy: "app.bsky.feed.getRepostedBy", AppBskyFeedGetSuggestedFeeds: "app.bsky.feed.getSuggestedFeeds", AppBskyFeedGetTimeline: "app.bsky.feed.getTimeline", AppBskyFeedLike: "app.bsky.feed.like", AppBskyFeedPost: "app.bsky.feed.post", AppBskyFeedPostgate: "app.bsky.feed.postgate", AppBskyFeedRepost: "app.bsky.feed.repost", AppBskyFeedSearchPosts: "app.bsky.feed.searchPosts", AppBskyFeedSendInteractions: "app.bsky.feed.sendInteractions", AppBskyFeedThreadgate: "app.bsky.feed.threadgate", AppBskyGraphBlock: "app.bsky.graph.block", AppBskyGraphDefs: "app.bsky.graph.defs", AppBskyGraphFollow: "app.bsky.graph.follow", AppBskyGraphGetActorStarterPacks: "app.bsky.graph.getActorStarterPacks", AppBskyGraphGetBlocks: "app.bsky.graph.getBlocks", AppBskyGraphGetFollowers: "app.bsky.graph.getFollowers", AppBskyGraphGetFollows: "app.bsky.graph.getFollows", AppBskyGraphGetKnownFollowers: "app.bsky.graph.getKnownFollowers", AppBskyGraphGetList: "app.bsky.graph.getList", AppBskyGraphGetListBlocks: "app.bsky.graph.getListBlocks", AppBskyGraphGetListMutes: "app.bsky.graph.getListMutes", AppBskyGraphGetLists: "app.bsky.graph.getLists", AppBskyGraphGetMutes: "app.bsky.graph.getMutes", AppBskyGraphGetRelationships: "app.bsky.graph.getRelationships", AppBskyGraphGetStarterPack: "app.bsky.graph.getStarterPack", AppBskyGraphGetStarterPacks: "app.bsky.graph.getStarterPacks", AppBskyGraphGetSuggestedFollowsByActor: "app.bsky.graph.getSuggestedFollowsByActor", AppBskyGraphList: "app.bsky.graph.list", AppBskyGraphListblock: "app.bsky.graph.listblock", AppBskyGraphListitem: "app.bsky.graph.listitem", AppBskyGraphMuteActor: "app.bsky.graph.muteActor", AppBskyGraphMuteActorList: "app.bsky.graph.muteActorList", AppBskyGraphMuteThread: "app.bsky.graph.muteThread", AppBskyGraphSearchStarterPacks: "app.bsky.graph.searchStarterPacks", AppBskyGraphStarterpack: "app.bsky.graph.starterpack", AppBskyGraphUnmuteActor: "app.bsky.graph.unmuteActor", AppBskyGraphUnmuteActorList: "app.bsky.graph.unmuteActorList", AppBskyGraphUnmuteThread: "app.bsky.graph.unmuteThread", AppBskyLabelerDefs: "app.bsky.labeler.defs", AppBskyLabelerGetServices: "app.bsky.labeler.getServices", AppBskyLabelerService: "app.bsky.labeler.service", AppBskyNotificationGetUnreadCount: "app.bsky.notification.getUnreadCount", AppBskyNotificationListNotifications: "app.bsky.notification.listNotifications", AppBskyNotificationPutPreferences: "app.bsky.notification.putPreferences", AppBskyNotificationRegisterPush: "app.bsky.notification.registerPush", AppBskyNotificationUpdateSeen: "app.bsky.notification.updateSeen", AppBskyRichtextFacet: "app.bsky.richtext.facet", AppBskyUnspeccedDefs: "app.bsky.unspecced.defs", AppBskyUnspeccedGetConfig: "app.bsky.unspecced.getConfig", AppBskyUnspeccedGetPopularFeedGenerators: "app.bsky.unspecced.getPopularFeedGenerators", AppBskyUnspeccedGetSuggestionsSkeleton: "app.bsky.unspecced.getSuggestionsSkeleton", AppBskyUnspeccedGetTaggedSuggestions: "app.bsky.unspecced.getTaggedSuggestions", AppBskyUnspeccedGetTrendingTopics: "app.bsky.unspecced.getTrendingTopics", AppBskyUnspeccedSearchActorsSkeleton: "app.bsky.unspecced.searchActorsSkeleton", AppBskyUnspeccedSearchPostsSkeleton: "app.bsky.unspecced.searchPostsSkeleton", AppBskyUnspeccedSearchStarterPacksSkeleton: "app.bsky.unspecced.searchStarterPacksSkeleton", AppBskyVideoDefs: "app.bsky.video.defs", AppBskyVideoGetJobStatus: "app.bsky.video.getJobStatus", AppBskyVideoGetUploadLimits: "app.bsky.video.getUploadLimits", AppBskyVideoUploadVideo: "app.bsky.video.uploadVideo", ChatBskyActorDeclaration: "chat.bsky.actor.declaration", ChatBskyActorDefs: "chat.bsky.actor.defs", ChatBskyActorDeleteAccount: "chat.bsky.actor.deleteAccount", ChatBskyActorExportAccountData: "chat.bsky.actor.exportAccountData", ChatBskyConvoAcceptConvo: "chat.bsky.convo.acceptConvo", ChatBskyConvoDefs: "chat.bsky.convo.defs", ChatBskyConvoDeleteMessageForSelf: "chat.bsky.convo.deleteMessageForSelf", ChatBskyConvoGetConvo: "chat.bsky.convo.getConvo", ChatBskyConvoGetConvoAvailability: "chat.bsky.convo.getConvoAvailability", ChatBskyConvoGetConvoForMembers: "chat.bsky.convo.getConvoForMembers", ChatBskyConvoGetLog: "chat.bsky.convo.getLog", ChatBskyConvoGetMessages: "chat.bsky.convo.getMessages", ChatBskyConvoLeaveConvo: "chat.bsky.convo.leaveConvo", ChatBskyConvoListConvos: "chat.bsky.convo.listConvos", ChatBskyConvoMuteConvo: "chat.bsky.convo.muteConvo", ChatBskyConvoSendMessage: "chat.bsky.convo.sendMessage", ChatBskyConvoSendMessageBatch: "chat.bsky.convo.sendMessageBatch", ChatBskyConvoUnmuteConvo: "chat.bsky.convo.unmuteConvo", ChatBskyConvoUpdateAllRead: "chat.bsky.convo.updateAllRead", ChatBskyConvoUpdateRead: "chat.bsky.convo.updateRead", ChatBskyModerationGetActorMetadata: "chat.bsky.moderation.getActorMetadata", ChatBskyModerationGetMessageContext: "chat.bsky.moderation.getMessageContext", ChatBskyModerationUpdateActorAccess: "chat.bsky.moderation.updateActorAccess", ToolsOzoneCommunicationCreateTemplate: "tools.ozone.communication.createTemplate", ToolsOzoneCommunicationDefs: "tools.ozone.communication.defs", ToolsOzoneCommunicationDeleteTemplate: "tools.ozone.communication.deleteTemplate", ToolsOzoneCommunicationListTemplates: "tools.ozone.communication.listTemplates", ToolsOzoneCommunicationUpdateTemplate: "tools.ozone.communication.updateTemplate", ToolsOzoneModerationDefs: "tools.ozone.moderation.defs", ToolsOzoneModerationEmitEvent: "tools.ozone.moderation.emitEvent", ToolsOzoneModerationGetEvent: "tools.ozone.moderation.getEvent", ToolsOzoneModerationGetRecord: "tools.ozone.moderation.getRecord", ToolsOzoneModerationGetRecords: "tools.ozone.moderation.getRecords", ToolsOzoneModerationGetRepo: "tools.ozone.moderation.getRepo", ToolsOzoneModerationGetReporterStats: "tools.ozone.moderation.getReporterStats", ToolsOzoneModerationGetRepos: "tools.ozone.moderation.getRepos", ToolsOzoneModerationQueryEvents: "tools.ozone.moderation.queryEvents", ToolsOzoneModerationQueryStatuses: "tools.ozone.moderation.queryStatuses", ToolsOzoneModerationSearchRepos: "tools.ozone.moderation.searchRepos", ToolsOzoneServerGetConfig: "tools.ozone.server.getConfig", ToolsOzoneSetAddValues: "tools.ozone.set.addValues", ToolsOzoneSetDefs: "tools.ozone.set.defs", ToolsOzoneSetDeleteSet: "tools.ozone.set.deleteSet", ToolsOzoneSetDeleteValues: "tools.ozone.set.deleteValues", ToolsOzoneSetGetValues: "tools.ozone.set.getValues", ToolsOzoneSetQuerySets: "tools.ozone.set.querySets", ToolsOzoneSetUpsertSet: "tools.ozone.set.upsertSet", ToolsOzoneSettingDefs: "tools.ozone.setting.defs", ToolsOzoneSettingListOptions: "tools.ozone.setting.listOptions", ToolsOzoneSettingRemoveOptions: "tools.ozone.setting.removeOptions", ToolsOzoneSettingUpsertOption: "tools.ozone.setting.upsertOption", ToolsOzoneSignatureDefs: "tools.ozone.signature.defs", ToolsOzoneSignatureFindCorrelation: "tools.ozone.signature.findCorrelation", ToolsOzoneSignatureFindRelatedAccounts: "tools.ozone.signature.findRelatedAccounts", ToolsOzoneSignatureSearchAccounts: "tools.ozone.signature.searchAccounts", ToolsOzoneTeamAddMember: "tools.ozone.team.addMember", ToolsOzoneTeamDefs: "tools.ozone.team.defs", ToolsOzoneTeamDeleteMember: "tools.ozone.team.deleteMember", ToolsOzoneTeamListMembers: "tools.ozone.team.listMembers", ToolsOzoneTeamUpdateMember: "tools.ozone.team.updateMember" };
  }(Td)), Td;
}
var Ld = {}, ch;
function oS() {
  return ch || (ch = 1, Object.defineProperty(Ld, "__esModule", { value: true })), Ld;
}
var Bo = {}, lh;
function f_() {
  return lh || (lh = 1, Object.defineProperty(Bo, "__esModule", { value: true }), Bo.BSKY_LABELER_DID = void 0, Bo.BSKY_LABELER_DID = "did:plc:ar7c4by46qjdydhdevvrndac"), Bo;
}
var kd = {}, dh;
function h_() {
  return dh || (dh = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.nuxSchema = r.asDid = r.isDid = void 0, r.sanitizeMutedWordValue = o, r.savedFeedsToUriArrays = s, r.getSavedFeedType = e, r.validateSavedFeed = u, r.validateNux = l;
    const t = oe(), i = Lr(), n = nn();
    function o(d) {
      return d.trim().replace(/^#(?!\ufe0f)/, "").replace(/[\r\n\u00AD\u2060\u200D\u200C\u200B]+/, "");
    }
    function s(d) {
      const f = [], h = [];
      for (const p of d) p.pinned && f.push(p.value), h.push(p.value);
      return { pinned: f, saved: h };
    }
    function e(d) {
      switch (new n.AtUri(d).collection) {
        case "app.bsky.feed.generator":
          return "feed";
        case "app.bsky.graph.list":
          return "list";
        default:
          return "unknown";
      }
    }
    function u(d) {
      if (new i.TID(d.id), ["feed", "list"].includes(d.type)) {
        const f = new n.AtUri(d.value), h = f.collection === "app.bsky.feed.generator", p = f.collection === "app.bsky.graph.list";
        if (d.type === "feed" && !h) throw new Error(`Saved feed of type 'feed' must be a feed, got ${f.collection}`);
        if (d.type === "list" && !p) throw new Error(`Saved feed of type 'list' must be a list, got ${f.collection}`);
      }
    }
    const a = (d) => typeof d == "string" && d.startsWith("did:") && d.includes(":", 4) && d.length > 8 && d.length <= 2048;
    r.isDid = a;
    const c = (d) => {
      if ((0, r.isDid)(d)) return d;
      throw new TypeError(`Invalid DID: ${d}`);
    };
    r.asDid = c, r.nuxSchema = t.z.object({ id: t.z.string().max(64), completed: t.z.boolean(), data: t.z.string().max(300).optional(), expiresAt: t.z.string().datetime().optional() }).strict();
    function l(d) {
      r.nuxSchema.parse(d);
    }
  }(kd)), kd;
}
var v = {}, Ri = {}, _i = {}, bt = {}, Dd = {}, ph;
function xp() {
  return ph || (ph = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.XRPCInvalidResponseError = r.XRPCError = r.XRPCResponse = r.ResponseTypeStrings = r.ResponseTypeNames = r.ResponseType = r.errorResponseBody = void 0, r.httpResponseCodeToEnum = n, r.httpResponseCodeToName = o, r.httpResponseCodeToString = s;
    const t = oe();
    r.errorResponseBody = t.z.object({ error: t.z.string().optional(), message: t.z.string().optional() });
    var i;
    (function(c) {
      c[c.Unknown = 1] = "Unknown", c[c.InvalidResponse = 2] = "InvalidResponse", c[c.Success = 200] = "Success", c[c.InvalidRequest = 400] = "InvalidRequest", c[c.AuthRequired = 401] = "AuthRequired", c[c.Forbidden = 403] = "Forbidden", c[c.XRPCNotSupported = 404] = "XRPCNotSupported", c[c.NotAcceptable = 406] = "NotAcceptable", c[c.PayloadTooLarge = 413] = "PayloadTooLarge", c[c.UnsupportedMediaType = 415] = "UnsupportedMediaType", c[c.RateLimitExceeded = 429] = "RateLimitExceeded", c[c.InternalServerError = 500] = "InternalServerError", c[c.MethodNotImplemented = 501] = "MethodNotImplemented", c[c.UpstreamFailure = 502] = "UpstreamFailure", c[c.NotEnoughResources = 503] = "NotEnoughResources", c[c.UpstreamTimeout = 504] = "UpstreamTimeout";
    })(i || (r.ResponseType = i = {}));
    function n(c) {
      return c in i ? c : c >= 100 && c < 200 ? i.XRPCNotSupported : c >= 200 && c < 300 ? i.Success : c >= 300 && c < 400 ? i.XRPCNotSupported : c >= 400 && c < 500 ? i.InvalidRequest : i.InternalServerError;
    }
    r.ResponseTypeNames = { [i.Unknown]: "Unknown", [i.InvalidResponse]: "InvalidResponse", [i.Success]: "Success", [i.InvalidRequest]: "InvalidRequest", [i.AuthRequired]: "AuthenticationRequired", [i.Forbidden]: "Forbidden", [i.XRPCNotSupported]: "XRPCNotSupported", [i.PayloadTooLarge]: "PayloadTooLarge", [i.UnsupportedMediaType]: "UnsupportedMediaType", [i.RateLimitExceeded]: "RateLimitExceeded", [i.InternalServerError]: "InternalServerError", [i.MethodNotImplemented]: "MethodNotImplemented", [i.UpstreamFailure]: "UpstreamFailure", [i.NotEnoughResources]: "NotEnoughResources", [i.UpstreamTimeout]: "UpstreamTimeout" };
    function o(c) {
      return r.ResponseTypeNames[n(c)];
    }
    r.ResponseTypeStrings = { [i.Unknown]: "Unknown", [i.InvalidResponse]: "Invalid Response", [i.Success]: "Success", [i.InvalidRequest]: "Invalid Request", [i.AuthRequired]: "Authentication Required", [i.Forbidden]: "Forbidden", [i.XRPCNotSupported]: "XRPC Not Supported", [i.PayloadTooLarge]: "Payload Too Large", [i.UnsupportedMediaType]: "Unsupported Media Type", [i.RateLimitExceeded]: "Rate Limit Exceeded", [i.InternalServerError]: "Internal Server Error", [i.MethodNotImplemented]: "Method Not Implemented", [i.UpstreamFailure]: "Upstream Failure", [i.NotEnoughResources]: "Not Enough Resources", [i.UpstreamTimeout]: "Upstream Timeout" };
    function s(c) {
      return r.ResponseTypeStrings[n(c)];
    }
    class e {
      constructor(l, d) {
        Object.defineProperty(this, "data", { enumerable: true, configurable: true, writable: true, value: l }), Object.defineProperty(this, "headers", { enumerable: true, configurable: true, writable: true, value: d }), Object.defineProperty(this, "success", { enumerable: true, configurable: true, writable: true, value: true });
      }
    }
    r.XRPCResponse = e;
    class u extends Error {
      constructor(l, d = o(l), f, h, p) {
        super(f || d || s(l), p), Object.defineProperty(this, "error", { enumerable: true, configurable: true, writable: true, value: d }), Object.defineProperty(this, "headers", { enumerable: true, configurable: true, writable: true, value: h }), Object.defineProperty(this, "success", { enumerable: true, configurable: true, writable: true, value: false }), Object.defineProperty(this, "status", { enumerable: true, configurable: true, writable: true, value: void 0 }), this.status = n(l);
        const b = p?.cause;
        this.cause === void 0 && b !== void 0 && (this.cause = b);
      }
      static from(l, d) {
        if (l instanceof u) return l;
        const f = l instanceof Error ? l : void 0, h = l instanceof Response ? l : l?.response instanceof Response ? l.response : void 0, p = f?.statusCode ?? f?.status ?? h?.status, b = typeof p == "number" ? n(p) : d ?? i.Unknown, E = f?.message ?? String(l), g = h ? Object.fromEntries(h.headers.entries()) : void 0;
        return new u(b, void 0, E, g, { cause: l });
      }
    }
    r.XRPCError = u;
    class a extends u {
      constructor(l, d, f) {
        super(i.InvalidResponse, r.ResponseTypeStrings[i.InvalidResponse], "The server gave an invalid response and may be out of date.", void 0, { cause: d }), Object.defineProperty(this, "lexiconNsid", { enumerable: true, configurable: true, writable: true, value: l }), Object.defineProperty(this, "validationError", { enumerable: true, configurable: true, writable: true, value: d }), Object.defineProperty(this, "responseBody", { enumerable: true, configurable: true, writable: true, value: f });
      }
    }
    r.XRPCInvalidResponseError = a;
  }(Dd)), Dd;
}
var fh;
function Xl() {
  if (fh) return bt;
  fh = 1, Object.defineProperty(bt, "__esModule", { value: true }), bt.isErrorResponseBody = n, bt.getMethodSchemaHTTPMethod = o, bt.constructMethodCallUri = s, bt.constructMethodCallUrl = e, bt.encodeQueryParam = u, bt.constructMethodCallHeaders = a, bt.combineHeaders = c, bt.isBodyInit = d, bt.isIterable = f, bt.encodeMethodCallBody = h, bt.httpResponseBodyParse = b;
  const r = rn(), t = xp(), i = globalThis.ReadableStream || class {
    constructor() {
      throw new Error("ReadableStream is not supported in this environment");
    }
  };
  function n(E) {
    return t.errorResponseBody.safeParse(E).success;
  }
  function o(E) {
    return E.type === "procedure" ? "post" : "get";
  }
  function s(E, g, x, T) {
    return new URL(e(E, g, T), x).toString();
  }
  function e(E, g, x) {
    const T = `/xrpc/${encodeURIComponent(E)}`;
    if (!x) return T;
    const A = [];
    for (const [K, j] of Object.entries(x)) {
      const O = g.parameters?.properties?.[K];
      if (!O) throw new Error(`Invalid query parameter: ${K}`);
      if (j !== void 0) if (O.type === "array") {
        const z = Array.isArray(j) ? j : [j];
        for (const H of z) A.push([K, u(O.items.type, H)]);
      } else A.push([K, u(O.type, j)]);
    }
    return A.length ? `${T}?${new URLSearchParams(A).toString()}` : T;
  }
  function u(E, g) {
    if (E === "string" || E === "unknown") return String(g);
    if (E === "float") return String(Number(g));
    if (E === "integer") return String(Number(g) | 0);
    if (E === "boolean") return g ? "true" : "false";
    if (E === "datetime") return g instanceof Date ? g.toISOString() : String(g);
    throw new Error(`Unsupported query param type: ${E}`);
  }
  function a(E, g, x) {
    const T = new Headers();
    if (x?.headers) for (const A in x.headers) {
      if (T.has(A)) throw new TypeError(`Duplicate header: ${A}`);
      const K = x.headers[A];
      K != null && T.set(A, K);
    }
    if (E.type === "procedure") {
      if (x?.encoding) T.set("content-type", x.encoding);
      else if (!T.has("content-type") && typeof g < "u") if (g instanceof ArrayBuffer || g instanceof i || ArrayBuffer.isView(g)) T.set("content-type", "application/octet-stream");
      else if (g instanceof FormData) T.set("content-type", "multipart/form-data");
      else if (g instanceof URLSearchParams) T.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
      else if (l(g)) T.set("content-type", g.type || "application/octet-stream");
      else if (typeof g == "string") T.set("content-type", "text/plain;charset=UTF-8");
      else if (f(g)) T.set("content-type", "application/octet-stream");
      else if (typeof g == "boolean" || typeof g == "number" || typeof g == "string" || typeof g == "object") T.set("content-type", "application/json");
      else throw new t.XRPCError(t.ResponseType.InvalidRequest, `Unsupported data type: ${typeof g}`);
    }
    return T;
  }
  function c(E, g) {
    if (!g) return E;
    let x;
    for (const [T, A] of g) {
      if (A === void 0 || (x ?? (x = new Headers(E)), x.has(T))) continue;
      const K = typeof A == "function" ? A() : A;
      if (typeof K == "string") x.set(T, K);
      else if (K === null) x.delete(T);
      else throw new TypeError(`Invalid "${T}" header value: ${typeof K}`);
    }
    return x ?? E;
  }
  function l(E) {
    if (E == null || typeof E != "object") return false;
    if (typeof Blob == "function" && E instanceof Blob) return true;
    const g = E[Symbol.toStringTag];
    return g === "Blob" || g === "File" ? "stream" in E && typeof E.stream == "function" : false;
  }
  function d(E) {
    switch (typeof E) {
      case "string":
        return true;
      case "object":
        return E instanceof ArrayBuffer || E instanceof FormData || E instanceof URLSearchParams || E instanceof i || ArrayBuffer.isView(E) || l(E);
      default:
        return false;
    }
  }
  function f(E) {
    return E != null && typeof E == "object" && (Symbol.iterator in E || Symbol.asyncIterator in E);
  }
  function h(E, g) {
    const x = E.get("content-type");
    if (!x) return;
    if (typeof g > "u") throw new t.XRPCError(t.ResponseType.InvalidRequest, "A request body is expected but none was provided");
    if (d(g)) return g instanceof FormData && x === "multipart/form-data" && E.delete("content-type"), g;
    if (f(g)) return p(g);
    if (x.startsWith("text/")) return new TextEncoder().encode(String(g));
    if (x.startsWith("application/json")) {
      const A = (0, r.stringifyLex)(g);
      if (A === void 0) throw new t.XRPCError(t.ResponseType.InvalidRequest, "Failed to encode request body as JSON");
      return new TextEncoder().encode(A);
    }
    const T = !g || typeof g != "object" ? typeof g : g.constructor !== Object && typeof g.constructor == "function" && typeof g.constructor?.name == "string" ? g.constructor.name : "object";
    throw new t.XRPCError(t.ResponseType.InvalidRequest, `Unable to encode ${T} as ${x} data`);
  }
  function p(E) {
    if ("from" in i && typeof i.from == "function") return i.from(E);
    throw new TypeError("ReadableStream.from() is not supported in this environment. It is required to support using iterables as the request body. Consider using a polyfill or re-write your code to use a different body type.");
  }
  function b(E, g) {
    try {
      if (E) {
        if (E.includes("application/json")) {
          const x = new TextDecoder().decode(g);
          return (0, r.jsonStringToLex)(x);
        }
        if (E.startsWith("text/")) return new TextDecoder().decode(g);
      }
      return g instanceof ArrayBuffer ? new Uint8Array(g) : g;
    } catch (x) {
      throw new t.XRPCError(t.ResponseType.InvalidResponse, void 0, `Failed to parse response body: ${String(x)}`, void 0, { cause: x });
    }
  }
  return bt;
}
var Uo = {}, Za = {}, hh;
function y_() {
  if (hh) return Za;
  hh = 1, Object.defineProperty(Za, "__esModule", { value: true }), Za.buildFetchHandler = t;
  const r = Xl();
  function t(i) {
    if (typeof i == "function") return i;
    if (typeof i == "object" && "fetchHandler" in i) return i.fetchHandler.bind(i);
    const { service: n, headers: o = void 0, fetch: s = globalThis.fetch } = typeof i == "string" || i instanceof URL ? { service: i } : i;
    if (typeof s != "function") throw new TypeError("XrpcDispatcher requires fetch() to be available in your environment.");
    const e = o != null ? Object.entries(o) : void 0;
    return async function(u, a) {
      const c = typeof n == "function" ? n() : n, l = new URL(u, c), d = (0, r.combineHeaders)(a.headers, e);
      return s(l, { ...a, headers: d });
    };
  }
  return Za;
}
var yh;
function m_() {
  if (yh) return Uo;
  yh = 1, Object.defineProperty(Uo, "__esModule", { value: true }), Uo.XrpcClient = void 0;
  const r = rn(), t = y_(), i = xp(), n = Xl();
  class o {
    constructor(e, u) {
      Object.defineProperty(this, "fetchHandler", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "headers", { enumerable: true, configurable: true, writable: true, value: /* @__PURE__ */ new Map() }), Object.defineProperty(this, "lex", { enumerable: true, configurable: true, writable: true, value: void 0 }), this.fetchHandler = (0, t.buildFetchHandler)(e), this.lex = u instanceof r.Lexicons ? u : new r.Lexicons(u);
    }
    setHeader(e, u) {
      this.headers.set(e.toLowerCase(), u);
    }
    unsetHeader(e) {
      this.headers.delete(e.toLowerCase());
    }
    clearHeaders() {
      this.headers.clear();
    }
    async call(e, u, a, c) {
      const l = this.lex.getDefOrThrow(e);
      if (!l || l.type !== "query" && l.type !== "procedure") throw new TypeError(`Invalid lexicon: ${e}. Must be a query or procedure.`);
      const d = (0, n.constructMethodCallUrl)(e, l, u), f = (0, n.getMethodSchemaHTTPMethod)(l), h = (0, n.constructMethodCallHeaders)(l, a, c), p = (0, n.encodeMethodCallBody)(h, a), b = { method: f, headers: (0, n.combineHeaders)(h, this.headers), body: p, duplex: "half", signal: c?.signal };
      try {
        const E = await this.fetchHandler.call(void 0, d, b), g = E.status, x = Object.fromEntries(E.headers.entries()), T = await E.arrayBuffer(), A = (0, n.httpResponseBodyParse)(E.headers.get("content-type"), T), K = (0, i.httpResponseCodeToEnum)(g);
        if (K !== i.ResponseType.Success) {
          const { error: j = void 0, message: O = void 0 } = A && (0, n.isErrorResponseBody)(A) ? A : {};
          throw new i.XRPCError(K, j, O, x);
        }
        try {
          this.lex.assertValidXrpcOutput(e, A);
        } catch (j) {
          throw j instanceof r.ValidationError ? new i.XRPCInvalidResponseError(e, j, A) : j;
        }
        return new i.XRPCResponse(A, x);
      } catch (E) {
        throw i.XRPCError.from(E);
      }
    }
  }
  return Uo.XrpcClient = o, Uo;
}
var mh;
function bh() {
  if (mh) return _i;
  mh = 1, Object.defineProperty(_i, "__esModule", { value: true }), _i.ServiceClient = _i.Client = void 0;
  const r = rn(), t = Xl(), i = m_();
  class n {
    constructor() {
      Object.defineProperty(this, "lex", { enumerable: true, configurable: true, writable: true, value: new r.Lexicons() });
    }
    get fetch() {
      throw new Error("Client.fetch is no longer supported. Use an XrpcClient instead.");
    }
    set fetch(e) {
      throw new Error("Client.fetch is no longer supported. Use an XrpcClient instead.");
    }
    async call(e, u, a, c, l) {
      return this.service(e).call(u, a, c, l);
    }
    service(e) {
      return new o(this, e);
    }
    addLexicon(e) {
      this.lex.add(e);
    }
    addLexicons(e) {
      for (const u of e) this.addLexicon(u);
    }
    removeLexicon(e) {
      this.lex.remove(e);
    }
  }
  _i.Client = n;
  class o extends i.XrpcClient {
    constructor(e, u) {
      super(async (a, c) => {
        const l = (0, t.combineHeaders)(c.headers, Object.entries(this.headers));
        return fetch(new URL(a, this.uri), { ...c, headers: l });
      }, e.lex), Object.defineProperty(this, "baseClient", { enumerable: true, configurable: true, writable: true, value: e }), Object.defineProperty(this, "uri", { enumerable: true, configurable: true, writable: true, value: void 0 }), this.uri = typeof u == "string" ? new URL(u) : u;
    }
  }
  return _i.ServiceClient = o, _i;
}
var gh;
function ue() {
  return gh || (gh = 1, function(r) {
    var t = Ri && Ri.__createBinding || (Object.create ? function(s, e, u, a) {
      a === void 0 && (a = u);
      var c = Object.getOwnPropertyDescriptor(e, u);
      (!c || ("get" in c ? !e.__esModule : c.writable || c.configurable)) && (c = { enumerable: true, get: function() {
        return e[u];
      } }), Object.defineProperty(s, a, c);
    } : function(s, e, u, a) {
      a === void 0 && (a = u), s[a] = e[u];
    }), i = Ri && Ri.__exportStar || function(s, e) {
      for (var u in s) u !== "default" && !Object.prototype.hasOwnProperty.call(e, u) && t(e, s, u);
    };
    Object.defineProperty(r, "__esModule", { value: true }), i(bh(), r), i(y_(), r), i(xp(), r), i(Xl(), r), i(m_(), r);
    const n = bh(), o = new n.Client();
    r.default = o;
  }(Ri)), Ri;
}
var sr = {}, Eh;
function vh() {
  if (Eh) return sr;
  Eh = 1, Object.defineProperty(sr, "__esModule", { value: true }), sr.DidDeactivatedError = sr.DidNotFoundError = sr.HandleNotFoundError = void 0, sr.toKnownErr = e;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(a) {
      super(a.status, a.error, a.message, a.headers, { cause: a });
    }
  }
  sr.HandleNotFoundError = n;
  class o extends r.XRPCError {
    constructor(a) {
      super(a.status, a.error, a.message, a.headers, { cause: a });
    }
  }
  sr.DidNotFoundError = o;
  class s extends r.XRPCError {
    constructor(a) {
      super(a.status, a.error, a.message, a.headers, { cause: a });
    }
  }
  sr.DidDeactivatedError = s;
  function e(u) {
    if (u instanceof r.XRPCError) {
      if (u.error === "HandleNotFound") return new n(u);
      if (u.error === "DidNotFound") return new o(u);
      if (u.error === "DidDeactivated") return new s(u);
    }
    return u;
  }
  return sr;
}
var Ur = {}, Rh;
function _h() {
  if (Rh) return Ur;
  Rh = 1, Object.defineProperty(Ur, "__esModule", { value: true }), Ur.DidDeactivatedError = Ur.DidNotFoundError = void 0, Ur.toKnownErr = s;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(u) {
      super(u.status, u.error, u.message, u.headers, { cause: u });
    }
  }
  Ur.DidNotFoundError = n;
  class o extends r.XRPCError {
    constructor(u) {
      super(u.status, u.error, u.message, u.headers, { cause: u });
    }
  }
  Ur.DidDeactivatedError = o;
  function s(e) {
    if (e instanceof r.XRPCError) {
      if (e.error === "DidNotFound") return new n(e);
      if (e.error === "DidDeactivated") return new o(e);
    }
    return e;
  }
  return Ur;
}
var kn = {}, wh;
function xh() {
  if (wh) return kn;
  wh = 1, Object.defineProperty(kn, "__esModule", { value: true }), kn.HandleNotFoundError = void 0, kn.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  kn.HandleNotFoundError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "HandleNotFound" ? new n(s) : s;
  }
  return kn;
}
var ar = {}, Ah;
function Sh() {
  if (Ah) return ar;
  Ah = 1, Object.defineProperty(ar, "__esModule", { value: true }), ar.DidDeactivatedError = ar.DidNotFoundError = ar.HandleNotFoundError = void 0, ar.toKnownErr = e;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(a) {
      super(a.status, a.error, a.message, a.headers, { cause: a });
    }
  }
  ar.HandleNotFoundError = n;
  class o extends r.XRPCError {
    constructor(a) {
      super(a.status, a.error, a.message, a.headers, { cause: a });
    }
  }
  ar.DidNotFoundError = o;
  class s extends r.XRPCError {
    constructor(a) {
      super(a.status, a.error, a.message, a.headers, { cause: a });
    }
  }
  ar.DidDeactivatedError = s;
  function e(u) {
    if (u instanceof r.XRPCError) {
      if (u.error === "HandleNotFound") return new n(u);
      if (u.error === "DidNotFound") return new o(u);
      if (u.error === "DidDeactivated") return new s(u);
    }
    return u;
  }
  return ar;
}
var Ke = {}, Ch;
function Th() {
  if (Ch) return Ke;
  Ch = 1, Object.defineProperty(Ke, "__esModule", { value: true }), Ke.InvalidSwapError = void 0, Ke.toKnownErr = u, Ke.isCreate = c, Ke.validateCreate = l, Ke.isUpdate = f, Ke.validateUpdate = h, Ke.isDelete = b, Ke.validateDelete = E, Ke.isCreateResult = x, Ke.validateCreateResult = T, Ke.isUpdateResult = K, Ke.validateUpdateResult = j, Ke.isDeleteResult = z, Ke.validateDeleteResult = H;
  const r = ue(), t = D(), n = P().is$typed, o = t.validate, s = "com.atproto.repo.applyWrites";
  class e extends r.XRPCError {
    constructor(F) {
      super(F.status, F.error, F.message, F.headers, { cause: F });
    }
  }
  Ke.InvalidSwapError = e;
  function u(X) {
    return X instanceof r.XRPCError && X.error === "InvalidSwap" ? new e(X) : X;
  }
  const a = "create";
  function c(X) {
    return n(X, s, a);
  }
  function l(X) {
    return o(X, s, a);
  }
  const d = "update";
  function f(X) {
    return n(X, s, d);
  }
  function h(X) {
    return o(X, s, d);
  }
  const p = "delete";
  function b(X) {
    return n(X, s, p);
  }
  function E(X) {
    return o(X, s, p);
  }
  const g = "createResult";
  function x(X) {
    return n(X, s, g);
  }
  function T(X) {
    return o(X, s, g);
  }
  const A = "updateResult";
  function K(X) {
    return n(X, s, A);
  }
  function j(X) {
    return o(X, s, A);
  }
  const O = "deleteResult";
  function z(X) {
    return n(X, s, O);
  }
  function H(X) {
    return o(X, s, O);
  }
  return Ke;
}
var Dn = {}, Lh;
function kh() {
  if (Lh) return Dn;
  Lh = 1, Object.defineProperty(Dn, "__esModule", { value: true }), Dn.InvalidSwapError = void 0, Dn.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  Dn.InvalidSwapError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "InvalidSwap" ? new n(s) : s;
  }
  return Dn;
}
var Pn = {}, Dh;
function Ph() {
  if (Dh) return Pn;
  Dh = 1, Object.defineProperty(Pn, "__esModule", { value: true }), Pn.InvalidSwapError = void 0, Pn.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  Pn.InvalidSwapError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "InvalidSwap" ? new n(s) : s;
  }
  return Pn;
}
var Bn = {}, Bh;
function Uh() {
  if (Bh) return Bn;
  Bh = 1, Object.defineProperty(Bn, "__esModule", { value: true }), Bn.RecordNotFoundError = void 0, Bn.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  Bn.RecordNotFoundError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "RecordNotFound" ? new n(s) : s;
  }
  return Bn;
}
var Un = {}, Ih;
function Kh() {
  if (Ih) return Un;
  Ih = 1, Object.defineProperty(Un, "__esModule", { value: true }), Un.InvalidSwapError = void 0, Un.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  Un.InvalidSwapError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "InvalidSwap" ? new n(s) : s;
  }
  return Un;
}
var jt = {}, Oh;
function jh() {
  if (Oh) return jt;
  Oh = 1, Object.defineProperty(jt, "__esModule", { value: true }), jt.InvalidEmailError = jt.InvalidTokenError = jt.ExpiredTokenError = jt.AccountNotFoundError = void 0, jt.toKnownErr = u;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(c) {
      super(c.status, c.error, c.message, c.headers, { cause: c });
    }
  }
  jt.AccountNotFoundError = n;
  class o extends r.XRPCError {
    constructor(c) {
      super(c.status, c.error, c.message, c.headers, { cause: c });
    }
  }
  jt.ExpiredTokenError = o;
  class s extends r.XRPCError {
    constructor(c) {
      super(c.status, c.error, c.message, c.headers, { cause: c });
    }
  }
  jt.InvalidTokenError = s;
  class e extends r.XRPCError {
    constructor(c) {
      super(c.status, c.error, c.message, c.headers, { cause: c });
    }
  }
  jt.InvalidEmailError = e;
  function u(a) {
    if (a instanceof r.XRPCError) {
      if (a.error === "AccountNotFound") return new n(a);
      if (a.error === "ExpiredToken") return new o(a);
      if (a.error === "InvalidToken") return new s(a);
      if (a.error === "InvalidEmail") return new e(a);
    }
    return a;
  }
  return jt;
}
var Oe = {}, qh;
function Mh() {
  if (qh) return Oe;
  qh = 1, Object.defineProperty(Oe, "__esModule", { value: true }), Oe.IncompatibleDidDocError = Oe.UnresolvableDidError = Oe.UnsupportedDomainError = Oe.HandleNotAvailableError = Oe.InvalidInviteCodeError = Oe.InvalidPasswordError = Oe.InvalidHandleError = void 0, Oe.toKnownErr = l;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(f) {
      super(f.status, f.error, f.message, f.headers, { cause: f });
    }
  }
  Oe.InvalidHandleError = n;
  class o extends r.XRPCError {
    constructor(f) {
      super(f.status, f.error, f.message, f.headers, { cause: f });
    }
  }
  Oe.InvalidPasswordError = o;
  class s extends r.XRPCError {
    constructor(f) {
      super(f.status, f.error, f.message, f.headers, { cause: f });
    }
  }
  Oe.InvalidInviteCodeError = s;
  class e extends r.XRPCError {
    constructor(f) {
      super(f.status, f.error, f.message, f.headers, { cause: f });
    }
  }
  Oe.HandleNotAvailableError = e;
  class u extends r.XRPCError {
    constructor(f) {
      super(f.status, f.error, f.message, f.headers, { cause: f });
    }
  }
  Oe.UnsupportedDomainError = u;
  class a extends r.XRPCError {
    constructor(f) {
      super(f.status, f.error, f.message, f.headers, { cause: f });
    }
  }
  Oe.UnresolvableDidError = a;
  class c extends r.XRPCError {
    constructor(f) {
      super(f.status, f.error, f.message, f.headers, { cause: f });
    }
  }
  Oe.IncompatibleDidDocError = c;
  function l(d) {
    if (d instanceof r.XRPCError) {
      if (d.error === "InvalidHandle") return new n(d);
      if (d.error === "InvalidPassword") return new o(d);
      if (d.error === "InvalidInviteCode") return new s(d);
      if (d.error === "HandleNotAvailable") return new e(d);
      if (d.error === "UnsupportedDomain") return new u(d);
      if (d.error === "UnresolvableDid") return new a(d);
      if (d.error === "IncompatibleDidDoc") return new c(d);
    }
    return d;
  }
  return Oe;
}
var Ir = {}, Vh;
function Nh() {
  if (Vh) return Ir;
  Vh = 1, Object.defineProperty(Ir, "__esModule", { value: true }), Ir.AccountTakedownError = void 0, Ir.toKnownErr = u, Ir.isAppPassword = c, Ir.validateAppPassword = l;
  const r = ue(), t = D(), n = P().is$typed, o = t.validate, s = "com.atproto.server.createAppPassword";
  class e extends r.XRPCError {
    constructor(f) {
      super(f.status, f.error, f.message, f.headers, { cause: f });
    }
  }
  Ir.AccountTakedownError = e;
  function u(d) {
    return d instanceof r.XRPCError && d.error === "AccountTakedown" ? new e(d) : d;
  }
  const a = "appPassword";
  function c(d) {
    return n(d, s, a);
  }
  function l(d) {
    return o(d, s, a);
  }
  return Ir;
}
var Kr = {}, zh;
function Gh() {
  if (zh) return Kr;
  zh = 1, Object.defineProperty(Kr, "__esModule", { value: true }), Kr.AuthFactorTokenRequiredError = Kr.AccountTakedownError = void 0, Kr.toKnownErr = s;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(u) {
      super(u.status, u.error, u.message, u.headers, { cause: u });
    }
  }
  Kr.AccountTakedownError = n;
  class o extends r.XRPCError {
    constructor(u) {
      super(u.status, u.error, u.message, u.headers, { cause: u });
    }
  }
  Kr.AuthFactorTokenRequiredError = o;
  function s(e) {
    if (e instanceof r.XRPCError) {
      if (e.error === "AccountTakedown") return new n(e);
      if (e.error === "AuthFactorTokenRequired") return new o(e);
    }
    return e;
  }
  return Kr;
}
var Or = {}, Fh;
function $h() {
  if (Fh) return Or;
  Fh = 1, Object.defineProperty(Or, "__esModule", { value: true }), Or.InvalidTokenError = Or.ExpiredTokenError = void 0, Or.toKnownErr = s;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(u) {
      super(u.status, u.error, u.message, u.headers, { cause: u });
    }
  }
  Or.ExpiredTokenError = n;
  class o extends r.XRPCError {
    constructor(u) {
      super(u.status, u.error, u.message, u.headers, { cause: u });
    }
  }
  Or.InvalidTokenError = o;
  function s(e) {
    if (e instanceof r.XRPCError) {
      if (e.error === "ExpiredToken") return new n(e);
      if (e.error === "InvalidToken") return new o(e);
    }
    return e;
  }
  return Or;
}
var In = {}, Hh;
function Xh() {
  if (Hh) return In;
  Hh = 1, Object.defineProperty(In, "__esModule", { value: true }), In.DuplicateCreateError = void 0, In.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  In.DuplicateCreateError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "DuplicateCreate" ? new n(s) : s;
  }
  return In;
}
var Kn = {}, Wh;
function Jh() {
  if (Wh) return Kn;
  Wh = 1, Object.defineProperty(Kn, "__esModule", { value: true }), Kn.BadExpirationError = void 0, Kn.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  Kn.BadExpirationError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "BadExpiration" ? new n(s) : s;
  }
  return Kn;
}
var jr = {}, Zh;
function Qh() {
  if (Zh) return jr;
  Zh = 1, Object.defineProperty(jr, "__esModule", { value: true }), jr.AccountTakedownError = void 0, jr.toKnownErr = u, jr.isAppPassword = c, jr.validateAppPassword = l;
  const r = ue(), t = D(), n = P().is$typed, o = t.validate, s = "com.atproto.server.listAppPasswords";
  class e extends r.XRPCError {
    constructor(f) {
      super(f.status, f.error, f.message, f.headers, { cause: f });
    }
  }
  jr.AccountTakedownError = e;
  function u(d) {
    return d instanceof r.XRPCError && d.error === "AccountTakedown" ? new e(d) : d;
  }
  const a = "appPassword";
  function c(d) {
    return n(d, s, a);
  }
  function l(d) {
    return o(d, s, a);
  }
  return jr;
}
var On = {}, Yh;
function ey() {
  if (Yh) return On;
  Yh = 1, Object.defineProperty(On, "__esModule", { value: true }), On.AccountTakedownError = void 0, On.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  On.AccountTakedownError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "AccountTakedown" ? new n(s) : s;
  }
  return On;
}
var qr = {}, ty;
function ry() {
  if (ty) return qr;
  ty = 1, Object.defineProperty(qr, "__esModule", { value: true }), qr.InvalidTokenError = qr.ExpiredTokenError = void 0, qr.toKnownErr = s;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(u) {
      super(u.status, u.error, u.message, u.headers, { cause: u });
    }
  }
  qr.ExpiredTokenError = n;
  class o extends r.XRPCError {
    constructor(u) {
      super(u.status, u.error, u.message, u.headers, { cause: u });
    }
  }
  qr.InvalidTokenError = o;
  function s(e) {
    if (e instanceof r.XRPCError) {
      if (e.error === "ExpiredToken") return new n(e);
      if (e.error === "InvalidToken") return new o(e);
    }
    return e;
  }
  return qr;
}
var ur = {}, iy;
function ny() {
  if (iy) return ur;
  iy = 1, Object.defineProperty(ur, "__esModule", { value: true }), ur.TokenRequiredError = ur.InvalidTokenError = ur.ExpiredTokenError = void 0, ur.toKnownErr = e;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(a) {
      super(a.status, a.error, a.message, a.headers, { cause: a });
    }
  }
  ur.ExpiredTokenError = n;
  class o extends r.XRPCError {
    constructor(a) {
      super(a.status, a.error, a.message, a.headers, { cause: a });
    }
  }
  ur.InvalidTokenError = o;
  class s extends r.XRPCError {
    constructor(a) {
      super(a.status, a.error, a.message, a.headers, { cause: a });
    }
  }
  ur.TokenRequiredError = s;
  function e(u) {
    if (u instanceof r.XRPCError) {
      if (u.error === "ExpiredToken") return new n(u);
      if (u.error === "InvalidToken") return new o(u);
      if (u.error === "TokenRequired") return new s(u);
    }
    return u;
  }
  return ur;
}
var gt = {}, oy;
function sy() {
  if (oy) return gt;
  oy = 1, Object.defineProperty(gt, "__esModule", { value: true }), gt.RepoDeactivatedError = gt.RepoSuspendedError = gt.RepoTakendownError = gt.RepoNotFoundError = gt.BlobNotFoundError = void 0, gt.toKnownErr = a;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(l) {
      super(l.status, l.error, l.message, l.headers, { cause: l });
    }
  }
  gt.BlobNotFoundError = n;
  class o extends r.XRPCError {
    constructor(l) {
      super(l.status, l.error, l.message, l.headers, { cause: l });
    }
  }
  gt.RepoNotFoundError = o;
  class s extends r.XRPCError {
    constructor(l) {
      super(l.status, l.error, l.message, l.headers, { cause: l });
    }
  }
  gt.RepoTakendownError = s;
  class e extends r.XRPCError {
    constructor(l) {
      super(l.status, l.error, l.message, l.headers, { cause: l });
    }
  }
  gt.RepoSuspendedError = e;
  class u extends r.XRPCError {
    constructor(l) {
      super(l.status, l.error, l.message, l.headers, { cause: l });
    }
  }
  gt.RepoDeactivatedError = u;
  function a(c) {
    if (c instanceof r.XRPCError) {
      if (c.error === "BlobNotFound") return new n(c);
      if (c.error === "RepoNotFound") return new o(c);
      if (c.error === "RepoTakendown") return new s(c);
      if (c.error === "RepoSuspended") return new e(c);
      if (c.error === "RepoDeactivated") return new u(c);
    }
    return c;
  }
  return gt;
}
var Et = {}, ay;
function uy() {
  if (ay) return Et;
  ay = 1, Object.defineProperty(Et, "__esModule", { value: true }), Et.RepoDeactivatedError = Et.RepoSuspendedError = Et.RepoTakendownError = Et.RepoNotFoundError = Et.BlockNotFoundError = void 0, Et.toKnownErr = a;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(l) {
      super(l.status, l.error, l.message, l.headers, { cause: l });
    }
  }
  Et.BlockNotFoundError = n;
  class o extends r.XRPCError {
    constructor(l) {
      super(l.status, l.error, l.message, l.headers, { cause: l });
    }
  }
  Et.RepoNotFoundError = o;
  class s extends r.XRPCError {
    constructor(l) {
      super(l.status, l.error, l.message, l.headers, { cause: l });
    }
  }
  Et.RepoTakendownError = s;
  class e extends r.XRPCError {
    constructor(l) {
      super(l.status, l.error, l.message, l.headers, { cause: l });
    }
  }
  Et.RepoSuspendedError = e;
  class u extends r.XRPCError {
    constructor(l) {
      super(l.status, l.error, l.message, l.headers, { cause: l });
    }
  }
  Et.RepoDeactivatedError = u;
  function a(c) {
    if (c instanceof r.XRPCError) {
      if (c.error === "BlockNotFound") return new n(c);
      if (c.error === "RepoNotFound") return new o(c);
      if (c.error === "RepoTakendown") return new s(c);
      if (c.error === "RepoSuspended") return new e(c);
      if (c.error === "RepoDeactivated") return new u(c);
    }
    return c;
  }
  return Et;
}
var jn = {}, cy;
function ly() {
  if (cy) return jn;
  cy = 1, Object.defineProperty(jn, "__esModule", { value: true }), jn.HeadNotFoundError = void 0, jn.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  jn.HeadNotFoundError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "HeadNotFound" ? new n(s) : s;
  }
  return jn;
}
var qt = {}, dy;
function py() {
  if (dy) return qt;
  dy = 1, Object.defineProperty(qt, "__esModule", { value: true }), qt.RepoDeactivatedError = qt.RepoSuspendedError = qt.RepoTakendownError = qt.RepoNotFoundError = void 0, qt.toKnownErr = u;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(c) {
      super(c.status, c.error, c.message, c.headers, { cause: c });
    }
  }
  qt.RepoNotFoundError = n;
  class o extends r.XRPCError {
    constructor(c) {
      super(c.status, c.error, c.message, c.headers, { cause: c });
    }
  }
  qt.RepoTakendownError = o;
  class s extends r.XRPCError {
    constructor(c) {
      super(c.status, c.error, c.message, c.headers, { cause: c });
    }
  }
  qt.RepoSuspendedError = s;
  class e extends r.XRPCError {
    constructor(c) {
      super(c.status, c.error, c.message, c.headers, { cause: c });
    }
  }
  qt.RepoDeactivatedError = e;
  function u(a) {
    if (a instanceof r.XRPCError) {
      if (a.error === "RepoNotFound") return new n(a);
      if (a.error === "RepoTakendown") return new o(a);
      if (a.error === "RepoSuspended") return new s(a);
      if (a.error === "RepoDeactivated") return new e(a);
    }
    return a;
  }
  return qt;
}
var vt = {}, fy;
function hy() {
  if (fy) return vt;
  fy = 1, Object.defineProperty(vt, "__esModule", { value: true }), vt.RepoDeactivatedError = vt.RepoSuspendedError = vt.RepoTakendownError = vt.RepoNotFoundError = vt.RecordNotFoundError = void 0, vt.toKnownErr = a;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(l) {
      super(l.status, l.error, l.message, l.headers, { cause: l });
    }
  }
  vt.RecordNotFoundError = n;
  class o extends r.XRPCError {
    constructor(l) {
      super(l.status, l.error, l.message, l.headers, { cause: l });
    }
  }
  vt.RepoNotFoundError = o;
  class s extends r.XRPCError {
    constructor(l) {
      super(l.status, l.error, l.message, l.headers, { cause: l });
    }
  }
  vt.RepoTakendownError = s;
  class e extends r.XRPCError {
    constructor(l) {
      super(l.status, l.error, l.message, l.headers, { cause: l });
    }
  }
  vt.RepoSuspendedError = e;
  class u extends r.XRPCError {
    constructor(l) {
      super(l.status, l.error, l.message, l.headers, { cause: l });
    }
  }
  vt.RepoDeactivatedError = u;
  function a(c) {
    if (c instanceof r.XRPCError) {
      if (c.error === "RecordNotFound") return new n(c);
      if (c.error === "RepoNotFound") return new o(c);
      if (c.error === "RepoTakendown") return new s(c);
      if (c.error === "RepoSuspended") return new e(c);
      if (c.error === "RepoDeactivated") return new u(c);
    }
    return c;
  }
  return vt;
}
var Mt = {}, yy;
function my() {
  if (yy) return Mt;
  yy = 1, Object.defineProperty(Mt, "__esModule", { value: true }), Mt.RepoDeactivatedError = Mt.RepoSuspendedError = Mt.RepoTakendownError = Mt.RepoNotFoundError = void 0, Mt.toKnownErr = u;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(c) {
      super(c.status, c.error, c.message, c.headers, { cause: c });
    }
  }
  Mt.RepoNotFoundError = n;
  class o extends r.XRPCError {
    constructor(c) {
      super(c.status, c.error, c.message, c.headers, { cause: c });
    }
  }
  Mt.RepoTakendownError = o;
  class s extends r.XRPCError {
    constructor(c) {
      super(c.status, c.error, c.message, c.headers, { cause: c });
    }
  }
  Mt.RepoSuspendedError = s;
  class e extends r.XRPCError {
    constructor(c) {
      super(c.status, c.error, c.message, c.headers, { cause: c });
    }
  }
  Mt.RepoDeactivatedError = e;
  function u(a) {
    if (a instanceof r.XRPCError) {
      if (a.error === "RepoNotFound") return new n(a);
      if (a.error === "RepoTakendown") return new o(a);
      if (a.error === "RepoSuspended") return new s(a);
      if (a.error === "RepoDeactivated") return new e(a);
    }
    return a;
  }
  return Mt;
}
var qn = {}, by;
function gy() {
  if (by) return qn;
  by = 1, Object.defineProperty(qn, "__esModule", { value: true }), qn.RepoNotFoundError = void 0, qn.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  qn.RepoNotFoundError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "RepoNotFound" ? new n(s) : s;
  }
  return qn;
}
var Vt = {}, Ey;
function vy() {
  if (Ey) return Vt;
  Ey = 1, Object.defineProperty(Vt, "__esModule", { value: true }), Vt.RepoDeactivatedError = Vt.RepoSuspendedError = Vt.RepoTakendownError = Vt.RepoNotFoundError = void 0, Vt.toKnownErr = u;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(c) {
      super(c.status, c.error, c.message, c.headers, { cause: c });
    }
  }
  Vt.RepoNotFoundError = n;
  class o extends r.XRPCError {
    constructor(c) {
      super(c.status, c.error, c.message, c.headers, { cause: c });
    }
  }
  Vt.RepoTakendownError = o;
  class s extends r.XRPCError {
    constructor(c) {
      super(c.status, c.error, c.message, c.headers, { cause: c });
    }
  }
  Vt.RepoSuspendedError = s;
  class e extends r.XRPCError {
    constructor(c) {
      super(c.status, c.error, c.message, c.headers, { cause: c });
    }
  }
  Vt.RepoDeactivatedError = e;
  function u(a) {
    if (a instanceof r.XRPCError) {
      if (a.error === "RepoNotFound") return new n(a);
      if (a.error === "RepoTakendown") return new o(a);
      if (a.error === "RepoSuspended") return new s(a);
      if (a.error === "RepoDeactivated") return new e(a);
    }
    return a;
  }
  return Vt;
}
var Mr = {}, Ry;
function _y() {
  if (Ry) return Mr;
  Ry = 1, Object.defineProperty(Mr, "__esModule", { value: true }), Mr.BlockedByActorError = Mr.BlockedActorError = void 0, Mr.toKnownErr = s;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(u) {
      super(u.status, u.error, u.message, u.headers, { cause: u });
    }
  }
  Mr.BlockedActorError = n;
  class o extends r.XRPCError {
    constructor(u) {
      super(u.status, u.error, u.message, u.headers, { cause: u });
    }
  }
  Mr.BlockedByActorError = o;
  function s(e) {
    if (e instanceof r.XRPCError) {
      if (e.error === "BlockedActor") return new n(e);
      if (e.error === "BlockedByActor") return new o(e);
    }
    return e;
  }
  return Mr;
}
var Vr = {}, wy;
function xy() {
  if (wy) return Vr;
  wy = 1, Object.defineProperty(Vr, "__esModule", { value: true }), Vr.BlockedByActorError = Vr.BlockedActorError = void 0, Vr.toKnownErr = s;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(u) {
      super(u.status, u.error, u.message, u.headers, { cause: u });
    }
  }
  Vr.BlockedActorError = n;
  class o extends r.XRPCError {
    constructor(u) {
      super(u.status, u.error, u.message, u.headers, { cause: u });
    }
  }
  Vr.BlockedByActorError = o;
  function s(e) {
    if (e instanceof r.XRPCError) {
      if (e.error === "BlockedActor") return new n(e);
      if (e.error === "BlockedByActor") return new o(e);
    }
    return e;
  }
  return Vr;
}
var Mn = {}, Ay;
function Sy() {
  if (Ay) return Mn;
  Ay = 1, Object.defineProperty(Mn, "__esModule", { value: true }), Mn.UnknownFeedError = void 0, Mn.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  Mn.UnknownFeedError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "UnknownFeed" ? new n(s) : s;
  }
  return Mn;
}
var Vn = {}, Cy;
function Ty() {
  if (Cy) return Vn;
  Cy = 1, Object.defineProperty(Vn, "__esModule", { value: true }), Vn.UnknownFeedError = void 0, Vn.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  Vn.UnknownFeedError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "UnknownFeed" ? new n(s) : s;
  }
  return Vn;
}
var Nn = {}, Ly;
function ky() {
  if (Ly) return Nn;
  Ly = 1, Object.defineProperty(Nn, "__esModule", { value: true }), Nn.UnknownListError = void 0, Nn.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  Nn.UnknownListError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "UnknownList" ? new n(s) : s;
  }
  return Nn;
}
var zn = {}, Dy;
function Py() {
  if (Dy) return zn;
  Dy = 1, Object.defineProperty(zn, "__esModule", { value: true }), zn.NotFoundError = void 0, zn.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  zn.NotFoundError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "NotFound" ? new n(s) : s;
  }
  return zn;
}
var Gn = {}, By;
function Uy() {
  if (By) return Gn;
  By = 1, Object.defineProperty(Gn, "__esModule", { value: true }), Gn.BadQueryStringError = void 0, Gn.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  Gn.BadQueryStringError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "BadQueryString" ? new n(s) : s;
  }
  return Gn;
}
var Fn = {}, Iy;
function Ky() {
  if (Iy) return Fn;
  Iy = 1, Object.defineProperty(Fn, "__esModule", { value: true }), Fn.ActorNotFoundError = void 0, Fn.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  Fn.ActorNotFoundError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "ActorNotFound" ? new n(s) : s;
  }
  return Fn;
}
var $n = {}, Oy;
function jy() {
  if (Oy) return $n;
  Oy = 1, Object.defineProperty($n, "__esModule", { value: true }), $n.BadQueryStringError = void 0, $n.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  $n.BadQueryStringError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "BadQueryString" ? new n(s) : s;
  }
  return $n;
}
var Hn = {}, qy;
function My() {
  if (qy) return Hn;
  qy = 1, Object.defineProperty(Hn, "__esModule", { value: true }), Hn.BadQueryStringError = void 0, Hn.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  Hn.BadQueryStringError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "BadQueryString" ? new n(s) : s;
  }
  return Hn;
}
var Xn = {}, Vy;
function Ny() {
  if (Vy) return Xn;
  Vy = 1, Object.defineProperty(Xn, "__esModule", { value: true }), Xn.BadQueryStringError = void 0, Xn.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  Xn.BadQueryStringError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "BadQueryString" ? new n(s) : s;
  }
  return Xn;
}
var Wn = {}, zy;
function Gy() {
  if (zy) return Wn;
  zy = 1, Object.defineProperty(Wn, "__esModule", { value: true }), Wn.DuplicateTemplateNameError = void 0, Wn.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  Wn.DuplicateTemplateNameError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "DuplicateTemplateName" ? new n(s) : s;
  }
  return Wn;
}
var Jn = {}, Fy;
function $y() {
  if (Fy) return Jn;
  Fy = 1, Object.defineProperty(Jn, "__esModule", { value: true }), Jn.DuplicateTemplateNameError = void 0, Jn.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  Jn.DuplicateTemplateNameError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "DuplicateTemplateName" ? new n(s) : s;
  }
  return Jn;
}
var Zn = {}, Hy;
function Xy() {
  if (Hy) return Zn;
  Hy = 1, Object.defineProperty(Zn, "__esModule", { value: true }), Zn.SubjectHasActionError = void 0, Zn.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  Zn.SubjectHasActionError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "SubjectHasAction" ? new n(s) : s;
  }
  return Zn;
}
var Qn = {}, Wy;
function Jy() {
  if (Wy) return Qn;
  Wy = 1, Object.defineProperty(Qn, "__esModule", { value: true }), Qn.RecordNotFoundError = void 0, Qn.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  Qn.RecordNotFoundError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "RecordNotFound" ? new n(s) : s;
  }
  return Qn;
}
var Yn = {}, Zy;
function Qy() {
  if (Zy) return Yn;
  Zy = 1, Object.defineProperty(Yn, "__esModule", { value: true }), Yn.RepoNotFoundError = void 0, Yn.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  Yn.RepoNotFoundError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "RepoNotFound" ? new n(s) : s;
  }
  return Yn;
}
var eo = {}, Yy;
function em() {
  if (Yy) return eo;
  Yy = 1, Object.defineProperty(eo, "__esModule", { value: true }), eo.SetNotFoundError = void 0, eo.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  eo.SetNotFoundError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "SetNotFound" ? new n(s) : s;
  }
  return eo;
}
var to = {}, tm;
function rm() {
  if (tm) return to;
  tm = 1, Object.defineProperty(to, "__esModule", { value: true }), to.SetNotFoundError = void 0, to.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  to.SetNotFoundError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "SetNotFound" ? new n(s) : s;
  }
  return to;
}
var ro = {}, im;
function nm() {
  if (im) return ro;
  im = 1, Object.defineProperty(ro, "__esModule", { value: true }), ro.SetNotFoundError = void 0, ro.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  ro.SetNotFoundError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "SetNotFound" ? new n(s) : s;
  }
  return ro;
}
var io = {}, om;
function sm() {
  if (om) return io;
  om = 1, Object.defineProperty(io, "__esModule", { value: true }), io.MemberAlreadyExistsError = void 0, io.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  io.MemberAlreadyExistsError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "MemberAlreadyExists" ? new n(s) : s;
  }
  return io;
}
var Nr = {}, am;
function um() {
  if (am) return Nr;
  am = 1, Object.defineProperty(Nr, "__esModule", { value: true }), Nr.CannotDeleteSelfError = Nr.MemberNotFoundError = void 0, Nr.toKnownErr = s;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(u) {
      super(u.status, u.error, u.message, u.headers, { cause: u });
    }
  }
  Nr.MemberNotFoundError = n;
  class o extends r.XRPCError {
    constructor(u) {
      super(u.status, u.error, u.message, u.headers, { cause: u });
    }
  }
  Nr.CannotDeleteSelfError = o;
  function s(e) {
    if (e instanceof r.XRPCError) {
      if (e.error === "MemberNotFound") return new n(e);
      if (e.error === "CannotDeleteSelf") return new o(e);
    }
    return e;
  }
  return Nr;
}
var no = {}, cm;
function lm() {
  if (cm) return no;
  cm = 1, Object.defineProperty(no, "__esModule", { value: true }), no.MemberNotFoundError = void 0, no.toKnownErr = o;
  const r = ue(), t = D();
  P().is$typed, t.validate;
  class n extends r.XRPCError {
    constructor(e) {
      super(e.status, e.error, e.message, e.headers, { cause: e });
    }
  }
  no.MemberNotFoundError = n;
  function o(s) {
    return s instanceof r.XRPCError && s.error === "MemberNotFound" ? new n(s) : s;
  }
  return no;
}
var At = {}, dm;
function sS() {
  if (dm) return At;
  dm = 1, Object.defineProperty(At, "__esModule", { value: true }), At.isStatusAttr = e, At.validateStatusAttr = u, At.isAccountView = c, At.validateAccountView = l, At.isRepoRef = f, At.validateRepoRef = h, At.isRepoBlobRef = b, At.validateRepoBlobRef = E, At.isThreatSignature = x, At.validateThreatSignature = T;
  const r = D(), i = P().is$typed, n = r.validate, o = "com.atproto.admin.defs", s = "statusAttr";
  function e(A) {
    return i(A, o, s);
  }
  function u(A) {
    return n(A, o, s);
  }
  const a = "accountView";
  function c(A) {
    return i(A, o, a);
  }
  function l(A) {
    return n(A, o, a);
  }
  const d = "repoRef";
  function f(A) {
    return i(A, o, d);
  }
  function h(A) {
    return n(A, o, d);
  }
  const p = "repoBlobRef";
  function b(A) {
    return i(A, o, p);
  }
  function E(A) {
    return n(A, o, p);
  }
  const g = "threatSignature";
  function x(A) {
    return i(A, o, g);
  }
  function T(A) {
    return n(A, o, g);
  }
  return At;
}
var Qa = {}, pm;
function aS() {
  if (pm) return Qa;
  pm = 1, Object.defineProperty(Qa, "__esModule", { value: true }), Qa.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Qa;
}
var Ya = {}, fm;
function uS() {
  if (fm) return Ya;
  fm = 1, Object.defineProperty(Ya, "__esModule", { value: true }), Ya.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Ya;
}
var eu = {}, hm;
function cS() {
  if (hm) return eu;
  hm = 1, Object.defineProperty(eu, "__esModule", { value: true }), eu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return eu;
}
var tu = {}, ym;
function lS() {
  if (ym) return tu;
  ym = 1, Object.defineProperty(tu, "__esModule", { value: true }), tu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return tu;
}
var ru = {}, mm;
function dS() {
  if (mm) return ru;
  mm = 1, Object.defineProperty(ru, "__esModule", { value: true }), ru.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return ru;
}
var iu = {}, bm;
function pS() {
  if (bm) return iu;
  bm = 1, Object.defineProperty(iu, "__esModule", { value: true }), iu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return iu;
}
var nu = {}, gm;
function fS() {
  if (gm) return nu;
  gm = 1, Object.defineProperty(nu, "__esModule", { value: true }), nu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return nu;
}
var ou = {}, Em;
function hS() {
  if (Em) return ou;
  Em = 1, Object.defineProperty(ou, "__esModule", { value: true }), ou.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return ou;
}
var su = {}, vm;
function yS() {
  if (vm) return su;
  vm = 1, Object.defineProperty(su, "__esModule", { value: true }), su.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return su;
}
var au = {}, Rm;
function mS() {
  if (Rm) return au;
  Rm = 1, Object.defineProperty(au, "__esModule", { value: true }), au.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return au;
}
var uu = {}, _m;
function bS() {
  if (_m) return uu;
  _m = 1, Object.defineProperty(uu, "__esModule", { value: true }), uu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return uu;
}
var cu = {}, wm;
function gS() {
  if (wm) return cu;
  wm = 1, Object.defineProperty(cu, "__esModule", { value: true }), cu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return cu;
}
var lu = {}, xm;
function ES() {
  if (xm) return lu;
  xm = 1, Object.defineProperty(lu, "__esModule", { value: true }), lu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return lu;
}
var du = {}, Am;
function vS() {
  if (Am) return du;
  Am = 1, Object.defineProperty(du, "__esModule", { value: true }), du.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return du;
}
var Io = {}, Sm;
function RS() {
  if (Sm) return Io;
  Sm = 1, Object.defineProperty(Io, "__esModule", { value: true }), Io.isIdentityInfo = e, Io.validateIdentityInfo = u;
  const r = D(), i = P().is$typed, n = r.validate, o = "com.atproto.identity.defs", s = "identityInfo";
  function e(a) {
    return i(a, o, s);
  }
  function u(a) {
    return n(a, o, s);
  }
  return Io;
}
var pu = {}, Cm;
function _S() {
  if (Cm) return pu;
  Cm = 1, Object.defineProperty(pu, "__esModule", { value: true }), pu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return pu;
}
var fu = {}, Tm;
function wS() {
  if (Tm) return fu;
  Tm = 1, Object.defineProperty(fu, "__esModule", { value: true }), fu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return fu;
}
var hu = {}, Lm;
function xS() {
  if (Lm) return hu;
  Lm = 1, Object.defineProperty(hu, "__esModule", { value: true }), hu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return hu;
}
var yu = {}, km;
function AS() {
  if (km) return yu;
  km = 1, Object.defineProperty(yu, "__esModule", { value: true }), yu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return yu;
}
var mu = {}, Dm;
function SS() {
  if (Dm) return mu;
  Dm = 1, Object.defineProperty(mu, "__esModule", { value: true }), mu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return mu;
}
var St = {}, Pm;
function CS() {
  if (Pm) return St;
  Pm = 1, Object.defineProperty(St, "__esModule", { value: true }), St.isLabel = e, St.validateLabel = u, St.isSelfLabels = c, St.validateSelfLabels = l, St.isSelfLabel = f, St.validateSelfLabel = h, St.isLabelValueDefinition = b, St.validateLabelValueDefinition = E, St.isLabelValueDefinitionStrings = x, St.validateLabelValueDefinitionStrings = T;
  const r = D(), i = P().is$typed, n = r.validate, o = "com.atproto.label.defs", s = "label";
  function e(A) {
    return i(A, o, s);
  }
  function u(A) {
    return n(A, o, s);
  }
  const a = "selfLabels";
  function c(A) {
    return i(A, o, a);
  }
  function l(A) {
    return n(A, o, a);
  }
  const d = "selfLabel";
  function f(A) {
    return i(A, o, d);
  }
  function h(A) {
    return n(A, o, d);
  }
  const p = "labelValueDefinition";
  function b(A) {
    return i(A, o, p);
  }
  function E(A) {
    return n(A, o, p);
  }
  const g = "labelValueDefinitionStrings";
  function x(A) {
    return i(A, o, g);
  }
  function T(A) {
    return n(A, o, g);
  }
  return St;
}
var bu = {}, Bm;
function TS() {
  if (Bm) return bu;
  Bm = 1, Object.defineProperty(bu, "__esModule", { value: true }), bu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return bu;
}
var wi = {}, Um;
function LS() {
  if (Um) return wi;
  Um = 1, Object.defineProperty(wi, "__esModule", { value: true }), wi.isLabels = e, wi.validateLabels = u, wi.isInfo = c, wi.validateInfo = l;
  const r = D(), i = P().is$typed, n = r.validate, o = "com.atproto.label.subscribeLabels", s = "labels";
  function e(d) {
    return i(d, o, s);
  }
  function u(d) {
    return n(d, o, s);
  }
  const a = "info";
  function c(d) {
    return i(d, o, a);
  }
  function l(d) {
    return n(d, o, a);
  }
  return wi;
}
var Ko = {}, Im;
function kS() {
  if (Im) return Ko;
  Im = 1, Object.defineProperty(Ko, "__esModule", { value: true }), Ko.isRecord = e, Ko.validateRecord = u;
  const r = D(), i = P().is$typed, n = r.validate, o = "com.atproto.lexicon.schema", s = "main";
  function e(a) {
    return i(a, o, s);
  }
  function u(a) {
    return n(a, o, s, true);
  }
  return Ko;
}
var gu = {}, Km;
function DS() {
  if (Km) return gu;
  Km = 1, Object.defineProperty(gu, "__esModule", { value: true }), gu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return gu;
}
var Fe = {}, Om;
function PS() {
  if (Om) return Fe;
  Om = 1, Object.defineProperty(Fe, "__esModule", { value: true }), Fe.REASONAPPEAL = Fe.REASONOTHER = Fe.REASONRUDE = Fe.REASONSEXUAL = Fe.REASONMISLEADING = Fe.REASONVIOLATION = Fe.REASONSPAM = void 0;
  const r = D();
  P().is$typed, r.validate;
  const i = "com.atproto.moderation.defs";
  return Fe.REASONSPAM = `${i}#reasonSpam`, Fe.REASONVIOLATION = `${i}#reasonViolation`, Fe.REASONMISLEADING = `${i}#reasonMisleading`, Fe.REASONSEXUAL = `${i}#reasonSexual`, Fe.REASONRUDE = `${i}#reasonRude`, Fe.REASONOTHER = `${i}#reasonOther`, Fe.REASONAPPEAL = `${i}#reasonAppeal`, Fe;
}
var Oo = {}, jm;
function BS() {
  if (jm) return Oo;
  jm = 1, Object.defineProperty(Oo, "__esModule", { value: true }), Oo.isCommitMeta = e, Oo.validateCommitMeta = u;
  const r = D(), i = P().is$typed, n = r.validate, o = "com.atproto.repo.defs", s = "commitMeta";
  function e(a) {
    return i(a, o, s);
  }
  function u(a) {
    return n(a, o, s);
  }
  return Oo;
}
var Eu = {}, qm;
function US() {
  if (qm) return Eu;
  qm = 1, Object.defineProperty(Eu, "__esModule", { value: true }), Eu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Eu;
}
var vu = {}, Mm;
function IS() {
  if (Mm) return vu;
  Mm = 1, Object.defineProperty(vu, "__esModule", { value: true }), vu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return vu;
}
var oo = {}, Vm;
function KS() {
  if (Vm) return oo;
  Vm = 1, Object.defineProperty(oo, "__esModule", { value: true }), oo.toKnownErr = s, oo.isRecordBlob = u, oo.validateRecordBlob = a;
  const r = D(), i = P().is$typed, n = r.validate, o = "com.atproto.repo.listMissingBlobs";
  function s(c) {
    return c;
  }
  const e = "recordBlob";
  function u(c) {
    return i(c, o, e);
  }
  function a(c) {
    return n(c, o, e);
  }
  return oo;
}
var so = {}, Nm;
function OS() {
  if (Nm) return so;
  Nm = 1, Object.defineProperty(so, "__esModule", { value: true }), so.toKnownErr = s, so.isRecord = u, so.validateRecord = a;
  const r = D(), i = P().is$typed, n = r.validate, o = "com.atproto.repo.listRecords";
  function s(c) {
    return c;
  }
  const e = "record";
  function u(c) {
    return i(c, o, e);
  }
  function a(c) {
    return n(c, o, e);
  }
  return so;
}
var jo = {}, zm;
function jS() {
  if (zm) return jo;
  zm = 1, Object.defineProperty(jo, "__esModule", { value: true }), jo.isMain = e, jo.validateMain = u;
  const r = D(), i = P().is$typed, n = r.validate, o = "com.atproto.repo.strongRef", s = "main";
  function e(a) {
    return i(a, o, s);
  }
  function u(a) {
    return n(a, o, s);
  }
  return jo;
}
var Ru = {}, Gm;
function qS() {
  if (Gm) return Ru;
  Gm = 1, Object.defineProperty(Ru, "__esModule", { value: true }), Ru.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Ru;
}
var _u = {}, Fm;
function MS() {
  if (Fm) return _u;
  Fm = 1, Object.defineProperty(_u, "__esModule", { value: true }), _u.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return _u;
}
var wu = {}, $m;
function VS() {
  if ($m) return wu;
  $m = 1, Object.defineProperty(wu, "__esModule", { value: true }), wu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return wu;
}
var xu = {}, Hm;
function NS() {
  if (Hm) return xu;
  Hm = 1, Object.defineProperty(xu, "__esModule", { value: true }), xu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return xu;
}
var ao = {}, Xm;
function zS() {
  if (Xm) return ao;
  Xm = 1, Object.defineProperty(ao, "__esModule", { value: true }), ao.toKnownErr = s, ao.isAccountCodes = u, ao.validateAccountCodes = a;
  const r = D(), i = P().is$typed, n = r.validate, o = "com.atproto.server.createInviteCodes";
  function s(c) {
    return c;
  }
  const e = "accountCodes";
  function u(c) {
    return i(c, o, e);
  }
  function a(c) {
    return n(c, o, e);
  }
  return ao;
}
var Au = {}, Wm;
function GS() {
  if (Wm) return Au;
  Wm = 1, Object.defineProperty(Au, "__esModule", { value: true }), Au.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Au;
}
var xi = {}, Jm;
function FS() {
  if (Jm) return xi;
  Jm = 1, Object.defineProperty(xi, "__esModule", { value: true }), xi.isInviteCode = e, xi.validateInviteCode = u, xi.isInviteCodeUse = c, xi.validateInviteCodeUse = l;
  const r = D(), i = P().is$typed, n = r.validate, o = "com.atproto.server.defs", s = "inviteCode";
  function e(d) {
    return i(d, o, s);
  }
  function u(d) {
    return n(d, o, s);
  }
  const a = "inviteCodeUse";
  function c(d) {
    return i(d, o, a);
  }
  function l(d) {
    return n(d, o, a);
  }
  return xi;
}
var Su = {}, Zm;
function $S() {
  if (Zm) return Su;
  Zm = 1, Object.defineProperty(Su, "__esModule", { value: true }), Su.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Su;
}
var zr = {}, Qm;
function HS() {
  if (Qm) return zr;
  Qm = 1, Object.defineProperty(zr, "__esModule", { value: true }), zr.toKnownErr = s, zr.isLinks = u, zr.validateLinks = a, zr.isContact = l, zr.validateContact = d;
  const r = D(), i = P().is$typed, n = r.validate, o = "com.atproto.server.describeServer";
  function s(f) {
    return f;
  }
  const e = "links";
  function u(f) {
    return i(f, o, e);
  }
  function a(f) {
    return n(f, o, e);
  }
  const c = "contact";
  function l(f) {
    return i(f, o, c);
  }
  function d(f) {
    return n(f, o, c);
  }
  return zr;
}
var Cu = {}, Ym;
function XS() {
  if (Ym) return Cu;
  Ym = 1, Object.defineProperty(Cu, "__esModule", { value: true }), Cu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Cu;
}
var Tu = {}, eb;
function WS() {
  if (eb) return Tu;
  eb = 1, Object.defineProperty(Tu, "__esModule", { value: true }), Tu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Tu;
}
var Lu = {}, tb;
function JS() {
  if (tb) return Lu;
  tb = 1, Object.defineProperty(Lu, "__esModule", { value: true }), Lu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Lu;
}
var ku = {}, rb;
function ZS() {
  if (rb) return ku;
  rb = 1, Object.defineProperty(ku, "__esModule", { value: true }), ku.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return ku;
}
var Du = {}, ib;
function QS() {
  if (ib) return Du;
  ib = 1, Object.defineProperty(Du, "__esModule", { value: true }), Du.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Du;
}
var Pu = {}, nb;
function YS() {
  if (nb) return Pu;
  nb = 1, Object.defineProperty(Pu, "__esModule", { value: true }), Pu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Pu;
}
var Bu = {}, ob;
function e1() {
  if (ob) return Bu;
  ob = 1, Object.defineProperty(Bu, "__esModule", { value: true }), Bu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Bu;
}
var Uu = {}, sb;
function t1() {
  if (sb) return Uu;
  sb = 1, Object.defineProperty(Uu, "__esModule", { value: true }), Uu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Uu;
}
var uo = {}, ab;
function r1() {
  if (ab) return uo;
  ab = 1, Object.defineProperty(uo, "__esModule", { value: true }), uo.toKnownErr = s, uo.isRepo = u, uo.validateRepo = a;
  const r = D(), i = P().is$typed, n = r.validate, o = "com.atproto.sync.listRepos";
  function s(c) {
    return c;
  }
  const e = "repo";
  function u(c) {
    return i(c, o, e);
  }
  function a(c) {
    return n(c, o, e);
  }
  return uo;
}
var co = {}, ub;
function i1() {
  if (ub) return co;
  ub = 1, Object.defineProperty(co, "__esModule", { value: true }), co.toKnownErr = s, co.isRepo = u, co.validateRepo = a;
  const r = D(), i = P().is$typed, n = r.validate, o = "com.atproto.sync.listReposByCollection";
  function s(c) {
    return c;
  }
  const e = "repo";
  function u(c) {
    return i(c, o, e);
  }
  function a(c) {
    return n(c, o, e);
  }
  return co;
}
var Iu = {}, cb;
function n1() {
  if (cb) return Iu;
  cb = 1, Object.defineProperty(Iu, "__esModule", { value: true }), Iu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Iu;
}
var Ku = {}, lb;
function o1() {
  if (lb) return Ku;
  lb = 1, Object.defineProperty(Ku, "__esModule", { value: true }), Ku.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Ku;
}
var nt = {}, db;
function s1() {
  if (db) return nt;
  db = 1, Object.defineProperty(nt, "__esModule", { value: true }), nt.isCommit = e, nt.validateCommit = u, nt.isSync = c, nt.validateSync = l, nt.isIdentity = f, nt.validateIdentity = h, nt.isAccount = b, nt.validateAccount = E, nt.isInfo = x, nt.validateInfo = T, nt.isRepoOp = K, nt.validateRepoOp = j;
  const r = D(), i = P().is$typed, n = r.validate, o = "com.atproto.sync.subscribeRepos", s = "commit";
  function e(O) {
    return i(O, o, s);
  }
  function u(O) {
    return n(O, o, s);
  }
  const a = "sync";
  function c(O) {
    return i(O, o, a);
  }
  function l(O) {
    return n(O, o, a);
  }
  const d = "identity";
  function f(O) {
    return i(O, o, d);
  }
  function h(O) {
    return n(O, o, d);
  }
  const p = "account";
  function b(O) {
    return i(O, o, p);
  }
  function E(O) {
    return n(O, o, p);
  }
  const g = "info";
  function x(O) {
    return i(O, o, g);
  }
  function T(O) {
    return n(O, o, g);
  }
  const A = "repoOp";
  function K(O) {
    return i(O, o, A);
  }
  function j(O) {
    return n(O, o, A);
  }
  return nt;
}
var Ou = {}, pb;
function a1() {
  if (pb) return Ou;
  pb = 1, Object.defineProperty(Ou, "__esModule", { value: true }), Ou.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Ou;
}
var ju = {}, fb;
function u1() {
  if (fb) return ju;
  fb = 1, Object.defineProperty(ju, "__esModule", { value: true }), ju.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return ju;
}
var qu = {}, hb;
function c1() {
  if (hb) return qu;
  hb = 1, Object.defineProperty(qu, "__esModule", { value: true }), qu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return qu;
}
var Mu = {}, yb;
function l1() {
  if (yb) return Mu;
  yb = 1, Object.defineProperty(Mu, "__esModule", { value: true }), Mu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Mu;
}
var ae = {}, mb;
function d1() {
  if (mb) return ae;
  mb = 1, Object.defineProperty(ae, "__esModule", { value: true }), ae.isProfileViewBasic = e, ae.validateProfileViewBasic = u, ae.isProfileView = c, ae.validateProfileView = l, ae.isProfileViewDetailed = f, ae.validateProfileViewDetailed = h, ae.isProfileAssociated = b, ae.validateProfileAssociated = E, ae.isProfileAssociatedChat = x, ae.validateProfileAssociatedChat = T, ae.isViewerState = K, ae.validateViewerState = j, ae.isKnownFollowers = z, ae.validateKnownFollowers = H, ae.isAdultContentPref = F, ae.validateAdultContentPref = C, ae.isContentLabelPref = U, ae.validateContentLabelPref = I, ae.isSavedFeed = Z, ae.validateSavedFeed = se, ae.isSavedFeedsPrefV2 = ve, ae.validateSavedFeedsPrefV2 = be, ae.isSavedFeedsPref = Be, ae.validateSavedFeedsPref = Ue, ae.isPersonalDetailsPref = Me, ae.validatePersonalDetailsPref = dt, ae.isFeedViewPref = Qe, ae.validateFeedViewPref = He, ae.isThreadViewPref = Ve, ae.validateThreadViewPref = kt, ae.isInterestsPref = pt, ae.validateInterestsPref = fe, ae.isMutedWord = Ne, ae.validateMutedWord = Dt, ae.isMutedWordsPref = ft, ae.validateMutedWordsPref = Pe, ae.isHiddenPostsPref = zt, ae.validateHiddenPostsPref = ht, ae.isLabelersPref = Pt, ae.validateLabelersPref = Bt, ae.isLabelerPrefItem = tt, ae.validateLabelerPrefItem = Ut, ae.isBskyAppStatePref = Ie, ae.validateBskyAppStatePref = ze, ae.isBskyAppProgressGuide = It, ae.validateBskyAppProgressGuide = Kt, ae.isNux = ir, ae.validateNux = Ot, ae.isPostInteractionSettingsPref = dr, ae.validatePostInteractionSettingsPref = pr;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.actor.defs", s = "profileViewBasic";
  function e(M) {
    return i(M, o, s);
  }
  function u(M) {
    return n(M, o, s);
  }
  const a = "profileView";
  function c(M) {
    return i(M, o, a);
  }
  function l(M) {
    return n(M, o, a);
  }
  const d = "profileViewDetailed";
  function f(M) {
    return i(M, o, d);
  }
  function h(M) {
    return n(M, o, d);
  }
  const p = "profileAssociated";
  function b(M) {
    return i(M, o, p);
  }
  function E(M) {
    return n(M, o, p);
  }
  const g = "profileAssociatedChat";
  function x(M) {
    return i(M, o, g);
  }
  function T(M) {
    return n(M, o, g);
  }
  const A = "viewerState";
  function K(M) {
    return i(M, o, A);
  }
  function j(M) {
    return n(M, o, A);
  }
  const O = "knownFollowers";
  function z(M) {
    return i(M, o, O);
  }
  function H(M) {
    return n(M, o, O);
  }
  const X = "adultContentPref";
  function F(M) {
    return i(M, o, X);
  }
  function C(M) {
    return n(M, o, X);
  }
  const k = "contentLabelPref";
  function U(M) {
    return i(M, o, k);
  }
  function I(M) {
    return n(M, o, k);
  }
  const N = "savedFeed";
  function Z(M) {
    return i(M, o, N);
  }
  function se(M) {
    return n(M, o, N);
  }
  const le = "savedFeedsPrefV2";
  function ve(M) {
    return i(M, o, le);
  }
  function be(M) {
    return n(M, o, le);
  }
  const _e = "savedFeedsPref";
  function Be(M) {
    return i(M, o, _e);
  }
  function Ue(M) {
    return n(M, o, _e);
  }
  const ke = "personalDetailsPref";
  function Me(M) {
    return i(M, o, ke);
  }
  function dt(M) {
    return n(M, o, ke);
  }
  const De = "feedViewPref";
  function Qe(M) {
    return i(M, o, De);
  }
  function He(M) {
    return n(M, o, De);
  }
  const Q = "threadViewPref";
  function Ve(M) {
    return i(M, o, Q);
  }
  function kt(M) {
    return n(M, o, Q);
  }
  const we = "interestsPref";
  function pt(M) {
    return i(M, o, we);
  }
  function fe(M) {
    return n(M, o, we);
  }
  const Xe = "mutedWord";
  function Ne(M) {
    return i(M, o, Xe);
  }
  function Dt(M) {
    return n(M, o, Xe);
  }
  const Ye = "mutedWordsPref";
  function ft(M) {
    return i(M, o, Ye);
  }
  function Pe(M) {
    return n(M, o, Ye);
  }
  const J = "hiddenPostsPref";
  function zt(M) {
    return i(M, o, J);
  }
  function ht(M) {
    return n(M, o, J);
  }
  const et = "labelersPref";
  function Pt(M) {
    return i(M, o, et);
  }
  function Bt(M) {
    return n(M, o, et);
  }
  const Gt = "labelerPrefItem";
  function tt(M) {
    return i(M, o, Gt);
  }
  function Ut(M) {
    return n(M, o, Gt);
  }
  const rt = "bskyAppStatePref";
  function Ie(M) {
    return i(M, o, rt);
  }
  function ze(M) {
    return n(M, o, rt);
  }
  const Ge = "bskyAppProgressGuide";
  function It(M) {
    return i(M, o, Ge);
  }
  function Kt(M) {
    return n(M, o, Ge);
  }
  const xt = "nux";
  function ir(M) {
    return i(M, o, xt);
  }
  function Ot(M) {
    return n(M, o, xt);
  }
  const yt = "postInteractionSettingsPref";
  function dr(M) {
    return i(M, o, yt);
  }
  function pr(M) {
    return n(M, o, yt);
  }
  return ae;
}
var Vu = {}, bb;
function p1() {
  if (bb) return Vu;
  bb = 1, Object.defineProperty(Vu, "__esModule", { value: true }), Vu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Vu;
}
var Nu = {}, gb;
function f1() {
  if (gb) return Nu;
  gb = 1, Object.defineProperty(Nu, "__esModule", { value: true }), Nu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Nu;
}
var zu = {}, Eb;
function h1() {
  if (Eb) return zu;
  Eb = 1, Object.defineProperty(zu, "__esModule", { value: true }), zu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return zu;
}
var Gu = {}, vb;
function y1() {
  if (vb) return Gu;
  vb = 1, Object.defineProperty(Gu, "__esModule", { value: true }), Gu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Gu;
}
var qo = {}, Rb;
function m1() {
  if (Rb) return qo;
  Rb = 1, Object.defineProperty(qo, "__esModule", { value: true }), qo.isRecord = e, qo.validateRecord = u;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.actor.profile", s = "main";
  function e(a) {
    return i(a, o, s);
  }
  function u(a) {
    return n(a, o, s, true);
  }
  return qo;
}
var Fu = {}, _b;
function b1() {
  if (_b) return Fu;
  _b = 1, Object.defineProperty(Fu, "__esModule", { value: true }), Fu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Fu;
}
var $u = {}, wb;
function g1() {
  if (wb) return $u;
  wb = 1, Object.defineProperty($u, "__esModule", { value: true }), $u.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return $u;
}
var Hu = {}, xb;
function E1() {
  if (xb) return Hu;
  xb = 1, Object.defineProperty(Hu, "__esModule", { value: true }), Hu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Hu;
}
var Mo = {}, Ab;
function v1() {
  if (Ab) return Mo;
  Ab = 1, Object.defineProperty(Mo, "__esModule", { value: true }), Mo.isAspectRatio = e, Mo.validateAspectRatio = u;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.embed.defs", s = "aspectRatio";
  function e(a) {
    return i(a, o, s);
  }
  function u(a) {
    return n(a, o, s);
  }
  return Mo;
}
var Wt = {}, Sb;
function R1() {
  if (Sb) return Wt;
  Sb = 1, Object.defineProperty(Wt, "__esModule", { value: true }), Wt.isMain = e, Wt.validateMain = u, Wt.isExternal = c, Wt.validateExternal = l, Wt.isView = f, Wt.validateView = h, Wt.isViewExternal = b, Wt.validateViewExternal = E;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.embed.external", s = "main";
  function e(g) {
    return i(g, o, s);
  }
  function u(g) {
    return n(g, o, s);
  }
  const a = "external";
  function c(g) {
    return i(g, o, a);
  }
  function l(g) {
    return n(g, o, a);
  }
  const d = "view";
  function f(g) {
    return i(g, o, d);
  }
  function h(g) {
    return n(g, o, d);
  }
  const p = "viewExternal";
  function b(g) {
    return i(g, o, p);
  }
  function E(g) {
    return n(g, o, p);
  }
  return Wt;
}
var Jt = {}, Cb;
function _1() {
  if (Cb) return Jt;
  Cb = 1, Object.defineProperty(Jt, "__esModule", { value: true }), Jt.isMain = e, Jt.validateMain = u, Jt.isImage = c, Jt.validateImage = l, Jt.isView = f, Jt.validateView = h, Jt.isViewImage = b, Jt.validateViewImage = E;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.embed.images", s = "main";
  function e(g) {
    return i(g, o, s);
  }
  function u(g) {
    return n(g, o, s);
  }
  const a = "image";
  function c(g) {
    return i(g, o, a);
  }
  function l(g) {
    return n(g, o, a);
  }
  const d = "view";
  function f(g) {
    return i(g, o, d);
  }
  function h(g) {
    return n(g, o, d);
  }
  const p = "viewImage";
  function b(g) {
    return i(g, o, p);
  }
  function E(g) {
    return n(g, o, p);
  }
  return Jt;
}
var ot = {}, Tb;
function w1() {
  if (Tb) return ot;
  Tb = 1, Object.defineProperty(ot, "__esModule", { value: true }), ot.isMain = e, ot.validateMain = u, ot.isView = c, ot.validateView = l, ot.isViewRecord = f, ot.validateViewRecord = h, ot.isViewNotFound = b, ot.validateViewNotFound = E, ot.isViewBlocked = x, ot.validateViewBlocked = T, ot.isViewDetached = K, ot.validateViewDetached = j;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.embed.record", s = "main";
  function e(O) {
    return i(O, o, s);
  }
  function u(O) {
    return n(O, o, s);
  }
  const a = "view";
  function c(O) {
    return i(O, o, a);
  }
  function l(O) {
    return n(O, o, a);
  }
  const d = "viewRecord";
  function f(O) {
    return i(O, o, d);
  }
  function h(O) {
    return n(O, o, d);
  }
  const p = "viewNotFound";
  function b(O) {
    return i(O, o, p);
  }
  function E(O) {
    return n(O, o, p);
  }
  const g = "viewBlocked";
  function x(O) {
    return i(O, o, g);
  }
  function T(O) {
    return n(O, o, g);
  }
  const A = "viewDetached";
  function K(O) {
    return i(O, o, A);
  }
  function j(O) {
    return n(O, o, A);
  }
  return ot;
}
var Ai = {}, Lb;
function x1() {
  if (Lb) return Ai;
  Lb = 1, Object.defineProperty(Ai, "__esModule", { value: true }), Ai.isMain = e, Ai.validateMain = u, Ai.isView = c, Ai.validateView = l;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.embed.recordWithMedia", s = "main";
  function e(d) {
    return i(d, o, s);
  }
  function u(d) {
    return n(d, o, s);
  }
  const a = "view";
  function c(d) {
    return i(d, o, a);
  }
  function l(d) {
    return n(d, o, a);
  }
  return Ai;
}
var br = {}, kb;
function A1() {
  if (kb) return br;
  kb = 1, Object.defineProperty(br, "__esModule", { value: true }), br.isMain = e, br.validateMain = u, br.isCaption = c, br.validateCaption = l, br.isView = f, br.validateView = h;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.embed.video", s = "main";
  function e(p) {
    return i(p, o, s);
  }
  function u(p) {
    return n(p, o, s);
  }
  const a = "caption";
  function c(p) {
    return i(p, o, a);
  }
  function l(p) {
    return n(p, o, a);
  }
  const d = "view";
  function f(p) {
    return i(p, o, d);
  }
  function h(p) {
    return n(p, o, d);
  }
  return br;
}
var ee = {}, Db;
function S1() {
  if (Db) return ee;
  Db = 1, Object.defineProperty(ee, "__esModule", { value: true }), ee.INTERACTIONSHARE = ee.INTERACTIONQUOTE = ee.INTERACTIONREPLY = ee.INTERACTIONREPOST = ee.INTERACTIONLIKE = ee.INTERACTIONSEEN = ee.CONTENTMODEVIDEO = ee.CONTENTMODEUNSPECIFIED = ee.CLICKTHROUGHEMBED = ee.CLICKTHROUGHREPOSTER = ee.CLICKTHROUGHAUTHOR = ee.CLICKTHROUGHITEM = ee.REQUESTMORE = ee.REQUESTLESS = void 0, ee.isPostView = e, ee.validatePostView = u, ee.isViewerState = c, ee.validateViewerState = l, ee.isThreadContext = f, ee.validateThreadContext = h, ee.isFeedViewPost = b, ee.validateFeedViewPost = E, ee.isReplyRef = x, ee.validateReplyRef = T, ee.isReasonRepost = K, ee.validateReasonRepost = j, ee.isReasonPin = z, ee.validateReasonPin = H, ee.isThreadViewPost = F, ee.validateThreadViewPost = C, ee.isNotFoundPost = U, ee.validateNotFoundPost = I, ee.isBlockedPost = Z, ee.validateBlockedPost = se, ee.isBlockedAuthor = ve, ee.validateBlockedAuthor = be, ee.isGeneratorView = Be, ee.validateGeneratorView = Ue, ee.isGeneratorViewerState = Me, ee.validateGeneratorViewerState = dt, ee.isSkeletonFeedPost = Qe, ee.validateSkeletonFeedPost = He, ee.isSkeletonReasonRepost = Ve, ee.validateSkeletonReasonRepost = kt, ee.isSkeletonReasonPin = pt, ee.validateSkeletonReasonPin = fe, ee.isThreadgateView = Ne, ee.validateThreadgateView = Dt, ee.isInteraction = ft, ee.validateInteraction = Pe;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.feed.defs", s = "postView";
  function e(J) {
    return i(J, o, s);
  }
  function u(J) {
    return n(J, o, s);
  }
  const a = "viewerState";
  function c(J) {
    return i(J, o, a);
  }
  function l(J) {
    return n(J, o, a);
  }
  const d = "threadContext";
  function f(J) {
    return i(J, o, d);
  }
  function h(J) {
    return n(J, o, d);
  }
  const p = "feedViewPost";
  function b(J) {
    return i(J, o, p);
  }
  function E(J) {
    return n(J, o, p);
  }
  const g = "replyRef";
  function x(J) {
    return i(J, o, g);
  }
  function T(J) {
    return n(J, o, g);
  }
  const A = "reasonRepost";
  function K(J) {
    return i(J, o, A);
  }
  function j(J) {
    return n(J, o, A);
  }
  const O = "reasonPin";
  function z(J) {
    return i(J, o, O);
  }
  function H(J) {
    return n(J, o, O);
  }
  const X = "threadViewPost";
  function F(J) {
    return i(J, o, X);
  }
  function C(J) {
    return n(J, o, X);
  }
  const k = "notFoundPost";
  function U(J) {
    return i(J, o, k);
  }
  function I(J) {
    return n(J, o, k);
  }
  const N = "blockedPost";
  function Z(J) {
    return i(J, o, N);
  }
  function se(J) {
    return n(J, o, N);
  }
  const le = "blockedAuthor";
  function ve(J) {
    return i(J, o, le);
  }
  function be(J) {
    return n(J, o, le);
  }
  const _e = "generatorView";
  function Be(J) {
    return i(J, o, _e);
  }
  function Ue(J) {
    return n(J, o, _e);
  }
  const ke = "generatorViewerState";
  function Me(J) {
    return i(J, o, ke);
  }
  function dt(J) {
    return n(J, o, ke);
  }
  const De = "skeletonFeedPost";
  function Qe(J) {
    return i(J, o, De);
  }
  function He(J) {
    return n(J, o, De);
  }
  const Q = "skeletonReasonRepost";
  function Ve(J) {
    return i(J, o, Q);
  }
  function kt(J) {
    return n(J, o, Q);
  }
  const we = "skeletonReasonPin";
  function pt(J) {
    return i(J, o, we);
  }
  function fe(J) {
    return n(J, o, we);
  }
  const Xe = "threadgateView";
  function Ne(J) {
    return i(J, o, Xe);
  }
  function Dt(J) {
    return n(J, o, Xe);
  }
  const Ye = "interaction";
  function ft(J) {
    return i(J, o, Ye);
  }
  function Pe(J) {
    return n(J, o, Ye);
  }
  return ee.REQUESTLESS = `${o}#requestLess`, ee.REQUESTMORE = `${o}#requestMore`, ee.CLICKTHROUGHITEM = `${o}#clickthroughItem`, ee.CLICKTHROUGHAUTHOR = `${o}#clickthroughAuthor`, ee.CLICKTHROUGHREPOSTER = `${o}#clickthroughReposter`, ee.CLICKTHROUGHEMBED = `${o}#clickthroughEmbed`, ee.CONTENTMODEUNSPECIFIED = `${o}#contentModeUnspecified`, ee.CONTENTMODEVIDEO = `${o}#contentModeVideo`, ee.INTERACTIONSEEN = `${o}#interactionSeen`, ee.INTERACTIONLIKE = `${o}#interactionLike`, ee.INTERACTIONREPOST = `${o}#interactionRepost`, ee.INTERACTIONREPLY = `${o}#interactionReply`, ee.INTERACTIONQUOTE = `${o}#interactionQuote`, ee.INTERACTIONSHARE = `${o}#interactionShare`, ee;
}
var Gr = {}, Pb;
function C1() {
  if (Pb) return Gr;
  Pb = 1, Object.defineProperty(Gr, "__esModule", { value: true }), Gr.toKnownErr = s, Gr.isFeed = u, Gr.validateFeed = a, Gr.isLinks = l, Gr.validateLinks = d;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.feed.describeFeedGenerator";
  function s(f) {
    return f;
  }
  const e = "feed";
  function u(f) {
    return i(f, o, e);
  }
  function a(f) {
    return n(f, o, e);
  }
  const c = "links";
  function l(f) {
    return i(f, o, c);
  }
  function d(f) {
    return n(f, o, c);
  }
  return Gr;
}
var Vo = {}, Bb;
function T1() {
  if (Bb) return Vo;
  Bb = 1, Object.defineProperty(Vo, "__esModule", { value: true }), Vo.isRecord = e, Vo.validateRecord = u;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.feed.generator", s = "main";
  function e(a) {
    return i(a, o, s);
  }
  function u(a) {
    return n(a, o, s, true);
  }
  return Vo;
}
var Xu = {}, Ub;
function L1() {
  if (Ub) return Xu;
  Ub = 1, Object.defineProperty(Xu, "__esModule", { value: true }), Xu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Xu;
}
var Wu = {}, Ib;
function k1() {
  if (Ib) return Wu;
  Ib = 1, Object.defineProperty(Wu, "__esModule", { value: true }), Wu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Wu;
}
var Ju = {}, Kb;
function D1() {
  if (Kb) return Ju;
  Kb = 1, Object.defineProperty(Ju, "__esModule", { value: true }), Ju.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Ju;
}
var lo = {}, Ob;
function P1() {
  if (Ob) return lo;
  Ob = 1, Object.defineProperty(lo, "__esModule", { value: true }), lo.toKnownErr = s, lo.isLike = u, lo.validateLike = a;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.feed.getLikes";
  function s(c) {
    return c;
  }
  const e = "like";
  function u(c) {
    return i(c, o, e);
  }
  function a(c) {
    return n(c, o, e);
  }
  return lo;
}
var Zu = {}, jb;
function B1() {
  if (jb) return Zu;
  jb = 1, Object.defineProperty(Zu, "__esModule", { value: true }), Zu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Zu;
}
var Qu = {}, qb;
function U1() {
  if (qb) return Qu;
  qb = 1, Object.defineProperty(Qu, "__esModule", { value: true }), Qu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Qu;
}
var Yu = {}, Mb;
function I1() {
  if (Mb) return Yu;
  Mb = 1, Object.defineProperty(Yu, "__esModule", { value: true }), Yu.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Yu;
}
var ec = {}, Vb;
function K1() {
  if (Vb) return ec;
  Vb = 1, Object.defineProperty(ec, "__esModule", { value: true }), ec.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return ec;
}
var tc = {}, Nb;
function O1() {
  if (Nb) return tc;
  Nb = 1, Object.defineProperty(tc, "__esModule", { value: true }), tc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return tc;
}
var No = {}, zb;
function j1() {
  if (zb) return No;
  zb = 1, Object.defineProperty(No, "__esModule", { value: true }), No.isRecord = e, No.validateRecord = u;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.feed.like", s = "main";
  function e(a) {
    return i(a, o, s);
  }
  function u(a) {
    return n(a, o, s, true);
  }
  return No;
}
var Zt = {}, Gb;
function q1() {
  if (Gb) return Zt;
  Gb = 1, Object.defineProperty(Zt, "__esModule", { value: true }), Zt.isRecord = e, Zt.validateRecord = u, Zt.isReplyRef = c, Zt.validateReplyRef = l, Zt.isEntity = f, Zt.validateEntity = h, Zt.isTextSlice = b, Zt.validateTextSlice = E;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.feed.post", s = "main";
  function e(g) {
    return i(g, o, s);
  }
  function u(g) {
    return n(g, o, s, true);
  }
  const a = "replyRef";
  function c(g) {
    return i(g, o, a);
  }
  function l(g) {
    return n(g, o, a);
  }
  const d = "entity";
  function f(g) {
    return i(g, o, d);
  }
  function h(g) {
    return n(g, o, d);
  }
  const p = "textSlice";
  function b(g) {
    return i(g, o, p);
  }
  function E(g) {
    return n(g, o, p);
  }
  return Zt;
}
var Si = {}, Fb;
function M1() {
  if (Fb) return Si;
  Fb = 1, Object.defineProperty(Si, "__esModule", { value: true }), Si.isRecord = e, Si.validateRecord = u, Si.isDisableRule = c, Si.validateDisableRule = l;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.feed.postgate", s = "main";
  function e(d) {
    return i(d, o, s);
  }
  function u(d) {
    return n(d, o, s, true);
  }
  const a = "disableRule";
  function c(d) {
    return i(d, o, a);
  }
  function l(d) {
    return n(d, o, a);
  }
  return Si;
}
var zo = {}, $b;
function V1() {
  if ($b) return zo;
  $b = 1, Object.defineProperty(zo, "__esModule", { value: true }), zo.isRecord = e, zo.validateRecord = u;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.feed.repost", s = "main";
  function e(a) {
    return i(a, o, s);
  }
  function u(a) {
    return n(a, o, s, true);
  }
  return zo;
}
var rc = {}, Hb;
function N1() {
  if (Hb) return rc;
  Hb = 1, Object.defineProperty(rc, "__esModule", { value: true }), rc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return rc;
}
var Ct = {}, Xb;
function z1() {
  if (Xb) return Ct;
  Xb = 1, Object.defineProperty(Ct, "__esModule", { value: true }), Ct.isRecord = e, Ct.validateRecord = u, Ct.isMentionRule = c, Ct.validateMentionRule = l, Ct.isFollowerRule = f, Ct.validateFollowerRule = h, Ct.isFollowingRule = b, Ct.validateFollowingRule = E, Ct.isListRule = x, Ct.validateListRule = T;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.feed.threadgate", s = "main";
  function e(A) {
    return i(A, o, s);
  }
  function u(A) {
    return n(A, o, s, true);
  }
  const a = "mentionRule";
  function c(A) {
    return i(A, o, a);
  }
  function l(A) {
    return n(A, o, a);
  }
  const d = "followerRule";
  function f(A) {
    return i(A, o, d);
  }
  function h(A) {
    return n(A, o, d);
  }
  const p = "followingRule";
  function b(A) {
    return i(A, o, p);
  }
  function E(A) {
    return n(A, o, p);
  }
  const g = "listRule";
  function x(A) {
    return i(A, o, g);
  }
  function T(A) {
    return n(A, o, g);
  }
  return Ct;
}
var Go = {}, Wb;
function G1() {
  if (Wb) return Go;
  Wb = 1, Object.defineProperty(Go, "__esModule", { value: true }), Go.isRecord = e, Go.validateRecord = u;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.graph.block", s = "main";
  function e(a) {
    return i(a, o, s);
  }
  function u(a) {
    return n(a, o, s, true);
  }
  return Go;
}
var ge = {}, Jb;
function F1() {
  if (Jb) return ge;
  Jb = 1, Object.defineProperty(ge, "__esModule", { value: true }), ge.REFERENCELIST = ge.CURATELIST = ge.MODLIST = void 0, ge.isListViewBasic = e, ge.validateListViewBasic = u, ge.isListView = c, ge.validateListView = l, ge.isListItemView = f, ge.validateListItemView = h, ge.isStarterPackView = b, ge.validateStarterPackView = E, ge.isStarterPackViewBasic = x, ge.validateStarterPackViewBasic = T, ge.isListViewerState = K, ge.validateListViewerState = j, ge.isNotFoundActor = z, ge.validateNotFoundActor = H, ge.isRelationship = F, ge.validateRelationship = C;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.graph.defs", s = "listViewBasic";
  function e(k) {
    return i(k, o, s);
  }
  function u(k) {
    return n(k, o, s);
  }
  const a = "listView";
  function c(k) {
    return i(k, o, a);
  }
  function l(k) {
    return n(k, o, a);
  }
  const d = "listItemView";
  function f(k) {
    return i(k, o, d);
  }
  function h(k) {
    return n(k, o, d);
  }
  const p = "starterPackView";
  function b(k) {
    return i(k, o, p);
  }
  function E(k) {
    return n(k, o, p);
  }
  const g = "starterPackViewBasic";
  function x(k) {
    return i(k, o, g);
  }
  function T(k) {
    return n(k, o, g);
  }
  ge.MODLIST = `${o}#modlist`, ge.CURATELIST = `${o}#curatelist`, ge.REFERENCELIST = `${o}#referencelist`;
  const A = "listViewerState";
  function K(k) {
    return i(k, o, A);
  }
  function j(k) {
    return n(k, o, A);
  }
  const O = "notFoundActor";
  function z(k) {
    return i(k, o, O);
  }
  function H(k) {
    return n(k, o, O);
  }
  const X = "relationship";
  function F(k) {
    return i(k, o, X);
  }
  function C(k) {
    return n(k, o, X);
  }
  return ge;
}
var Fo = {}, Zb;
function $1() {
  if (Zb) return Fo;
  Zb = 1, Object.defineProperty(Fo, "__esModule", { value: true }), Fo.isRecord = e, Fo.validateRecord = u;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.graph.follow", s = "main";
  function e(a) {
    return i(a, o, s);
  }
  function u(a) {
    return n(a, o, s, true);
  }
  return Fo;
}
var ic = {}, Qb;
function H1() {
  if (Qb) return ic;
  Qb = 1, Object.defineProperty(ic, "__esModule", { value: true }), ic.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return ic;
}
var nc = {}, Yb;
function X1() {
  if (Yb) return nc;
  Yb = 1, Object.defineProperty(nc, "__esModule", { value: true }), nc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return nc;
}
var oc = {}, eg;
function W1() {
  if (eg) return oc;
  eg = 1, Object.defineProperty(oc, "__esModule", { value: true }), oc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return oc;
}
var sc = {}, tg;
function J1() {
  if (tg) return sc;
  tg = 1, Object.defineProperty(sc, "__esModule", { value: true }), sc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return sc;
}
var ac = {}, rg;
function Z1() {
  if (rg) return ac;
  rg = 1, Object.defineProperty(ac, "__esModule", { value: true }), ac.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return ac;
}
var uc = {}, ig;
function Q1() {
  if (ig) return uc;
  ig = 1, Object.defineProperty(uc, "__esModule", { value: true }), uc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return uc;
}
var cc = {}, ng;
function Y1() {
  if (ng) return cc;
  ng = 1, Object.defineProperty(cc, "__esModule", { value: true }), cc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return cc;
}
var lc = {}, og;
function eC() {
  if (og) return lc;
  og = 1, Object.defineProperty(lc, "__esModule", { value: true }), lc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return lc;
}
var dc = {}, sg;
function tC() {
  if (sg) return dc;
  sg = 1, Object.defineProperty(dc, "__esModule", { value: true }), dc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return dc;
}
var pc = {}, ag;
function rC() {
  if (ag) return pc;
  ag = 1, Object.defineProperty(pc, "__esModule", { value: true }), pc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return pc;
}
var fc = {}, ug;
function iC() {
  if (ug) return fc;
  ug = 1, Object.defineProperty(fc, "__esModule", { value: true }), fc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return fc;
}
var hc = {}, cg;
function nC() {
  if (cg) return hc;
  cg = 1, Object.defineProperty(hc, "__esModule", { value: true }), hc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return hc;
}
var yc = {}, lg;
function oC() {
  if (lg) return yc;
  lg = 1, Object.defineProperty(yc, "__esModule", { value: true }), yc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return yc;
}
var $o = {}, dg;
function sC() {
  if (dg) return $o;
  dg = 1, Object.defineProperty($o, "__esModule", { value: true }), $o.isRecord = e, $o.validateRecord = u;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.graph.list", s = "main";
  function e(a) {
    return i(a, o, s);
  }
  function u(a) {
    return n(a, o, s, true);
  }
  return $o;
}
var Ho = {}, pg;
function aC() {
  if (pg) return Ho;
  pg = 1, Object.defineProperty(Ho, "__esModule", { value: true }), Ho.isRecord = e, Ho.validateRecord = u;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.graph.listblock", s = "main";
  function e(a) {
    return i(a, o, s);
  }
  function u(a) {
    return n(a, o, s, true);
  }
  return Ho;
}
var Xo = {}, fg;
function uC() {
  if (fg) return Xo;
  fg = 1, Object.defineProperty(Xo, "__esModule", { value: true }), Xo.isRecord = e, Xo.validateRecord = u;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.graph.listitem", s = "main";
  function e(a) {
    return i(a, o, s);
  }
  function u(a) {
    return n(a, o, s, true);
  }
  return Xo;
}
var mc = {}, hg;
function cC() {
  if (hg) return mc;
  hg = 1, Object.defineProperty(mc, "__esModule", { value: true }), mc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return mc;
}
var bc = {}, yg;
function lC() {
  if (yg) return bc;
  yg = 1, Object.defineProperty(bc, "__esModule", { value: true }), bc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return bc;
}
var gc = {}, mg;
function dC() {
  if (mg) return gc;
  mg = 1, Object.defineProperty(gc, "__esModule", { value: true }), gc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return gc;
}
var Ec = {}, bg;
function pC() {
  if (bg) return Ec;
  bg = 1, Object.defineProperty(Ec, "__esModule", { value: true }), Ec.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Ec;
}
var Ci = {}, gg;
function fC() {
  if (gg) return Ci;
  gg = 1, Object.defineProperty(Ci, "__esModule", { value: true }), Ci.isRecord = e, Ci.validateRecord = u, Ci.isFeedItem = c, Ci.validateFeedItem = l;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.graph.starterpack", s = "main";
  function e(d) {
    return i(d, o, s);
  }
  function u(d) {
    return n(d, o, s, true);
  }
  const a = "feedItem";
  function c(d) {
    return i(d, o, a);
  }
  function l(d) {
    return n(d, o, a);
  }
  return Ci;
}
var vc = {}, Eg;
function hC() {
  if (Eg) return vc;
  Eg = 1, Object.defineProperty(vc, "__esModule", { value: true }), vc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return vc;
}
var Rc = {}, vg;
function yC() {
  if (vg) return Rc;
  vg = 1, Object.defineProperty(Rc, "__esModule", { value: true }), Rc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Rc;
}
var _c = {}, Rg;
function mC() {
  if (Rg) return _c;
  Rg = 1, Object.defineProperty(_c, "__esModule", { value: true }), _c.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return _c;
}
var Qt = {}, _g;
function bC() {
  if (_g) return Qt;
  _g = 1, Object.defineProperty(Qt, "__esModule", { value: true }), Qt.isLabelerView = e, Qt.validateLabelerView = u, Qt.isLabelerViewDetailed = c, Qt.validateLabelerViewDetailed = l, Qt.isLabelerViewerState = f, Qt.validateLabelerViewerState = h, Qt.isLabelerPolicies = b, Qt.validateLabelerPolicies = E;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.labeler.defs", s = "labelerView";
  function e(g) {
    return i(g, o, s);
  }
  function u(g) {
    return n(g, o, s);
  }
  const a = "labelerViewDetailed";
  function c(g) {
    return i(g, o, a);
  }
  function l(g) {
    return n(g, o, a);
  }
  const d = "labelerViewerState";
  function f(g) {
    return i(g, o, d);
  }
  function h(g) {
    return n(g, o, d);
  }
  const p = "labelerPolicies";
  function b(g) {
    return i(g, o, p);
  }
  function E(g) {
    return n(g, o, p);
  }
  return Qt;
}
var wc = {}, wg;
function gC() {
  if (wg) return wc;
  wg = 1, Object.defineProperty(wc, "__esModule", { value: true }), wc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return wc;
}
var Wo = {}, xg;
function EC() {
  if (xg) return Wo;
  xg = 1, Object.defineProperty(Wo, "__esModule", { value: true }), Wo.isRecord = e, Wo.validateRecord = u;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.labeler.service", s = "main";
  function e(a) {
    return i(a, o, s);
  }
  function u(a) {
    return n(a, o, s, true);
  }
  return Wo;
}
var xc = {}, Ag;
function vC() {
  if (Ag) return xc;
  Ag = 1, Object.defineProperty(xc, "__esModule", { value: true }), xc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return xc;
}
var po = {}, Sg;
function RC() {
  if (Sg) return po;
  Sg = 1, Object.defineProperty(po, "__esModule", { value: true }), po.toKnownErr = s, po.isNotification = u, po.validateNotification = a;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.notification.listNotifications";
  function s(c) {
    return c;
  }
  const e = "notification";
  function u(c) {
    return i(c, o, e);
  }
  function a(c) {
    return n(c, o, e);
  }
  return po;
}
var Ac = {}, Cg;
function _C() {
  if (Cg) return Ac;
  Cg = 1, Object.defineProperty(Ac, "__esModule", { value: true }), Ac.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Ac;
}
var Sc = {}, Tg;
function wC() {
  if (Tg) return Sc;
  Tg = 1, Object.defineProperty(Sc, "__esModule", { value: true }), Sc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Sc;
}
var Cc = {}, Lg;
function xC() {
  if (Lg) return Cc;
  Lg = 1, Object.defineProperty(Cc, "__esModule", { value: true }), Cc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Cc;
}
var Tt = {}, kg;
function AC() {
  if (kg) return Tt;
  kg = 1, Object.defineProperty(Tt, "__esModule", { value: true }), Tt.isMain = e, Tt.validateMain = u, Tt.isMention = c, Tt.validateMention = l, Tt.isLink = f, Tt.validateLink = h, Tt.isTag = b, Tt.validateTag = E, Tt.isByteSlice = x, Tt.validateByteSlice = T;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.richtext.facet", s = "main";
  function e(A) {
    return i(A, o, s);
  }
  function u(A) {
    return n(A, o, s);
  }
  const a = "mention";
  function c(A) {
    return i(A, o, a);
  }
  function l(A) {
    return n(A, o, a);
  }
  const d = "link";
  function f(A) {
    return i(A, o, d);
  }
  function h(A) {
    return n(A, o, d);
  }
  const p = "tag";
  function b(A) {
    return i(A, o, p);
  }
  function E(A) {
    return n(A, o, p);
  }
  const g = "byteSlice";
  function x(A) {
    return i(A, o, g);
  }
  function T(A) {
    return n(A, o, g);
  }
  return Tt;
}
var Yt = {}, Dg;
function SC() {
  if (Dg) return Yt;
  Dg = 1, Object.defineProperty(Yt, "__esModule", { value: true }), Yt.isSkeletonSearchPost = e, Yt.validateSkeletonSearchPost = u, Yt.isSkeletonSearchActor = c, Yt.validateSkeletonSearchActor = l, Yt.isSkeletonSearchStarterPack = f, Yt.validateSkeletonSearchStarterPack = h, Yt.isTrendingTopic = b, Yt.validateTrendingTopic = E;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.unspecced.defs", s = "skeletonSearchPost";
  function e(g) {
    return i(g, o, s);
  }
  function u(g) {
    return n(g, o, s);
  }
  const a = "skeletonSearchActor";
  function c(g) {
    return i(g, o, a);
  }
  function l(g) {
    return n(g, o, a);
  }
  const d = "skeletonSearchStarterPack";
  function f(g) {
    return i(g, o, d);
  }
  function h(g) {
    return n(g, o, d);
  }
  const p = "trendingTopic";
  function b(g) {
    return i(g, o, p);
  }
  function E(g) {
    return n(g, o, p);
  }
  return Yt;
}
var Tc = {}, Pg;
function CC() {
  if (Pg) return Tc;
  Pg = 1, Object.defineProperty(Tc, "__esModule", { value: true }), Tc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Tc;
}
var Lc = {}, Bg;
function TC() {
  if (Bg) return Lc;
  Bg = 1, Object.defineProperty(Lc, "__esModule", { value: true }), Lc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Lc;
}
var kc = {}, Ug;
function LC() {
  if (Ug) return kc;
  Ug = 1, Object.defineProperty(kc, "__esModule", { value: true }), kc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return kc;
}
var fo = {}, Ig;
function kC() {
  if (Ig) return fo;
  Ig = 1, Object.defineProperty(fo, "__esModule", { value: true }), fo.toKnownErr = s, fo.isSuggestion = u, fo.validateSuggestion = a;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.unspecced.getTaggedSuggestions";
  function s(c) {
    return c;
  }
  const e = "suggestion";
  function u(c) {
    return i(c, o, e);
  }
  function a(c) {
    return n(c, o, e);
  }
  return fo;
}
var Dc = {}, Kg;
function DC() {
  if (Kg) return Dc;
  Kg = 1, Object.defineProperty(Dc, "__esModule", { value: true }), Dc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Dc;
}
var Jo = {}, Og;
function PC() {
  if (Og) return Jo;
  Og = 1, Object.defineProperty(Jo, "__esModule", { value: true }), Jo.isJobStatus = e, Jo.validateJobStatus = u;
  const r = D(), i = P().is$typed, n = r.validate, o = "app.bsky.video.defs", s = "jobStatus";
  function e(a) {
    return i(a, o, s);
  }
  function u(a) {
    return n(a, o, s);
  }
  return Jo;
}
var Pc = {}, jg;
function BC() {
  if (jg) return Pc;
  jg = 1, Object.defineProperty(Pc, "__esModule", { value: true }), Pc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Pc;
}
var Bc = {}, qg;
function UC() {
  if (qg) return Bc;
  qg = 1, Object.defineProperty(Bc, "__esModule", { value: true }), Bc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Bc;
}
var Uc = {}, Mg;
function IC() {
  if (Mg) return Uc;
  Mg = 1, Object.defineProperty(Uc, "__esModule", { value: true }), Uc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Uc;
}
var Zo = {}, Vg;
function KC() {
  if (Vg) return Zo;
  Vg = 1, Object.defineProperty(Zo, "__esModule", { value: true }), Zo.isRecord = e, Zo.validateRecord = u;
  const r = D(), i = P().is$typed, n = r.validate, o = "chat.bsky.actor.declaration", s = "main";
  function e(a) {
    return i(a, o, s);
  }
  function u(a) {
    return n(a, o, s, true);
  }
  return Zo;
}
var Qo = {}, Ng;
function OC() {
  if (Ng) return Qo;
  Ng = 1, Object.defineProperty(Qo, "__esModule", { value: true }), Qo.isProfileViewBasic = e, Qo.validateProfileViewBasic = u;
  const r = D(), i = P().is$typed, n = r.validate, o = "chat.bsky.actor.defs", s = "profileViewBasic";
  function e(a) {
    return i(a, o, s);
  }
  function u(a) {
    return n(a, o, s);
  }
  return Qo;
}
var Ic = {}, zg;
function jC() {
  if (zg) return Ic;
  zg = 1, Object.defineProperty(Ic, "__esModule", { value: true }), Ic.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Ic;
}
var Kc = {}, Gg;
function qC() {
  if (Gg) return Kc;
  Gg = 1, Object.defineProperty(Kc, "__esModule", { value: true }), Kc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Kc;
}
var Oc = {}, Fg;
function MC() {
  if (Fg) return Oc;
  Fg = 1, Object.defineProperty(Oc, "__esModule", { value: true }), Oc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Oc;
}
var he = {}, $g;
function VC() {
  if ($g) return he;
  $g = 1, Object.defineProperty(he, "__esModule", { value: true }), he.isMessageRef = e, he.validateMessageRef = u, he.isMessageInput = c, he.validateMessageInput = l, he.isMessageView = f, he.validateMessageView = h, he.isDeletedMessageView = b, he.validateDeletedMessageView = E, he.isMessageViewSender = x, he.validateMessageViewSender = T, he.isConvoView = K, he.validateConvoView = j, he.isLogBeginConvo = z, he.validateLogBeginConvo = H, he.isLogAcceptConvo = F, he.validateLogAcceptConvo = C, he.isLogLeaveConvo = U, he.validateLogLeaveConvo = I, he.isLogMuteConvo = Z, he.validateLogMuteConvo = se, he.isLogUnmuteConvo = ve, he.validateLogUnmuteConvo = be, he.isLogCreateMessage = Be, he.validateLogCreateMessage = Ue, he.isLogDeleteMessage = Me, he.validateLogDeleteMessage = dt, he.isLogReadMessage = Qe, he.validateLogReadMessage = He;
  const r = D(), i = P().is$typed, n = r.validate, o = "chat.bsky.convo.defs", s = "messageRef";
  function e(Q) {
    return i(Q, o, s);
  }
  function u(Q) {
    return n(Q, o, s);
  }
  const a = "messageInput";
  function c(Q) {
    return i(Q, o, a);
  }
  function l(Q) {
    return n(Q, o, a);
  }
  const d = "messageView";
  function f(Q) {
    return i(Q, o, d);
  }
  function h(Q) {
    return n(Q, o, d);
  }
  const p = "deletedMessageView";
  function b(Q) {
    return i(Q, o, p);
  }
  function E(Q) {
    return n(Q, o, p);
  }
  const g = "messageViewSender";
  function x(Q) {
    return i(Q, o, g);
  }
  function T(Q) {
    return n(Q, o, g);
  }
  const A = "convoView";
  function K(Q) {
    return i(Q, o, A);
  }
  function j(Q) {
    return n(Q, o, A);
  }
  const O = "logBeginConvo";
  function z(Q) {
    return i(Q, o, O);
  }
  function H(Q) {
    return n(Q, o, O);
  }
  const X = "logAcceptConvo";
  function F(Q) {
    return i(Q, o, X);
  }
  function C(Q) {
    return n(Q, o, X);
  }
  const k = "logLeaveConvo";
  function U(Q) {
    return i(Q, o, k);
  }
  function I(Q) {
    return n(Q, o, k);
  }
  const N = "logMuteConvo";
  function Z(Q) {
    return i(Q, o, N);
  }
  function se(Q) {
    return n(Q, o, N);
  }
  const le = "logUnmuteConvo";
  function ve(Q) {
    return i(Q, o, le);
  }
  function be(Q) {
    return n(Q, o, le);
  }
  const _e = "logCreateMessage";
  function Be(Q) {
    return i(Q, o, _e);
  }
  function Ue(Q) {
    return n(Q, o, _e);
  }
  const ke = "logDeleteMessage";
  function Me(Q) {
    return i(Q, o, ke);
  }
  function dt(Q) {
    return n(Q, o, ke);
  }
  const De = "logReadMessage";
  function Qe(Q) {
    return i(Q, o, De);
  }
  function He(Q) {
    return n(Q, o, De);
  }
  return he;
}
var jc = {}, Hg;
function NC() {
  if (Hg) return jc;
  Hg = 1, Object.defineProperty(jc, "__esModule", { value: true }), jc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return jc;
}
var qc = {}, Xg;
function zC() {
  if (Xg) return qc;
  Xg = 1, Object.defineProperty(qc, "__esModule", { value: true }), qc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return qc;
}
var Mc = {}, Wg;
function GC() {
  if (Wg) return Mc;
  Wg = 1, Object.defineProperty(Mc, "__esModule", { value: true }), Mc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Mc;
}
var Vc = {}, Jg;
function FC() {
  if (Jg) return Vc;
  Jg = 1, Object.defineProperty(Vc, "__esModule", { value: true }), Vc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Vc;
}
var Nc = {}, Zg;
function $C() {
  if (Zg) return Nc;
  Zg = 1, Object.defineProperty(Nc, "__esModule", { value: true }), Nc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Nc;
}
var zc = {}, Qg;
function HC() {
  if (Qg) return zc;
  Qg = 1, Object.defineProperty(zc, "__esModule", { value: true }), zc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return zc;
}
var Gc = {}, Yg;
function XC() {
  if (Yg) return Gc;
  Yg = 1, Object.defineProperty(Gc, "__esModule", { value: true }), Gc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Gc;
}
var Fc = {}, eE;
function WC() {
  if (eE) return Fc;
  eE = 1, Object.defineProperty(Fc, "__esModule", { value: true }), Fc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Fc;
}
var $c = {}, tE;
function JC() {
  if (tE) return $c;
  tE = 1, Object.defineProperty($c, "__esModule", { value: true }), $c.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return $c;
}
var Hc = {}, rE;
function ZC() {
  if (rE) return Hc;
  rE = 1, Object.defineProperty(Hc, "__esModule", { value: true }), Hc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Hc;
}
var ho = {}, iE;
function QC() {
  if (iE) return ho;
  iE = 1, Object.defineProperty(ho, "__esModule", { value: true }), ho.toKnownErr = s, ho.isBatchItem = u, ho.validateBatchItem = a;
  const r = D(), i = P().is$typed, n = r.validate, o = "chat.bsky.convo.sendMessageBatch";
  function s(c) {
    return c;
  }
  const e = "batchItem";
  function u(c) {
    return i(c, o, e);
  }
  function a(c) {
    return n(c, o, e);
  }
  return ho;
}
var Xc = {}, nE;
function YC() {
  if (nE) return Xc;
  nE = 1, Object.defineProperty(Xc, "__esModule", { value: true }), Xc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Xc;
}
var Wc = {}, oE;
function eT() {
  if (oE) return Wc;
  oE = 1, Object.defineProperty(Wc, "__esModule", { value: true }), Wc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Wc;
}
var Jc = {}, sE;
function tT() {
  if (sE) return Jc;
  sE = 1, Object.defineProperty(Jc, "__esModule", { value: true }), Jc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Jc;
}
var yo = {}, aE;
function rT() {
  if (aE) return yo;
  aE = 1, Object.defineProperty(yo, "__esModule", { value: true }), yo.toKnownErr = s, yo.isMetadata = u, yo.validateMetadata = a;
  const r = D(), i = P().is$typed, n = r.validate, o = "chat.bsky.moderation.getActorMetadata";
  function s(c) {
    return c;
  }
  const e = "metadata";
  function u(c) {
    return i(c, o, e);
  }
  function a(c) {
    return n(c, o, e);
  }
  return yo;
}
var Zc = {}, uE;
function iT() {
  if (uE) return Zc;
  uE = 1, Object.defineProperty(Zc, "__esModule", { value: true }), Zc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Zc;
}
var Qc = {}, cE;
function nT() {
  if (cE) return Qc;
  cE = 1, Object.defineProperty(Qc, "__esModule", { value: true }), Qc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Qc;
}
var Yo = {}, lE;
function oT() {
  if (lE) return Yo;
  lE = 1, Object.defineProperty(Yo, "__esModule", { value: true }), Yo.isTemplateView = e, Yo.validateTemplateView = u;
  const r = D(), i = P().is$typed, n = r.validate, o = "tools.ozone.communication.defs", s = "templateView";
  function e(a) {
    return i(a, o, s);
  }
  function u(a) {
    return n(a, o, s);
  }
  return Yo;
}
var Yc = {}, dE;
function sT() {
  if (dE) return Yc;
  dE = 1, Object.defineProperty(Yc, "__esModule", { value: true }), Yc.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return Yc;
}
var el = {}, pE;
function aT() {
  if (pE) return el;
  pE = 1, Object.defineProperty(el, "__esModule", { value: true }), el.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return el;
}
var W = {}, fE;
function uT() {
  if (fE) return W;
  fE = 1, Object.defineProperty(W, "__esModule", { value: true }), W.REVIEWNONE = W.REVIEWCLOSED = W.REVIEWESCALATED = W.REVIEWOPEN = void 0, W.isModEventView = e, W.validateModEventView = u, W.isModEventViewDetail = c, W.validateModEventViewDetail = l, W.isSubjectStatusView = f, W.validateSubjectStatusView = h, W.isAccountStats = b, W.validateAccountStats = E, W.isRecordsStats = x, W.validateRecordsStats = T, W.isModEventTakedown = K, W.validateModEventTakedown = j, W.isModEventReverseTakedown = z, W.validateModEventReverseTakedown = H, W.isModEventResolveAppeal = F, W.validateModEventResolveAppeal = C, W.isModEventComment = U, W.validateModEventComment = I, W.isModEventReport = Z, W.validateModEventReport = se, W.isModEventLabel = ve, W.validateModEventLabel = be, W.isModEventPriorityScore = Be, W.validateModEventPriorityScore = Ue, W.isModEventAcknowledge = Me, W.validateModEventAcknowledge = dt, W.isModEventEscalate = Qe, W.validateModEventEscalate = He, W.isModEventMute = Ve, W.validateModEventMute = kt, W.isModEventUnmute = pt, W.validateModEventUnmute = fe, W.isModEventMuteReporter = Ne, W.validateModEventMuteReporter = Dt, W.isModEventUnmuteReporter = ft, W.validateModEventUnmuteReporter = Pe, W.isModEventEmail = zt, W.validateModEventEmail = ht, W.isModEventDivert = Pt, W.validateModEventDivert = Bt, W.isModEventTag = tt, W.validateModEventTag = Ut, W.isAccountEvent = Ie, W.validateAccountEvent = ze, W.isIdentityEvent = It, W.validateIdentityEvent = Kt, W.isRecordEvent = ir, W.validateRecordEvent = Ot, W.isRepoView = dr, W.validateRepoView = pr, W.isRepoViewDetail = un, W.validateRepoViewDetail = si, W.isRepoViewNotFound = cn, W.validateRepoViewNotFound = ln, W.isRecordView = dn, W.validateRecordView = pn, W.isRecordViewDetail = fn, W.validateRecordViewDetail = hn, W.isRecordViewNotFound = yn, W.validateRecordViewNotFound = mn, W.isModeration = bn, W.validateModeration = gn, W.isModerationDetail = En, W.validateModerationDetail = vn, W.isBlobView = Rn, W.validateBlobView = _n, W.isImageDetails = wn, W.validateImageDetails = xn, W.isVideoDetails = Y, W.validateVideoDetails = m, W.isAccountHosting = V, W.validateAccountHosting = ne, W.isRecordHosting = sd, W.validateRecordHosting = ad, W.isReporterStats = ud, W.validateReporterStats = cd;
  const r = D(), i = P().is$typed, n = r.validate, o = "tools.ozone.moderation.defs", s = "modEventView";
  function e(_) {
    return i(_, o, s);
  }
  function u(_) {
    return n(_, o, s);
  }
  const a = "modEventViewDetail";
  function c(_) {
    return i(_, o, a);
  }
  function l(_) {
    return n(_, o, a);
  }
  const d = "subjectStatusView";
  function f(_) {
    return i(_, o, d);
  }
  function h(_) {
    return n(_, o, d);
  }
  const p = "accountStats";
  function b(_) {
    return i(_, o, p);
  }
  function E(_) {
    return n(_, o, p);
  }
  const g = "recordsStats";
  function x(_) {
    return i(_, o, g);
  }
  function T(_) {
    return n(_, o, g);
  }
  W.REVIEWOPEN = `${o}#reviewOpen`, W.REVIEWESCALATED = `${o}#reviewEscalated`, W.REVIEWCLOSED = `${o}#reviewClosed`, W.REVIEWNONE = `${o}#reviewNone`;
  const A = "modEventTakedown";
  function K(_) {
    return i(_, o, A);
  }
  function j(_) {
    return n(_, o, A);
  }
  const O = "modEventReverseTakedown";
  function z(_) {
    return i(_, o, O);
  }
  function H(_) {
    return n(_, o, O);
  }
  const X = "modEventResolveAppeal";
  function F(_) {
    return i(_, o, X);
  }
  function C(_) {
    return n(_, o, X);
  }
  const k = "modEventComment";
  function U(_) {
    return i(_, o, k);
  }
  function I(_) {
    return n(_, o, k);
  }
  const N = "modEventReport";
  function Z(_) {
    return i(_, o, N);
  }
  function se(_) {
    return n(_, o, N);
  }
  const le = "modEventLabel";
  function ve(_) {
    return i(_, o, le);
  }
  function be(_) {
    return n(_, o, le);
  }
  const _e = "modEventPriorityScore";
  function Be(_) {
    return i(_, o, _e);
  }
  function Ue(_) {
    return n(_, o, _e);
  }
  const ke = "modEventAcknowledge";
  function Me(_) {
    return i(_, o, ke);
  }
  function dt(_) {
    return n(_, o, ke);
  }
  const De = "modEventEscalate";
  function Qe(_) {
    return i(_, o, De);
  }
  function He(_) {
    return n(_, o, De);
  }
  const Q = "modEventMute";
  function Ve(_) {
    return i(_, o, Q);
  }
  function kt(_) {
    return n(_, o, Q);
  }
  const we = "modEventUnmute";
  function pt(_) {
    return i(_, o, we);
  }
  function fe(_) {
    return n(_, o, we);
  }
  const Xe = "modEventMuteReporter";
  function Ne(_) {
    return i(_, o, Xe);
  }
  function Dt(_) {
    return n(_, o, Xe);
  }
  const Ye = "modEventUnmuteReporter";
  function ft(_) {
    return i(_, o, Ye);
  }
  function Pe(_) {
    return n(_, o, Ye);
  }
  const J = "modEventEmail";
  function zt(_) {
    return i(_, o, J);
  }
  function ht(_) {
    return n(_, o, J);
  }
  const et = "modEventDivert";
  function Pt(_) {
    return i(_, o, et);
  }
  function Bt(_) {
    return n(_, o, et);
  }
  const Gt = "modEventTag";
  function tt(_) {
    return i(_, o, Gt);
  }
  function Ut(_) {
    return n(_, o, Gt);
  }
  const rt = "accountEvent";
  function Ie(_) {
    return i(_, o, rt);
  }
  function ze(_) {
    return n(_, o, rt);
  }
  const Ge = "identityEvent";
  function It(_) {
    return i(_, o, Ge);
  }
  function Kt(_) {
    return n(_, o, Ge);
  }
  const xt = "recordEvent";
  function ir(_) {
    return i(_, o, xt);
  }
  function Ot(_) {
    return n(_, o, xt);
  }
  const yt = "repoView";
  function dr(_) {
    return i(_, o, yt);
  }
  function pr(_) {
    return n(_, o, yt);
  }
  const M = "repoViewDetail";
  function un(_) {
    return i(_, o, M);
  }
  function si(_) {
    return n(_, o, M);
  }
  const Dr = "repoViewNotFound";
  function cn(_) {
    return i(_, o, Dr);
  }
  function ln(_) {
    return n(_, o, Dr);
  }
  const Pr = "recordView";
  function dn(_) {
    return i(_, o, Pr);
  }
  function pn(_) {
    return n(_, o, Pr);
  }
  const ai = "recordViewDetail";
  function fn(_) {
    return i(_, o, ai);
  }
  function hn(_) {
    return n(_, o, ai);
  }
  const ui = "recordViewNotFound";
  function yn(_) {
    return i(_, o, ui);
  }
  function mn(_) {
    return n(_, o, ui);
  }
  const ci = "moderation";
  function bn(_) {
    return i(_, o, ci);
  }
  function gn(_) {
    return n(_, o, ci);
  }
  const li = "moderationDetail";
  function En(_) {
    return i(_, o, li);
  }
  function vn(_) {
    return n(_, o, li);
  }
  const di = "blobView";
  function Rn(_) {
    return i(_, o, di);
  }
  function _n(_) {
    return n(_, o, di);
  }
  const pi = "imageDetails";
  function wn(_) {
    return i(_, o, pi);
  }
  function xn(_) {
    return n(_, o, pi);
  }
  const fi = "videoDetails";
  function Y(_) {
    return i(_, o, fi);
  }
  function m(_) {
    return n(_, o, fi);
  }
  const R = "accountHosting";
  function V(_) {
    return i(_, o, R);
  }
  function ne(_) {
    return n(_, o, R);
  }
  const Te = "recordHosting";
  function sd(_) {
    return i(_, o, Te);
  }
  function ad(_) {
    return n(_, o, Te);
  }
  const za = "reporterStats";
  function ud(_) {
    return i(_, o, za);
  }
  function cd(_) {
    return n(_, o, za);
  }
  return W;
}
var tl = {}, hE;
function cT() {
  if (hE) return tl;
  hE = 1, Object.defineProperty(tl, "__esModule", { value: true }), tl.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return tl;
}
var rl = {}, yE;
function lT() {
  if (yE) return rl;
  yE = 1, Object.defineProperty(rl, "__esModule", { value: true }), rl.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return rl;
}
var il = {}, mE;
function dT() {
  if (mE) return il;
  mE = 1, Object.defineProperty(il, "__esModule", { value: true }), il.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return il;
}
var nl = {}, bE;
function pT() {
  if (bE) return nl;
  bE = 1, Object.defineProperty(nl, "__esModule", { value: true }), nl.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return nl;
}
var ol = {}, gE;
function fT() {
  if (gE) return ol;
  gE = 1, Object.defineProperty(ol, "__esModule", { value: true }), ol.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return ol;
}
var sl = {}, EE;
function hT() {
  if (EE) return sl;
  EE = 1, Object.defineProperty(sl, "__esModule", { value: true }), sl.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return sl;
}
var al = {}, vE;
function yT() {
  if (vE) return al;
  vE = 1, Object.defineProperty(al, "__esModule", { value: true }), al.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return al;
}
var Fr = {}, RE;
function mT() {
  if (RE) return Fr;
  RE = 1, Object.defineProperty(Fr, "__esModule", { value: true }), Fr.toKnownErr = s, Fr.isServiceConfig = u, Fr.validateServiceConfig = a, Fr.isViewerConfig = l, Fr.validateViewerConfig = d;
  const r = D(), i = P().is$typed, n = r.validate, o = "tools.ozone.server.getConfig";
  function s(f) {
    return f;
  }
  const e = "serviceConfig";
  function u(f) {
    return i(f, o, e);
  }
  function a(f) {
    return n(f, o, e);
  }
  const c = "viewerConfig";
  function l(f) {
    return i(f, o, c);
  }
  function d(f) {
    return n(f, o, c);
  }
  return Fr;
}
var ul = {}, _E;
function bT() {
  if (_E) return ul;
  _E = 1, Object.defineProperty(ul, "__esModule", { value: true }), ul.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return ul;
}
var Ti = {}, wE;
function gT() {
  if (wE) return Ti;
  wE = 1, Object.defineProperty(Ti, "__esModule", { value: true }), Ti.isSet = e, Ti.validateSet = u, Ti.isSetView = c, Ti.validateSetView = l;
  const r = D(), i = P().is$typed, n = r.validate, o = "tools.ozone.set.defs", s = "set";
  function e(d) {
    return i(d, o, s);
  }
  function u(d) {
    return n(d, o, s);
  }
  const a = "setView";
  function c(d) {
    return i(d, o, a);
  }
  function l(d) {
    return n(d, o, a);
  }
  return Ti;
}
var cl = {}, xE;
function ET() {
  if (xE) return cl;
  xE = 1, Object.defineProperty(cl, "__esModule", { value: true }), cl.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return cl;
}
var ll = {}, AE;
function vT() {
  if (AE) return ll;
  AE = 1, Object.defineProperty(ll, "__esModule", { value: true }), ll.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return ll;
}
var es = {}, SE;
function RT() {
  if (SE) return es;
  SE = 1, Object.defineProperty(es, "__esModule", { value: true }), es.isOption = e, es.validateOption = u;
  const r = D(), i = P().is$typed, n = r.validate, o = "tools.ozone.setting.defs", s = "option";
  function e(a) {
    return i(a, o, s);
  }
  function u(a) {
    return n(a, o, s);
  }
  return es;
}
var dl = {}, CE;
function _T() {
  if (CE) return dl;
  CE = 1, Object.defineProperty(dl, "__esModule", { value: true }), dl.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return dl;
}
var pl = {}, TE;
function wT() {
  if (TE) return pl;
  TE = 1, Object.defineProperty(pl, "__esModule", { value: true }), pl.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return pl;
}
var fl = {}, LE;
function xT() {
  if (LE) return fl;
  LE = 1, Object.defineProperty(fl, "__esModule", { value: true }), fl.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return fl;
}
var ts = {}, kE;
function AT() {
  if (kE) return ts;
  kE = 1, Object.defineProperty(ts, "__esModule", { value: true }), ts.isSigDetail = e, ts.validateSigDetail = u;
  const r = D(), i = P().is$typed, n = r.validate, o = "tools.ozone.signature.defs", s = "sigDetail";
  function e(a) {
    return i(a, o, s);
  }
  function u(a) {
    return n(a, o, s);
  }
  return ts;
}
var hl = {}, DE;
function ST() {
  if (DE) return hl;
  DE = 1, Object.defineProperty(hl, "__esModule", { value: true }), hl.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return hl;
}
var mo = {}, PE;
function CT() {
  if (PE) return mo;
  PE = 1, Object.defineProperty(mo, "__esModule", { value: true }), mo.toKnownErr = s, mo.isRelatedAccount = u, mo.validateRelatedAccount = a;
  const r = D(), i = P().is$typed, n = r.validate, o = "tools.ozone.signature.findRelatedAccounts";
  function s(c) {
    return c;
  }
  const e = "relatedAccount";
  function u(c) {
    return i(c, o, e);
  }
  function a(c) {
    return n(c, o, e);
  }
  return mo;
}
var yl = {}, BE;
function TT() {
  if (BE) return yl;
  BE = 1, Object.defineProperty(yl, "__esModule", { value: true }), yl.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return yl;
}
var er = {}, UE;
function LT() {
  if (UE) return er;
  UE = 1, Object.defineProperty(er, "__esModule", { value: true }), er.ROLETRIAGE = er.ROLEMODERATOR = er.ROLEADMIN = void 0, er.isMember = e, er.validateMember = u;
  const r = D(), i = P().is$typed, n = r.validate, o = "tools.ozone.team.defs", s = "member";
  function e(a) {
    return i(a, o, s);
  }
  function u(a) {
    return n(a, o, s);
  }
  return er.ROLEADMIN = `${o}#roleAdmin`, er.ROLEMODERATOR = `${o}#roleModerator`, er.ROLETRIAGE = `${o}#roleTriage`, er;
}
var ml = {}, IE;
function kT() {
  if (IE) return ml;
  IE = 1, Object.defineProperty(ml, "__esModule", { value: true }), ml.toKnownErr = i;
  const r = D();
  P().is$typed, r.validate;
  function i(n) {
    return n;
  }
  return ml;
}
var KE;
function ii() {
  if (KE) return v;
  KE = 1;
  var r = v && v.__createBinding || (Object.create ? function(Y, m, R, V) {
    V === void 0 && (V = R);
    var ne = Object.getOwnPropertyDescriptor(m, R);
    (!ne || ("get" in ne ? !m.__esModule : ne.writable || ne.configurable)) && (ne = { enumerable: true, get: function() {
      return m[R];
    } }), Object.defineProperty(Y, V, ne);
  } : function(Y, m, R, V) {
    V === void 0 && (V = R), Y[V] = m[R];
  }), t = v && v.__setModuleDefault || (Object.create ? function(Y, m) {
    Object.defineProperty(Y, "default", { enumerable: true, value: m });
  } : function(Y, m) {
    Y.default = m;
  }), i = v && v.__importStar || function(Y) {
    if (Y && Y.__esModule) return Y;
    var m = {};
    if (Y != null) for (var R in Y) R !== "default" && Object.prototype.hasOwnProperty.call(Y, R) && r(m, Y, R);
    return t(m, Y), m;
  };
  Object.defineProperty(v, "__esModule", { value: true }), v.ComAtprotoServerCreateInviteCodes = v.ComAtprotoServerCreateInviteCode = v.ComAtprotoServerCreateAppPassword = v.ComAtprotoServerCreateAccount = v.ComAtprotoServerConfirmEmail = v.ComAtprotoServerCheckAccountStatus = v.ComAtprotoServerActivateAccount = v.ComAtprotoRepoUploadBlob = v.ComAtprotoRepoStrongRef = v.ComAtprotoRepoPutRecord = v.ComAtprotoRepoListRecords = v.ComAtprotoRepoListMissingBlobs = v.ComAtprotoRepoImportRepo = v.ComAtprotoRepoGetRecord = v.ComAtprotoRepoDescribeRepo = v.ComAtprotoRepoDeleteRecord = v.ComAtprotoRepoDefs = v.ComAtprotoRepoCreateRecord = v.ComAtprotoRepoApplyWrites = v.ComAtprotoModerationDefs = v.ComAtprotoModerationCreateReport = v.ComAtprotoLexiconSchema = v.ComAtprotoLabelSubscribeLabels = v.ComAtprotoLabelQueryLabels = v.ComAtprotoLabelDefs = v.ComAtprotoIdentityUpdateHandle = v.ComAtprotoIdentitySubmitPlcOperation = v.ComAtprotoIdentitySignPlcOperation = v.ComAtprotoIdentityResolveIdentity = v.ComAtprotoIdentityResolveHandle = v.ComAtprotoIdentityResolveDid = v.ComAtprotoIdentityRequestPlcOperationSignature = v.ComAtprotoIdentityRefreshIdentity = v.ComAtprotoIdentityGetRecommendedDidCredentials = v.ComAtprotoIdentityDefs = v.ComAtprotoAdminUpdateSubjectStatus = v.ComAtprotoAdminUpdateAccountPassword = v.ComAtprotoAdminUpdateAccountHandle = v.ComAtprotoAdminUpdateAccountEmail = v.ComAtprotoAdminSendEmail = v.ComAtprotoAdminSearchAccounts = v.ComAtprotoAdminGetSubjectStatus = v.ComAtprotoAdminGetInviteCodes = v.ComAtprotoAdminGetAccountInfos = v.ComAtprotoAdminGetAccountInfo = v.ComAtprotoAdminEnableAccountInvites = v.ComAtprotoAdminDisableInviteCodes = v.ComAtprotoAdminDisableAccountInvites = v.ComAtprotoAdminDeleteAccount = v.ComAtprotoAdminDefs = void 0, v.AppBskyEmbedRecord = v.AppBskyEmbedImages = v.AppBskyEmbedExternal = v.AppBskyEmbedDefs = v.AppBskyActorSearchActorsTypeahead = v.AppBskyActorSearchActors = v.AppBskyActorPutPreferences = v.AppBskyActorProfile = v.AppBskyActorGetSuggestions = v.AppBskyActorGetProfiles = v.AppBskyActorGetProfile = v.AppBskyActorGetPreferences = v.AppBskyActorDefs = v.ComAtprotoTempRequestPhoneVerification = v.ComAtprotoTempFetchLabels = v.ComAtprotoTempCheckSignupQueue = v.ComAtprotoTempAddReservedHandle = v.ComAtprotoSyncSubscribeRepos = v.ComAtprotoSyncRequestCrawl = v.ComAtprotoSyncNotifyOfUpdate = v.ComAtprotoSyncListReposByCollection = v.ComAtprotoSyncListRepos = v.ComAtprotoSyncListBlobs = v.ComAtprotoSyncGetRepoStatus = v.ComAtprotoSyncGetRepo = v.ComAtprotoSyncGetRecord = v.ComAtprotoSyncGetLatestCommit = v.ComAtprotoSyncGetHead = v.ComAtprotoSyncGetCheckout = v.ComAtprotoSyncGetBlocks = v.ComAtprotoSyncGetBlob = v.ComAtprotoServerUpdateEmail = v.ComAtprotoServerRevokeAppPassword = v.ComAtprotoServerResetPassword = v.ComAtprotoServerReserveSigningKey = v.ComAtprotoServerRequestPasswordReset = v.ComAtprotoServerRequestEmailUpdate = v.ComAtprotoServerRequestEmailConfirmation = v.ComAtprotoServerRequestAccountDelete = v.ComAtprotoServerRefreshSession = v.ComAtprotoServerListAppPasswords = v.ComAtprotoServerGetSession = v.ComAtprotoServerGetServiceAuth = v.ComAtprotoServerGetAccountInviteCodes = v.ComAtprotoServerDescribeServer = v.ComAtprotoServerDeleteSession = v.ComAtprotoServerDeleteAccount = v.ComAtprotoServerDefs = v.ComAtprotoServerDeactivateAccount = v.ComAtprotoServerCreateSession = void 0, v.AppBskyGraphMuteThread = v.AppBskyGraphMuteActorList = v.AppBskyGraphMuteActor = v.AppBskyGraphListitem = v.AppBskyGraphListblock = v.AppBskyGraphList = v.AppBskyGraphGetSuggestedFollowsByActor = v.AppBskyGraphGetStarterPacks = v.AppBskyGraphGetStarterPack = v.AppBskyGraphGetRelationships = v.AppBskyGraphGetMutes = v.AppBskyGraphGetLists = v.AppBskyGraphGetListMutes = v.AppBskyGraphGetListBlocks = v.AppBskyGraphGetList = v.AppBskyGraphGetKnownFollowers = v.AppBskyGraphGetFollows = v.AppBskyGraphGetFollowers = v.AppBskyGraphGetBlocks = v.AppBskyGraphGetActorStarterPacks = v.AppBskyGraphFollow = v.AppBskyGraphDefs = v.AppBskyGraphBlock = v.AppBskyFeedThreadgate = v.AppBskyFeedSendInteractions = v.AppBskyFeedSearchPosts = v.AppBskyFeedRepost = v.AppBskyFeedPostgate = v.AppBskyFeedPost = v.AppBskyFeedLike = v.AppBskyFeedGetTimeline = v.AppBskyFeedGetSuggestedFeeds = v.AppBskyFeedGetRepostedBy = v.AppBskyFeedGetQuotes = v.AppBskyFeedGetPosts = v.AppBskyFeedGetPostThread = v.AppBskyFeedGetListFeed = v.AppBskyFeedGetLikes = v.AppBskyFeedGetFeedSkeleton = v.AppBskyFeedGetFeedGenerators = v.AppBskyFeedGetFeedGenerator = v.AppBskyFeedGetFeed = v.AppBskyFeedGetAuthorFeed = v.AppBskyFeedGetActorLikes = v.AppBskyFeedGetActorFeeds = v.AppBskyFeedGenerator = v.AppBskyFeedDescribeFeedGenerator = v.AppBskyFeedDefs = v.AppBskyEmbedVideo = v.AppBskyEmbedRecordWithMedia = void 0, v.ChatBskyModerationUpdateActorAccess = v.ChatBskyModerationGetMessageContext = v.ChatBskyModerationGetActorMetadata = v.ChatBskyConvoUpdateRead = v.ChatBskyConvoUpdateAllRead = v.ChatBskyConvoUnmuteConvo = v.ChatBskyConvoSendMessageBatch = v.ChatBskyConvoSendMessage = v.ChatBskyConvoMuteConvo = v.ChatBskyConvoListConvos = v.ChatBskyConvoLeaveConvo = v.ChatBskyConvoGetMessages = v.ChatBskyConvoGetLog = v.ChatBskyConvoGetConvoForMembers = v.ChatBskyConvoGetConvoAvailability = v.ChatBskyConvoGetConvo = v.ChatBskyConvoDeleteMessageForSelf = v.ChatBskyConvoDefs = v.ChatBskyConvoAcceptConvo = v.ChatBskyActorExportAccountData = v.ChatBskyActorDeleteAccount = v.ChatBskyActorDefs = v.ChatBskyActorDeclaration = v.AppBskyVideoUploadVideo = v.AppBskyVideoGetUploadLimits = v.AppBskyVideoGetJobStatus = v.AppBskyVideoDefs = v.AppBskyUnspeccedSearchStarterPacksSkeleton = v.AppBskyUnspeccedSearchPostsSkeleton = v.AppBskyUnspeccedSearchActorsSkeleton = v.AppBskyUnspeccedGetTrendingTopics = v.AppBskyUnspeccedGetTaggedSuggestions = v.AppBskyUnspeccedGetSuggestionsSkeleton = v.AppBskyUnspeccedGetPopularFeedGenerators = v.AppBskyUnspeccedGetConfig = v.AppBskyUnspeccedDefs = v.AppBskyRichtextFacet = v.AppBskyNotificationUpdateSeen = v.AppBskyNotificationRegisterPush = v.AppBskyNotificationPutPreferences = v.AppBskyNotificationListNotifications = v.AppBskyNotificationGetUnreadCount = v.AppBskyLabelerService = v.AppBskyLabelerGetServices = v.AppBskyLabelerDefs = v.AppBskyGraphUnmuteThread = v.AppBskyGraphUnmuteActorList = v.AppBskyGraphUnmuteActor = v.AppBskyGraphStarterpack = v.AppBskyGraphSearchStarterPacks = void 0, v.SchemaRecord = v.ComAtprotoLexiconNS = v.ComAtprotoLabelNS = v.ComAtprotoIdentityNS = v.ComAtprotoAdminNS = v.ComAtprotoNS = v.ComNS = v.AtpBaseClient = v.TOOLS_OZONE_TEAM = v.TOOLS_OZONE_MODERATION = v.APP_BSKY_GRAPH = v.APP_BSKY_FEED = v.COM_ATPROTO_MODERATION = v.ToolsOzoneTeamUpdateMember = v.ToolsOzoneTeamListMembers = v.ToolsOzoneTeamDeleteMember = v.ToolsOzoneTeamDefs = v.ToolsOzoneTeamAddMember = v.ToolsOzoneSignatureSearchAccounts = v.ToolsOzoneSignatureFindRelatedAccounts = v.ToolsOzoneSignatureFindCorrelation = v.ToolsOzoneSignatureDefs = v.ToolsOzoneSettingUpsertOption = v.ToolsOzoneSettingRemoveOptions = v.ToolsOzoneSettingListOptions = v.ToolsOzoneSettingDefs = v.ToolsOzoneSetUpsertSet = v.ToolsOzoneSetQuerySets = v.ToolsOzoneSetGetValues = v.ToolsOzoneSetDeleteValues = v.ToolsOzoneSetDeleteSet = v.ToolsOzoneSetDefs = v.ToolsOzoneSetAddValues = v.ToolsOzoneServerGetConfig = v.ToolsOzoneModerationSearchRepos = v.ToolsOzoneModerationQueryStatuses = v.ToolsOzoneModerationQueryEvents = v.ToolsOzoneModerationGetRepos = v.ToolsOzoneModerationGetReporterStats = v.ToolsOzoneModerationGetRepo = v.ToolsOzoneModerationGetRecords = v.ToolsOzoneModerationGetRecord = v.ToolsOzoneModerationGetEvent = v.ToolsOzoneModerationEmitEvent = v.ToolsOzoneModerationDefs = v.ToolsOzoneCommunicationUpdateTemplate = v.ToolsOzoneCommunicationListTemplates = v.ToolsOzoneCommunicationDeleteTemplate = v.ToolsOzoneCommunicationDefs = v.ToolsOzoneCommunicationCreateTemplate = void 0, v.ToolsOzoneTeamNS = v.ToolsOzoneSignatureNS = v.ToolsOzoneSettingNS = v.ToolsOzoneSetNS = v.ToolsOzoneServerNS = v.ToolsOzoneModerationNS = v.ToolsOzoneCommunicationNS = v.ToolsOzoneNS = v.ToolsNS = v.ChatBskyModerationNS = v.ChatBskyConvoNS = v.DeclarationRecord = v.ChatBskyActorNS = v.ChatBskyNS = v.ChatNS = v.AppBskyVideoNS = v.AppBskyUnspeccedNS = v.AppBskyRichtextNS = v.AppBskyNotificationNS = v.ServiceRecord = v.AppBskyLabelerNS = v.StarterpackRecord = v.ListitemRecord = v.ListblockRecord = v.ListRecord = v.FollowRecord = v.BlockRecord = v.AppBskyGraphNS = v.ThreadgateRecord = v.RepostRecord = v.PostgateRecord = v.PostRecord = v.LikeRecord = v.GeneratorRecord = v.AppBskyFeedNS = v.AppBskyEmbedNS = v.ProfileRecord = v.AppBskyActorNS = v.AppBskyNS = v.AppNS = v.ComAtprotoTempNS = v.ComAtprotoSyncNS = v.ComAtprotoServerNS = v.ComAtprotoRepoNS = v.ComAtprotoModerationNS = void 0;
  const n = ue(), o = D(), s = i(vh()), e = i(_h()), u = i(xh()), a = i(Sh()), c = i(Th()), l = i(kh()), d = i(Ph()), f = i(Uh()), h = i(Kh()), p = i(jh()), b = i(Mh()), E = i(Nh()), g = i(Gh()), x = i($h()), T = i(Xh()), A = i(Jh()), K = i(Qh()), j = i(ey()), O = i(ry()), z = i(ny()), H = i(sy()), X = i(uy()), F = i(ly()), C = i(py()), k = i(hy()), U = i(my()), I = i(gy()), N = i(vy()), Z = i(_y()), se = i(xy()), le = i(Sy()), ve = i(Ty()), be = i(ky()), _e = i(Py()), Be = i(Uy()), Ue = i(Ky()), ke = i(jy()), Me = i(My()), dt = i(Ny()), De = i(Gy()), Qe = i($y()), He = i(Xy()), Q = i(Jy()), Ve = i(Qy()), kt = i(em()), we = i(rm()), pt = i(nm()), fe = i(sm()), Xe = i(um()), Ne = i(lm());
  v.ComAtprotoAdminDefs = i(sS()), v.ComAtprotoAdminDeleteAccount = i(aS()), v.ComAtprotoAdminDisableAccountInvites = i(uS()), v.ComAtprotoAdminDisableInviteCodes = i(cS()), v.ComAtprotoAdminEnableAccountInvites = i(lS()), v.ComAtprotoAdminGetAccountInfo = i(dS()), v.ComAtprotoAdminGetAccountInfos = i(pS()), v.ComAtprotoAdminGetInviteCodes = i(fS()), v.ComAtprotoAdminGetSubjectStatus = i(hS()), v.ComAtprotoAdminSearchAccounts = i(yS()), v.ComAtprotoAdminSendEmail = i(mS()), v.ComAtprotoAdminUpdateAccountEmail = i(bS()), v.ComAtprotoAdminUpdateAccountHandle = i(gS()), v.ComAtprotoAdminUpdateAccountPassword = i(ES()), v.ComAtprotoAdminUpdateSubjectStatus = i(vS()), v.ComAtprotoIdentityDefs = i(RS()), v.ComAtprotoIdentityGetRecommendedDidCredentials = i(_S()), v.ComAtprotoIdentityRefreshIdentity = i(vh()), v.ComAtprotoIdentityRequestPlcOperationSignature = i(wS()), v.ComAtprotoIdentityResolveDid = i(_h()), v.ComAtprotoIdentityResolveHandle = i(xh()), v.ComAtprotoIdentityResolveIdentity = i(Sh()), v.ComAtprotoIdentitySignPlcOperation = i(xS()), v.ComAtprotoIdentitySubmitPlcOperation = i(AS()), v.ComAtprotoIdentityUpdateHandle = i(SS()), v.ComAtprotoLabelDefs = i(CS()), v.ComAtprotoLabelQueryLabels = i(TS()), v.ComAtprotoLabelSubscribeLabels = i(LS()), v.ComAtprotoLexiconSchema = i(kS()), v.ComAtprotoModerationCreateReport = i(DS()), v.ComAtprotoModerationDefs = i(PS()), v.ComAtprotoRepoApplyWrites = i(Th()), v.ComAtprotoRepoCreateRecord = i(kh()), v.ComAtprotoRepoDefs = i(BS()), v.ComAtprotoRepoDeleteRecord = i(Ph()), v.ComAtprotoRepoDescribeRepo = i(US()), v.ComAtprotoRepoGetRecord = i(Uh()), v.ComAtprotoRepoImportRepo = i(IS()), v.ComAtprotoRepoListMissingBlobs = i(KS()), v.ComAtprotoRepoListRecords = i(OS()), v.ComAtprotoRepoPutRecord = i(Kh()), v.ComAtprotoRepoStrongRef = i(jS()), v.ComAtprotoRepoUploadBlob = i(qS()), v.ComAtprotoServerActivateAccount = i(MS()), v.ComAtprotoServerCheckAccountStatus = i(VS()), v.ComAtprotoServerConfirmEmail = i(jh()), v.ComAtprotoServerCreateAccount = i(Mh()), v.ComAtprotoServerCreateAppPassword = i(Nh()), v.ComAtprotoServerCreateInviteCode = i(NS()), v.ComAtprotoServerCreateInviteCodes = i(zS()), v.ComAtprotoServerCreateSession = i(Gh()), v.ComAtprotoServerDeactivateAccount = i(GS()), v.ComAtprotoServerDefs = i(FS()), v.ComAtprotoServerDeleteAccount = i($h()), v.ComAtprotoServerDeleteSession = i($S()), v.ComAtprotoServerDescribeServer = i(HS()), v.ComAtprotoServerGetAccountInviteCodes = i(Xh()), v.ComAtprotoServerGetServiceAuth = i(Jh()), v.ComAtprotoServerGetSession = i(XS()), v.ComAtprotoServerListAppPasswords = i(Qh()), v.ComAtprotoServerRefreshSession = i(ey()), v.ComAtprotoServerRequestAccountDelete = i(WS()), v.ComAtprotoServerRequestEmailConfirmation = i(JS()), v.ComAtprotoServerRequestEmailUpdate = i(ZS()), v.ComAtprotoServerRequestPasswordReset = i(QS()), v.ComAtprotoServerReserveSigningKey = i(YS()), v.ComAtprotoServerResetPassword = i(ry()), v.ComAtprotoServerRevokeAppPassword = i(e1()), v.ComAtprotoServerUpdateEmail = i(ny()), v.ComAtprotoSyncGetBlob = i(sy()), v.ComAtprotoSyncGetBlocks = i(uy()), v.ComAtprotoSyncGetCheckout = i(t1()), v.ComAtprotoSyncGetHead = i(ly()), v.ComAtprotoSyncGetLatestCommit = i(py()), v.ComAtprotoSyncGetRecord = i(hy()), v.ComAtprotoSyncGetRepo = i(my()), v.ComAtprotoSyncGetRepoStatus = i(gy()), v.ComAtprotoSyncListBlobs = i(vy()), v.ComAtprotoSyncListRepos = i(r1()), v.ComAtprotoSyncListReposByCollection = i(i1()), v.ComAtprotoSyncNotifyOfUpdate = i(n1()), v.ComAtprotoSyncRequestCrawl = i(o1()), v.ComAtprotoSyncSubscribeRepos = i(s1()), v.ComAtprotoTempAddReservedHandle = i(a1()), v.ComAtprotoTempCheckSignupQueue = i(u1()), v.ComAtprotoTempFetchLabels = i(c1()), v.ComAtprotoTempRequestPhoneVerification = i(l1()), v.AppBskyActorDefs = i(d1()), v.AppBskyActorGetPreferences = i(p1()), v.AppBskyActorGetProfile = i(f1()), v.AppBskyActorGetProfiles = i(h1()), v.AppBskyActorGetSuggestions = i(y1()), v.AppBskyActorProfile = i(m1()), v.AppBskyActorPutPreferences = i(b1()), v.AppBskyActorSearchActors = i(g1()), v.AppBskyActorSearchActorsTypeahead = i(E1()), v.AppBskyEmbedDefs = i(v1()), v.AppBskyEmbedExternal = i(R1()), v.AppBskyEmbedImages = i(_1()), v.AppBskyEmbedRecord = i(w1()), v.AppBskyEmbedRecordWithMedia = i(x1()), v.AppBskyEmbedVideo = i(A1()), v.AppBskyFeedDefs = i(S1()), v.AppBskyFeedDescribeFeedGenerator = i(C1()), v.AppBskyFeedGenerator = i(T1()), v.AppBskyFeedGetActorFeeds = i(L1()), v.AppBskyFeedGetActorLikes = i(_y()), v.AppBskyFeedGetAuthorFeed = i(xy()), v.AppBskyFeedGetFeed = i(Sy()), v.AppBskyFeedGetFeedGenerator = i(k1()), v.AppBskyFeedGetFeedGenerators = i(D1()), v.AppBskyFeedGetFeedSkeleton = i(Ty()), v.AppBskyFeedGetLikes = i(P1()), v.AppBskyFeedGetListFeed = i(ky()), v.AppBskyFeedGetPostThread = i(Py()), v.AppBskyFeedGetPosts = i(B1()), v.AppBskyFeedGetQuotes = i(U1()), v.AppBskyFeedGetRepostedBy = i(I1()), v.AppBskyFeedGetSuggestedFeeds = i(K1()), v.AppBskyFeedGetTimeline = i(O1()), v.AppBskyFeedLike = i(j1()), v.AppBskyFeedPost = i(q1()), v.AppBskyFeedPostgate = i(M1()), v.AppBskyFeedRepost = i(V1()), v.AppBskyFeedSearchPosts = i(Uy()), v.AppBskyFeedSendInteractions = i(N1()), v.AppBskyFeedThreadgate = i(z1()), v.AppBskyGraphBlock = i(G1()), v.AppBskyGraphDefs = i(F1()), v.AppBskyGraphFollow = i($1()), v.AppBskyGraphGetActorStarterPacks = i(H1()), v.AppBskyGraphGetBlocks = i(X1()), v.AppBskyGraphGetFollowers = i(W1()), v.AppBskyGraphGetFollows = i(J1()), v.AppBskyGraphGetKnownFollowers = i(Z1()), v.AppBskyGraphGetList = i(Q1()), v.AppBskyGraphGetListBlocks = i(Y1()), v.AppBskyGraphGetListMutes = i(eC()), v.AppBskyGraphGetLists = i(tC()), v.AppBskyGraphGetMutes = i(rC()), v.AppBskyGraphGetRelationships = i(Ky()), v.AppBskyGraphGetStarterPack = i(iC()), v.AppBskyGraphGetStarterPacks = i(nC()), v.AppBskyGraphGetSuggestedFollowsByActor = i(oC()), v.AppBskyGraphList = i(sC()), v.AppBskyGraphListblock = i(aC()), v.AppBskyGraphListitem = i(uC()), v.AppBskyGraphMuteActor = i(cC()), v.AppBskyGraphMuteActorList = i(lC()), v.AppBskyGraphMuteThread = i(dC()), v.AppBskyGraphSearchStarterPacks = i(pC()), v.AppBskyGraphStarterpack = i(fC()), v.AppBskyGraphUnmuteActor = i(hC()), v.AppBskyGraphUnmuteActorList = i(yC()), v.AppBskyGraphUnmuteThread = i(mC()), v.AppBskyLabelerDefs = i(bC()), v.AppBskyLabelerGetServices = i(gC()), v.AppBskyLabelerService = i(EC()), v.AppBskyNotificationGetUnreadCount = i(vC()), v.AppBskyNotificationListNotifications = i(RC()), v.AppBskyNotificationPutPreferences = i(_C()), v.AppBskyNotificationRegisterPush = i(wC()), v.AppBskyNotificationUpdateSeen = i(xC()), v.AppBskyRichtextFacet = i(AC()), v.AppBskyUnspeccedDefs = i(SC()), v.AppBskyUnspeccedGetConfig = i(CC()), v.AppBskyUnspeccedGetPopularFeedGenerators = i(TC()), v.AppBskyUnspeccedGetSuggestionsSkeleton = i(LC()), v.AppBskyUnspeccedGetTaggedSuggestions = i(kC()), v.AppBskyUnspeccedGetTrendingTopics = i(DC()), v.AppBskyUnspeccedSearchActorsSkeleton = i(jy()), v.AppBskyUnspeccedSearchPostsSkeleton = i(My()), v.AppBskyUnspeccedSearchStarterPacksSkeleton = i(Ny()), v.AppBskyVideoDefs = i(PC()), v.AppBskyVideoGetJobStatus = i(BC()), v.AppBskyVideoGetUploadLimits = i(UC()), v.AppBskyVideoUploadVideo = i(IC()), v.ChatBskyActorDeclaration = i(KC()), v.ChatBskyActorDefs = i(OC()), v.ChatBskyActorDeleteAccount = i(jC()), v.ChatBskyActorExportAccountData = i(qC()), v.ChatBskyConvoAcceptConvo = i(MC()), v.ChatBskyConvoDefs = i(VC()), v.ChatBskyConvoDeleteMessageForSelf = i(NC()), v.ChatBskyConvoGetConvo = i(zC()), v.ChatBskyConvoGetConvoAvailability = i(GC()), v.ChatBskyConvoGetConvoForMembers = i(FC()), v.ChatBskyConvoGetLog = i($C()), v.ChatBskyConvoGetMessages = i(HC()), v.ChatBskyConvoLeaveConvo = i(XC()), v.ChatBskyConvoListConvos = i(WC()), v.ChatBskyConvoMuteConvo = i(JC()), v.ChatBskyConvoSendMessage = i(ZC()), v.ChatBskyConvoSendMessageBatch = i(QC()), v.ChatBskyConvoUnmuteConvo = i(YC()), v.ChatBskyConvoUpdateAllRead = i(eT()), v.ChatBskyConvoUpdateRead = i(tT()), v.ChatBskyModerationGetActorMetadata = i(rT()), v.ChatBskyModerationGetMessageContext = i(iT()), v.ChatBskyModerationUpdateActorAccess = i(nT()), v.ToolsOzoneCommunicationCreateTemplate = i(Gy()), v.ToolsOzoneCommunicationDefs = i(oT()), v.ToolsOzoneCommunicationDeleteTemplate = i(sT()), v.ToolsOzoneCommunicationListTemplates = i(aT()), v.ToolsOzoneCommunicationUpdateTemplate = i($y()), v.ToolsOzoneModerationDefs = i(uT()), v.ToolsOzoneModerationEmitEvent = i(Xy()), v.ToolsOzoneModerationGetEvent = i(cT()), v.ToolsOzoneModerationGetRecord = i(Jy()), v.ToolsOzoneModerationGetRecords = i(lT()), v.ToolsOzoneModerationGetRepo = i(Qy()), v.ToolsOzoneModerationGetReporterStats = i(dT()), v.ToolsOzoneModerationGetRepos = i(pT()), v.ToolsOzoneModerationQueryEvents = i(fT()), v.ToolsOzoneModerationQueryStatuses = i(hT()), v.ToolsOzoneModerationSearchRepos = i(yT()), v.ToolsOzoneServerGetConfig = i(mT()), v.ToolsOzoneSetAddValues = i(bT()), v.ToolsOzoneSetDefs = i(gT()), v.ToolsOzoneSetDeleteSet = i(em()), v.ToolsOzoneSetDeleteValues = i(rm()), v.ToolsOzoneSetGetValues = i(nm()), v.ToolsOzoneSetQuerySets = i(ET()), v.ToolsOzoneSetUpsertSet = i(vT()), v.ToolsOzoneSettingDefs = i(RT()), v.ToolsOzoneSettingListOptions = i(_T()), v.ToolsOzoneSettingRemoveOptions = i(wT()), v.ToolsOzoneSettingUpsertOption = i(xT()), v.ToolsOzoneSignatureDefs = i(AT()), v.ToolsOzoneSignatureFindCorrelation = i(ST()), v.ToolsOzoneSignatureFindRelatedAccounts = i(CT()), v.ToolsOzoneSignatureSearchAccounts = i(TT()), v.ToolsOzoneTeamAddMember = i(sm()), v.ToolsOzoneTeamDefs = i(LT()), v.ToolsOzoneTeamDeleteMember = i(um()), v.ToolsOzoneTeamListMembers = i(kT()), v.ToolsOzoneTeamUpdateMember = i(lm()), v.COM_ATPROTO_MODERATION = { DefsReasonSpam: "com.atproto.moderation.defs#reasonSpam", DefsReasonViolation: "com.atproto.moderation.defs#reasonViolation", DefsReasonMisleading: "com.atproto.moderation.defs#reasonMisleading", DefsReasonSexual: "com.atproto.moderation.defs#reasonSexual", DefsReasonRude: "com.atproto.moderation.defs#reasonRude", DefsReasonOther: "com.atproto.moderation.defs#reasonOther", DefsReasonAppeal: "com.atproto.moderation.defs#reasonAppeal" }, v.APP_BSKY_FEED = { DefsRequestLess: "app.bsky.feed.defs#requestLess", DefsRequestMore: "app.bsky.feed.defs#requestMore", DefsClickthroughItem: "app.bsky.feed.defs#clickthroughItem", DefsClickthroughAuthor: "app.bsky.feed.defs#clickthroughAuthor", DefsClickthroughReposter: "app.bsky.feed.defs#clickthroughReposter", DefsClickthroughEmbed: "app.bsky.feed.defs#clickthroughEmbed", DefsContentModeUnspecified: "app.bsky.feed.defs#contentModeUnspecified", DefsContentModeVideo: "app.bsky.feed.defs#contentModeVideo", DefsInteractionSeen: "app.bsky.feed.defs#interactionSeen", DefsInteractionLike: "app.bsky.feed.defs#interactionLike", DefsInteractionRepost: "app.bsky.feed.defs#interactionRepost", DefsInteractionReply: "app.bsky.feed.defs#interactionReply", DefsInteractionQuote: "app.bsky.feed.defs#interactionQuote", DefsInteractionShare: "app.bsky.feed.defs#interactionShare" }, v.APP_BSKY_GRAPH = { DefsModlist: "app.bsky.graph.defs#modlist", DefsCuratelist: "app.bsky.graph.defs#curatelist", DefsReferencelist: "app.bsky.graph.defs#referencelist" }, v.TOOLS_OZONE_MODERATION = { DefsReviewOpen: "tools.ozone.moderation.defs#reviewOpen", DefsReviewEscalated: "tools.ozone.moderation.defs#reviewEscalated", DefsReviewClosed: "tools.ozone.moderation.defs#reviewClosed", DefsReviewNone: "tools.ozone.moderation.defs#reviewNone" }, v.TOOLS_OZONE_TEAM = { DefsRoleAdmin: "tools.ozone.team.defs#roleAdmin", DefsRoleModerator: "tools.ozone.team.defs#roleModerator", DefsRoleTriage: "tools.ozone.team.defs#roleTriage" };
  class Dt extends n.XrpcClient {
    constructor(m) {
      super(m, o.schemas), Object.defineProperty(this, "com", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "app", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "chat", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "tools", { enumerable: true, configurable: true, writable: true, value: void 0 }), this.com = new Ye(this), this.app = new rt(this), this.chat = new yn(this), this.tools = new En(this);
    }
    get xrpc() {
      return this;
    }
  }
  v.AtpBaseClient = Dt;
  class Ye {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "atproto", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m, this.atproto = new ft(m);
    }
  }
  v.ComNS = Ye;
  class ft {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "admin", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "identity", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "label", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "lexicon", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "moderation", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "repo", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "server", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "sync", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "temp", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m, this.admin = new Pe(m), this.identity = new J(m), this.label = new zt(m), this.lexicon = new ht(m), this.moderation = new Pt(m), this.repo = new Bt(m), this.server = new Gt(m), this.sync = new tt(m), this.temp = new Ut(m);
    }
  }
  v.ComAtprotoNS = ft;
  class Pe {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    deleteAccount(m, R) {
      return this._client.call("com.atproto.admin.deleteAccount", R?.qp, m, R);
    }
    disableAccountInvites(m, R) {
      return this._client.call("com.atproto.admin.disableAccountInvites", R?.qp, m, R);
    }
    disableInviteCodes(m, R) {
      return this._client.call("com.atproto.admin.disableInviteCodes", R?.qp, m, R);
    }
    enableAccountInvites(m, R) {
      return this._client.call("com.atproto.admin.enableAccountInvites", R?.qp, m, R);
    }
    getAccountInfo(m, R) {
      return this._client.call("com.atproto.admin.getAccountInfo", m, void 0, R);
    }
    getAccountInfos(m, R) {
      return this._client.call("com.atproto.admin.getAccountInfos", m, void 0, R);
    }
    getInviteCodes(m, R) {
      return this._client.call("com.atproto.admin.getInviteCodes", m, void 0, R);
    }
    getSubjectStatus(m, R) {
      return this._client.call("com.atproto.admin.getSubjectStatus", m, void 0, R);
    }
    searchAccounts(m, R) {
      return this._client.call("com.atproto.admin.searchAccounts", m, void 0, R);
    }
    sendEmail(m, R) {
      return this._client.call("com.atproto.admin.sendEmail", R?.qp, m, R);
    }
    updateAccountEmail(m, R) {
      return this._client.call("com.atproto.admin.updateAccountEmail", R?.qp, m, R);
    }
    updateAccountHandle(m, R) {
      return this._client.call("com.atproto.admin.updateAccountHandle", R?.qp, m, R);
    }
    updateAccountPassword(m, R) {
      return this._client.call("com.atproto.admin.updateAccountPassword", R?.qp, m, R);
    }
    updateSubjectStatus(m, R) {
      return this._client.call("com.atproto.admin.updateSubjectStatus", R?.qp, m, R);
    }
  }
  v.ComAtprotoAdminNS = Pe;
  class J {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    getRecommendedDidCredentials(m, R) {
      return this._client.call("com.atproto.identity.getRecommendedDidCredentials", m, void 0, R);
    }
    refreshIdentity(m, R) {
      return this._client.call("com.atproto.identity.refreshIdentity", R?.qp, m, R).catch((V) => {
        throw s.toKnownErr(V);
      });
    }
    requestPlcOperationSignature(m, R) {
      return this._client.call("com.atproto.identity.requestPlcOperationSignature", R?.qp, m, R);
    }
    resolveDid(m, R) {
      return this._client.call("com.atproto.identity.resolveDid", m, void 0, R).catch((V) => {
        throw e.toKnownErr(V);
      });
    }
    resolveHandle(m, R) {
      return this._client.call("com.atproto.identity.resolveHandle", m, void 0, R).catch((V) => {
        throw u.toKnownErr(V);
      });
    }
    resolveIdentity(m, R) {
      return this._client.call("com.atproto.identity.resolveIdentity", m, void 0, R).catch((V) => {
        throw a.toKnownErr(V);
      });
    }
    signPlcOperation(m, R) {
      return this._client.call("com.atproto.identity.signPlcOperation", R?.qp, m, R);
    }
    submitPlcOperation(m, R) {
      return this._client.call("com.atproto.identity.submitPlcOperation", R?.qp, m, R);
    }
    updateHandle(m, R) {
      return this._client.call("com.atproto.identity.updateHandle", R?.qp, m, R);
    }
  }
  v.ComAtprotoIdentityNS = J;
  class zt {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    queryLabels(m, R) {
      return this._client.call("com.atproto.label.queryLabels", m, void 0, R);
    }
  }
  v.ComAtprotoLabelNS = zt;
  class ht {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "schema", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m, this.schema = new et(m);
    }
  }
  v.ComAtprotoLexiconNS = ht;
  class et {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    async list(m) {
      return (await this._client.call("com.atproto.repo.listRecords", { collection: "com.atproto.lexicon.schema", ...m })).data;
    }
    async get(m) {
      return (await this._client.call("com.atproto.repo.getRecord", { collection: "com.atproto.lexicon.schema", ...m })).data;
    }
    async create(m, R, V) {
      const ne = "com.atproto.lexicon.schema";
      return (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: ne, ...m, record: { ...R, $type: ne } }, { encoding: "application/json", headers: V })).data;
    }
    async delete(m, R) {
      await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "com.atproto.lexicon.schema", ...m }, { headers: R });
    }
  }
  v.SchemaRecord = et;
  class Pt {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    createReport(m, R) {
      return this._client.call("com.atproto.moderation.createReport", R?.qp, m, R);
    }
  }
  v.ComAtprotoModerationNS = Pt;
  class Bt {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    applyWrites(m, R) {
      return this._client.call("com.atproto.repo.applyWrites", R?.qp, m, R).catch((V) => {
        throw c.toKnownErr(V);
      });
    }
    createRecord(m, R) {
      return this._client.call("com.atproto.repo.createRecord", R?.qp, m, R).catch((V) => {
        throw l.toKnownErr(V);
      });
    }
    deleteRecord(m, R) {
      return this._client.call("com.atproto.repo.deleteRecord", R?.qp, m, R).catch((V) => {
        throw d.toKnownErr(V);
      });
    }
    describeRepo(m, R) {
      return this._client.call("com.atproto.repo.describeRepo", m, void 0, R);
    }
    getRecord(m, R) {
      return this._client.call("com.atproto.repo.getRecord", m, void 0, R).catch((V) => {
        throw f.toKnownErr(V);
      });
    }
    importRepo(m, R) {
      return this._client.call("com.atproto.repo.importRepo", R?.qp, m, R);
    }
    listMissingBlobs(m, R) {
      return this._client.call("com.atproto.repo.listMissingBlobs", m, void 0, R);
    }
    listRecords(m, R) {
      return this._client.call("com.atproto.repo.listRecords", m, void 0, R);
    }
    putRecord(m, R) {
      return this._client.call("com.atproto.repo.putRecord", R?.qp, m, R).catch((V) => {
        throw h.toKnownErr(V);
      });
    }
    uploadBlob(m, R) {
      return this._client.call("com.atproto.repo.uploadBlob", R?.qp, m, R);
    }
  }
  v.ComAtprotoRepoNS = Bt;
  class Gt {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    activateAccount(m, R) {
      return this._client.call("com.atproto.server.activateAccount", R?.qp, m, R);
    }
    checkAccountStatus(m, R) {
      return this._client.call("com.atproto.server.checkAccountStatus", m, void 0, R);
    }
    confirmEmail(m, R) {
      return this._client.call("com.atproto.server.confirmEmail", R?.qp, m, R).catch((V) => {
        throw p.toKnownErr(V);
      });
    }
    createAccount(m, R) {
      return this._client.call("com.atproto.server.createAccount", R?.qp, m, R).catch((V) => {
        throw b.toKnownErr(V);
      });
    }
    createAppPassword(m, R) {
      return this._client.call("com.atproto.server.createAppPassword", R?.qp, m, R).catch((V) => {
        throw E.toKnownErr(V);
      });
    }
    createInviteCode(m, R) {
      return this._client.call("com.atproto.server.createInviteCode", R?.qp, m, R);
    }
    createInviteCodes(m, R) {
      return this._client.call("com.atproto.server.createInviteCodes", R?.qp, m, R);
    }
    createSession(m, R) {
      return this._client.call("com.atproto.server.createSession", R?.qp, m, R).catch((V) => {
        throw g.toKnownErr(V);
      });
    }
    deactivateAccount(m, R) {
      return this._client.call("com.atproto.server.deactivateAccount", R?.qp, m, R);
    }
    deleteAccount(m, R) {
      return this._client.call("com.atproto.server.deleteAccount", R?.qp, m, R).catch((V) => {
        throw x.toKnownErr(V);
      });
    }
    deleteSession(m, R) {
      return this._client.call("com.atproto.server.deleteSession", R?.qp, m, R);
    }
    describeServer(m, R) {
      return this._client.call("com.atproto.server.describeServer", m, void 0, R);
    }
    getAccountInviteCodes(m, R) {
      return this._client.call("com.atproto.server.getAccountInviteCodes", m, void 0, R).catch((V) => {
        throw T.toKnownErr(V);
      });
    }
    getServiceAuth(m, R) {
      return this._client.call("com.atproto.server.getServiceAuth", m, void 0, R).catch((V) => {
        throw A.toKnownErr(V);
      });
    }
    getSession(m, R) {
      return this._client.call("com.atproto.server.getSession", m, void 0, R);
    }
    listAppPasswords(m, R) {
      return this._client.call("com.atproto.server.listAppPasswords", m, void 0, R).catch((V) => {
        throw K.toKnownErr(V);
      });
    }
    refreshSession(m, R) {
      return this._client.call("com.atproto.server.refreshSession", R?.qp, m, R).catch((V) => {
        throw j.toKnownErr(V);
      });
    }
    requestAccountDelete(m, R) {
      return this._client.call("com.atproto.server.requestAccountDelete", R?.qp, m, R);
    }
    requestEmailConfirmation(m, R) {
      return this._client.call("com.atproto.server.requestEmailConfirmation", R?.qp, m, R);
    }
    requestEmailUpdate(m, R) {
      return this._client.call("com.atproto.server.requestEmailUpdate", R?.qp, m, R);
    }
    requestPasswordReset(m, R) {
      return this._client.call("com.atproto.server.requestPasswordReset", R?.qp, m, R);
    }
    reserveSigningKey(m, R) {
      return this._client.call("com.atproto.server.reserveSigningKey", R?.qp, m, R);
    }
    resetPassword(m, R) {
      return this._client.call("com.atproto.server.resetPassword", R?.qp, m, R).catch((V) => {
        throw O.toKnownErr(V);
      });
    }
    revokeAppPassword(m, R) {
      return this._client.call("com.atproto.server.revokeAppPassword", R?.qp, m, R);
    }
    updateEmail(m, R) {
      return this._client.call("com.atproto.server.updateEmail", R?.qp, m, R).catch((V) => {
        throw z.toKnownErr(V);
      });
    }
  }
  v.ComAtprotoServerNS = Gt;
  class tt {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    getBlob(m, R) {
      return this._client.call("com.atproto.sync.getBlob", m, void 0, R).catch((V) => {
        throw H.toKnownErr(V);
      });
    }
    getBlocks(m, R) {
      return this._client.call("com.atproto.sync.getBlocks", m, void 0, R).catch((V) => {
        throw X.toKnownErr(V);
      });
    }
    getCheckout(m, R) {
      return this._client.call("com.atproto.sync.getCheckout", m, void 0, R);
    }
    getHead(m, R) {
      return this._client.call("com.atproto.sync.getHead", m, void 0, R).catch((V) => {
        throw F.toKnownErr(V);
      });
    }
    getLatestCommit(m, R) {
      return this._client.call("com.atproto.sync.getLatestCommit", m, void 0, R).catch((V) => {
        throw C.toKnownErr(V);
      });
    }
    getRecord(m, R) {
      return this._client.call("com.atproto.sync.getRecord", m, void 0, R).catch((V) => {
        throw k.toKnownErr(V);
      });
    }
    getRepo(m, R) {
      return this._client.call("com.atproto.sync.getRepo", m, void 0, R).catch((V) => {
        throw U.toKnownErr(V);
      });
    }
    getRepoStatus(m, R) {
      return this._client.call("com.atproto.sync.getRepoStatus", m, void 0, R).catch((V) => {
        throw I.toKnownErr(V);
      });
    }
    listBlobs(m, R) {
      return this._client.call("com.atproto.sync.listBlobs", m, void 0, R).catch((V) => {
        throw N.toKnownErr(V);
      });
    }
    listRepos(m, R) {
      return this._client.call("com.atproto.sync.listRepos", m, void 0, R);
    }
    listReposByCollection(m, R) {
      return this._client.call("com.atproto.sync.listReposByCollection", m, void 0, R);
    }
    notifyOfUpdate(m, R) {
      return this._client.call("com.atproto.sync.notifyOfUpdate", R?.qp, m, R);
    }
    requestCrawl(m, R) {
      return this._client.call("com.atproto.sync.requestCrawl", R?.qp, m, R);
    }
  }
  v.ComAtprotoSyncNS = tt;
  class Ut {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    addReservedHandle(m, R) {
      return this._client.call("com.atproto.temp.addReservedHandle", R?.qp, m, R);
    }
    checkSignupQueue(m, R) {
      return this._client.call("com.atproto.temp.checkSignupQueue", m, void 0, R);
    }
    fetchLabels(m, R) {
      return this._client.call("com.atproto.temp.fetchLabels", m, void 0, R);
    }
    requestPhoneVerification(m, R) {
      return this._client.call("com.atproto.temp.requestPhoneVerification", R?.qp, m, R);
    }
  }
  v.ComAtprotoTempNS = Ut;
  class rt {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "bsky", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m, this.bsky = new Ie(m);
    }
  }
  v.AppNS = rt;
  class Ie {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "actor", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "embed", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "feed", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "graph", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "labeler", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "notification", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "richtext", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "unspecced", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "video", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m, this.actor = new ze(m), this.embed = new It(m), this.feed = new Kt(m), this.graph = new M(m), this.labeler = new dn(m), this.notification = new ai(m), this.richtext = new fn(m), this.unspecced = new hn(m), this.video = new ui(m);
    }
  }
  v.AppBskyNS = Ie;
  class ze {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "profile", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m, this.profile = new Ge(m);
    }
    getPreferences(m, R) {
      return this._client.call("app.bsky.actor.getPreferences", m, void 0, R);
    }
    getProfile(m, R) {
      return this._client.call("app.bsky.actor.getProfile", m, void 0, R);
    }
    getProfiles(m, R) {
      return this._client.call("app.bsky.actor.getProfiles", m, void 0, R);
    }
    getSuggestions(m, R) {
      return this._client.call("app.bsky.actor.getSuggestions", m, void 0, R);
    }
    putPreferences(m, R) {
      return this._client.call("app.bsky.actor.putPreferences", R?.qp, m, R);
    }
    searchActors(m, R) {
      return this._client.call("app.bsky.actor.searchActors", m, void 0, R);
    }
    searchActorsTypeahead(m, R) {
      return this._client.call("app.bsky.actor.searchActorsTypeahead", m, void 0, R);
    }
  }
  v.AppBskyActorNS = ze;
  class Ge {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    async list(m) {
      return (await this._client.call("com.atproto.repo.listRecords", { collection: "app.bsky.actor.profile", ...m })).data;
    }
    async get(m) {
      return (await this._client.call("com.atproto.repo.getRecord", { collection: "app.bsky.actor.profile", ...m })).data;
    }
    async create(m, R, V) {
      const ne = "app.bsky.actor.profile";
      return (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: ne, rkey: "self", ...m, record: { ...R, $type: ne } }, { encoding: "application/json", headers: V })).data;
    }
    async delete(m, R) {
      await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.actor.profile", ...m }, { headers: R });
    }
  }
  v.ProfileRecord = Ge;
  class It {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
  }
  v.AppBskyEmbedNS = It;
  class Kt {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "generator", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "like", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "post", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "postgate", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "repost", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "threadgate", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m, this.generator = new xt(m), this.like = new ir(m), this.post = new Ot(m), this.postgate = new yt(m), this.repost = new dr(m), this.threadgate = new pr(m);
    }
    describeFeedGenerator(m, R) {
      return this._client.call("app.bsky.feed.describeFeedGenerator", m, void 0, R);
    }
    getActorFeeds(m, R) {
      return this._client.call("app.bsky.feed.getActorFeeds", m, void 0, R);
    }
    getActorLikes(m, R) {
      return this._client.call("app.bsky.feed.getActorLikes", m, void 0, R).catch((V) => {
        throw Z.toKnownErr(V);
      });
    }
    getAuthorFeed(m, R) {
      return this._client.call("app.bsky.feed.getAuthorFeed", m, void 0, R).catch((V) => {
        throw se.toKnownErr(V);
      });
    }
    getFeed(m, R) {
      return this._client.call("app.bsky.feed.getFeed", m, void 0, R).catch((V) => {
        throw le.toKnownErr(V);
      });
    }
    getFeedGenerator(m, R) {
      return this._client.call("app.bsky.feed.getFeedGenerator", m, void 0, R);
    }
    getFeedGenerators(m, R) {
      return this._client.call("app.bsky.feed.getFeedGenerators", m, void 0, R);
    }
    getFeedSkeleton(m, R) {
      return this._client.call("app.bsky.feed.getFeedSkeleton", m, void 0, R).catch((V) => {
        throw ve.toKnownErr(V);
      });
    }
    getLikes(m, R) {
      return this._client.call("app.bsky.feed.getLikes", m, void 0, R);
    }
    getListFeed(m, R) {
      return this._client.call("app.bsky.feed.getListFeed", m, void 0, R).catch((V) => {
        throw be.toKnownErr(V);
      });
    }
    getPostThread(m, R) {
      return this._client.call("app.bsky.feed.getPostThread", m, void 0, R).catch((V) => {
        throw _e.toKnownErr(V);
      });
    }
    getPosts(m, R) {
      return this._client.call("app.bsky.feed.getPosts", m, void 0, R);
    }
    getQuotes(m, R) {
      return this._client.call("app.bsky.feed.getQuotes", m, void 0, R);
    }
    getRepostedBy(m, R) {
      return this._client.call("app.bsky.feed.getRepostedBy", m, void 0, R);
    }
    getSuggestedFeeds(m, R) {
      return this._client.call("app.bsky.feed.getSuggestedFeeds", m, void 0, R);
    }
    getTimeline(m, R) {
      return this._client.call("app.bsky.feed.getTimeline", m, void 0, R);
    }
    searchPosts(m, R) {
      return this._client.call("app.bsky.feed.searchPosts", m, void 0, R).catch((V) => {
        throw Be.toKnownErr(V);
      });
    }
    sendInteractions(m, R) {
      return this._client.call("app.bsky.feed.sendInteractions", R?.qp, m, R);
    }
  }
  v.AppBskyFeedNS = Kt;
  class xt {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    async list(m) {
      return (await this._client.call("com.atproto.repo.listRecords", { collection: "app.bsky.feed.generator", ...m })).data;
    }
    async get(m) {
      return (await this._client.call("com.atproto.repo.getRecord", { collection: "app.bsky.feed.generator", ...m })).data;
    }
    async create(m, R, V) {
      const ne = "app.bsky.feed.generator";
      return (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: ne, ...m, record: { ...R, $type: ne } }, { encoding: "application/json", headers: V })).data;
    }
    async delete(m, R) {
      await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.generator", ...m }, { headers: R });
    }
  }
  v.GeneratorRecord = xt;
  class ir {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    async list(m) {
      return (await this._client.call("com.atproto.repo.listRecords", { collection: "app.bsky.feed.like", ...m })).data;
    }
    async get(m) {
      return (await this._client.call("com.atproto.repo.getRecord", { collection: "app.bsky.feed.like", ...m })).data;
    }
    async create(m, R, V) {
      const ne = "app.bsky.feed.like";
      return (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: ne, ...m, record: { ...R, $type: ne } }, { encoding: "application/json", headers: V })).data;
    }
    async delete(m, R) {
      await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.like", ...m }, { headers: R });
    }
  }
  v.LikeRecord = ir;
  class Ot {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    async list(m) {
      return (await this._client.call("com.atproto.repo.listRecords", { collection: "app.bsky.feed.post", ...m })).data;
    }
    async get(m) {
      return (await this._client.call("com.atproto.repo.getRecord", { collection: "app.bsky.feed.post", ...m })).data;
    }
    async create(m, R, V) {
      const ne = "app.bsky.feed.post";
      return (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: ne, ...m, record: { ...R, $type: ne } }, { encoding: "application/json", headers: V })).data;
    }
    async delete(m, R) {
      await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.post", ...m }, { headers: R });
    }
  }
  v.PostRecord = Ot;
  class yt {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    async list(m) {
      return (await this._client.call("com.atproto.repo.listRecords", { collection: "app.bsky.feed.postgate", ...m })).data;
    }
    async get(m) {
      return (await this._client.call("com.atproto.repo.getRecord", { collection: "app.bsky.feed.postgate", ...m })).data;
    }
    async create(m, R, V) {
      const ne = "app.bsky.feed.postgate";
      return (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: ne, ...m, record: { ...R, $type: ne } }, { encoding: "application/json", headers: V })).data;
    }
    async delete(m, R) {
      await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.postgate", ...m }, { headers: R });
    }
  }
  v.PostgateRecord = yt;
  class dr {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    async list(m) {
      return (await this._client.call("com.atproto.repo.listRecords", { collection: "app.bsky.feed.repost", ...m })).data;
    }
    async get(m) {
      return (await this._client.call("com.atproto.repo.getRecord", { collection: "app.bsky.feed.repost", ...m })).data;
    }
    async create(m, R, V) {
      const ne = "app.bsky.feed.repost";
      return (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: ne, ...m, record: { ...R, $type: ne } }, { encoding: "application/json", headers: V })).data;
    }
    async delete(m, R) {
      await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.repost", ...m }, { headers: R });
    }
  }
  v.RepostRecord = dr;
  class pr {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    async list(m) {
      return (await this._client.call("com.atproto.repo.listRecords", { collection: "app.bsky.feed.threadgate", ...m })).data;
    }
    async get(m) {
      return (await this._client.call("com.atproto.repo.getRecord", { collection: "app.bsky.feed.threadgate", ...m })).data;
    }
    async create(m, R, V) {
      const ne = "app.bsky.feed.threadgate";
      return (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: ne, ...m, record: { ...R, $type: ne } }, { encoding: "application/json", headers: V })).data;
    }
    async delete(m, R) {
      await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.threadgate", ...m }, { headers: R });
    }
  }
  v.ThreadgateRecord = pr;
  class M {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "block", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "follow", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "list", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "listblock", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "listitem", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "starterpack", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m, this.block = new un(m), this.follow = new si(m), this.list = new Dr(m), this.listblock = new cn(m), this.listitem = new ln(m), this.starterpack = new Pr(m);
    }
    getActorStarterPacks(m, R) {
      return this._client.call("app.bsky.graph.getActorStarterPacks", m, void 0, R);
    }
    getBlocks(m, R) {
      return this._client.call("app.bsky.graph.getBlocks", m, void 0, R);
    }
    getFollowers(m, R) {
      return this._client.call("app.bsky.graph.getFollowers", m, void 0, R);
    }
    getFollows(m, R) {
      return this._client.call("app.bsky.graph.getFollows", m, void 0, R);
    }
    getKnownFollowers(m, R) {
      return this._client.call("app.bsky.graph.getKnownFollowers", m, void 0, R);
    }
    getList(m, R) {
      return this._client.call("app.bsky.graph.getList", m, void 0, R);
    }
    getListBlocks(m, R) {
      return this._client.call("app.bsky.graph.getListBlocks", m, void 0, R);
    }
    getListMutes(m, R) {
      return this._client.call("app.bsky.graph.getListMutes", m, void 0, R);
    }
    getLists(m, R) {
      return this._client.call("app.bsky.graph.getLists", m, void 0, R);
    }
    getMutes(m, R) {
      return this._client.call("app.bsky.graph.getMutes", m, void 0, R);
    }
    getRelationships(m, R) {
      return this._client.call("app.bsky.graph.getRelationships", m, void 0, R).catch((V) => {
        throw Ue.toKnownErr(V);
      });
    }
    getStarterPack(m, R) {
      return this._client.call("app.bsky.graph.getStarterPack", m, void 0, R);
    }
    getStarterPacks(m, R) {
      return this._client.call("app.bsky.graph.getStarterPacks", m, void 0, R);
    }
    getSuggestedFollowsByActor(m, R) {
      return this._client.call("app.bsky.graph.getSuggestedFollowsByActor", m, void 0, R);
    }
    muteActor(m, R) {
      return this._client.call("app.bsky.graph.muteActor", R?.qp, m, R);
    }
    muteActorList(m, R) {
      return this._client.call("app.bsky.graph.muteActorList", R?.qp, m, R);
    }
    muteThread(m, R) {
      return this._client.call("app.bsky.graph.muteThread", R?.qp, m, R);
    }
    searchStarterPacks(m, R) {
      return this._client.call("app.bsky.graph.searchStarterPacks", m, void 0, R);
    }
    unmuteActor(m, R) {
      return this._client.call("app.bsky.graph.unmuteActor", R?.qp, m, R);
    }
    unmuteActorList(m, R) {
      return this._client.call("app.bsky.graph.unmuteActorList", R?.qp, m, R);
    }
    unmuteThread(m, R) {
      return this._client.call("app.bsky.graph.unmuteThread", R?.qp, m, R);
    }
  }
  v.AppBskyGraphNS = M;
  class un {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    async list(m) {
      return (await this._client.call("com.atproto.repo.listRecords", { collection: "app.bsky.graph.block", ...m })).data;
    }
    async get(m) {
      return (await this._client.call("com.atproto.repo.getRecord", { collection: "app.bsky.graph.block", ...m })).data;
    }
    async create(m, R, V) {
      const ne = "app.bsky.graph.block";
      return (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: ne, ...m, record: { ...R, $type: ne } }, { encoding: "application/json", headers: V })).data;
    }
    async delete(m, R) {
      await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.block", ...m }, { headers: R });
    }
  }
  v.BlockRecord = un;
  class si {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    async list(m) {
      return (await this._client.call("com.atproto.repo.listRecords", { collection: "app.bsky.graph.follow", ...m })).data;
    }
    async get(m) {
      return (await this._client.call("com.atproto.repo.getRecord", { collection: "app.bsky.graph.follow", ...m })).data;
    }
    async create(m, R, V) {
      const ne = "app.bsky.graph.follow";
      return (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: ne, ...m, record: { ...R, $type: ne } }, { encoding: "application/json", headers: V })).data;
    }
    async delete(m, R) {
      await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.follow", ...m }, { headers: R });
    }
  }
  v.FollowRecord = si;
  class Dr {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    async list(m) {
      return (await this._client.call("com.atproto.repo.listRecords", { collection: "app.bsky.graph.list", ...m })).data;
    }
    async get(m) {
      return (await this._client.call("com.atproto.repo.getRecord", { collection: "app.bsky.graph.list", ...m })).data;
    }
    async create(m, R, V) {
      const ne = "app.bsky.graph.list";
      return (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: ne, ...m, record: { ...R, $type: ne } }, { encoding: "application/json", headers: V })).data;
    }
    async delete(m, R) {
      await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.list", ...m }, { headers: R });
    }
  }
  v.ListRecord = Dr;
  class cn {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    async list(m) {
      return (await this._client.call("com.atproto.repo.listRecords", { collection: "app.bsky.graph.listblock", ...m })).data;
    }
    async get(m) {
      return (await this._client.call("com.atproto.repo.getRecord", { collection: "app.bsky.graph.listblock", ...m })).data;
    }
    async create(m, R, V) {
      const ne = "app.bsky.graph.listblock";
      return (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: ne, ...m, record: { ...R, $type: ne } }, { encoding: "application/json", headers: V })).data;
    }
    async delete(m, R) {
      await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.listblock", ...m }, { headers: R });
    }
  }
  v.ListblockRecord = cn;
  class ln {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    async list(m) {
      return (await this._client.call("com.atproto.repo.listRecords", { collection: "app.bsky.graph.listitem", ...m })).data;
    }
    async get(m) {
      return (await this._client.call("com.atproto.repo.getRecord", { collection: "app.bsky.graph.listitem", ...m })).data;
    }
    async create(m, R, V) {
      const ne = "app.bsky.graph.listitem";
      return (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: ne, ...m, record: { ...R, $type: ne } }, { encoding: "application/json", headers: V })).data;
    }
    async delete(m, R) {
      await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.listitem", ...m }, { headers: R });
    }
  }
  v.ListitemRecord = ln;
  class Pr {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    async list(m) {
      return (await this._client.call("com.atproto.repo.listRecords", { collection: "app.bsky.graph.starterpack", ...m })).data;
    }
    async get(m) {
      return (await this._client.call("com.atproto.repo.getRecord", { collection: "app.bsky.graph.starterpack", ...m })).data;
    }
    async create(m, R, V) {
      const ne = "app.bsky.graph.starterpack";
      return (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: ne, ...m, record: { ...R, $type: ne } }, { encoding: "application/json", headers: V })).data;
    }
    async delete(m, R) {
      await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.starterpack", ...m }, { headers: R });
    }
  }
  v.StarterpackRecord = Pr;
  class dn {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "service", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m, this.service = new pn(m);
    }
    getServices(m, R) {
      return this._client.call("app.bsky.labeler.getServices", m, void 0, R);
    }
  }
  v.AppBskyLabelerNS = dn;
  class pn {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    async list(m) {
      return (await this._client.call("com.atproto.repo.listRecords", { collection: "app.bsky.labeler.service", ...m })).data;
    }
    async get(m) {
      return (await this._client.call("com.atproto.repo.getRecord", { collection: "app.bsky.labeler.service", ...m })).data;
    }
    async create(m, R, V) {
      const ne = "app.bsky.labeler.service";
      return (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: ne, rkey: "self", ...m, record: { ...R, $type: ne } }, { encoding: "application/json", headers: V })).data;
    }
    async delete(m, R) {
      await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.labeler.service", ...m }, { headers: R });
    }
  }
  v.ServiceRecord = pn;
  class ai {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    getUnreadCount(m, R) {
      return this._client.call("app.bsky.notification.getUnreadCount", m, void 0, R);
    }
    listNotifications(m, R) {
      return this._client.call("app.bsky.notification.listNotifications", m, void 0, R);
    }
    putPreferences(m, R) {
      return this._client.call("app.bsky.notification.putPreferences", R?.qp, m, R);
    }
    registerPush(m, R) {
      return this._client.call("app.bsky.notification.registerPush", R?.qp, m, R);
    }
    updateSeen(m, R) {
      return this._client.call("app.bsky.notification.updateSeen", R?.qp, m, R);
    }
  }
  v.AppBskyNotificationNS = ai;
  class fn {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
  }
  v.AppBskyRichtextNS = fn;
  class hn {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    getConfig(m, R) {
      return this._client.call("app.bsky.unspecced.getConfig", m, void 0, R);
    }
    getPopularFeedGenerators(m, R) {
      return this._client.call("app.bsky.unspecced.getPopularFeedGenerators", m, void 0, R);
    }
    getSuggestionsSkeleton(m, R) {
      return this._client.call("app.bsky.unspecced.getSuggestionsSkeleton", m, void 0, R);
    }
    getTaggedSuggestions(m, R) {
      return this._client.call("app.bsky.unspecced.getTaggedSuggestions", m, void 0, R);
    }
    getTrendingTopics(m, R) {
      return this._client.call("app.bsky.unspecced.getTrendingTopics", m, void 0, R);
    }
    searchActorsSkeleton(m, R) {
      return this._client.call("app.bsky.unspecced.searchActorsSkeleton", m, void 0, R).catch((V) => {
        throw ke.toKnownErr(V);
      });
    }
    searchPostsSkeleton(m, R) {
      return this._client.call("app.bsky.unspecced.searchPostsSkeleton", m, void 0, R).catch((V) => {
        throw Me.toKnownErr(V);
      });
    }
    searchStarterPacksSkeleton(m, R) {
      return this._client.call("app.bsky.unspecced.searchStarterPacksSkeleton", m, void 0, R).catch((V) => {
        throw dt.toKnownErr(V);
      });
    }
  }
  v.AppBskyUnspeccedNS = hn;
  class ui {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    getJobStatus(m, R) {
      return this._client.call("app.bsky.video.getJobStatus", m, void 0, R);
    }
    getUploadLimits(m, R) {
      return this._client.call("app.bsky.video.getUploadLimits", m, void 0, R);
    }
    uploadVideo(m, R) {
      return this._client.call("app.bsky.video.uploadVideo", R?.qp, m, R);
    }
  }
  v.AppBskyVideoNS = ui;
  class yn {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "bsky", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m, this.bsky = new mn(m);
    }
  }
  v.ChatNS = yn;
  class mn {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "actor", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "convo", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "moderation", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m, this.actor = new ci(m), this.convo = new gn(m), this.moderation = new li(m);
    }
  }
  v.ChatBskyNS = mn;
  class ci {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "declaration", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m, this.declaration = new bn(m);
    }
    deleteAccount(m, R) {
      return this._client.call("chat.bsky.actor.deleteAccount", R?.qp, m, R);
    }
    exportAccountData(m, R) {
      return this._client.call("chat.bsky.actor.exportAccountData", m, void 0, R);
    }
  }
  v.ChatBskyActorNS = ci;
  class bn {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    async list(m) {
      return (await this._client.call("com.atproto.repo.listRecords", { collection: "chat.bsky.actor.declaration", ...m })).data;
    }
    async get(m) {
      return (await this._client.call("com.atproto.repo.getRecord", { collection: "chat.bsky.actor.declaration", ...m })).data;
    }
    async create(m, R, V) {
      const ne = "chat.bsky.actor.declaration";
      return (await this._client.call("com.atproto.repo.createRecord", void 0, { collection: ne, rkey: "self", ...m, record: { ...R, $type: ne } }, { encoding: "application/json", headers: V })).data;
    }
    async delete(m, R) {
      await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "chat.bsky.actor.declaration", ...m }, { headers: R });
    }
  }
  v.DeclarationRecord = bn;
  class gn {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    acceptConvo(m, R) {
      return this._client.call("chat.bsky.convo.acceptConvo", R?.qp, m, R);
    }
    deleteMessageForSelf(m, R) {
      return this._client.call("chat.bsky.convo.deleteMessageForSelf", R?.qp, m, R);
    }
    getConvo(m, R) {
      return this._client.call("chat.bsky.convo.getConvo", m, void 0, R);
    }
    getConvoAvailability(m, R) {
      return this._client.call("chat.bsky.convo.getConvoAvailability", m, void 0, R);
    }
    getConvoForMembers(m, R) {
      return this._client.call("chat.bsky.convo.getConvoForMembers", m, void 0, R);
    }
    getLog(m, R) {
      return this._client.call("chat.bsky.convo.getLog", m, void 0, R);
    }
    getMessages(m, R) {
      return this._client.call("chat.bsky.convo.getMessages", m, void 0, R);
    }
    leaveConvo(m, R) {
      return this._client.call("chat.bsky.convo.leaveConvo", R?.qp, m, R);
    }
    listConvos(m, R) {
      return this._client.call("chat.bsky.convo.listConvos", m, void 0, R);
    }
    muteConvo(m, R) {
      return this._client.call("chat.bsky.convo.muteConvo", R?.qp, m, R);
    }
    sendMessage(m, R) {
      return this._client.call("chat.bsky.convo.sendMessage", R?.qp, m, R);
    }
    sendMessageBatch(m, R) {
      return this._client.call("chat.bsky.convo.sendMessageBatch", R?.qp, m, R);
    }
    unmuteConvo(m, R) {
      return this._client.call("chat.bsky.convo.unmuteConvo", R?.qp, m, R);
    }
    updateAllRead(m, R) {
      return this._client.call("chat.bsky.convo.updateAllRead", R?.qp, m, R);
    }
    updateRead(m, R) {
      return this._client.call("chat.bsky.convo.updateRead", R?.qp, m, R);
    }
  }
  v.ChatBskyConvoNS = gn;
  class li {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    getActorMetadata(m, R) {
      return this._client.call("chat.bsky.moderation.getActorMetadata", m, void 0, R);
    }
    getMessageContext(m, R) {
      return this._client.call("chat.bsky.moderation.getMessageContext", m, void 0, R);
    }
    updateActorAccess(m, R) {
      return this._client.call("chat.bsky.moderation.updateActorAccess", R?.qp, m, R);
    }
  }
  v.ChatBskyModerationNS = li;
  class En {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "ozone", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m, this.ozone = new vn(m);
    }
  }
  v.ToolsNS = En;
  class vn {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "communication", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "moderation", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "server", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "set", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "setting", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "signature", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "team", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m, this.communication = new di(m), this.moderation = new Rn(m), this.server = new _n(m), this.set = new pi(m), this.setting = new wn(m), this.signature = new xn(m), this.team = new fi(m);
    }
  }
  v.ToolsOzoneNS = vn;
  class di {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    createTemplate(m, R) {
      return this._client.call("tools.ozone.communication.createTemplate", R?.qp, m, R).catch((V) => {
        throw De.toKnownErr(V);
      });
    }
    deleteTemplate(m, R) {
      return this._client.call("tools.ozone.communication.deleteTemplate", R?.qp, m, R);
    }
    listTemplates(m, R) {
      return this._client.call("tools.ozone.communication.listTemplates", m, void 0, R);
    }
    updateTemplate(m, R) {
      return this._client.call("tools.ozone.communication.updateTemplate", R?.qp, m, R).catch((V) => {
        throw Qe.toKnownErr(V);
      });
    }
  }
  v.ToolsOzoneCommunicationNS = di;
  class Rn {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    emitEvent(m, R) {
      return this._client.call("tools.ozone.moderation.emitEvent", R?.qp, m, R).catch((V) => {
        throw He.toKnownErr(V);
      });
    }
    getEvent(m, R) {
      return this._client.call("tools.ozone.moderation.getEvent", m, void 0, R);
    }
    getRecord(m, R) {
      return this._client.call("tools.ozone.moderation.getRecord", m, void 0, R).catch((V) => {
        throw Q.toKnownErr(V);
      });
    }
    getRecords(m, R) {
      return this._client.call("tools.ozone.moderation.getRecords", m, void 0, R);
    }
    getRepo(m, R) {
      return this._client.call("tools.ozone.moderation.getRepo", m, void 0, R).catch((V) => {
        throw Ve.toKnownErr(V);
      });
    }
    getReporterStats(m, R) {
      return this._client.call("tools.ozone.moderation.getReporterStats", m, void 0, R);
    }
    getRepos(m, R) {
      return this._client.call("tools.ozone.moderation.getRepos", m, void 0, R);
    }
    queryEvents(m, R) {
      return this._client.call("tools.ozone.moderation.queryEvents", m, void 0, R);
    }
    queryStatuses(m, R) {
      return this._client.call("tools.ozone.moderation.queryStatuses", m, void 0, R);
    }
    searchRepos(m, R) {
      return this._client.call("tools.ozone.moderation.searchRepos", m, void 0, R);
    }
  }
  v.ToolsOzoneModerationNS = Rn;
  class _n {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    getConfig(m, R) {
      return this._client.call("tools.ozone.server.getConfig", m, void 0, R);
    }
  }
  v.ToolsOzoneServerNS = _n;
  class pi {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    addValues(m, R) {
      return this._client.call("tools.ozone.set.addValues", R?.qp, m, R);
    }
    deleteSet(m, R) {
      return this._client.call("tools.ozone.set.deleteSet", R?.qp, m, R).catch((V) => {
        throw kt.toKnownErr(V);
      });
    }
    deleteValues(m, R) {
      return this._client.call("tools.ozone.set.deleteValues", R?.qp, m, R).catch((V) => {
        throw we.toKnownErr(V);
      });
    }
    getValues(m, R) {
      return this._client.call("tools.ozone.set.getValues", m, void 0, R).catch((V) => {
        throw pt.toKnownErr(V);
      });
    }
    querySets(m, R) {
      return this._client.call("tools.ozone.set.querySets", m, void 0, R);
    }
    upsertSet(m, R) {
      return this._client.call("tools.ozone.set.upsertSet", R?.qp, m, R);
    }
  }
  v.ToolsOzoneSetNS = pi;
  class wn {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    listOptions(m, R) {
      return this._client.call("tools.ozone.setting.listOptions", m, void 0, R);
    }
    removeOptions(m, R) {
      return this._client.call("tools.ozone.setting.removeOptions", R?.qp, m, R);
    }
    upsertOption(m, R) {
      return this._client.call("tools.ozone.setting.upsertOption", R?.qp, m, R);
    }
  }
  v.ToolsOzoneSettingNS = wn;
  class xn {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    findCorrelation(m, R) {
      return this._client.call("tools.ozone.signature.findCorrelation", m, void 0, R);
    }
    findRelatedAccounts(m, R) {
      return this._client.call("tools.ozone.signature.findRelatedAccounts", m, void 0, R);
    }
    searchAccounts(m, R) {
      return this._client.call("tools.ozone.signature.searchAccounts", m, void 0, R);
    }
  }
  v.ToolsOzoneSignatureNS = xn;
  class fi {
    constructor(m) {
      Object.defineProperty(this, "_client", { enumerable: true, configurable: true, writable: true, value: void 0 }), this._client = m;
    }
    addMember(m, R) {
      return this._client.call("tools.ozone.team.addMember", R?.qp, m, R).catch((V) => {
        throw fe.toKnownErr(V);
      });
    }
    deleteMember(m, R) {
      return this._client.call("tools.ozone.team.deleteMember", R?.qp, m, R).catch((V) => {
        throw Xe.toKnownErr(V);
      });
    }
    listMembers(m, R) {
      return this._client.call("tools.ozone.team.listMembers", m, void 0, R);
    }
    updateMember(m, R) {
      return this._client.call("tools.ozone.team.updateMember", R?.qp, m, R).catch((V) => {
        throw Ne.toKnownErr(V);
      });
    }
  }
  return v.ToolsOzoneTeamNS = fi, v;
}
var Li = {}, bo = {};
const DT = JSON.parse('["aaa","aarp","abb","abbott","abbvie","abc","able","abogado","abudhabi","ac","academy","accenture","accountant","accountants","aco","actor","ad","ads","adult","ae","aeg","aero","aetna","af","afl","africa","ag","agakhan","agency","ai","aig","airbus","airforce","airtel","akdn","al","alibaba","alipay","allfinanz","allstate","ally","alsace","alstom","am","amazon","americanexpress","americanfamily","amex","amfam","amica","amsterdam","analytics","android","anquan","anz","ao","aol","apartments","app","apple","aq","aquarelle","ar","arab","aramco","archi","army","arpa","art","arte","as","asda","asia","associates","at","athleta","attorney","au","auction","audi","audible","audio","auspost","author","auto","autos","aw","aws","ax","axa","az","azure","ba","baby","baidu","banamex","band","bank","bar","barcelona","barclaycard","barclays","barefoot","bargains","baseball","basketball","bauhaus","bayern","bb","bbc","bbt","bbva","bcg","bcn","bd","be","beats","beauty","beer","bentley","berlin","best","bestbuy","bet","bf","bg","bh","bharti","bi","bible","bid","bike","bing","bingo","bio","biz","bj","black","blackfriday","blockbuster","blog","bloomberg","blue","bm","bms","bmw","bn","bnpparibas","bo","boats","boehringer","bofa","bom","bond","boo","book","booking","bosch","bostik","boston","bot","boutique","box","br","bradesco","bridgestone","broadway","broker","brother","brussels","bs","bt","build","builders","business","buy","buzz","bv","bw","by","bz","bzh","ca","cab","cafe","cal","call","calvinklein","cam","camera","camp","canon","capetown","capital","capitalone","car","caravan","cards","care","career","careers","cars","casa","case","cash","casino","cat","catering","catholic","cba","cbn","cbre","cc","cd","center","ceo","cern","cf","cfa","cfd","cg","ch","chanel","channel","charity","chase","chat","cheap","chintai","christmas","chrome","church","ci","cipriani","circle","cisco","citadel","citi","citic","city","ck","cl","claims","cleaning","click","clinic","clinique","clothing","cloud","club","clubmed","cm","cn","co","coach","codes","coffee","college","cologne","com","commbank","community","company","compare","computer","comsec","condos","construction","consulting","contact","contractors","cooking","cool","coop","corsica","country","coupon","coupons","courses","cpa","cr","credit","creditcard","creditunion","cricket","crown","crs","cruise","cruises","cu","cuisinella","cv","cw","cx","cy","cymru","cyou","cz","dad","dance","data","date","dating","datsun","day","dclk","dds","de","deal","dealer","deals","degree","delivery","dell","deloitte","delta","democrat","dental","dentist","desi","design","dev","dhl","diamonds","diet","digital","direct","directory","discount","discover","dish","diy","dj","dk","dm","dnp","do","docs","doctor","dog","domains","dot","download","drive","dtv","dubai","dunlop","dupont","durban","dvag","dvr","dz","earth","eat","ec","eco","edeka","edu","education","ee","eg","email","emerck","energy","engineer","engineering","enterprises","epson","equipment","er","ericsson","erni","es","esq","estate","et","eu","eurovision","eus","events","exchange","expert","exposed","express","extraspace","fage","fail","fairwinds","faith","family","fan","fans","farm","farmers","fashion","fast","fedex","feedback","ferrari","ferrero","fi","fidelity","fido","film","final","finance","financial","fire","firestone","firmdale","fish","fishing","fit","fitness","fj","fk","flickr","flights","flir","florist","flowers","fly","fm","fo","foo","food","football","ford","forex","forsale","forum","foundation","fox","fr","free","fresenius","frl","frogans","frontier","ftr","fujitsu","fun","fund","furniture","futbol","fyi","ga","gal","gallery","gallo","gallup","game","games","gap","garden","gay","gb","gbiz","gd","gdn","ge","gea","gent","genting","george","gf","gg","ggee","gh","gi","gift","gifts","gives","giving","gl","glass","gle","global","globo","gm","gmail","gmbh","gmo","gmx","gn","godaddy","gold","goldpoint","golf","goo","goodyear","goog","google","gop","got","gov","gp","gq","gr","grainger","graphics","gratis","green","gripe","grocery","group","gs","gt","gu","gucci","guge","guide","guitars","guru","gw","gy","hair","hamburg","hangout","haus","hbo","hdfc","hdfcbank","health","healthcare","help","helsinki","here","hermes","hiphop","hisamitsu","hitachi","hiv","hk","hkt","hm","hn","hockey","holdings","holiday","homedepot","homegoods","homes","homesense","honda","horse","hospital","host","hosting","hot","hotels","hotmail","house","how","hr","hsbc","ht","hu","hughes","hyatt","hyundai","ibm","icbc","ice","icu","id","ie","ieee","ifm","ikano","il","im","imamat","imdb","immo","immobilien","in","inc","industries","infiniti","info","ing","ink","institute","insurance","insure","int","international","intuit","investments","io","ipiranga","iq","ir","irish","is","ismaili","ist","istanbul","it","itau","itv","jaguar","java","jcb","je","jeep","jetzt","jewelry","jio","jll","jm","jmp","jnj","jo","jobs","joburg","jot","joy","jp","jpmorgan","jprs","juegos","juniper","kaufen","kddi","ke","kerryhotels","kerryproperties","kfh","kg","kh","ki","kia","kids","kim","kindle","kitchen","kiwi","km","kn","koeln","komatsu","kosher","kp","kpmg","kpn","kr","krd","kred","kuokgroup","kw","ky","kyoto","kz","la","lacaixa","lamborghini","lamer","lancaster","land","landrover","lanxess","lasalle","lat","latino","latrobe","law","lawyer","lb","lc","lds","lease","leclerc","lefrak","legal","lego","lexus","lgbt","li","lidl","life","lifeinsurance","lifestyle","lighting","like","lilly","limited","limo","lincoln","link","live","living","lk","llc","llp","loan","loans","locker","locus","lol","london","lotte","lotto","love","lpl","lplfinancial","lr","ls","lt","ltd","ltda","lu","lundbeck","luxe","luxury","lv","ly","ma","madrid","maif","maison","makeup","man","management","mango","map","market","marketing","markets","marriott","marshalls","mattel","mba","mc","mckinsey","md","me","med","media","meet","melbourne","meme","memorial","men","menu","merckmsd","mg","mh","miami","microsoft","mil","mini","mint","mit","mitsubishi","mk","ml","mlb","mls","mm","mma","mn","mo","mobi","mobile","moda","moe","moi","mom","monash","money","monster","mormon","mortgage","moscow","moto","motorcycles","mov","movie","mp","mq","mr","ms","msd","mt","mtn","mtr","mu","museum","music","mv","mw","mx","my","mz","na","nab","nagoya","name","navy","nba","nc","ne","nec","net","netbank","netflix","network","neustar","new","news","next","nextdirect","nexus","nf","nfl","ng","ngo","nhk","ni","nico","nike","nikon","ninja","nissan","nissay","nl","no","nokia","norton","now","nowruz","nowtv","np","nr","nra","nrw","ntt","nu","nyc","nz","obi","observer","office","okinawa","olayan","olayangroup","ollo","om","omega","one","ong","onl","online","ooo","open","oracle","orange","org","organic","origins","osaka","otsuka","ott","ovh","pa","page","panasonic","paris","pars","partners","parts","party","pay","pccw","pe","pet","pf","pfizer","pg","ph","pharmacy","phd","philips","phone","photo","photography","photos","physio","pics","pictet","pictures","pid","pin","ping","pink","pioneer","pizza","pk","pl","place","play","playstation","plumbing","plus","pm","pn","pnc","pohl","poker","politie","porn","post","pr","pramerica","praxi","press","prime","pro","prod","productions","prof","progressive","promo","properties","property","protection","pru","prudential","ps","pt","pub","pw","pwc","py","qa","qpon","quebec","quest","racing","radio","re","read","realestate","realtor","realty","recipes","red","redstone","redumbrella","rehab","reise","reisen","reit","reliance","ren","rent","rentals","repair","report","republican","rest","restaurant","review","reviews","rexroth","rich","richardli","ricoh","ril","rio","rip","ro","rocks","rodeo","rogers","room","rs","rsvp","ru","rugby","ruhr","run","rw","rwe","ryukyu","sa","saarland","safe","safety","sakura","sale","salon","samsclub","samsung","sandvik","sandvikcoromant","sanofi","sap","sarl","sas","save","saxo","sb","sbi","sbs","sc","scb","schaeffler","schmidt","scholarships","school","schule","schwarz","science","scot","sd","se","search","seat","secure","security","seek","select","sener","services","seven","sew","sex","sexy","sfr","sg","sh","shangrila","sharp","shell","shia","shiksha","shoes","shop","shopping","shouji","show","si","silk","sina","singles","site","sj","sk","ski","skin","sky","skype","sl","sling","sm","smart","smile","sn","sncf","so","soccer","social","softbank","software","sohu","solar","solutions","song","sony","soy","spa","space","sport","spot","sr","srl","ss","st","stada","staples","star","statebank","statefarm","stc","stcgroup","stockholm","storage","store","stream","studio","study","style","su","sucks","supplies","supply","support","surf","surgery","suzuki","sv","swatch","swiss","sx","sy","sydney","systems","sz","tab","taipei","talk","taobao","target","tatamotors","tatar","tattoo","tax","taxi","tc","tci","td","tdk","team","tech","technology","tel","temasek","tennis","teva","tf","tg","th","thd","theater","theatre","tiaa","tickets","tienda","tips","tires","tirol","tj","tjmaxx","tjx","tk","tkmaxx","tl","tm","tmall","tn","to","today","tokyo","tools","top","toray","toshiba","total","tours","town","toyota","toys","tr","trade","trading","training","travel","travelers","travelersinsurance","trust","trv","tt","tube","tui","tunes","tushu","tv","tvs","tw","tz","ua","ubank","ubs","ug","uk","unicom","university","uno","uol","ups","us","uy","uz","va","vacations","vana","vanguard","vc","ve","vegas","ventures","verisign","verm\xF6gensberater","verm\xF6gensberatung","versicherung","vet","vg","vi","viajes","video","vig","viking","villas","vin","vip","virgin","visa","vision","viva","vivo","vlaanderen","vn","vodka","volvo","vote","voting","voto","voyage","vu","wales","walmart","walter","wang","wanggou","watch","watches","weather","weatherchannel","webcam","weber","website","wed","wedding","weibo","weir","wf","whoswho","wien","wiki","williamhill","win","windows","wine","winners","wme","wolterskluwer","woodside","work","works","world","wow","ws","wtc","wtf","xbox","xerox","xihuan","xin","xxx","xyz","yachts","yahoo","yamaxun","yandex","ye","yodobashi","yoga","yokohama","you","youtube","yt","yun","za","zappos","zara","zero","zip","zm","zone","zuerich","zw","\u03B5\u03BB","\u03B5\u03C5","\u0431\u0433","\u0431\u0435\u043B","\u0434\u0435\u0442\u0438","\u0435\u044E","\u043A\u0430\u0442\u043E\u043B\u0438\u043A","\u043A\u043E\u043C","\u043C\u043A\u0434","\u043C\u043E\u043D","\u043C\u043E\u0441\u043A\u0432\u0430","\u043E\u043D\u043B\u0430\u0439\u043D","\u043E\u0440\u0433","\u0440\u0443\u0441","\u0440\u0444","\u0441\u0430\u0439\u0442","\u0441\u0440\u0431","\u0443\u043A\u0440","\u049B\u0430\u0437","\u0570\u0561\u0575","\u05D9\u05E9\u05E8\u05D0\u05DC","\u05E7\u05D5\u05DD","\u0627\u0628\u0648\u0638\u0628\u064A","\u0627\u0631\u0627\u0645\u0643\u0648","\u0627\u0644\u0627\u0631\u062F\u0646","\u0627\u0644\u0628\u062D\u0631\u064A\u0646","\u0627\u0644\u062C\u0632\u0627\u0626\u0631","\u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629","\u0627\u0644\u0639\u0644\u064A\u0627\u0646","\u0627\u0644\u0645\u063A\u0631\u0628","\u0627\u0645\u0627\u0631\u0627\u062A","\u0627\u06CC\u0631\u0627\u0646","\u0628\u0627\u0631\u062A","\u0628\u0627\u0632\u0627\u0631","\u0628\u064A\u062A\u0643","\u0628\u06BE\u0627\u0631\u062A","\u062A\u0648\u0646\u0633","\u0633\u0648\u062F\u0627\u0646","\u0633\u0648\u0631\u064A\u0629","\u0634\u0628\u0643\u0629","\u0639\u0631\u0627\u0642","\u0639\u0631\u0628","\u0639\u0645\u0627\u0646","\u0641\u0644\u0633\u0637\u064A\u0646","\u0642\u0637\u0631","\u0643\u0627\u062B\u0648\u0644\u064A\u0643","\u0643\u0648\u0645","\u0645\u0635\u0631","\u0645\u0644\u064A\u0633\u064A\u0627","\u0645\u0648\u0631\u064A\u062A\u0627\u0646\u064A\u0627","\u0645\u0648\u0642\u0639","\u0647\u0645\u0631\u0627\u0647","\u067E\u0627\u06A9\u0633\u062A\u0627\u0646","\u0680\u0627\u0631\u062A","\u0915\u0949\u092E","\u0928\u0947\u091F","\u092D\u093E\u0930\u0924","\u092D\u093E\u0930\u0924\u092E\u094D","\u092D\u093E\u0930\u094B\u0924","\u0938\u0902\u0917\u0920\u0928","\u09AC\u09BE\u0982\u09B2\u09BE","\u09AD\u09BE\u09B0\u09A4","\u09AD\u09BE\u09F0\u09A4","\u0A2D\u0A3E\u0A30\u0A24","\u0AAD\u0ABE\u0AB0\u0AA4","\u0B2D\u0B3E\u0B30\u0B24","\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE","\u0B87\u0BB2\u0B99\u0BCD\u0B95\u0BC8","\u0B9A\u0BBF\u0B99\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0BC2\u0BB0\u0BCD","\u0C2D\u0C3E\u0C30\u0C24\u0C4D","\u0CAD\u0CBE\u0CB0\u0CA4","\u0D2D\u0D3E\u0D30\u0D24\u0D02","\u0DBD\u0D82\u0D9A\u0DCF","\u0E04\u0E2D\u0E21","\u0E44\u0E17\u0E22","\u0EA5\u0EB2\u0EA7","\u10D2\u10D4","\u307F\u3093\u306A","\u30A2\u30DE\u30BE\u30F3","\u30AF\u30E9\u30A6\u30C9","\u30B0\u30FC\u30B0\u30EB","\u30B3\u30E0","\u30B9\u30C8\u30A2","\u30BB\u30FC\u30EB","\u30D5\u30A1\u30C3\u30B7\u30E7\u30F3","\u30DD\u30A4\u30F3\u30C8","\u4E16\u754C","\u4E2D\u4FE1","\u4E2D\u56FD","\u4E2D\u570B","\u4E2D\u6587\u7F51","\u4E9A\u9A6C\u900A","\u4F01\u4E1A","\u4F5B\u5C71","\u4FE1\u606F","\u5065\u5EB7","\u516B\u5366","\u516C\u53F8","\u516C\u76CA","\u53F0\u6E7E","\u53F0\u7063","\u5546\u57CE","\u5546\u5E97","\u5546\u6807","\u5609\u91CC","\u5609\u91CC\u5927\u9152\u5E97","\u5728\u7EBF","\u5927\u62FF","\u5929\u4E3B\u6559","\u5A31\u4E50","\u5BB6\u96FB","\u5E7F\u4E1C","\u5FAE\u535A","\u6148\u5584","\u6211\u7231\u4F60","\u624B\u673A","\u62DB\u8058","\u653F\u52A1","\u653F\u5E9C","\u65B0\u52A0\u5761","\u65B0\u95FB","\u65F6\u5C1A","\u66F8\u7C4D","\u673A\u6784","\u6DE1\u9A6C\u9521","\u6E38\u620F","\u6FB3\u9580","\u70B9\u770B","\u79FB\u52A8","\u7EC4\u7EC7\u673A\u6784","\u7F51\u5740","\u7F51\u5E97","\u7F51\u7AD9","\u7F51\u7EDC","\u8054\u901A","\u8C37\u6B4C","\u8D2D\u7269","\u901A\u8CA9","\u96C6\u56E2","\u96FB\u8A0A\u76C8\u79D1","\u98DE\u5229\u6D66","\u98DF\u54C1","\u9910\u5385","\u9999\u683C\u91CC\u62C9","\u9999\u6E2F","\uB2F7\uB137","\uB2F7\uCEF4","\uC0BC\uC131","\uD55C\uAD6D"]');
var tr = {}, OE;
function b_() {
  return OE || (OE = 1, Object.defineProperty(tr, "__esModule", { value: true }), tr.TAG_REGEX = tr.TRAILING_PUNCTUATION_REGEX = tr.URL_REGEX = tr.MENTION_REGEX = void 0, tr.MENTION_REGEX = /(^|\s|\()(@)([a-zA-Z0-9.-]+)(\b)/g, tr.URL_REGEX = /(^|\s|\()((https?:\/\/[\S]+)|((?<domain>[a-z][a-z0-9]*(\.[a-z0-9]+)+)[\S]*))/gim, tr.TRAILING_PUNCTUATION_REGEX = /\p{P}+$/gu, tr.TAG_REGEX = /(^|\s)[#＃]((?!\ufe0f)[^\s\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]*[^\d\s\p{P}\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]+[^\s\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]*)?/gu), tr;
}
var jE;
function PT() {
  if (jE) return bo;
  jE = 1;
  var r = bo && bo.__importDefault || function(s) {
    return s && s.__esModule ? s : { default: s };
  };
  Object.defineProperty(bo, "__esModule", { value: true }), bo.detectFacets = n;
  const t = r(DT), i = b_();
  function n(s) {
    let e;
    const u = [];
    {
      const a = i.MENTION_REGEX;
      for (; e = a.exec(s.utf16); ) {
        if (!o(e[3]) && !e[3].endsWith(".test")) continue;
        const c = s.utf16.indexOf(e[3], e.index) - 1;
        u.push({ $type: "app.bsky.richtext.facet", index: { byteStart: s.utf16IndexToUtf8Index(c), byteEnd: s.utf16IndexToUtf8Index(c + e[3].length + 1) }, features: [{ $type: "app.bsky.richtext.facet#mention", did: e[3] }] });
      }
    }
    {
      const a = i.URL_REGEX;
      for (; e = a.exec(s.utf16); ) {
        let c = e[2];
        if (!c.startsWith("http")) {
          const f = e.groups?.domain;
          if (!f || !o(f)) continue;
          c = `https://${c}`;
        }
        const l = s.utf16.indexOf(e[2], e.index), d = { start: l, end: l + e[2].length };
        /[.,;:!?]$/.test(c) && (c = c.slice(0, -1), d.end--), /[)]$/.test(c) && !c.includes("(") && (c = c.slice(0, -1), d.end--), u.push({ index: { byteStart: s.utf16IndexToUtf8Index(d.start), byteEnd: s.utf16IndexToUtf8Index(d.end) }, features: [{ $type: "app.bsky.richtext.facet#link", uri: c }] });
      }
    }
    {
      const a = i.TAG_REGEX;
      for (; e = a.exec(s.utf16); ) {
        const c = e[1];
        let l = e[2];
        if (!l || (l = l.trim().replace(i.TRAILING_PUNCTUATION_REGEX, ""), l.length === 0 || l.length > 64)) continue;
        const d = e.index + c.length;
        u.push({ index: { byteStart: s.utf16IndexToUtf8Index(d), byteEnd: s.utf16IndexToUtf8Index(d + 1 + l.length) }, features: [{ $type: "app.bsky.richtext.facet#tag", tag: l }] });
      }
    }
    return u.length > 0 ? u : void 0;
  }
  function o(s) {
    return !!t.default.find((e) => {
      const u = s.lastIndexOf(e);
      return u === -1 ? false : s.charAt(u - 1) === "." && u === s.length - e.length;
    });
  }
  return bo;
}
var bl = {}, rs = {}, qE;
function Ap() {
  if (qE) return rs;
  qE = 1, Object.defineProperty(rs, "__esModule", { value: true }), rs.UnicodeString = void 0;
  const r = Lr(), t = new TextEncoder(), i = new TextDecoder();
  class n {
    constructor(s) {
      Object.defineProperty(this, "utf16", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "utf8", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "_graphemeLen", { enumerable: true, configurable: true, writable: true, value: void 0 }), this.utf16 = s, this.utf8 = t.encode(s);
    }
    get length() {
      return this.utf8.byteLength;
    }
    get graphemeLength() {
      return this._graphemeLen || (this._graphemeLen = (0, r.graphemeLen)(this.utf16)), this._graphemeLen;
    }
    slice(s, e) {
      return i.decode(this.utf8.slice(s, e));
    }
    utf16IndexToUtf8Index(s) {
      return t.encode(this.utf16.slice(0, s)).byteLength;
    }
    toString() {
      return this.utf16;
    }
  }
  return rs.UnicodeString = n, rs;
}
var ME;
function g_() {
  if (ME) return bl;
  ME = 1, Object.defineProperty(bl, "__esModule", { value: true }), bl.sanitizeRichText = n;
  const r = Ap(), t = /[\r\n]([\u00AD\u2060\u200D\u200C\u200B\s]*[\r\n]){2,}/, i = `

`;
  function n(s, e) {
    return e.cleanNewlines && (s = o(s, t, i)), s;
  }
  function o(s, e, u) {
    s = s.clone();
    let a = s.unicodeText.utf16.match(e);
    for (; a && typeof a.index < "u"; ) {
      const c = s.unicodeText, l = s.unicodeText.utf16IndexToUtf8Index(a.index), d = l + new r.UnicodeString(a[0]).length;
      if (s.delete(l, d), s.unicodeText.utf16 === c.utf16) break;
      s.insert(l, u), a = s.unicodeText.utf16.match(e);
    }
    return s;
  }
  return bl;
}
var VE;
function BT() {
  if (VE) return Li;
  VE = 1, Object.defineProperty(Li, "__esModule", { value: true }), Li.RichText = Li.RichTextSegment = void 0;
  const r = ii(), t = PT(), i = g_(), n = Ap();
  class o {
    constructor(d, f) {
      Object.defineProperty(this, "text", { enumerable: true, configurable: true, writable: true, value: d }), Object.defineProperty(this, "facet", { enumerable: true, configurable: true, writable: true, value: f });
    }
    get link() {
      return this.facet?.features.find(r.AppBskyRichtextFacet.isLink);
    }
    isLink() {
      return !!this.link;
    }
    get mention() {
      return this.facet?.features.find(r.AppBskyRichtextFacet.isMention);
    }
    isMention() {
      return !!this.mention;
    }
    get tag() {
      return this.facet?.features.find(r.AppBskyRichtextFacet.isTag);
    }
    isTag() {
      return !!this.tag;
    }
  }
  Li.RichTextSegment = o;
  class s {
    constructor(d, f) {
      Object.defineProperty(this, "unicodeText", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "facets", { enumerable: true, configurable: true, writable: true, value: void 0 }), this.unicodeText = new n.UnicodeString(d.text), this.facets = d.facets, !this.facets?.length && d.entities?.length && (this.facets = a(this.unicodeText, d.entities)), this.facets && (this.facets = this.facets.filter(u).sort(e)), f?.cleanNewlines && (0, i.sanitizeRichText)(this, { cleanNewlines: true }).copyInto(this);
    }
    get text() {
      return this.unicodeText.toString();
    }
    get length() {
      return this.unicodeText.length;
    }
    get graphemeLength() {
      return this.unicodeText.graphemeLength;
    }
    clone() {
      return new s({ text: this.unicodeText.utf16, facets: c(this.facets) });
    }
    copyInto(d) {
      d.unicodeText = this.unicodeText, d.facets = c(this.facets);
    }
    *segments() {
      const d = this.facets || [];
      if (!d.length) {
        yield new o(this.unicodeText.utf16);
        return;
      }
      let f = 0, h = 0;
      do {
        const p = d[h];
        if (f < p.index.byteStart) yield new o(this.unicodeText.slice(f, p.index.byteStart));
        else if (f > p.index.byteStart) {
          h++;
          continue;
        }
        if (p.index.byteStart < p.index.byteEnd) {
          const b = this.unicodeText.slice(p.index.byteStart, p.index.byteEnd);
          b.trim() ? yield new o(b, p) : yield new o(b);
        }
        f = p.index.byteEnd, h++;
      } while (h < d.length);
      f < this.unicodeText.length && (yield new o(this.unicodeText.slice(f, this.unicodeText.length)));
    }
    insert(d, f) {
      if (this.unicodeText = new n.UnicodeString(this.unicodeText.slice(0, d) + f + this.unicodeText.slice(d)), !this.facets?.length) return this;
      const h = f.length;
      for (const p of this.facets) d <= p.index.byteStart ? (p.index.byteStart += h, p.index.byteEnd += h) : d >= p.index.byteStart && d < p.index.byteEnd && (p.index.byteEnd += h);
      return this;
    }
    delete(d, f) {
      if (this.unicodeText = new n.UnicodeString(this.unicodeText.slice(0, d) + this.unicodeText.slice(f)), !this.facets?.length) return this;
      const h = f - d;
      for (const p of this.facets) d <= p.index.byteStart && f >= p.index.byteEnd ? (p.index.byteStart = 0, p.index.byteEnd = 0) : d > p.index.byteEnd || (d > p.index.byteStart && d <= p.index.byteEnd && f > p.index.byteEnd ? p.index.byteEnd = d : d >= p.index.byteStart && f <= p.index.byteEnd ? p.index.byteEnd -= h : d < p.index.byteStart && f >= p.index.byteStart && f <= p.index.byteEnd ? (p.index.byteStart = d, p.index.byteEnd -= h) : f < p.index.byteStart && (p.index.byteStart -= h, p.index.byteEnd -= h));
      return this.facets = this.facets.filter((p) => p.index.byteStart < p.index.byteEnd), this;
    }
    async detectFacets(d) {
      if (this.facets = (0, t.detectFacets)(this.unicodeText), this.facets) {
        const f = [];
        for (const h of this.facets) for (const p of h.features) r.AppBskyRichtextFacet.isMention(p) && f.push(d.com.atproto.identity.resolveHandle({ handle: p.did }).then((b) => b?.data.did).catch((b) => {
        }).then((b) => {
          p.did = b || "";
        }));
        await Promise.allSettled(f), this.facets.sort(e);
      }
    }
    detectFacetsWithoutResolution() {
      this.facets = (0, t.detectFacets)(this.unicodeText), this.facets && this.facets.sort(e);
    }
  }
  Li.RichText = s;
  const e = (l, d) => l.index.byteStart - d.index.byteStart, u = (l) => l.index.byteStart <= l.index.byteEnd;
  function a(l, d) {
    const f = [];
    for (const h of d) h.type === "link" ? f.push({ $type: "app.bsky.richtext.facet", index: { byteStart: l.utf16IndexToUtf8Index(h.index.start), byteEnd: l.utf16IndexToUtf8Index(h.index.end) }, features: [{ $type: "app.bsky.richtext.facet#link", uri: h.value }] }) : h.type === "mention" && f.push({ $type: "app.bsky.richtext.facet", index: { byteStart: l.utf16IndexToUtf8Index(h.index.start), byteEnd: l.utf16IndexToUtf8Index(h.index.end) }, features: [{ $type: "app.bsky.richtext.facet#mention", did: h.value }] });
    return f;
  }
  function c(l) {
    return typeof l > "u" ? l : JSON.parse(JSON.stringify(l));
  }
  return Li;
}
var Pd = {}, is = {}, ki = {}, NE;
function Sp() {
  return NE || (NE = 1, Object.defineProperty(ki, "__esModule", { value: true }), ki.LABELS = ki.DEFAULT_LABEL_SETTINGS = void 0, ki.DEFAULT_LABEL_SETTINGS = { porn: "hide", sexual: "warn", nudity: "ignore", "graphic-media": "warn" }, ki.LABELS = { "!hide": { identifier: "!hide", configurable: false, defaultSetting: "hide", flags: ["no-override", "no-self"], severity: "alert", blurs: "content", behaviors: { account: { profileList: "blur", profileView: "blur", avatar: "blur", banner: "blur", displayName: "blur", contentList: "blur", contentView: "blur" }, profile: { avatar: "blur", banner: "blur", displayName: "blur" }, content: { contentList: "blur", contentView: "blur" } }, locales: [] }, "!warn": { identifier: "!warn", configurable: false, defaultSetting: "warn", flags: ["no-self"], severity: "none", blurs: "content", behaviors: { account: { profileList: "blur", profileView: "blur", avatar: "blur", banner: "blur", contentList: "blur", contentView: "blur" }, profile: { avatar: "blur", banner: "blur", displayName: "blur" }, content: { contentList: "blur", contentView: "blur" } }, locales: [] }, "!no-unauthenticated": { identifier: "!no-unauthenticated", configurable: false, defaultSetting: "hide", flags: ["no-override", "unauthed"], severity: "none", blurs: "content", behaviors: { account: { profileList: "blur", profileView: "blur", avatar: "blur", banner: "blur", displayName: "blur", contentList: "blur", contentView: "blur" }, profile: { avatar: "blur", banner: "blur", displayName: "blur" }, content: { contentList: "blur", contentView: "blur" } }, locales: [] }, porn: { identifier: "porn", configurable: true, defaultSetting: "hide", flags: ["adult"], severity: "none", blurs: "media", behaviors: { account: { avatar: "blur", banner: "blur" }, profile: { avatar: "blur", banner: "blur" }, content: { contentMedia: "blur" } }, locales: [] }, sexual: { identifier: "sexual", configurable: true, defaultSetting: "warn", flags: ["adult"], severity: "none", blurs: "media", behaviors: { account: { avatar: "blur", banner: "blur" }, profile: { avatar: "blur", banner: "blur" }, content: { contentMedia: "blur" } }, locales: [] }, nudity: { identifier: "nudity", configurable: true, defaultSetting: "ignore", flags: [], severity: "none", blurs: "media", behaviors: { account: { avatar: "blur", banner: "blur" }, profile: { avatar: "blur", banner: "blur" }, content: { contentMedia: "blur" } }, locales: [] }, "graphic-media": { identifier: "graphic-media", flags: ["adult"], configurable: true, defaultSetting: "warn", severity: "none", blurs: "media", behaviors: { account: { avatar: "blur", banner: "blur" }, profile: { avatar: "blur", banner: "blur" }, content: { contentMedia: "blur" } }, locales: [] }, gore: { identifier: "gore", flags: ["adult"], configurable: true, defaultSetting: "warn", severity: "none", blurs: "media", behaviors: { account: { avatar: "blur", banner: "blur" }, profile: { avatar: "blur", banner: "blur" }, content: { contentMedia: "blur" } }, locales: [] } }), ki;
}
var st = {}, zE;
function E_() {
  return zE || (zE = 1, Object.defineProperty(st, "__esModule", { value: true }), st.NOOP_BEHAVIOR = st.HIDE_BEHAVIOR = st.MUTEWORD_BEHAVIOR = st.MUTE_BEHAVIOR = st.BLOCK_BEHAVIOR = st.CUSTOM_LABEL_VALUE_RE = void 0, st.CUSTOM_LABEL_VALUE_RE = /^[a-z-]+$/, st.BLOCK_BEHAVIOR = { profileList: "blur", profileView: "alert", avatar: "blur", banner: "blur", contentList: "blur", contentView: "blur" }, st.MUTE_BEHAVIOR = { profileList: "inform", profileView: "alert", contentList: "blur", contentView: "inform" }, st.MUTEWORD_BEHAVIOR = { contentList: "blur", contentView: "blur" }, st.HIDE_BEHAVIOR = { contentList: "blur", contentView: "blur" }, st.NOOP_BEHAVIOR = {}), st;
}
var ns = {}, GE;
function v_() {
  if (GE) return ns;
  GE = 1, Object.defineProperty(ns, "__esModule", { value: true }), ns.ModerationUI = void 0;
  class r {
    constructor() {
      Object.defineProperty(this, "noOverride", { enumerable: true, configurable: true, writable: true, value: false }), Object.defineProperty(this, "filters", { enumerable: true, configurable: true, writable: true, value: [] }), Object.defineProperty(this, "blurs", { enumerable: true, configurable: true, writable: true, value: [] }), Object.defineProperty(this, "alerts", { enumerable: true, configurable: true, writable: true, value: [] }), Object.defineProperty(this, "informs", { enumerable: true, configurable: true, writable: true, value: [] });
    }
    get filter() {
      return this.filters.length !== 0;
    }
    get blur() {
      return this.blurs.length !== 0;
    }
    get alert() {
      return this.alerts.length !== 0;
    }
    get inform() {
      return this.informs.length !== 0;
    }
  }
  return ns.ModerationUI = r, ns;
}
var FE;
function ti() {
  if (FE) return is;
  FE = 1, Object.defineProperty(is, "__esModule", { value: true }), is.ModerationDecision = void 0;
  const r = Sp(), t = E_(), i = v_();
  var n;
  (function(u) {
    u[u.High = 0] = "High", u[u.Medium = 1] = "Medium", u[u.Low = 2] = "Low";
  })(n || (n = {}));
  class o {
    constructor() {
      Object.defineProperty(this, "did", { enumerable: true, configurable: true, writable: true, value: "" }), Object.defineProperty(this, "isMe", { enumerable: true, configurable: true, writable: true, value: false }), Object.defineProperty(this, "causes", { enumerable: true, configurable: true, writable: true, value: [] });
    }
    static merge(...a) {
      const c = a.filter((d) => d != null), l = new o();
      return c[0] && (l.did = c[0].did, l.isMe = c[0].isMe), l.causes = c.flatMap((d) => d.causes), l;
    }
    downgrade() {
      for (const a of this.causes) a.downgraded = true;
      return this;
    }
    get blocked() {
      return !!this.blockCause;
    }
    get muted() {
      return !!this.muteCause;
    }
    get blockCause() {
      return this.causes.find((a) => a.type === "blocking" || a.type === "blocked-by" || a.type === "block-other");
    }
    get muteCause() {
      return this.causes.find((a) => a.type === "muted");
    }
    get labelCauses() {
      return this.causes.filter((a) => a.type === "label");
    }
    ui(a) {
      const c = new i.ModerationUI();
      for (const l of this.causes) if (l.type === "blocking" || l.type === "blocked-by" || l.type === "block-other") {
        if (this.isMe) continue;
        (a === "profileList" || a === "contentList") && c.filters.push(l), l.downgraded || (t.BLOCK_BEHAVIOR[a] === "blur" ? (c.noOverride = true, c.blurs.push(l)) : t.BLOCK_BEHAVIOR[a] === "alert" ? c.alerts.push(l) : t.BLOCK_BEHAVIOR[a] === "inform" && c.informs.push(l));
      } else if (l.type === "muted") {
        if (this.isMe) continue;
        (a === "profileList" || a === "contentList") && c.filters.push(l), l.downgraded || (t.MUTE_BEHAVIOR[a] === "blur" ? c.blurs.push(l) : t.MUTE_BEHAVIOR[a] === "alert" ? c.alerts.push(l) : t.MUTE_BEHAVIOR[a] === "inform" && c.informs.push(l));
      } else if (l.type === "mute-word") {
        if (this.isMe) continue;
        a === "contentList" && c.filters.push(l), l.downgraded || (t.MUTEWORD_BEHAVIOR[a] === "blur" ? c.blurs.push(l) : t.MUTEWORD_BEHAVIOR[a] === "alert" ? c.alerts.push(l) : t.MUTEWORD_BEHAVIOR[a] === "inform" && c.informs.push(l));
      } else l.type === "hidden" ? ((a === "profileList" || a === "contentList") && c.filters.push(l), l.downgraded || (t.HIDE_BEHAVIOR[a] === "blur" ? c.blurs.push(l) : t.HIDE_BEHAVIOR[a] === "alert" ? c.alerts.push(l) : t.HIDE_BEHAVIOR[a] === "inform" && c.informs.push(l))) : l.type === "label" && (a === "profileList" && l.target === "account" ? l.setting === "hide" && !this.isMe && c.filters.push(l) : a === "contentList" && (l.target === "account" || l.target === "content") && l.setting === "hide" && !this.isMe && c.filters.push(l), l.downgraded || (l.behavior[a] === "blur" ? (c.blurs.push(l), l.noOverride && !this.isMe && (c.noOverride = true)) : l.behavior[a] === "alert" ? c.alerts.push(l) : l.behavior[a] === "inform" && c.informs.push(l)));
      return c.filters.sort(e), c.blurs.sort(e), c;
    }
    setDid(a) {
      this.did = a;
    }
    setIsMe(a) {
      this.isMe = a;
    }
    addHidden(a) {
      a && this.causes.push({ type: "hidden", source: { type: "user" }, priority: 6 });
    }
    addMutedWord(a) {
      a && this.causes.push({ type: "mute-word", source: { type: "user" }, priority: 6 });
    }
    addBlocking(a) {
      a && this.causes.push({ type: "blocking", source: { type: "user" }, priority: 3 });
    }
    addBlockingByList(a) {
      a && this.causes.push({ type: "blocking", source: { type: "list", list: a }, priority: 3 });
    }
    addBlockedBy(a) {
      a && this.causes.push({ type: "blocked-by", source: { type: "user" }, priority: 4 });
    }
    addBlockOther(a) {
      a && this.causes.push({ type: "block-other", source: { type: "user" }, priority: 4 });
    }
    addLabel(a, c, l) {
      const d = t.CUSTOM_LABEL_VALUE_RE.test(c.val) && l.labelDefs?.[c.src]?.find((x) => x.identifier === c.val) || r.LABELS[c.val];
      if (!d) return;
      const f = c.src === this.did, h = f ? void 0 : l.prefs.labelers.find((x) => x.did === c.src);
      if (!f && !h || f && d.flags.includes("no-self")) return;
      let p = d.defaultSetting || "ignore";
      if (d.configurable ? d.flags.includes("adult") && !l.prefs.adultContentEnabled ? p = "hide" : h?.labels[d.identifier] ? p = h?.labels[d.identifier] : l.prefs.labels[d.identifier] && (p = l.prefs.labels[d.identifier]) : p = d.defaultSetting || "hide", p === "ignore" || d.flags.includes("unauthed") && l.userDid) return;
      let b;
      const E = s(d.behaviors[a]);
      d.flags.includes("no-override") || d.flags.includes("adult") && !l.prefs.adultContentEnabled ? b = 1 : p === "hide" ? b = 2 : E === n.High ? b = 5 : E === n.Medium ? b = 7 : b = 8;
      let g = false;
      (d.flags.includes("no-override") || d.flags.includes("adult") && !l.prefs.adultContentEnabled) && (g = true), this.causes.push({ type: "label", source: f || !h ? { type: "user" } : { type: "labeler", did: h.did }, label: c, labelDef: d, target: a, setting: p, behavior: d.behaviors[a] || t.NOOP_BEHAVIOR, noOverride: g, priority: b });
    }
    addMuted(a) {
      a && this.causes.push({ type: "muted", source: { type: "user" }, priority: 6 });
    }
    addMutedByList(a) {
      a && this.causes.push({ type: "muted", source: { type: "list", list: a }, priority: 6 });
    }
  }
  is.ModerationDecision = o;
  function s(u) {
    return u ? u.profileView === "blur" || u.contentView === "blur" ? n.High : u.contentList === "blur" || u.contentMedia === "blur" ? n.Medium : n.Low : n.Low;
  }
  function e(u, a) {
    return u.priority - a.priority;
  }
  return is;
}
var os = {}, $E;
function Ba() {
  if ($E) return os;
  $E = 1, Object.defineProperty(os, "__esModule", { value: true }), os.decideAccount = t, os.filterAccountLabels = i;
  const r = ti();
  function t(n, o) {
    const s = new r.ModerationDecision();
    s.setDid(n.did), s.setIsMe(n.did === o.userDid), n.viewer?.muted && (n.viewer?.mutedByList ? s.addMutedByList(n.viewer?.mutedByList) : s.addMuted(n.viewer?.muted)), n.viewer?.blocking && (n.viewer?.blockingByList ? s.addBlockingByList(n.viewer?.blockingByList) : s.addBlocking(n.viewer?.blocking)), s.addBlockedBy(n.viewer?.blockedBy);
    for (const e of i(n.labels)) s.addLabel("account", e, o);
    return s;
  }
  function i(n) {
    return n ? n.filter((o) => !o.uri.endsWith("/app.bsky.actor.profile/self") || o.val === "!no-unauthenticated") : [];
  }
  return os;
}
var gl = {}, ss = {}, HE;
function Ua() {
  if (HE) return ss;
  HE = 1, Object.defineProperty(ss, "__esModule", { value: true }), ss.decideProfile = t, ss.filterProfileLabels = i;
  const r = ti();
  function t(n, o) {
    const s = new r.ModerationDecision();
    s.setDid(n.did), s.setIsMe(n.did === o.userDid);
    for (const e of i(n.labels)) s.addLabel("profile", e, o);
    return s;
  }
  function i(n) {
    return n ? n.filter((o) => o.uri.endsWith("/app.bsky.actor.profile/self")) : [];
  }
  return ss;
}
var XE;
function UT() {
  if (XE) return gl;
  XE = 1, Object.defineProperty(gl, "__esModule", { value: true }), gl.decideFeedGenerator = n;
  const r = ti(), t = Ba(), i = Ua();
  function n(o, s) {
    const e = new r.ModerationDecision();
    if (e.setDid(o.creator.did), e.setIsMe(o.creator.did === s.userDid), o.labels?.length) for (const u of o.labels) e.addLabel("content", u, s);
    return r.ModerationDecision.merge(e, (0, t.decideAccount)(o.creator, s), (0, i.decideProfile)(o.creator, s));
  }
  return gl;
}
var El = {}, WE;
function IT() {
  if (WE) return El;
  WE = 1, Object.defineProperty(El, "__esModule", { value: true }), El.decideNotification = n;
  const r = ti(), t = Ba(), i = Ua();
  function n(o, s) {
    const e = new r.ModerationDecision();
    if (e.setDid(o.author.did), e.setIsMe(o.author.did === s.userDid), o.labels?.length) for (const u of o.labels) e.addLabel("content", u, s);
    return r.ModerationDecision.merge(e, (0, t.decideAccount)(o.author, s), (0, i.decideProfile)(o.author, s));
  }
  return El;
}
var vl = {}, Rl = {}, JE;
function R_() {
  if (JE) return Rl;
  JE = 1, Object.defineProperty(Rl, "__esModule", { value: true }), Rl.hasMutedWord = n;
  const r = ii(), t = { LEADING_TRAILING_PUNCTUATION: /(?:^\p{P}+|\p{P}+$)/gu, WORD_BOUNDARY: /[\s\n\t\r\f\v]+?/g }, i = ["ja", "zh", "ko", "th", "vi"];
  function n({ mutedWords: o, text: s, facets: e, outlineTags: u, languages: a, actor: c }) {
    const l = i.includes(a?.[0] || ""), d = [].concat(u || []).concat((e || []).flatMap((f) => f.features.filter(r.AppBskyRichtextFacet.isTag).map((h) => h.tag))).map((f) => f.toLowerCase());
    for (const f of o) {
      const h = f.value.toLowerCase(), p = s.toLowerCase();
      if (f.expiresAt && f.expiresAt < (/* @__PURE__ */ new Date()).toISOString() || f.actorTarget === "exclude-following" && c?.viewer?.following) continue;
      if (d.includes(h)) return true;
      if (!f.targets.includes("content")) continue;
      if ((h.length === 1 || l) && p.includes(h)) return true;
      if (h.length > p.length) continue;
      if (h === p || /(?:\s|\p{P})+?/u.test(h) && p.includes(h)) return true;
      const b = p.split(t.WORD_BOUNDARY);
      for (const E of b) {
        if (E === h) return true;
        const g = E.replace(t.LEADING_TRAILING_PUNCTUATION, "");
        if (h === g) return true;
        if (!(h.length > g.length) && /\p{P}+/u.test(g)) {
          const x = g.replace(/\p{P}+/gu, " ");
          if (x === h || x.replace(/\s/gu, "") === h) return true;
          const A = g.split(/\p{P}+/u);
          for (const K of A) if (K === h) return true;
        }
      }
    }
    return false;
  }
  return Rl;
}
var ZE;
function KT() {
  if (ZE) return vl;
  ZE = 1, Object.defineProperty(vl, "__esModule", { value: true }), vl.decidePost = s;
  const r = ii(), t = ti(), i = R_(), n = Ba(), o = Ua();
  function s(f, h) {
    return t.ModerationDecision.merge(e(f, h), u(f.embed, h)?.downgrade(), (0, n.decideAccount)(f.author, h), (0, o.decideProfile)(f.author, h));
  }
  function e(f, h) {
    const p = new t.ModerationDecision();
    if (p.setDid(f.author.did), p.setIsMe(f.author.did === h.userDid), f.labels?.length) for (const b of f.labels) p.addLabel("content", b, h);
    return p.addHidden(l(f, h.prefs.hiddenPosts)), p.isMe || p.addMutedWord(d(f, h.prefs.mutedWords)), p;
  }
  function u(f, h) {
    if (f) {
      if ((r.AppBskyEmbedRecord.isView(f) || r.AppBskyEmbedRecordWithMedia.isView(f)) && r.AppBskyEmbedRecord.isViewRecord(f.record)) return a(f.record, h);
      if (r.AppBskyEmbedRecordWithMedia.isView(f) && r.AppBskyEmbedRecord.isViewRecord(f.record.record)) return a(f.record.record, h);
      if ((r.AppBskyEmbedRecord.isView(f) || r.AppBskyEmbedRecordWithMedia.isView(f)) && r.AppBskyEmbedRecord.isViewBlocked(f.record)) return c(f.record, h);
      if (r.AppBskyEmbedRecordWithMedia.isView(f) && r.AppBskyEmbedRecord.isViewBlocked(f.record.record)) return c(f.record.record, h);
    }
  }
  function a(f, h) {
    const p = new t.ModerationDecision();
    if (p.setDid(f.author.did), p.setIsMe(f.author.did === h.userDid), f.labels?.length) for (const b of f.labels) p.addLabel("content", b, h);
    return t.ModerationDecision.merge(p, (0, n.decideAccount)(f.author, h), (0, o.decideProfile)(f.author, h));
  }
  function c(f, h) {
    const p = new t.ModerationDecision();
    return p.setDid(f.author.did), p.setIsMe(f.author.did === h.userDid), f.author.viewer?.muted && (f.author.viewer?.mutedByList ? p.addMutedByList(f.author.viewer?.mutedByList) : p.addMuted(f.author.viewer?.muted)), f.author.viewer?.blocking && (f.author.viewer?.blockingByList ? p.addBlockingByList(f.author.viewer?.blockingByList) : p.addBlocking(f.author.viewer?.blocking)), p.addBlockedBy(f.author.viewer?.blockedBy), p;
  }
  function l(f, h) {
    return h?.length ? !!(h.includes(f.uri) || f.embed && (r.AppBskyEmbedRecord.isView(f.embed) && r.AppBskyEmbedRecord.isViewRecord(f.embed.record) && h.includes(f.embed.record.uri) || r.AppBskyEmbedRecordWithMedia.isView(f.embed) && r.AppBskyEmbedRecord.isViewRecord(f.embed.record.record) && h.includes(f.embed.record.record.uri))) : false;
  }
  function d(f, h) {
    if (!h?.length) return false;
    const p = f.author;
    if (r.AppBskyFeedPost.isRecord(f.record)) {
      const E = f.record;
      if ((0, i.hasMutedWord)({ mutedWords: h, text: E.text, facets: E.facets, outlineTags: E.tags, languages: E.langs, actor: p })) return true;
      if (E.embed && r.AppBskyEmbedImages.isMain(E.embed)) {
        for (const g of E.embed.images) if ((0, i.hasMutedWord)({ mutedWords: h, text: g.alt, languages: E.langs, actor: p })) return true;
      }
    }
    const { embed: b } = f;
    if (b) {
      if ((r.AppBskyEmbedRecord.isView(b) || r.AppBskyEmbedRecordWithMedia.isView(b)) && r.AppBskyEmbedRecord.isViewRecord(b.record)) {
        if (r.AppBskyFeedPost.isRecord(b.record.value)) {
          const E = b.record.value, g = b.record.author;
          if ((0, i.hasMutedWord)({ mutedWords: h, text: E.text, facets: E.facets, outlineTags: E.tags, languages: E.langs, actor: g })) return true;
          if (r.AppBskyEmbedImages.isMain(E.embed)) {
            for (const x of E.embed.images) if ((0, i.hasMutedWord)({ mutedWords: h, text: x.alt, languages: E.langs, actor: g })) return true;
          }
          if (r.AppBskyEmbedExternal.isMain(E.embed)) {
            const { external: x } = E.embed;
            if ((0, i.hasMutedWord)({ mutedWords: h, text: x.title + " " + x.description, languages: [], actor: g })) return true;
          }
          if (r.AppBskyEmbedRecordWithMedia.isMain(E.embed)) {
            if (r.AppBskyEmbedExternal.isMain(E.embed.media)) {
              const { external: x } = E.embed.media;
              if ((0, i.hasMutedWord)({ mutedWords: h, text: x.title + " " + x.description, languages: [], actor: g })) return true;
            }
            if (r.AppBskyEmbedImages.isMain(E.embed.media)) {
              for (const x of E.embed.media.images) if ((0, i.hasMutedWord)({ mutedWords: h, text: x.alt, languages: r.AppBskyFeedPost.isRecord(E.record) ? E.langs : [], actor: g })) return true;
            }
          }
        }
      } else if (r.AppBskyEmbedExternal.isView(b)) {
        const { external: E } = b;
        if ((0, i.hasMutedWord)({ mutedWords: h, text: E.title + " " + E.description, languages: [], actor: p })) return true;
      } else if (r.AppBskyEmbedRecordWithMedia.isView(b) && r.AppBskyEmbedRecord.isViewRecord(b.record.record)) {
        const E = b.record.record.author;
        if (r.AppBskyFeedPost.isRecord(b.record.record.value)) {
          const g = b.record.record.value;
          if ((0, i.hasMutedWord)({ mutedWords: h, text: g.text, facets: g.facets, outlineTags: g.tags, languages: g.langs, actor: E })) return true;
        }
        if (r.AppBskyEmbedImages.isView(b.media)) {
          for (const g of b.media.images) if ((0, i.hasMutedWord)({ mutedWords: h, text: g.alt, languages: r.AppBskyFeedPost.isRecord(f.record) ? f.record.langs : [], actor: E })) return true;
        }
        if (r.AppBskyEmbedExternal.isView(b.media)) {
          const { external: g } = b.media;
          if ((0, i.hasMutedWord)({ mutedWords: h, text: g.title + " " + g.description, languages: [], actor: E })) return true;
        }
      }
    }
    return false;
  }
  return vl;
}
var _l = {}, QE;
function OT() {
  if (QE) return _l;
  QE = 1, Object.defineProperty(_l, "__esModule", { value: true }), _l.decideUserList = o;
  const r = nn(), t = ti(), i = Ba(), n = Ua();
  function o(e, u) {
    const a = new t.ModerationDecision(), c = "creator" in e && s(e.creator) ? e.creator : void 0;
    if (c) {
      if (a.setDid(c.did), a.setIsMe(c.did === u.userDid), e.labels?.length) for (const d of e.labels) a.addLabel("content", d, u);
      return t.ModerationDecision.merge(a, (0, i.decideAccount)(c, u), (0, n.decideProfile)(c, u));
    }
    const l = new r.AtUri(e.uri).hostname;
    if (a.setDid(l), a.setIsMe(l === u.userDid), e.labels?.length) for (const d of e.labels) a.addLabel("content", d, u);
    return a;
  }
  function s(e) {
    return e && typeof e == "object" && "did" in e;
  }
  return _l;
}
var Di = {}, YE;
function jT() {
  if (YE) return Di;
  YE = 1, Object.defineProperty(Di, "__esModule", { value: true }), Di.isQuotedPost = i, Di.isQuotedPostWithMedia = n, Di.interpretLabelValueDefinition = o, Di.interpretLabelValueDefinitions = s;
  const r = ii(), t = P();
  function i(e) {
    return !!(e && r.AppBskyEmbedRecord.isView(e));
  }
  function n(e) {
    return !!(e && r.AppBskyEmbedRecordWithMedia.isView(e));
  }
  function o(e, u) {
    const a = { account: {}, profile: {}, content: {} }, c = e.severity === "alert" ? "alert" : e.severity === "inform" ? "inform" : void 0;
    e.blurs === "content" ? (a.account.profileList = c, a.account.profileView = c, a.account.contentList = "blur", a.account.contentView = e.adultOnly ? "blur" : c, a.profile.profileList = c, a.profile.profileView = c, a.content.contentList = "blur", a.content.contentView = e.adultOnly ? "blur" : c) : e.blurs === "media" ? (a.account.profileList = c, a.account.profileView = c, a.account.avatar = "blur", a.account.banner = "blur", a.profile.profileList = c, a.profile.profileView = c, a.profile.avatar = "blur", a.profile.banner = "blur", a.content.contentMedia = "blur") : e.blurs === "none" && (a.account.profileList = c, a.account.profileView = c, a.account.contentList = c, a.account.contentView = c, a.profile.profileList = c, a.profile.profileView = c, a.content.contentList = c, a.content.contentView = c);
    let l = "warn";
    (e.defaultSetting === "hide" || e.defaultSetting === "ignore") && (l = e.defaultSetting);
    const d = ["no-self"];
    return e.adultOnly && d.push("adult"), { ...e, definedBy: u, configurable: true, defaultSetting: l, flags: d, behaviors: a };
  }
  function s(e) {
    return (e.policies?.labelValueDefinitions || []).filter((0, t.asPredicate)(r.ComAtprotoLabelDefs.validateLabelValueDefinition)).map((u) => o(u, e.creator.did));
  }
  return Di;
}
var ev;
function __() {
  return ev || (ev = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.interpretLabelValueDefinitions = r.interpretLabelValueDefinition = r.hasMutedWord = r.ModerationDecision = r.ModerationUI = void 0, r.moderateProfile = f, r.moderatePost = h, r.moderateNotification = p, r.moderateFeedGenerator = b, r.moderateUserList = E;
    const t = ti(), i = Ba(), n = UT(), o = IT(), s = KT(), e = Ua(), u = OT();
    var a = v_();
    Object.defineProperty(r, "ModerationUI", { enumerable: true, get: function() {
      return a.ModerationUI;
    } });
    var c = ti();
    Object.defineProperty(r, "ModerationDecision", { enumerable: true, get: function() {
      return c.ModerationDecision;
    } });
    var l = R_();
    Object.defineProperty(r, "hasMutedWord", { enumerable: true, get: function() {
      return l.hasMutedWord;
    } });
    var d = jT();
    Object.defineProperty(r, "interpretLabelValueDefinition", { enumerable: true, get: function() {
      return d.interpretLabelValueDefinition;
    } }), Object.defineProperty(r, "interpretLabelValueDefinitions", { enumerable: true, get: function() {
      return d.interpretLabelValueDefinitions;
    } });
    function f(g, x) {
      return t.ModerationDecision.merge((0, i.decideAccount)(g, x), (0, e.decideProfile)(g, x));
    }
    function h(g, x) {
      return (0, s.decidePost)(g, x);
    }
    function p(g, x) {
      return (0, o.decideNotification)(g, x);
    }
    function b(g, x) {
      return (0, n.decideFeedGenerator)(g, x);
    }
    function E(g, x) {
      return (0, u.decideUserList)(g, x);
    }
  }(Pd)), Pd;
}
var as = {}, tv;
function qT() {
  if (tv) return as;
  tv = 1, Object.defineProperty(as, "__esModule", { value: true }), as.mock = void 0;
  const r = "bafyreiclp443lavogvhj3d2ob2cxbfuscni2k5jk7bebjzg7khl3esabwq";
  return as.mock = { post({ text: t, facets: i, reply: n, embed: o }) {
    return { $type: "app.bsky.feed.post", text: t, facets: i, reply: n, embed: o, langs: ["en"], createdAt: (/* @__PURE__ */ new Date()).toISOString() };
  }, postView({ record: t, author: i, embed: n, replyCount: o, repostCount: s, likeCount: e, viewer: u, labels: a }) {
    return { $type: "app.bsky.feed.defs#postView", uri: `at://${i.did}/app.bsky.feed.post/fake`, cid: r, author: i, record: t, embed: n, replyCount: o, repostCount: s, likeCount: e, indexedAt: (/* @__PURE__ */ new Date()).toISOString(), viewer: u, labels: a };
  }, embedRecordView({ record: t, author: i, labels: n }) {
    return { $type: "app.bsky.embed.record#view", record: { $type: "app.bsky.embed.record#viewRecord", uri: `at://${i.did}/app.bsky.feed.post/fake`, cid: r, author: i, value: t, labels: n, indexedAt: (/* @__PURE__ */ new Date()).toISOString() } };
  }, profileViewBasic({ handle: t, displayName: i, description: n, viewer: o, labels: s }) {
    return { did: `did:web:${t}`, handle: t, displayName: i, description: n, viewer: o, labels: s };
  }, actorViewerState({ muted: t, mutedByList: i, blockedBy: n, blocking: o, blockingByList: s, following: e, followedBy: u }) {
    return { muted: t, mutedByList: i, blockedBy: n, blocking: o, blockingByList: s, following: e, followedBy: u };
  }, listViewBasic({ name: t }) {
    return { uri: "at://did:plc:fake/app.bsky.graph.list/fake", cid: r, name: t, purpose: "app.bsky.graph.defs#modlist", indexedAt: (/* @__PURE__ */ new Date()).toISOString() };
  }, replyNotification({ author: t, record: i, labels: n }) {
    return { uri: `at://${t.did}/app.bsky.feed.post/fake`, cid: r, author: t, reason: "reply", reasonSubject: `at://${t.did}/app.bsky.feed.post/fake-parent`, record: i, isRead: false, indexedAt: (/* @__PURE__ */ new Date()).toISOString(), labels: n };
  }, followNotification({ author: t, subjectDid: i, labels: n }) {
    return { uri: `at://${t.did}/app.bsky.graph.follow/fake`, cid: r, author: t, reason: "follow", record: { $type: "app.bsky.graph.follow", createdAt: (/* @__PURE__ */ new Date()).toISOString(), subject: i }, isRead: false, indexedAt: (/* @__PURE__ */ new Date()).toISOString(), labels: n };
  }, label({ val: t, uri: i, src: n }) {
    return { src: n || "did:plc:fake-labeler", uri: i, val: t, cts: (/* @__PURE__ */ new Date()).toISOString() };
  } }, as;
}
var at = {}, $r = {}, rv;
function MT() {
  if (rv) return $r;
  rv = 1;
  var r = $r && $r.__classPrivateFieldGet || function(s, e, u, a) {
    if (u === "a" && !a) throw new TypeError("Private accessor was defined without a getter");
    if (typeof e == "function" ? s !== e || !a : !e.has(s)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return u === "m" ? a : u === "a" ? a.call(s) : a ? a.value : e.get(s);
  }, t = $r && $r.__classPrivateFieldSet || function(s, e, u, a, c) {
    if (a === "m") throw new TypeError("Private method is not writable");
    if (a === "a" && !c) throw new TypeError("Private accessor was defined without a setter");
    if (typeof e == "function" ? s !== e || !c : !e.has(s)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return a === "a" ? c.call(s, u) : c ? c.value = u : e.set(s, u), u;
  }, i, n;
  Object.defineProperty($r, "__esModule", { value: true });
  let o = class {
    constructor() {
      i.set(this, false), n.set(this, /* @__PURE__ */ new Set());
    }
    get acquired() {
      return r(this, i, "f");
    }
    acquireAsync({ timeout: e } = {}) {
      if (!r(this, i, "f")) return t(this, i, true, "f"), Promise.resolve();
      if (e == null) return new Promise((c) => {
        r(this, n, "f").add(c);
      });
      let u, a;
      return Promise.race([new Promise((c) => {
        u = () => {
          clearTimeout(a), c();
        }, r(this, n, "f").add(u);
      }), new Promise((c, l) => {
        a = setTimeout(() => {
          r(this, n, "f").delete(u), l(new Error("Timed out waiting for lock"));
        }, e);
      })]);
    }
    tryAcquire() {
      return r(this, i, "f") ? false : (t(this, i, true, "f"), true);
    }
    release() {
      if (!r(this, i, "f")) throw new Error("Cannot release an unacquired lock");
      if (r(this, n, "f").size > 0) {
        const [e] = r(this, n, "f");
        r(this, n, "f").delete(e), e();
      } else t(this, i, false, "f");
    }
  };
  return $r.default = o, i = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap(), $r;
}
var ye = {}, iv;
function VT() {
  if (iv) return ye;
  iv = 1, Object.defineProperty(ye, "__esModule", { value: true }), ye.isValidThreadViewPref = ye.isValidSavedFeedsPrefV2 = ye.isValidSavedFeedsPref = ye.isValidPostInteractionSettingsPref = ye.isValidPersonalDetailsPref = ye.isValidMutedWordsPref = ye.isValidLabelersPref = ye.isValidInterestsPref = ye.isValidHiddenPostsPref = ye.isValidFeedViewPref = ye.isValidContentLabelPref = ye.isValidBskyAppStatePref = ye.isValidAdultContentPref = ye.isValidProfile = void 0;
  const r = ii(), t = P();
  return ye.isValidProfile = (0, t.asPredicate)(r.AppBskyActorProfile.validateRecord), ye.isValidAdultContentPref = (0, t.asPredicate)(r.AppBskyActorDefs.validateAdultContentPref), ye.isValidBskyAppStatePref = (0, t.asPredicate)(r.AppBskyActorDefs.validateBskyAppStatePref), ye.isValidContentLabelPref = (0, t.asPredicate)(r.AppBskyActorDefs.validateContentLabelPref), ye.isValidFeedViewPref = (0, t.asPredicate)(r.AppBskyActorDefs.validateFeedViewPref), ye.isValidHiddenPostsPref = (0, t.asPredicate)(r.AppBskyActorDefs.validateHiddenPostsPref), ye.isValidInterestsPref = (0, t.asPredicate)(r.AppBskyActorDefs.validateInterestsPref), ye.isValidLabelersPref = (0, t.asPredicate)(r.AppBskyActorDefs.validateLabelersPref), ye.isValidMutedWordsPref = (0, t.asPredicate)(r.AppBskyActorDefs.validateMutedWordsPref), ye.isValidPersonalDetailsPref = (0, t.asPredicate)(r.AppBskyActorDefs.validatePersonalDetailsPref), ye.isValidPostInteractionSettingsPref = (0, t.asPredicate)(r.AppBskyActorDefs.validatePostInteractionSettingsPref), ye.isValidSavedFeedsPref = (0, t.asPredicate)(r.AppBskyActorDefs.validateSavedFeedsPref), ye.isValidSavedFeedsPrefV2 = (0, t.asPredicate)(r.AppBskyActorDefs.validateSavedFeedsPrefV2), ye.isValidThreadViewPref = (0, t.asPredicate)(r.AppBskyActorDefs.validateThreadViewPref), ye;
}
var nv;
function w_() {
  if (nv) return at;
  nv = 1;
  var r = at && at.__createBinding || (Object.create ? function(F, C, k, U) {
    U === void 0 && (U = k);
    var I = Object.getOwnPropertyDescriptor(C, k);
    (!I || ("get" in I ? !C.__esModule : I.writable || I.configurable)) && (I = { enumerable: true, get: function() {
      return C[k];
    } }), Object.defineProperty(F, U, I);
  } : function(F, C, k, U) {
    U === void 0 && (U = k), F[U] = C[k];
  }), t = at && at.__setModuleDefault || (Object.create ? function(F, C) {
    Object.defineProperty(F, "default", { enumerable: true, value: C });
  } : function(F, C) {
    F.default = C;
  }), i = at && at.__importStar || function(F) {
    if (F && F.__esModule) return F;
    var C = {};
    if (F != null) for (var k in F) k !== "default" && Object.prototype.hasOwnProperty.call(F, k) && r(C, F, k);
    return t(C, F), C;
  }, n = at && at.__classPrivateFieldGet || function(F, C, k, U) {
    if (k === "a" && !U) throw new TypeError("Private accessor was defined without a getter");
    if (typeof C == "function" ? F !== C || !U : !C.has(F)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return k === "m" ? U : k === "a" ? U.call(F) : U ? U.value : C.get(F);
  }, o = at && at.__importDefault || function(F) {
    return F && F.__esModule ? F : { default: F };
  }, s;
  Object.defineProperty(at, "__esModule", { value: true }), at.Agent = void 0;
  const e = o(MT()), u = Lr(), a = nn(), c = ue(), l = ii(), d = D(), f = f_(), h = __(), p = Sp(), b = i(VT()), E = h_(), g = { hideReplies: false, hideRepliesByUnfollowed: true, hideRepliesByLikeCount: 0, hideReposts: false, hideQuotePosts: false }, x = { sort: "hotness", prioritizeFollowedUsers: true };
  class T extends c.XrpcClient {
    static configure(C) {
      C.appLabelers && (this.appLabelers = C.appLabelers.map(E.asDid));
    }
    get xrpc() {
      return this;
    }
    constructor(C) {
      const k = typeof C == "string" || C instanceof URL ? { did: void 0, fetchHandler: (0, c.buildFetchHandler)(C) } : C;
      super((U, I) => {
        const N = new Headers(I?.headers);
        return this.proxy && !N.has("atproto-proxy") && N.set("atproto-proxy", this.proxy), N.set("atproto-accept-labelers", [...this.appLabelers.map((Z) => `${Z};redact`), ...this.labelers, N.get("atproto-accept-labelers")?.trim()].filter(Boolean).join(", ")), this.sessionManager.fetchHandler(U, { ...I, headers: N });
      }, d.schemas), Object.defineProperty(this, "com", { enumerable: true, configurable: true, writable: true, value: new l.ComNS(this) }), Object.defineProperty(this, "app", { enumerable: true, configurable: true, writable: true, value: new l.AppNS(this) }), Object.defineProperty(this, "chat", { enumerable: true, configurable: true, writable: true, value: new l.ChatNS(this) }), Object.defineProperty(this, "tools", { enumerable: true, configurable: true, writable: true, value: new l.ToolsNS(this) }), Object.defineProperty(this, "sessionManager", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "labelers", { enumerable: true, configurable: true, writable: true, value: [] }), Object.defineProperty(this, "proxy", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "uploadBlob", { enumerable: true, configurable: true, writable: true, value: (U, I) => this.com.atproto.repo.uploadBlob(U, I) }), Object.defineProperty(this, "resolveHandle", { enumerable: true, configurable: true, writable: true, value: (U, I) => this.com.atproto.identity.resolveHandle(U, I) }), Object.defineProperty(this, "updateHandle", { enumerable: true, configurable: true, writable: true, value: (U, I) => this.com.atproto.identity.updateHandle(U, I) }), Object.defineProperty(this, "createModerationReport", { enumerable: true, configurable: true, writable: true, value: (U, I) => this.com.atproto.moderation.createReport(U, I) }), Object.defineProperty(this, "getTimeline", { enumerable: true, configurable: true, writable: true, value: (U, I) => this.app.bsky.feed.getTimeline(U, I) }), Object.defineProperty(this, "getAuthorFeed", { enumerable: true, configurable: true, writable: true, value: (U, I) => this.app.bsky.feed.getAuthorFeed(U, I) }), Object.defineProperty(this, "getActorLikes", { enumerable: true, configurable: true, writable: true, value: (U, I) => this.app.bsky.feed.getActorLikes(U, I) }), Object.defineProperty(this, "getPostThread", { enumerable: true, configurable: true, writable: true, value: (U, I) => this.app.bsky.feed.getPostThread(U, I) }), Object.defineProperty(this, "getPost", { enumerable: true, configurable: true, writable: true, value: (U) => this.app.bsky.feed.post.get(U) }), Object.defineProperty(this, "getPosts", { enumerable: true, configurable: true, writable: true, value: (U, I) => this.app.bsky.feed.getPosts(U, I) }), Object.defineProperty(this, "getLikes", { enumerable: true, configurable: true, writable: true, value: (U, I) => this.app.bsky.feed.getLikes(U, I) }), Object.defineProperty(this, "getRepostedBy", { enumerable: true, configurable: true, writable: true, value: (U, I) => this.app.bsky.feed.getRepostedBy(U, I) }), Object.defineProperty(this, "getFollows", { enumerable: true, configurable: true, writable: true, value: (U, I) => this.app.bsky.graph.getFollows(U, I) }), Object.defineProperty(this, "getFollowers", { enumerable: true, configurable: true, writable: true, value: (U, I) => this.app.bsky.graph.getFollowers(U, I) }), Object.defineProperty(this, "getProfile", { enumerable: true, configurable: true, writable: true, value: (U, I) => this.app.bsky.actor.getProfile(U, I) }), Object.defineProperty(this, "getProfiles", { enumerable: true, configurable: true, writable: true, value: (U, I) => this.app.bsky.actor.getProfiles(U, I) }), Object.defineProperty(this, "getSuggestions", { enumerable: true, configurable: true, writable: true, value: (U, I) => this.app.bsky.actor.getSuggestions(U, I) }), Object.defineProperty(this, "searchActors", { enumerable: true, configurable: true, writable: true, value: (U, I) => this.app.bsky.actor.searchActors(U, I) }), Object.defineProperty(this, "searchActorsTypeahead", { enumerable: true, configurable: true, writable: true, value: (U, I) => this.app.bsky.actor.searchActorsTypeahead(U, I) }), Object.defineProperty(this, "listNotifications", { enumerable: true, configurable: true, writable: true, value: (U, I) => this.app.bsky.notification.listNotifications(U, I) }), Object.defineProperty(this, "countUnreadNotifications", { enumerable: true, configurable: true, writable: true, value: (U, I) => this.app.bsky.notification.getUnreadCount(U, I) }), Object.defineProperty(this, "getLabelers", { enumerable: true, configurable: true, writable: true, value: (U, I) => this.app.bsky.labeler.getServices(U, I) }), s.set(this, new e.default()), this.sessionManager = k;
    }
    clone() {
      return this.copyInto(new T(this.sessionManager));
    }
    copyInto(C) {
      C.configureLabelers(this.labelers), C.configureProxy(this.proxy ?? null), C.clearHeaders();
      for (const [k, U] of this.headers) C.setHeader(k, U);
      return C;
    }
    withProxy(C, k) {
      const U = this.clone();
      return U.configureProxy(`${(0, E.asDid)(k)}#${C}`), U;
    }
    get appLabelers() {
      return this.constructor.appLabelers;
    }
    configureLabelers(C) {
      this.labelers = C.map(E.asDid);
    }
    configureLabelersHeader(C) {
      this.configureLabelers(C.filter(E.isDid));
    }
    configureProxy(C) {
      if (C === null) this.proxy = void 0;
      else if ((0, E.isDid)(C)) this.proxy = C;
      else throw new TypeError("Invalid proxy DID");
    }
    configureProxyHeader(C, k) {
      (0, E.isDid)(k) && this.configureProxy(`${k}#${C}`);
    }
    get did() {
      return this.sessionManager.did;
    }
    get accountDid() {
      return this.assertDid;
    }
    get assertDid() {
      return this.assertAuthenticated(), this.did;
    }
    assertAuthenticated() {
      if (!this.did) throw new Error("Not logged in");
    }
    get api() {
      return this;
    }
    async getLabelDefinitions(C) {
      const k = [...this.appLabelers];
      O(C) ? k.push(...C.moderationPrefs.labelers.map((N) => N.did)) : z(C) ? k.push(...C.labelers.map((N) => N.did)) : k.push(...C);
      const U = await this.getLabelers({ dids: k, detailed: true }), I = {};
      if (U.data) for (const N of U.data.views) I[N.creator.did] = (0, h.interpretLabelValueDefinitions)(N);
      return I;
    }
    async post(C) {
      return C.createdAt || (C.createdAt = (/* @__PURE__ */ new Date()).toISOString()), this.app.bsky.feed.post.create({ repo: this.accountDid }, C);
    }
    async deletePost(C) {
      this.assertAuthenticated();
      const k = new a.AtUri(C);
      return this.app.bsky.feed.post.delete({ repo: k.hostname, rkey: k.rkey });
    }
    async like(C, k) {
      return this.app.bsky.feed.like.create({ repo: this.accountDid }, { subject: { uri: C, cid: k }, createdAt: (/* @__PURE__ */ new Date()).toISOString() });
    }
    async deleteLike(C) {
      this.assertAuthenticated();
      const k = new a.AtUri(C);
      return this.app.bsky.feed.like.delete({ repo: k.hostname, rkey: k.rkey });
    }
    async repost(C, k) {
      return this.app.bsky.feed.repost.create({ repo: this.accountDid }, { subject: { uri: C, cid: k }, createdAt: (/* @__PURE__ */ new Date()).toISOString() });
    }
    async deleteRepost(C) {
      this.assertAuthenticated();
      const k = new a.AtUri(C);
      return this.app.bsky.feed.repost.delete({ repo: k.hostname, rkey: k.rkey });
    }
    async follow(C) {
      return this.app.bsky.graph.follow.create({ repo: this.accountDid }, { subject: C, createdAt: (/* @__PURE__ */ new Date()).toISOString() });
    }
    async deleteFollow(C) {
      this.assertAuthenticated();
      const k = new a.AtUri(C);
      return this.app.bsky.graph.follow.delete({ repo: k.hostname, rkey: k.rkey });
    }
    async upsertProfile(C) {
      const k = async () => {
        const U = this.assertDid, I = "app.bsky.actor.profile", N = await this.com.atproto.repo.getRecord({ repo: U, collection: I, rkey: "self" }).catch((ve) => {
        }), Z = N && b.isValidProfile(N.data.value) ? N.data.value : void 0, se = await C(Z), le = l.AppBskyActorProfile.validateRecord({ $type: I, ...se });
        if (!le.success) throw le.error;
        await this.com.atproto.repo.putRecord({ repo: U, collection: I, rkey: "self", record: le.value, swapRecord: N?.data.cid || null });
      };
      return (0, u.retry)(k, { maxRetries: 5, retryable: (U) => U instanceof l.ComAtprotoRepoPutRecord.InvalidSwapError });
    }
    async mute(C) {
      return this.app.bsky.graph.muteActor({ actor: C });
    }
    async unmute(C) {
      return this.app.bsky.graph.unmuteActor({ actor: C });
    }
    async muteModList(C) {
      return this.app.bsky.graph.muteActorList({ list: C });
    }
    async unmuteModList(C) {
      return this.app.bsky.graph.unmuteActorList({ list: C });
    }
    async blockModList(C) {
      return this.app.bsky.graph.listblock.create({ repo: this.accountDid }, { subject: C, createdAt: (/* @__PURE__ */ new Date()).toISOString() });
    }
    async unblockModList(C) {
      const k = this.accountDid, I = (await this.app.bsky.graph.getList({ list: C, limit: 1 })).data.list.viewer?.blocked;
      if (I) {
        const { rkey: N } = new a.AtUri(I);
        return this.app.bsky.graph.listblock.delete({ repo: k, rkey: N });
      }
    }
    async updateSeenNotifications(C = (/* @__PURE__ */ new Date()).toISOString()) {
      return this.app.bsky.notification.updateSeen({ seenAt: C });
    }
    async getPreferences() {
      const C = { feeds: { saved: void 0, pinned: void 0 }, savedFeeds: void 0, feedViewPrefs: { home: { ...g } }, threadViewPrefs: { ...x }, moderationPrefs: { adultContentEnabled: false, labels: { ...p.DEFAULT_LABEL_SETTINGS }, labelers: this.appLabelers.map((I) => ({ did: I, labels: {} })), mutedWords: [], hiddenPosts: [] }, birthDate: void 0, interests: { tags: [] }, bskyAppState: { queuedNudges: [], activeProgressGuide: void 0, nuxs: [] }, postInteractionSettings: { threadgateAllowRules: void 0, postgateEmbeddingRules: void 0 } }, k = await this.app.bsky.actor.getPreferences({}), U = [];
      for (const I of k.data.preferences) if (b.isValidAdultContentPref(I)) C.moderationPrefs.adultContentEnabled = I.enabled;
      else if (b.isValidContentLabelPref(I)) {
        const N = A(I);
        U.push(N);
      } else if (b.isValidLabelersPref(I)) C.moderationPrefs.labelers = this.appLabelers.map((N) => ({ did: N, labels: {} })).concat(I.labelers.map((N) => ({ ...N, labels: {} })));
      else if (b.isValidSavedFeedsPrefV2(I)) C.savedFeeds = I.items;
      else if (b.isValidSavedFeedsPref(I)) C.feeds.saved = I.saved, C.feeds.pinned = I.pinned;
      else if (b.isValidPersonalDetailsPref(I)) I.birthDate && (C.birthDate = new Date(I.birthDate));
      else if (b.isValidFeedViewPref(I)) {
        const { $type: N, feed: Z, ...se } = I;
        C.feedViewPrefs[Z] = { ...g, ...se };
      } else if (b.isValidThreadViewPref(I)) {
        const { $type: N, ...Z } = I;
        C.threadViewPrefs = { ...C.threadViewPrefs, ...Z };
      } else if (b.isValidInterestsPref(I)) {
        const { $type: N, ...Z } = I;
        C.interests = { ...C.interests, ...Z };
      } else b.isValidMutedWordsPref(I) ? (C.moderationPrefs.mutedWords = I.items, C.moderationPrefs.mutedWords.length && (C.moderationPrefs.mutedWords = C.moderationPrefs.mutedWords.map((N) => (N.actorTarget = N.actorTarget || "all", N)))) : b.isValidHiddenPostsPref(I) ? C.moderationPrefs.hiddenPosts = I.items : b.isValidBskyAppStatePref(I) ? (C.bskyAppState.queuedNudges = I.queuedNudges || [], C.bskyAppState.activeProgressGuide = I.activeProgressGuide, C.bskyAppState.nuxs = I.nuxs || []) : b.isValidPostInteractionSettingsPref(I) && (C.postInteractionSettings.threadgateAllowRules = I.threadgateAllowRules, C.postInteractionSettings.postgateEmbeddingRules = I.postgateEmbeddingRules);
      if (C.savedFeeds == null) {
        const { saved: I, pinned: N } = C.feeds;
        if (I && N) {
          const Z = /* @__PURE__ */ new Map();
          Z.set("timeline", { id: u.TID.nextStr(), type: "timeline", value: "following", pinned: true });
          for (const se of N) {
            const le = (0, E.getSavedFeedType)(se);
            le !== "unknown" && Z.set(se, { id: u.TID.nextStr(), type: le, value: se, pinned: true });
          }
          for (const se of I) if (!Z.has(se)) {
            const le = (0, E.getSavedFeedType)(se);
            if (le === "unknown") continue;
            Z.set(se, { id: u.TID.nextStr(), type: le, value: se, pinned: false });
          }
          C.savedFeeds = Array.from(Z.values());
        } else C.savedFeeds = [{ id: u.TID.nextStr(), type: "timeline", value: "following", pinned: true }];
        await this.overwriteSavedFeeds(C.savedFeeds);
      }
      for (const I of U) if (I.labelerDid) {
        const N = C.moderationPrefs.labelers.find((Z) => Z.did === I.labelerDid);
        if (!N) continue;
        N.labels[I.label] = I.visibility;
      } else C.moderationPrefs.labels[I.label] = I.visibility;
      return C.moderationPrefs.labels = K(C.moderationPrefs.labels), this.configureLabelers(j(k.data.preferences)), C;
    }
    async overwriteSavedFeeds(C) {
      C.forEach(E.validateSavedFeed);
      const k = /* @__PURE__ */ new Map();
      return C.forEach((U) => {
        k.has(U.id) && k.delete(U.id), k.set(U.id, U);
      }), this.updateSavedFeedsV2Preferences(() => Array.from(k.values()));
    }
    async updateSavedFeeds(C) {
      return C.map(E.validateSavedFeed), this.updateSavedFeedsV2Preferences((k) => k.map((U) => {
        const I = C.find((N) => U.id === N.id);
        return I ? { ...U, pinned: I.pinned } : U;
      }));
    }
    async addSavedFeeds(C) {
      const k = C.map((U) => ({ ...U, id: u.TID.nextStr() }));
      return k.forEach(E.validateSavedFeed), this.updateSavedFeedsV2Preferences((U) => [...U, ...k]);
    }
    async removeSavedFeeds(C) {
      return this.updateSavedFeedsV2Preferences((k) => [...k.filter((U) => !C.find((I) => U.id === I))]);
    }
    async setSavedFeeds(C, k) {
      return this.updateFeedPreferences(() => ({ saved: C, pinned: k }));
    }
    async addSavedFeed(C) {
      return this.updateFeedPreferences((k, U) => ({ saved: [...k.filter((I) => I !== C), C], pinned: U }));
    }
    async removeSavedFeed(C) {
      return this.updateFeedPreferences((k, U) => ({ saved: k.filter((I) => I !== C), pinned: U.filter((I) => I !== C) }));
    }
    async addPinnedFeed(C) {
      return this.updateFeedPreferences((k, U) => ({ saved: [...k.filter((I) => I !== C), C], pinned: [...U.filter((I) => I !== C), C] }));
    }
    async removePinnedFeed(C) {
      return this.updateFeedPreferences((k, U) => ({ saved: k, pinned: U.filter((I) => I !== C) }));
    }
    async setAdultContentEnabled(C) {
      await this.updatePreferences((k) => {
        const U = k.findLast(b.isValidAdultContentPref) || { $type: "app.bsky.actor.defs#adultContentPref", enabled: C };
        return U.enabled = C, k.filter((I) => !l.AppBskyActorDefs.isAdultContentPref(I)).concat(U);
      });
    }
    async setContentLabelPref(C, k, U) {
      U && (0, a.ensureValidDid)(U), await this.updatePreferences((I) => {
        const N = I.filter(b.isValidContentLabelPref).findLast((se) => se.label === C && se.labelerDid === U) || { $type: "app.bsky.actor.defs#contentLabelPref", label: C, labelerDid: U, visibility: k };
        N.visibility = k;
        let Z;
        if (l.AppBskyActorDefs.isContentLabelPref(N) && !N.labelerDid) {
          const se = { "graphic-media": "gore", porn: "nsfw", sexual: "suggestive", __proto__: null }[N.label];
          se && (Z = I.filter(b.isValidContentLabelPref).findLast((le) => le.label === se && le.labelerDid === void 0) || { $type: "app.bsky.actor.defs#contentLabelPref", label: se, labelerDid: void 0, visibility: k }, Z.visibility = k);
        }
        return I.filter((se) => !l.AppBskyActorDefs.isContentLabelPref(se) || !(se.label === C && se.labelerDid === U)).concat(N).filter((se) => Z ? !l.AppBskyActorDefs.isContentLabelPref(se) || !(se.label === Z.label && se.labelerDid === void 0) : true).concat(Z ? [Z] : []);
      });
    }
    async addLabeler(C) {
      const k = await this.updatePreferences((U) => {
        const I = U.findLast(b.isValidLabelersPref) || { $type: "app.bsky.actor.defs#labelersPref", labelers: [] };
        return I.labelers.some((N) => N.did === C) || I.labelers.push({ did: C }), U.filter((N) => !l.AppBskyActorDefs.isLabelersPref(N)).concat(I);
      });
      this.configureLabelers(j(k));
    }
    async removeLabeler(C) {
      const k = await this.updatePreferences((U) => {
        const I = U.findLast(b.isValidLabelersPref) || { $type: "app.bsky.actor.defs#labelersPref", labelers: [] };
        return I.labelers = I.labelers.filter((N) => N.did !== C), U.filter((N) => !l.AppBskyActorDefs.isLabelersPref(N)).concat(I);
      });
      this.configureLabelers(j(k));
    }
    async setPersonalDetails({ birthDate: C }) {
      await this.updatePreferences((k) => {
        const U = k.findLast(b.isValidPersonalDetailsPref) || { $type: "app.bsky.actor.defs#personalDetailsPref" };
        return U.birthDate = C instanceof Date ? C.toISOString() : C, k.filter((I) => !l.AppBskyActorDefs.isPersonalDetailsPref(I)).concat(U);
      });
    }
    async setFeedViewPrefs(C, k) {
      await this.updatePreferences((U) => {
        const I = U.filter(b.isValidFeedViewPref).findLast((N) => N.feed === C);
        return U.filter((N) => !l.AppBskyActorDefs.isFeedViewPref(N) || N.feed !== C).concat({ ...I, ...k, $type: "app.bsky.actor.defs#feedViewPref", feed: C });
      });
    }
    async setThreadViewPrefs(C) {
      await this.updatePreferences((k) => {
        const U = k.findLast(b.isValidThreadViewPref);
        return k.filter((I) => !l.AppBskyActorDefs.isThreadViewPref(I)).concat({ ...U, ...C, $type: "app.bsky.actor.defs#threadViewPref" });
      });
    }
    async setInterestsPref(C) {
      await this.updatePreferences((k) => {
        const U = k.findLast(b.isValidInterestsPref);
        return k.filter((I) => !l.AppBskyActorDefs.isInterestsPref(I)).concat({ ...U, ...C, $type: "app.bsky.actor.defs#interestsPref" });
      });
    }
    async addMutedWord(C) {
      const k = (0, E.sanitizeMutedWordValue)(C.value);
      k && await this.updatePreferences((U) => {
        let I = U.findLast(b.isValidMutedWordsPref);
        const N = { id: u.TID.nextStr(), value: k, targets: C.targets || [], actorTarget: C.actorTarget || "all", expiresAt: C.expiresAt || void 0 };
        return I ? (I.items.push(N), I.items = H(I.items)) : I = { $type: "app.bsky.actor.defs#mutedWordsPref", items: [N] }, U.filter((Z) => !l.AppBskyActorDefs.isMutedWordsPref(Z)).concat(I);
      });
    }
    async addMutedWords(C) {
      await Promise.all(C.map((k) => this.addMutedWord(k)));
    }
    async upsertMutedWords(C) {
      await this.addMutedWords(C);
    }
    async updateMutedWord(C) {
      await this.updatePreferences((k) => {
        const U = k.findLast(b.isValidMutedWordsPref);
        return U ? (U.items = U.items.map((I) => {
          if (X(I, C)) {
            const Z = { ...I, ...C };
            return { id: I.id || u.TID.nextStr(), value: (0, E.sanitizeMutedWordValue)(Z.value) || I.value, targets: Z.targets || [], actorTarget: Z.actorTarget || "all", expiresAt: Z.expiresAt || void 0 };
          } else return I;
        }), U.items = H(U.items), k.filter((I) => !l.AppBskyActorDefs.isMutedWordsPref(I)).concat(U)) : k;
      });
    }
    async removeMutedWord(C) {
      await this.updatePreferences((k) => {
        const U = k.findLast(b.isValidMutedWordsPref);
        if (U) {
          for (let I = 0; I < U.items.length; I++) if (X(U.items[I], C)) {
            U.items.splice(I, 1);
            break;
          }
          return U.items = H(U.items), k.filter((I) => !l.AppBskyActorDefs.isMutedWordsPref(I)).concat(U);
        }
        return k;
      });
    }
    async removeMutedWords(C) {
      await Promise.all(C.map((k) => this.removeMutedWord(k)));
    }
    async hidePost(C) {
      await this.updateHiddenPost(C, "hide");
    }
    async unhidePost(C) {
      await this.updateHiddenPost(C, "unhide");
    }
    async bskyAppQueueNudges(C) {
      await this.updatePreferences((k) => {
        const U = k.findLast(b.isValidBskyAppStatePref) || { $type: "app.bsky.actor.defs#bskyAppStatePref" };
        return U.queuedNudges = (U.queuedNudges || []).concat(C), k.filter((I) => !l.AppBskyActorDefs.isBskyAppStatePref(I)).concat(U);
      });
    }
    async bskyAppDismissNudges(C) {
      await this.updatePreferences((k) => {
        const U = k.findLast(b.isValidBskyAppStatePref) || { $type: "app.bsky.actor.defs#bskyAppStatePref" };
        return C = Array.isArray(C) ? C : [C], U.queuedNudges = (U.queuedNudges || []).filter((I) => !C.includes(I)), k.filter((I) => !l.AppBskyActorDefs.isBskyAppStatePref(I)).concat(U);
      });
    }
    async bskyAppSetActiveProgressGuide(C) {
      if (C) {
        const k = l.AppBskyActorDefs.validateBskyAppProgressGuide(C);
        if (!k.success) throw k.error;
      }
      await this.updatePreferences((k) => {
        const U = k.findLast(b.isValidBskyAppStatePref) || { $type: "app.bsky.actor.defs#bskyAppStatePref" };
        return U.activeProgressGuide = C, k.filter((I) => !l.AppBskyActorDefs.isBskyAppStatePref(I)).concat(U);
      });
    }
    async bskyAppUpsertNux(C) {
      (0, E.validateNux)(C), await this.updatePreferences((k) => {
        const U = k.findLast(b.isValidBskyAppStatePref) || { $type: "app.bsky.actor.defs#bskyAppStatePref" };
        U.nuxs = U.nuxs || [];
        const I = U.nuxs?.find((Z) => Z.id === C.id);
        let N;
        return I ? N = { id: I.id, completed: C.completed, data: C.data, expiresAt: C.expiresAt } : N = C, U.nuxs = U.nuxs.filter((Z) => Z.id !== C.id).concat(N), k.filter((Z) => !l.AppBskyActorDefs.isBskyAppStatePref(Z)).concat(U);
      });
    }
    async bskyAppRemoveNuxs(C) {
      await this.updatePreferences((k) => {
        const U = k.findLast(b.isValidBskyAppStatePref) || { $type: "app.bsky.actor.defs#bskyAppStatePref" };
        return U.nuxs = (U.nuxs || []).filter((I) => !C.includes(I.id)), k.filter((I) => !l.AppBskyActorDefs.isBskyAppStatePref(I)).concat(U);
      });
    }
    async setPostInteractionSettings(C) {
      const k = l.AppBskyActorDefs.validatePostInteractionSettingsPref(C);
      if (!k.success) throw k.error;
      await this.updatePreferences((U) => {
        const I = U.findLast(b.isValidPostInteractionSettingsPref) || { $type: "app.bsky.actor.defs#postInteractionSettingsPref" };
        return I.threadgateAllowRules = C.threadgateAllowRules, I.postgateEmbeddingRules = C.postgateEmbeddingRules, U.filter((N) => !l.AppBskyActorDefs.isPostInteractionSettingsPref(N)).concat(I);
      });
    }
    async updatePreferences(C) {
      try {
        await n(this, s, "f").acquireAsync();
        const k = await this.app.bsky.actor.getPreferences({}), U = C(k.data.preferences);
        return U === false ? k.data.preferences : (await this.app.bsky.actor.putPreferences({ preferences: U }), U);
      } finally {
        n(this, s, "f").release();
      }
    }
    async updateHiddenPost(C, k) {
      await this.updatePreferences((U) => {
        const I = U.findLast(b.isValidHiddenPostsPref) || { $type: "app.bsky.actor.defs#hiddenPostsPref", items: [] }, N = new Set(I.items);
        return k === "hide" ? N.add(C) : N.delete(C), I.items = [...N], U.filter((Z) => !l.AppBskyActorDefs.isHiddenPostsPref(Z)).concat(I);
      });
    }
    async updateFeedPreferences(C) {
      let k;
      return await this.updatePreferences((U) => {
        const I = U.findLast(b.isValidSavedFeedsPref) || { $type: "app.bsky.actor.defs#savedFeedsPref", saved: [], pinned: [] };
        return k = C(I.saved, I.pinned), I.saved = k.saved, I.pinned = k.pinned, U.filter((N) => !l.AppBskyActorDefs.isSavedFeedsPref(N)).concat(I);
      }), k;
    }
    async updateSavedFeedsV2Preferences(C) {
      let k = [];
      return await this.updatePreferences((U) => {
        const I = U.findLast(b.isValidSavedFeedsPrefV2) || { $type: "app.bsky.actor.defs#savedFeedsPrefV2", items: [] }, N = C(I.items);
        I.items = [...N].sort((le, ve) => le.pinned === ve.pinned ? 0 : le.pinned ? -1 : 1), k = N;
        let Z = U.filter((le) => !l.AppBskyActorDefs.isSavedFeedsPrefV2(le)).concat(I), se = U.findLast(b.isValidSavedFeedsPref);
        if (se) {
          const { saved: le, pinned: ve } = se, be = (0, E.savedFeedsToUriArrays)(I.items.filter((_e) => ["feed", "list"].includes(_e.type)));
          se = { ...se, saved: Array.from(/* @__PURE__ */ new Set([...le, ...be.saved])), pinned: Array.from(/* @__PURE__ */ new Set([...ve, ...be.pinned])) }, Z = Z.filter((_e) => !l.AppBskyActorDefs.isSavedFeedsPref(_e)).concat(se);
        }
        return Z;
      }), k;
    }
  }
  at.Agent = T, s = /* @__PURE__ */ new WeakMap(), Object.defineProperty(T, "appLabelers", { enumerable: true, configurable: true, writable: true, value: [f.BSKY_LABELER_DID] });
  function A(F) {
    let C = F.visibility;
    return C === "show" && (C = "ignore"), { ...F, visibility: C };
  }
  function K(F) {
    const C = { ...F }, k = { gore: "graphic-media", nsfw: "porn", suggestive: "sexual" };
    for (const U in C) {
      const I = k[U];
      I && (C[I] = C[U]);
    }
    return C;
  }
  function j(F) {
    const C = F.findLast(b.isValidLabelersPref);
    let k = [];
    return C && (k = C.labelers.map((U) => U.did)), k;
  }
  function O(F) {
    return F && typeof F == "object" && "moderationPrefs" in F && z(F.moderationPrefs);
  }
  function z(F) {
    return F && typeof F == "object" && "labelers" in F;
  }
  function H(F) {
    return F.map((C) => ({ ...C, id: C.id || u.TID.nextStr() }));
  }
  function X(F, C) {
    const k = F.id, U = k && k === C.id, I = !k && F.value === C.value;
    return U || I;
  }
  return at;
}
var Pi = {}, ov;
function Bl() {
  if (ov) return Pi;
  ov = 1, Object.defineProperty(Pi, "__esModule", { value: true }), Pi.CredentialSession = Pi.AtpAgent = void 0;
  const r = Lr(), t = ue(), i = w_(), n = ii(), o = D(), s = globalThis.ReadableStream;
  class e extends i.Agent {
    constructor(p) {
      const b = p instanceof u ? p : new u(new URL(p.service), p.fetch, p.persistSession);
      if (super(b), Object.defineProperty(this, "sessionManager", { enumerable: true, configurable: true, writable: true, value: void 0 }), this.sessionManager = b, !(p instanceof u) && p.headers) for (const [E, g] of p.headers) this.setHeader(E, g);
    }
    clone() {
      return this.copyInto(new e(this.sessionManager));
    }
    get session() {
      return this.sessionManager.session;
    }
    get hasSession() {
      return this.sessionManager.hasSession;
    }
    get did() {
      return this.sessionManager.did;
    }
    get serviceUrl() {
      return this.sessionManager.serviceUrl;
    }
    get pdsUrl() {
      return this.sessionManager.pdsUrl;
    }
    get dispatchUrl() {
      return this.sessionManager.dispatchUrl;
    }
    get service() {
      return this.serviceUrl;
    }
    get persistSession() {
      throw new Error('Cannot set persistSession directly. "persistSession" is defined through the constructor and will be invoked automatically when session data changes.');
    }
    set persistSession(p) {
      throw new Error('Cannot set persistSession directly. "persistSession" must be defined in the constructor and can no longer be changed.');
    }
    getServiceUrl() {
      return this.serviceUrl;
    }
    async resumeSession(p) {
      return this.sessionManager.resumeSession(p);
    }
    async createAccount(p, b) {
      return this.sessionManager.createAccount(p, b);
    }
    async login(p) {
      return this.sessionManager.login(p);
    }
    async logout() {
      return this.sessionManager.logout();
    }
  }
  Pi.AtpAgent = e;
  class u {
    constructor(p, b = globalThis.fetch, E) {
      Object.defineProperty(this, "serviceUrl", { enumerable: true, configurable: true, writable: true, value: p }), Object.defineProperty(this, "fetch", { enumerable: true, configurable: true, writable: true, value: b }), Object.defineProperty(this, "persistSession", { enumerable: true, configurable: true, writable: true, value: E }), Object.defineProperty(this, "pdsUrl", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "session", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "refreshSessionPromise", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "server", { enumerable: true, configurable: true, writable: true, value: new n.ComAtprotoServerNS(new t.XrpcClient((g, x) => (0, this.fetch)(new URL(g, this.serviceUrl), x), o.schemas)) });
    }
    get did() {
      return this.session?.did;
    }
    get dispatchUrl() {
      return this.pdsUrl || this.serviceUrl;
    }
    get hasSession() {
      return !!this.session;
    }
    setFetch(p = globalThis.fetch) {
      this.fetch = p;
    }
    async fetchHandler(p, b) {
      await this.refreshSessionPromise;
      const E = new URL(p, this.dispatchUrl), g = new Request(E, b), x = this.session?.accessJwt;
      if (!x || g.headers.has("authorization")) return (0, this.fetch)(g);
      g.headers.set("authorization", `Bearer ${x}`);
      const T = await (0, this.fetch)(g);
      if (!this.session?.refreshJwt || !await c(T, [400], ["ExpiredToken"])) return T;
      try {
        await this.refreshSession();
      } catch {
        return T;
      }
      if (b?.signal?.aborted || s && b?.body instanceof s) return T;
      const K = this.session?.accessJwt;
      if (!K || K === x) return T;
      await T.body?.cancel();
      const j = new URL(p, this.dispatchUrl), O = new Request(j, b);
      return O.headers.set("authorization", `Bearer ${K}`), await (0, this.fetch)(O);
    }
    async createAccount(p, b) {
      try {
        const E = await this.server.createAccount(p, b);
        return this.session = { accessJwt: E.data.accessJwt, refreshJwt: E.data.refreshJwt, handle: E.data.handle, did: E.data.did, email: p.email, emailConfirmed: false, emailAuthFactor: false, active: true }, this.persistSession?.("create", this.session), this._updateApiEndpoint(E.data.didDoc), E;
      } catch (E) {
        throw this.session = void 0, this.persistSession?.("create-failed", void 0), E;
      }
    }
    async login(p) {
      try {
        const b = await this.server.createSession({ identifier: p.identifier, password: p.password, authFactorToken: p.authFactorToken, allowTakendown: p.allowTakendown });
        return this.session = { accessJwt: b.data.accessJwt, refreshJwt: b.data.refreshJwt, handle: b.data.handle, did: b.data.did, email: b.data.email, emailConfirmed: b.data.emailConfirmed, emailAuthFactor: b.data.emailAuthFactor, active: b.data.active ?? true, status: b.data.status }, this._updateApiEndpoint(b.data.didDoc), this.persistSession?.("create", this.session), b;
      } catch (b) {
        throw this.session = void 0, this.persistSession?.("create-failed", void 0), b;
      }
    }
    async logout() {
      if (this.session) try {
        await this.server.deleteSession(void 0, { headers: { authorization: `Bearer ${this.session.refreshJwt}` } });
      } catch {
      } finally {
        this.session = void 0, this.persistSession?.("expired", void 0);
      }
    }
    async resumeSession(p) {
      this.session = p;
      try {
        const b = await this.server.getSession(void 0, { headers: { authorization: `Bearer ${p.accessJwt}` } }).catch(async (E) => {
          if (E instanceof t.XRPCError && ["ExpiredToken", "InvalidToken"].includes(E.error) && p.refreshJwt) try {
            const g = await this.server.refreshSession(void 0, { headers: { authorization: `Bearer ${p.refreshJwt}` } });
            return p.accessJwt = g.data.accessJwt, p.refreshJwt = g.data.refreshJwt, this.server.getSession(void 0, { headers: { authorization: `Bearer ${p.accessJwt}` } });
          } catch {
          }
          throw E;
        });
        if (b.data.did !== p.did) throw new t.XRPCError(t.ResponseType.InvalidRequest, "Invalid session", "InvalidDID");
        return p.email = b.data.email, p.handle = b.data.handle, p.emailConfirmed = b.data.emailConfirmed, p.emailAuthFactor = b.data.emailAuthFactor, p.active = b.data.active ?? true, p.status = b.data.status, this.session === p && (this._updateApiEndpoint(b.data.didDoc), this.persistSession?.("update", p)), b;
      } catch (b) {
        throw this.session === p && (this.session = void 0, this.persistSession?.(b instanceof t.XRPCError && ["ExpiredToken", "InvalidToken"].includes(b.error) ? "expired" : "network-error", void 0)), b;
      }
    }
    async refreshSession() {
      return this.refreshSessionPromise || (this.refreshSessionPromise = this._refreshSessionInner().finally(() => {
        this.refreshSessionPromise = void 0;
      }));
    }
    async _refreshSessionInner() {
      if (this.session?.refreshJwt) try {
        const p = await this.server.refreshSession(void 0, { headers: { authorization: `Bearer ${this.session.refreshJwt}` } });
        this.session = { ...this.session, accessJwt: p.data.accessJwt, refreshJwt: p.data.refreshJwt, handle: p.data.handle, did: p.data.did }, this._updateApiEndpoint(p.data.didDoc), this.persistSession?.("update", this.session);
      } catch (p) {
        p instanceof t.XRPCError && p.error && ["ExpiredToken", "InvalidToken"].includes(p.error) && (this.session = void 0, this.persistSession?.("expired", void 0));
      }
    }
    _updateApiEndpoint(p) {
      if ((0, r.isValidDidDoc)(p)) {
        const b = (0, r.getPdsEndpoint)(p);
        this.pdsUrl = b ? new URL(b) : void 0;
      } else this.pdsUrl = void 0;
    }
  }
  Pi.CredentialSession = u;
  function a(h) {
    return t.errorResponseBody.safeParse(h).success;
  }
  async function c(h, p, b) {
    if (!p.includes(h.status)) return false;
    try {
      const E = await l(h, 10240);
      return a(E) && b.includes(E.error);
    } catch {
      return false;
    }
  }
  async function l(h, p = 1 / 0) {
    if (f(h) !== "application/json") throw new Error("Not JSON");
    if (d(h) > p) throw new Error("Response too large");
    return h.clone().json();
  }
  function d({ headers: h }) {
    return h.get("Content-Length") ? Number(h.get("Content-Length")) : NaN;
  }
  function f({ headers: h }) {
    return h.get("Content-Type")?.split(";")[0]?.trim();
  }
  return Pi;
}
var us = {}, sv;
function NT() {
  if (sv) return us;
  sv = 1, Object.defineProperty(us, "__esModule", { value: true }), us.BskyAgent = void 0;
  const r = Bl();
  class t extends r.AtpAgent {
    clone() {
      if (this.constructor === t) {
        const n = new t(this.sessionManager);
        return this.copyInto(n);
      }
      throw new TypeError("Cannot clone a subclass of BskyAgent");
    }
  }
  return us.BskyAgent = t, us;
}
var av;
function zT() {
  return av || (av = 1, function(r) {
    var t = hi && hi.__createBinding || (Object.create ? function(E, g, x, T) {
      T === void 0 && (T = x);
      var A = Object.getOwnPropertyDescriptor(g, x);
      (!A || ("get" in A ? !g.__esModule : A.writable || A.configurable)) && (A = { enumerable: true, get: function() {
        return g[x];
      } }), Object.defineProperty(E, T, A);
    } : function(E, g, x, T) {
      T === void 0 && (T = x), E[T] = g[x];
    }), i = hi && hi.__exportStar || function(E, g) {
      for (var x in E) x !== "default" && !Object.prototype.hasOwnProperty.call(g, x) && t(g, E, x);
    };
    Object.defineProperty(r, "__esModule", { value: true }), r.lexicons = r.default = r.BskyAgent = r.CredentialSession = r.AtpAgent = r.Agent = r.LABELS = r.DEFAULT_LABEL_SETTINGS = r.asPredicate = r.schemas = r.parseLanguage = r.stringifyLex = r.lexToJson = r.jsonToLex = r.jsonStringToLex = r.BlobRef = r.AtUri = void 0;
    const n = rn(), o = D();
    var s = nn();
    Object.defineProperty(r, "AtUri", { enumerable: true, get: function() {
      return s.AtUri;
    } });
    var e = rn();
    Object.defineProperty(r, "BlobRef", { enumerable: true, get: function() {
      return e.BlobRef;
    } }), Object.defineProperty(r, "jsonStringToLex", { enumerable: true, get: function() {
      return e.jsonStringToLex;
    } }), Object.defineProperty(r, "jsonToLex", { enumerable: true, get: function() {
      return e.jsonToLex;
    } }), Object.defineProperty(r, "lexToJson", { enumerable: true, get: function() {
      return e.lexToJson;
    } }), Object.defineProperty(r, "stringifyLex", { enumerable: true, get: function() {
      return e.stringifyLex;
    } });
    var u = Lr();
    Object.defineProperty(r, "parseLanguage", { enumerable: true, get: function() {
      return u.parseLanguage;
    } }), i(oS(), r), i(f_(), r), i(h_(), r), i(ii(), r);
    var a = D();
    Object.defineProperty(r, "schemas", { enumerable: true, get: function() {
      return a.schemas;
    } });
    var c = P();
    Object.defineProperty(r, "asPredicate", { enumerable: true, get: function() {
      return c.asPredicate;
    } }), i(BT(), r), i(g_(), r), i(Ap(), r), i(b_(), r), i(__(), r), i(E_(), r), i(qT(), r);
    var l = Sp();
    Object.defineProperty(r, "DEFAULT_LABEL_SETTINGS", { enumerable: true, get: function() {
      return l.DEFAULT_LABEL_SETTINGS;
    } }), Object.defineProperty(r, "LABELS", { enumerable: true, get: function() {
      return l.LABELS;
    } });
    var d = w_();
    Object.defineProperty(r, "Agent", { enumerable: true, get: function() {
      return d.Agent;
    } });
    var f = Bl();
    Object.defineProperty(r, "AtpAgent", { enumerable: true, get: function() {
      return f.AtpAgent;
    } });
    var h = Bl();
    Object.defineProperty(r, "CredentialSession", { enumerable: true, get: function() {
      return h.CredentialSession;
    } });
    var p = NT();
    Object.defineProperty(r, "BskyAgent", { enumerable: true, get: function() {
      return p.BskyAgent;
    } });
    var b = Bl();
    Object.defineProperty(r, "default", { enumerable: true, get: function() {
      return b.AtpAgent;
    } }), r.lexicons = new n.Lexicons(o.lexicons);
  }(hi)), hi;
}
var GT = zT();
function FT(r) {
  if (r instanceof Int8Array || r instanceof Uint8Array || r instanceof Uint8ClampedArray) return new DataView(r.buffer, r.byteOffset, r.byteLength);
  if (r instanceof ArrayBuffer) return new DataView(r);
  throw new TypeError("Expected `data` to be an ArrayBuffer, Buffer, Int8Array, Uint8Array or Uint8ClampedArray");
}
const $T = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", HT = "0123456789ABCDEFGHIJKLMNOPQRSTUV", XT = "0123456789ABCDEFGHJKMNPQRSTVWXYZ";
function WT(r, t, i) {
  i = i || {};
  let n, o;
  switch (t) {
    case "RFC3548":
    case "RFC4648":
      n = $T, o = true;
      break;
    case "RFC4648-HEX":
      n = HT, o = true;
      break;
    case "Crockford":
      n = XT, o = false;
      break;
    default:
      throw new Error("Unknown base32 variant: " + t);
  }
  const s = i.padding !== void 0 ? i.padding : o, e = FT(r);
  let u = 0, a = 0, c = "";
  for (let l = 0; l < e.byteLength; l++) for (a = a << 8 | e.getUint8(l), u += 8; u >= 5; ) c += n[a >>> u - 5 & 31], u -= 5;
  if (u > 0 && (c += n[a << 5 - u & 31]), s) for (; c.length % 8 !== 0; ) c += "=";
  return c;
}
var Bd, uv;
function JT() {
  if (uv) return Bd;
  uv = 1;
  var r = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", t = "0123456789ABCDEFGHIJKLMNOPQRSTUV", i = "0123456789ABCDEFGHJKMNPQRSTVWXYZ";
  function n(o, s) {
    var e = o.indexOf(s);
    if (e === -1) throw new Error("Invalid character found: " + s);
    return e;
  }
  return Bd = function(s, e) {
    var u;
    switch (e) {
      case "RFC3548":
      case "RFC4648":
        u = r, s = s.replace(/=+$/, "");
        break;
      case "RFC4648-HEX":
        u = t, s = s.replace(/=+$/, "");
        break;
      case "Crockford":
        u = i, s = s.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1");
        break;
      default:
        throw new Error("Unknown base32 variant: " + e);
    }
    for (var a = s.length, c = 0, l = 0, d = 0, f = new Uint8Array(a * 5 / 8 | 0), h = 0; h < a; h++) l = l << 5 | n(u, s[h]), c += 5, c >= 8 && (f[d++] = l >>> c - 8 & 255, c -= 8);
    return f.buffer;
  }, Bd;
}
var ZT = JT();
const QT = rx(ZT);
function $D(r) {
  return WT(r, "Crockford").toLowerCase();
}
function cv(r) {
  return new Uint8Array(QT(r, "Crockford"));
}
var Bi = {}, lv = {}, dv;
function x_() {
  return dv || (dv = 1, Symbol.dispose ?? (Symbol.dispose = Symbol("@@dispose")), Symbol.asyncDispose ?? (Symbol.asyncDispose = Symbol("@@asyncDispose"))), lv;
}
var Ui = {}, Ud = {}, Ii = {}, wl = {}, Id = {}, pv;
function Ia() {
  return pv || (pv = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.JwtVerifyError = r.JwtCreateError = r.JwkError = r.ERR_JWT_VERIFY = r.ERR_JWT_CREATE = r.ERR_JWT_INVALID = r.ERR_JWK_NOT_FOUND = r.ERR_JWK_INVALID = r.ERR_JWKS_NO_MATCHING_KEY = void 0, r.ERR_JWKS_NO_MATCHING_KEY = "ERR_JWKS_NO_MATCHING_KEY", r.ERR_JWK_INVALID = "ERR_JWK_INVALID", r.ERR_JWK_NOT_FOUND = "ERR_JWK_NOT_FOUND", r.ERR_JWT_INVALID = "ERR_JWT_INVALID", r.ERR_JWT_CREATE = "ERR_JWT_CREATE", r.ERR_JWT_VERIFY = "ERR_JWT_VERIFY";
    class t extends TypeError {
      constructor(s = "JWK error", e = r.ERR_JWK_INVALID, u) {
        super(s, u), Object.defineProperty(this, "code", { enumerable: true, configurable: true, writable: true, value: e });
      }
    }
    r.JwkError = t;
    class i extends Error {
      constructor(s = "Unable to create JWT", e = r.ERR_JWT_CREATE, u) {
        super(s, u), Object.defineProperty(this, "code", { enumerable: true, configurable: true, writable: true, value: e });
      }
      static from(s, e, u) {
        return s instanceof i ? s : s instanceof t ? new i(u, s.code, { cause: s }) : new i(u, e, { cause: s });
      }
    }
    r.JwtCreateError = i;
    class n extends Error {
      constructor(s = "Invalid JWT", e = r.ERR_JWT_VERIFY, u) {
        super(s, u), Object.defineProperty(this, "code", { enumerable: true, configurable: true, writable: true, value: e });
      }
      static from(s, e, u) {
        return s instanceof n ? s : s instanceof t ? new n(u, s.code, { cause: s }) : new n(u, e, { cause: s });
      }
    }
    r.JwtVerifyError = n;
  }(Id)), Id;
}
var fv;
function A_() {
  if (fv) return wl;
  fv = 1, Object.defineProperty(wl, "__esModule", { value: true }), wl.jwkAlgorithms = n;
  const r = Ia(), { process: t } = globalThis, i = typeof t < "u" && typeof t?.versions?.node == "string";
  function* n(o) {
    if (o.alg) {
      yield o.alg;
      return;
    }
    switch (o.kty) {
      case "EC": {
        if ((o.use === "enc" || o.use === void 0) && (yield "ECDH-ES", yield "ECDH-ES+A128KW", yield "ECDH-ES+A192KW", yield "ECDH-ES+A256KW"), o.use === "sig" || o.use === void 0) {
          const s = "crv" in o ? o.crv : void 0;
          switch (s) {
            case "P-256":
            case "P-384":
              yield `ES${s.slice(-3)}`;
              break;
            case "P-521":
              yield "ES512";
              break;
            case "secp256k1":
              i && (yield "ES256K");
              break;
            default:
              throw new r.JwkError(`Unsupported crv "${s}"`);
          }
        }
        return;
      }
      case "OKP": {
        if (!o.use) throw new r.JwkError('Missing "use" Parameter value');
        yield "ECDH-ES", yield "ECDH-ES+A128KW", yield "ECDH-ES+A192KW", yield "ECDH-ES+A256KW";
        return;
      }
      case "RSA": {
        (o.use === "enc" || o.use === void 0) && (yield "RSA-OAEP", yield "RSA-OAEP-256", yield "RSA-OAEP-384", yield "RSA-OAEP-512", i && (yield "RSA1_5")), (o.use === "sig" || o.use === void 0) && (yield "PS256", yield "PS384", yield "PS512", yield "RS256", yield "RS384", yield "RS512");
        return;
      }
      case "oct": {
        (o.use === "enc" || o.use === void 0) && (yield "A128GCMKW", yield "A192GCMKW", yield "A256GCMKW", yield "A128KW", yield "A192KW", yield "A256KW"), (o.use === "sig" || o.use === void 0) && (yield "HS256", yield "HS384", yield "HS512");
        return;
      }
      default:
        throw new r.JwkError(`Unsupported kty "${o.kty}"`);
    }
  }
  return wl;
}
var Kd = {}, hv;
function Wl() {
  return hv || (hv = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.jwkPubSchema = r.jwkValidator = r.jwkSchema = r.jwkUnknownKeySchema = r.jwkSymKeySchema = r.jwkOkpKeySchema = r.jwkEcSecp256k1KeySchema = r.jwkEcKeySchema = r.jwkRsaKeySchema = r.jwkBaseSchema = r.keyUsageSchema = void 0;
    const t = oe();
    r.keyUsageSchema = t.z.enum(["sign", "verify", "encrypt", "decrypt", "wrapKey", "unwrapKey", "deriveKey", "deriveBits"]), r.jwkBaseSchema = t.z.object({ kty: t.z.string().min(1), alg: t.z.string().min(1).optional(), kid: t.z.string().min(1).optional(), ext: t.z.boolean().optional(), use: t.z.enum(["sig", "enc"]).optional(), key_ops: t.z.array(r.keyUsageSchema).optional(), x5c: t.z.array(t.z.string()).optional(), x5t: t.z.string().min(1).optional(), "x5t#S256": t.z.string().min(1).optional(), x5u: t.z.string().url().optional() }), r.jwkRsaKeySchema = r.jwkBaseSchema.extend({ kty: t.z.literal("RSA"), alg: t.z.enum(["RS256", "RS384", "RS512", "PS256", "PS384", "PS512"]).optional(), n: t.z.string().min(1), e: t.z.string().min(1), d: t.z.string().min(1).optional(), p: t.z.string().min(1).optional(), q: t.z.string().min(1).optional(), dp: t.z.string().min(1).optional(), dq: t.z.string().min(1).optional(), qi: t.z.string().min(1).optional(), oth: t.z.array(t.z.object({ r: t.z.string().optional(), d: t.z.string().optional(), t: t.z.string().optional() })).nonempty().optional() }), r.jwkEcKeySchema = r.jwkBaseSchema.extend({ kty: t.z.literal("EC"), alg: t.z.enum(["ES256", "ES384", "ES512"]).optional(), crv: t.z.enum(["P-256", "P-384", "P-521"]), x: t.z.string().min(1), y: t.z.string().min(1), d: t.z.string().min(1).optional() }), r.jwkEcSecp256k1KeySchema = r.jwkBaseSchema.extend({ kty: t.z.literal("EC"), alg: t.z.enum(["ES256K"]).optional(), crv: t.z.enum(["secp256k1"]), x: t.z.string().min(1), y: t.z.string().min(1), d: t.z.string().min(1).optional() }), r.jwkOkpKeySchema = r.jwkBaseSchema.extend({ kty: t.z.literal("OKP"), alg: t.z.enum(["EdDSA"]).optional(), crv: t.z.enum(["Ed25519", "Ed448"]), x: t.z.string().min(1), d: t.z.string().min(1).optional() }), r.jwkSymKeySchema = r.jwkBaseSchema.extend({ kty: t.z.literal("oct"), alg: t.z.enum(["HS256", "HS384", "HS512"]).optional(), k: t.z.string() }), r.jwkUnknownKeySchema = r.jwkBaseSchema.extend({ kty: t.z.string().refine((i) => i !== "RSA" && i !== "EC" && i !== "OKP" && i !== "oct") }), r.jwkSchema = t.z.union([r.jwkUnknownKeySchema, r.jwkRsaKeySchema, r.jwkEcKeySchema, r.jwkEcSecp256k1KeySchema, r.jwkOkpKeySchema, r.jwkSymKeySchema]), r.jwkValidator = r.jwkSchema.refine((i) => i.use != null || i.key_ops != null, "use or key_ops required").refine((i) => !i.use || !i.key_ops || i.key_ops.every((n) => i.use === "sig" ? n === "sign" || n === "verify" : n === "encrypt" || n === "decrypt"), "use and key_ops must be consistent"), r.jwkPubSchema = r.jwkValidator.refine((i) => i.kid != null, "kid is required").refine((i) => !("k" in i) && !("d" in i), "private key not allowed");
  }(Kd)), Kd;
}
var Ki = {}, yv;
function YT() {
  if (yv) return Ki;
  yv = 1, Object.defineProperty(Ki, "__esModule", { value: true }), Ki.jwksPubSchema = Ki.jwksSchema = void 0;
  const r = oe(), t = Wl();
  return Ki.jwksSchema = r.z.object({ keys: r.z.array(t.jwkSchema) }), Ki.jwksPubSchema = r.z.object({ keys: r.z.array(t.jwkPubSchema) }), Ki;
}
var xl = {}, Od = {}, ut = {};
const Cp = Fl(s_);
var mv;
function Ka() {
  if (mv) return ut;
  mv = 1, Object.defineProperty(ut, "__esModule", { value: true }), ut.segmentedStringRefinementFactory = ut.jwtCharsRefinement = ut.cachedGetter = ut.preferredOrderCmp = ut.isDefined = void 0, ut.matchesAny = o, ut.parseB64uJson = u;
  const r = Cp, t = oe(), i = (l) => l !== void 0;
  ut.isDefined = i;
  const n = (l) => (d, f) => {
    const h = l.indexOf(d), p = l.indexOf(f);
    return h === p ? 0 : h === -1 ? 1 : p === -1 ? -1 : h - p;
  };
  ut.preferredOrderCmp = n;
  function o(l) {
    return l == null ? (d) => true : Array.isArray(l) ? (d) => l.includes(d) : (d) => d === l;
  }
  const s = (l, d) => function() {
    const f = l.call(this);
    return Object.defineProperty(this, l.name, { get: () => f, enumerable: true, configurable: true }), f;
  };
  ut.cachedGetter = s;
  const e = new TextDecoder();
  function u(l) {
    const d = r.base64url.baseDecode(l), f = e.decode(d);
    return JSON.parse(f);
  }
  const a = (l, d) => {
    let f;
    for (let h = 0; h < l.length; h++) if (f = l.charCodeAt(h), !(65 <= f && f <= 90 || 97 <= f && f <= 122 || 48 <= f && f <= 57 || f === 45 || f === 95 || f === 46)) {
      const p = String.fromCodePoint(l.codePointAt(h));
      return d.addIssue({ code: t.ZodIssueCode.custom, message: `Invalid character "${p}" in JWT at position ${h}` });
    }
  };
  ut.jwtCharsRefinement = a;
  const c = (l, d = 2) => {
    if (!Number.isFinite(l) || l < 1 || (l | 0) !== l) throw new TypeError(`Count must be a natural number (got ${l})`);
    const f = l * d + (l - 1), h = "Invalid JWT format";
    return (p, b) => {
      if (p.length < f) return b.addIssue({ code: t.ZodIssueCode.custom, message: `${h}: too short` }), false;
      let E = 0;
      for (let g = 0; g < l - 1; g++) {
        const x = p.indexOf(".", E);
        if (x === -1) return b.addIssue({ code: t.ZodIssueCode.custom, message: `${h}: expected ${l} segments, got ${g + 1}` }), false;
        if (x - E < d) return b.addIssue({ code: t.ZodIssueCode.custom, message: `${h}: segment ${g + 1} is too short` }), false;
        E = x + 1;
      }
      return p.indexOf(".", E) !== -1 ? (b.addIssue({ code: t.ZodIssueCode.custom, message: `${h}: too many segments` }), false) : p.length - E < d ? (b.addIssue({ code: t.ZodIssueCode.custom, message: `${h}: last segment is too short` }), false) : true;
    };
  };
  return ut.segmentedStringRefinementFactory = c, ut;
}
var bv;
function S_() {
  return bv || (bv = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.jwtPayloadSchema = r.jwtHeaderSchema = r.isUnsignedJwt = r.unsignedJwtSchema = r.isSignedJwt = r.signedJwtSchema = void 0;
    const t = oe(), i = Wl(), n = Ka();
    r.signedJwtSchema = t.z.string().superRefine(n.jwtCharsRefinement).superRefine((0, n.segmentedStringRefinementFactory)(3));
    const o = (e) => r.signedJwtSchema.safeParse(e).success;
    r.isSignedJwt = o, r.unsignedJwtSchema = t.z.string().superRefine(n.jwtCharsRefinement).superRefine((0, n.segmentedStringRefinementFactory)(2));
    const s = (e) => r.unsignedJwtSchema.safeParse(e).success;
    r.isUnsignedJwt = s, r.jwtHeaderSchema = t.z.object({ alg: t.z.string(), jku: t.z.string().url().optional(), jwk: t.z.object({ kty: t.z.string(), crv: t.z.string().optional(), x: t.z.string().optional(), y: t.z.string().optional(), e: t.z.string().optional(), n: t.z.string().optional() }).optional(), kid: t.z.string().optional(), x5u: t.z.string().optional(), x5c: t.z.array(t.z.string()).optional(), x5t: t.z.string().optional(), "x5t#S256": t.z.string().optional(), typ: t.z.string().optional(), cty: t.z.string().optional(), crit: t.z.array(t.z.string()).optional() }).passthrough(), r.jwtPayloadSchema = t.z.object({ iss: t.z.string().optional(), aud: t.z.union([t.z.string(), t.z.array(t.z.string()).nonempty()]).optional(), sub: t.z.string().optional(), exp: t.z.number().int().optional(), nbf: t.z.number().int().optional(), iat: t.z.number().int().optional(), jti: t.z.string().optional(), htm: t.z.string().optional(), htu: t.z.string().optional(), ath: t.z.string().optional(), acr: t.z.string().optional(), azp: t.z.string().optional(), amr: t.z.array(t.z.string()).optional(), cnf: t.z.object({ kid: t.z.string().optional(), jwk: i.jwkPubSchema.optional(), jwe: t.z.string().optional(), jku: t.z.string().url().optional(), jkt: t.z.string().optional(), "x5t#S256": t.z.string().optional(), osc: t.z.string().optional() }).optional(), client_id: t.z.string().optional(), scope: t.z.string().optional(), nonce: t.z.string().optional(), at_hash: t.z.string().optional(), c_hash: t.z.string().optional(), s_hash: t.z.string().optional(), auth_time: t.z.number().int().optional(), name: t.z.string().optional(), family_name: t.z.string().optional(), given_name: t.z.string().optional(), middle_name: t.z.string().optional(), nickname: t.z.string().optional(), preferred_username: t.z.string().optional(), gender: t.z.string().optional(), picture: t.z.string().url().optional(), profile: t.z.string().url().optional(), website: t.z.string().url().optional(), birthdate: t.z.string().regex(/\d{4}-\d{2}-\d{2}/).optional(), zoneinfo: t.z.string().regex(/^[A-Za-z0-9_/]+$/).optional(), locale: t.z.string().regex(/^[a-z]{2,3}(-[A-Z]{2})?$/).optional(), updated_at: t.z.number().int().optional(), email: t.z.string().optional(), email_verified: t.z.boolean().optional(), phone_number: t.z.string().optional(), phone_number_verified: t.z.boolean().optional(), address: t.z.object({ formatted: t.z.string().optional(), street_address: t.z.string().optional(), locality: t.z.string().optional(), region: t.z.string().optional(), postal_code: t.z.string().optional(), country: t.z.string().optional() }).optional(), authorization_details: t.z.array(t.z.object({ type: t.z.string(), locations: t.z.array(t.z.string()).optional(), actions: t.z.array(t.z.string()).optional(), datatypes: t.z.array(t.z.string()).optional(), identifier: t.z.string().optional(), privileges: t.z.array(t.z.string()).optional() }).passthrough()).optional() }).passthrough();
  }(Od)), Od;
}
var gv;
function C_() {
  if (gv) return xl;
  gv = 1, Object.defineProperty(xl, "__esModule", { value: true }), xl.unsafeDecodeJwt = n;
  const r = Ia(), t = S_(), i = Ka();
  function n(o) {
    const { 0: s, 1: e, length: u } = o.split(".");
    if (u > 3 || u < 2) throw new r.JwtVerifyError(void 0, r.ERR_JWT_INVALID);
    const a = t.jwtHeaderSchema.parse((0, i.parseB64uJson)(s));
    if (u === 2 && a?.alg !== "none") throw new r.JwtVerifyError(void 0, r.ERR_JWT_INVALID);
    const c = t.jwtPayloadSchema.parse((0, i.parseB64uJson)(e));
    return { header: a, payload: c };
  }
  return xl;
}
var jd = {}, Ev;
function eL() {
  return Ev || (Ev = 1, Object.defineProperty(jd, "__esModule", { value: true })), jd;
}
var gr = {}, vv;
function tL() {
  if (vv) return gr;
  vv = 1;
  var r = gr && gr.__runInitializers || function(a, c, l) {
    for (var d = arguments.length > 2, f = 0; f < c.length; f++) l = d ? c[f].call(a, l) : c[f].call(a);
    return d ? l : void 0;
  }, t = gr && gr.__esDecorate || function(a, c, l, d, f, h) {
    function p(H) {
      if (H !== void 0 && typeof H != "function") throw new TypeError("Function expected");
      return H;
    }
    for (var b = d.kind, E = b === "getter" ? "get" : b === "setter" ? "set" : "value", g = !c && a ? d.static ? a : a.prototype : null, x = c || (g ? Object.getOwnPropertyDescriptor(g, d.name) : {}), T, A = false, K = l.length - 1; K >= 0; K--) {
      var j = {};
      for (var O in d) j[O] = O === "access" ? {} : d[O];
      for (var O in d.access) j.access[O] = d.access[O];
      j.addInitializer = function(H) {
        if (A) throw new TypeError("Cannot add initializers after decoration has completed");
        h.push(p(H || null));
      };
      var z = (0, l[K])(b === "accessor" ? { get: x.get, set: x.set } : x[E], j);
      if (b === "accessor") {
        if (z === void 0) continue;
        if (z === null || typeof z != "object") throw new TypeError("Object expected");
        (T = p(z.get)) && (x.get = T), (T = p(z.set)) && (x.set = T), (T = p(z.init)) && f.unshift(T);
      } else (T = p(z)) && (b === "field" ? f.unshift(T) : x[E] = T);
    }
    g && Object.defineProperty(g, d.name, x), A = true;
  };
  Object.defineProperty(gr, "__esModule", { value: true }), gr.Key = void 0;
  const i = A_(), n = Ia(), o = Wl(), s = Ka(), e = o.jwkSchema.readonly();
  let u = (() => {
    var a;
    let c = [], l, d, f;
    return a = class {
      constructor(p) {
        if (Object.defineProperty(this, "jwk", { enumerable: true, configurable: true, writable: true, value: (r(this, c), p) }), !p.use) throw new n.JwkError('Missing "use" Parameter value');
      }
      get isPrivate() {
        const { jwk: p } = this;
        return "d" in p && p.d !== void 0 || "k" in p && p.k !== void 0;
      }
      get isSymetric() {
        const { jwk: p } = this;
        return "k" in p && p.k !== void 0;
      }
      get privateJwk() {
        return this.isPrivate ? this.jwk : void 0;
      }
      get publicJwk() {
        if (!this.isSymetric) return e.parse({ ...this.jwk, d: void 0, k: void 0 });
      }
      get bareJwk() {
        if (this.isSymetric) return;
        const { kty: p, crv: b, e: E, n: g, x, y: T } = this.jwk;
        return e.parse({ crv: b, e: E, kty: p, n: g, x, y: T });
      }
      get use() {
        return this.jwk.use;
      }
      get alg() {
        return this.jwk.alg;
      }
      get kid() {
        return this.jwk.kid;
      }
      get crv() {
        return this.jwk.crv;
      }
      get algorithms() {
        return Object.freeze(Array.from((0, i.jwkAlgorithms)(this.jwk)));
      }
    }, (() => {
      const h = typeof Symbol == "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
      l = [s.cachedGetter], d = [s.cachedGetter], f = [s.cachedGetter], t(a, null, l, { kind: "getter", name: "publicJwk", static: false, private: false, access: { has: (p) => "publicJwk" in p, get: (p) => p.publicJwk }, metadata: h }, null, c), t(a, null, d, { kind: "getter", name: "bareJwk", static: false, private: false, access: { has: (p) => "bareJwk" in p, get: (p) => p.bareJwk }, metadata: h }, null, c), t(a, null, f, { kind: "getter", name: "algorithms", static: false, private: false, access: { has: (p) => "algorithms" in p, get: (p) => p.algorithms }, metadata: h }, null, c), h && Object.defineProperty(a, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: h });
    })(), a;
  })();
  return gr.Key = u, gr;
}
var Er = {}, Rv;
function rL() {
  if (Rv) return Er;
  Rv = 1;
  var r = Er && Er.__runInitializers || function(a, c, l) {
    for (var d = arguments.length > 2, f = 0; f < c.length; f++) l = d ? c[f].call(a, l) : c[f].call(a);
    return d ? l : void 0;
  }, t = Er && Er.__esDecorate || function(a, c, l, d, f, h) {
    function p(H) {
      if (H !== void 0 && typeof H != "function") throw new TypeError("Function expected");
      return H;
    }
    for (var b = d.kind, E = b === "getter" ? "get" : b === "setter" ? "set" : "value", g = !c && a ? d.static ? a : a.prototype : null, x = c || (g ? Object.getOwnPropertyDescriptor(g, d.name) : {}), T, A = false, K = l.length - 1; K >= 0; K--) {
      var j = {};
      for (var O in d) j[O] = O === "access" ? {} : d[O];
      for (var O in d.access) j.access[O] = d.access[O];
      j.addInitializer = function(H) {
        if (A) throw new TypeError("Cannot add initializers after decoration has completed");
        h.push(p(H || null));
      };
      var z = (0, l[K])(b === "accessor" ? { get: x.get, set: x.set } : x[E], j);
      if (b === "accessor") {
        if (z === void 0) continue;
        if (z === null || typeof z != "object") throw new TypeError("Object expected");
        (T = p(z.get)) && (x.get = T), (T = p(z.set)) && (x.set = T), (T = p(z.init)) && f.unshift(T);
      } else (T = p(z)) && (b === "field" ? f.unshift(T) : x[E] = T);
    }
    g && Object.defineProperty(g, d.name, x), A = true;
  };
  Object.defineProperty(Er, "__esModule", { value: true }), Er.Keyset = void 0;
  const i = Ia(), n = C_(), o = Ka(), s = (a) => a.privateJwk, e = (a) => a.publicJwk;
  let u = (() => {
    var a;
    let c = [], l, d, f;
    return a = class {
      constructor(p, b = p instanceof a ? [...p.preferredSigningAlgorithms] : ["EdDSA", "ES256K", "ES256", "PS256", "PS384", "PS512", "HS256", "HS384", "HS512"]) {
        Object.defineProperty(this, "preferredSigningAlgorithms", { enumerable: true, configurable: true, writable: true, value: (r(this, c), b) }), Object.defineProperty(this, "keys", { enumerable: true, configurable: true, writable: true, value: void 0 });
        const E = [], g = /* @__PURE__ */ new Set();
        for (const x of p) if (x && (E.push(x), x.kid)) {
          if (g.has(x.kid)) throw new i.JwkError(`Duplicate key: ${x.kid}`);
          g.add(x.kid);
        }
        this.keys = Object.freeze(E);
      }
      get size() {
        return this.keys.length;
      }
      get signAlgorithms() {
        const p = /* @__PURE__ */ new Set();
        for (const b of this) if (b.use === "sig") for (const E of b.algorithms) p.add(E);
        return Object.freeze([...p].sort((0, o.preferredOrderCmp)(this.preferredSigningAlgorithms)));
      }
      get publicJwks() {
        return { keys: Array.from(this, e).filter(o.isDefined) };
      }
      get privateJwks() {
        return { keys: Array.from(this, s).filter(o.isDefined) };
      }
      has(p) {
        return this.keys.some((b) => b.kid === p);
      }
      get(p) {
        for (const b of this.list(p)) return b;
        throw new i.JwkError(`Key not found ${p.kid || p.alg || "<unknown>"}`, i.ERR_JWK_NOT_FOUND);
      }
      *list(p) {
        if (p.kid?.length !== 0 && p.alg?.length !== 0) {
          for (const b of this) if (!(p.use && b.use !== p.use)) {
            if (Array.isArray(p.kid)) {
              if (!b.kid || !p.kid.includes(b.kid)) continue;
            } else if (p.kid && b.kid !== p.kid) continue;
            if (Array.isArray(p.alg)) {
              if (!p.alg.some((E) => b.algorithms.includes(E))) continue;
            } else if (typeof p.alg == "string" && !b.algorithms.includes(p.alg)) continue;
            yield b;
          }
        }
      }
      findKey({ kid: p, alg: b, use: E }) {
        const g = [];
        for (const A of this.list({ kid: p, alg: b, use: E })) if (A.isPrivate) {
          if (typeof b == "string") return [A, b];
          g.push(A);
        }
        const x = (0, o.matchesAny)(b), T = g.map((A) => [A, A.algorithms.filter(x)]);
        for (const A of this.preferredSigningAlgorithms) for (const [K, j] of T) if (j.includes(A)) return [K, A];
        for (const [A, K] of T) for (const j of K) return [A, j];
        throw new i.JwkError(`No singing key found for ${p || b || E || "<unknown>"}`, i.ERR_JWK_NOT_FOUND);
      }
      [(l = [o.cachedGetter], d = [o.cachedGetter], f = [o.cachedGetter], Symbol.iterator)]() {
        return this.keys.values();
      }
      async createJwt({ alg: p, kid: b, ...E }, g) {
        try {
          const [x, T] = this.findKey({ alg: p, kid: b, use: "sig" }), A = { ...E, alg: T, kid: x.kid };
          return typeof g == "function" && (g = await g(A, x)), await x.createJwt(A, g);
        } catch (x) {
          throw i.JwtCreateError.from(x);
        }
      }
      async verifyJwt(p, b) {
        const { header: E } = (0, n.unsafeDecodeJwt)(p), { kid: g, alg: x } = E, T = [];
        for (const A of this.list({ kid: g, alg: x })) try {
          return { ...await A.verifyJwt(p, b), key: A };
        } catch (K) {
          T.push(K);
        }
        switch (T.length) {
          case 0:
            throw new i.JwtVerifyError("No key matched", i.ERR_JWKS_NO_MATCHING_KEY);
          case 1:
            throw i.JwtVerifyError.from(T[0], i.ERR_JWT_INVALID);
          default:
            throw i.JwtVerifyError.from(T, i.ERR_JWT_INVALID);
        }
      }
      toJSON() {
        return structuredClone(this.publicJwks);
      }
    }, (() => {
      const h = typeof Symbol == "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
      t(a, null, l, { kind: "getter", name: "signAlgorithms", static: false, private: false, access: { has: (p) => "signAlgorithms" in p, get: (p) => p.signAlgorithms }, metadata: h }, null, c), t(a, null, d, { kind: "getter", name: "publicJwks", static: false, private: false, access: { has: (p) => "publicJwks" in p, get: (p) => p.publicJwks }, metadata: h }, null, c), t(a, null, f, { kind: "getter", name: "privateJwks", static: false, private: false, access: { has: (p) => "privateJwks" in p, get: (p) => p.privateJwks }, metadata: h }, null, c), h && Object.defineProperty(a, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: h });
    })(), a;
  })();
  return Er.Keyset = u, Er;
}
var _v;
function ni() {
  return _v || (_v = 1, function(r) {
    var t = Ii && Ii.__createBinding || (Object.create ? function(o, s, e, u) {
      u === void 0 && (u = e);
      var a = Object.getOwnPropertyDescriptor(s, e);
      (!a || ("get" in a ? !s.__esModule : a.writable || a.configurable)) && (a = { enumerable: true, get: function() {
        return s[e];
      } }), Object.defineProperty(o, u, a);
    } : function(o, s, e, u) {
      u === void 0 && (u = e), o[u] = s[e];
    }), i = Ii && Ii.__exportStar || function(o, s) {
      for (var e in o) e !== "default" && !Object.prototype.hasOwnProperty.call(s, e) && t(s, o, e);
    };
    Object.defineProperty(r, "__esModule", { value: true }), r.ValidationError = void 0;
    var n = oe();
    Object.defineProperty(r, "ValidationError", { enumerable: true, get: function() {
      return n.ZodError;
    } }), i(A_(), r), i(Ia(), r), i(Wl(), r), i(YT(), r), i(C_(), r), i(eL(), r), i(S_(), r), i(tL(), r), i(rL(), r), i(Ka(), r);
  }(Ii)), Ii;
}
var Oi = {}, cs = {};
const de = crypto, wt = (r) => r instanceof CryptoKey, T_ = async (r, t) => {
  const i = `SHA-${r.slice(-3)}`;
  return new Uint8Array(await de.subtle.digest(i, t));
}, Se = new TextEncoder(), Nt = new TextDecoder(), jl = 2 ** 32;
function lr(...r) {
  const t = r.reduce((o, { length: s }) => o + s, 0), i = new Uint8Array(t);
  let n = 0;
  for (const o of r) i.set(o, n), n += o.length;
  return i;
}
function iL(r, t) {
  return lr(Se.encode(r), new Uint8Array([0]), t);
}
function up(r, t, i) {
  if (t < 0 || t >= jl) throw new RangeError(`value must be >= 0 and <= ${jl - 1}. Received ${t}`);
  r.set([t >>> 24, t >>> 16, t >>> 8, t & 255], i);
}
function L_(r) {
  const t = Math.floor(r / jl), i = r % jl, n = new Uint8Array(8);
  return up(n, t, 0), up(n, i, 4), n;
}
function Tp(r) {
  const t = new Uint8Array(4);
  return up(t, r), t;
}
function qd(r) {
  return lr(Tp(r.length), r);
}
async function nL(r, t, i) {
  const n = Math.ceil((t >> 3) / 32), o = new Uint8Array(n * 32);
  for (let s = 0; s < n; s++) {
    const e = new Uint8Array(4 + r.length + i.length);
    e.set(Tp(s + 1)), e.set(r, 4), e.set(i, 4 + r.length), o.set(await T_("sha256", e), s * 32);
  }
  return o.slice(0, t >> 3);
}
const Lp = (r) => {
  let t = r;
  typeof t == "string" && (t = Se.encode(t));
  const i = 32768, n = [];
  for (let o = 0; o < t.length; o += i) n.push(String.fromCharCode.apply(null, t.subarray(o, o + i)));
  return btoa(n.join(""));
}, Le = (r) => Lp(r).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_"), k_ = (r) => {
  const t = atob(r), i = new Uint8Array(t.length);
  for (let n = 0; n < t.length; n++) i[n] = t.charCodeAt(n);
  return i;
}, Ae = (r) => {
  let t = r;
  t instanceof Uint8Array && (t = Nt.decode(t)), t = t.replace(/-/g, "+").replace(/_/g, "/").replace(/\s/g, "");
  try {
    return k_(t);
  } catch {
    throw new TypeError("The input to be decoded is not correctly encoded.");
  }
};
class qe extends Error {
  constructor(t, i) {
    super(t, i), this.code = "ERR_JOSE_GENERIC", this.name = this.constructor.name, Error.captureStackTrace?.(this, this.constructor);
  }
}
qe.code = "ERR_JOSE_GENERIC";
class ct extends qe {
  constructor(t, i, n = "unspecified", o = "unspecified") {
    super(t, { cause: { claim: n, reason: o, payload: i } }), this.code = "ERR_JWT_CLAIM_VALIDATION_FAILED", this.claim = n, this.reason = o, this.payload = i;
  }
}
ct.code = "ERR_JWT_CLAIM_VALIDATION_FAILED";
class ql extends qe {
  constructor(t, i, n = "unspecified", o = "unspecified") {
    super(t, { cause: { claim: n, reason: o, payload: i } }), this.code = "ERR_JWT_EXPIRED", this.claim = n, this.reason = o, this.payload = i;
  }
}
ql.code = "ERR_JWT_EXPIRED";
class ka extends qe {
  constructor() {
    super(...arguments), this.code = "ERR_JOSE_ALG_NOT_ALLOWED";
  }
}
ka.code = "ERR_JOSE_ALG_NOT_ALLOWED";
class pe extends qe {
  constructor() {
    super(...arguments), this.code = "ERR_JOSE_NOT_SUPPORTED";
  }
}
pe.code = "ERR_JOSE_NOT_SUPPORTED";
class wo extends qe {
  constructor(t = "decryption operation failed", i) {
    super(t, i), this.code = "ERR_JWE_DECRYPTION_FAILED";
  }
}
wo.code = "ERR_JWE_DECRYPTION_FAILED";
class ie extends qe {
  constructor() {
    super(...arguments), this.code = "ERR_JWE_INVALID";
  }
}
ie.code = "ERR_JWE_INVALID";
class me extends qe {
  constructor() {
    super(...arguments), this.code = "ERR_JWS_INVALID";
  }
}
me.code = "ERR_JWS_INVALID";
class lt extends qe {
  constructor() {
    super(...arguments), this.code = "ERR_JWT_INVALID";
  }
}
lt.code = "ERR_JWT_INVALID";
class kp extends qe {
  constructor() {
    super(...arguments), this.code = "ERR_JWK_INVALID";
  }
}
kp.code = "ERR_JWK_INVALID";
class Jl extends qe {
  constructor() {
    super(...arguments), this.code = "ERR_JWKS_INVALID";
  }
}
Jl.code = "ERR_JWKS_INVALID";
class Zl extends qe {
  constructor(t = "no applicable key found in the JSON Web Key Set", i) {
    super(t, i), this.code = "ERR_JWKS_NO_MATCHING_KEY";
  }
}
Zl.code = "ERR_JWKS_NO_MATCHING_KEY";
class Dp extends qe {
  constructor(t = "multiple matching keys found in the JSON Web Key Set", i) {
    super(t, i), this.code = "ERR_JWKS_MULTIPLE_MATCHING_KEYS";
  }
}
Dp.code = "ERR_JWKS_MULTIPLE_MATCHING_KEYS";
class Pp extends qe {
  constructor(t = "request timed out", i) {
    super(t, i), this.code = "ERR_JWKS_TIMEOUT";
  }
}
Pp.code = "ERR_JWKS_TIMEOUT";
class Ql extends qe {
  constructor(t = "signature verification failed", i) {
    super(t, i), this.code = "ERR_JWS_SIGNATURE_VERIFICATION_FAILED";
  }
}
Ql.code = "ERR_JWS_SIGNATURE_VERIFICATION_FAILED";
const oL = Object.freeze(Object.defineProperty({ __proto__: null, JOSEAlgNotAllowed: ka, JOSEError: qe, JOSENotSupported: pe, JWEDecryptionFailed: wo, JWEInvalid: ie, JWKInvalid: kp, JWKSInvalid: Jl, JWKSMultipleMatchingKeys: Dp, JWKSNoMatchingKey: Zl, JWKSTimeout: Pp, JWSInvalid: me, JWSSignatureVerificationFailed: Ql, JWTClaimValidationFailed: ct, JWTExpired: ql, JWTInvalid: lt }, Symbol.toStringTag, { value: "Module" })), Yl = de.getRandomValues.bind(de);
function D_(r) {
  switch (r) {
    case "A128GCM":
    case "A128GCMKW":
    case "A192GCM":
    case "A192GCMKW":
    case "A256GCM":
    case "A256GCMKW":
      return 96;
    case "A128CBC-HS256":
    case "A192CBC-HS384":
    case "A256CBC-HS512":
      return 128;
    default:
      throw new pe(`Unsupported JWE Algorithm: ${r}`);
  }
}
const sL = (r) => Yl(new Uint8Array(D_(r) >> 3)), P_ = (r, t) => {
  if (t.length << 3 !== D_(r)) throw new ie("Invalid Initialization Vector length");
}, Ml = (r, t) => {
  const i = r.byteLength << 3;
  if (i !== t) throw new ie(`Invalid Content Encryption Key length. Expected ${t} bits, got ${i} bits`);
}, aL = (r, t) => {
  if (!(r instanceof Uint8Array)) throw new TypeError("First argument must be a buffer");
  if (!(t instanceof Uint8Array)) throw new TypeError("Second argument must be a buffer");
  if (r.length !== t.length) throw new TypeError("Input buffers must have the same length");
  const i = r.length;
  let n = 0, o = -1;
  for (; ++o < i; ) n |= r[o] ^ t[o];
  return n === 0;
};
function je(r, t = "algorithm.name") {
  return new TypeError(`CryptoKey does not support this operation, its ${t} must be ${r}`);
}
function Tr(r, t) {
  return r.name === t;
}
function Ul(r) {
  return parseInt(r.name.slice(4), 10);
}
function uL(r) {
  switch (r) {
    case "ES256":
      return "P-256";
    case "ES384":
      return "P-384";
    case "ES512":
      return "P-521";
    default:
      throw new Error("unreachable");
  }
}
function B_(r, t) {
  if (t.length && !t.some((i) => r.usages.includes(i))) {
    let i = "CryptoKey does not support this operation, its usages must include ";
    if (t.length > 2) {
      const n = t.pop();
      i += `one of ${t.join(", ")}, or ${n}.`;
    } else t.length === 2 ? i += `one of ${t[0]} or ${t[1]}.` : i += `${t[0]}.`;
    throw new TypeError(i);
  }
}
function cL(r, t, ...i) {
  switch (t) {
    case "HS256":
    case "HS384":
    case "HS512": {
      if (!Tr(r.algorithm, "HMAC")) throw je("HMAC");
      const n = parseInt(t.slice(2), 10);
      if (Ul(r.algorithm.hash) !== n) throw je(`SHA-${n}`, "algorithm.hash");
      break;
    }
    case "RS256":
    case "RS384":
    case "RS512": {
      if (!Tr(r.algorithm, "RSASSA-PKCS1-v1_5")) throw je("RSASSA-PKCS1-v1_5");
      const n = parseInt(t.slice(2), 10);
      if (Ul(r.algorithm.hash) !== n) throw je(`SHA-${n}`, "algorithm.hash");
      break;
    }
    case "PS256":
    case "PS384":
    case "PS512": {
      if (!Tr(r.algorithm, "RSA-PSS")) throw je("RSA-PSS");
      const n = parseInt(t.slice(2), 10);
      if (Ul(r.algorithm.hash) !== n) throw je(`SHA-${n}`, "algorithm.hash");
      break;
    }
    case "EdDSA": {
      if (r.algorithm.name !== "Ed25519" && r.algorithm.name !== "Ed448") throw je("Ed25519 or Ed448");
      break;
    }
    case "Ed25519": {
      if (!Tr(r.algorithm, "Ed25519")) throw je("Ed25519");
      break;
    }
    case "ES256":
    case "ES384":
    case "ES512": {
      if (!Tr(r.algorithm, "ECDSA")) throw je("ECDSA");
      const n = uL(t);
      if (r.algorithm.namedCurve !== n) throw je(n, "algorithm.namedCurve");
      break;
    }
    default:
      throw new TypeError("CryptoKey does not support this operation");
  }
  B_(r, i);
}
function ri(r, t, ...i) {
  switch (t) {
    case "A128GCM":
    case "A192GCM":
    case "A256GCM": {
      if (!Tr(r.algorithm, "AES-GCM")) throw je("AES-GCM");
      const n = parseInt(t.slice(1, 4), 10);
      if (r.algorithm.length !== n) throw je(n, "algorithm.length");
      break;
    }
    case "A128KW":
    case "A192KW":
    case "A256KW": {
      if (!Tr(r.algorithm, "AES-KW")) throw je("AES-KW");
      const n = parseInt(t.slice(1, 4), 10);
      if (r.algorithm.length !== n) throw je(n, "algorithm.length");
      break;
    }
    case "ECDH": {
      switch (r.algorithm.name) {
        case "ECDH":
        case "X25519":
        case "X448":
          break;
        default:
          throw je("ECDH, X25519, or X448");
      }
      break;
    }
    case "PBES2-HS256+A128KW":
    case "PBES2-HS384+A192KW":
    case "PBES2-HS512+A256KW":
      if (!Tr(r.algorithm, "PBKDF2")) throw je("PBKDF2");
      break;
    case "RSA-OAEP":
    case "RSA-OAEP-256":
    case "RSA-OAEP-384":
    case "RSA-OAEP-512": {
      if (!Tr(r.algorithm, "RSA-OAEP")) throw je("RSA-OAEP");
      const n = parseInt(t.slice(9), 10) || 1;
      if (Ul(r.algorithm.hash) !== n) throw je(`SHA-${n}`, "algorithm.hash");
      break;
    }
    default:
      throw new TypeError("CryptoKey does not support this operation");
  }
  B_(r, i);
}
function U_(r, t, ...i) {
  if (i = i.filter(Boolean), i.length > 2) {
    const n = i.pop();
    r += `one of type ${i.join(", ")}, or ${n}.`;
  } else i.length === 2 ? r += `one of type ${i[0]} or ${i[1]}.` : r += `of type ${i[0]}.`;
  return t == null ? r += ` Received ${t}` : typeof t == "function" && t.name ? r += ` Received function ${t.name}` : typeof t == "object" && t != null && t.constructor?.name && (r += ` Received an instance of ${t.constructor.name}`), r;
}
const Je = (r, ...t) => U_("Key must be ", r, ...t);
function I_(r, t, ...i) {
  return U_(`Key for the ${r} algorithm must be `, t, ...i);
}
const K_ = (r) => wt(r) ? true : r?.[Symbol.toStringTag] === "KeyObject", Ze = ["CryptoKey"];
async function lL(r, t, i, n, o, s) {
  if (!(t instanceof Uint8Array)) throw new TypeError(Je(t, "Uint8Array"));
  const e = parseInt(r.slice(1, 4), 10), u = await de.subtle.importKey("raw", t.subarray(e >> 3), "AES-CBC", false, ["decrypt"]), a = await de.subtle.importKey("raw", t.subarray(0, e >> 3), { hash: `SHA-${e << 1}`, name: "HMAC" }, false, ["sign"]), c = lr(s, n, i, L_(s.length << 3)), l = new Uint8Array((await de.subtle.sign("HMAC", a, c)).slice(0, e >> 3));
  let d;
  try {
    d = aL(o, l);
  } catch {
  }
  if (!d) throw new wo();
  let f;
  try {
    f = new Uint8Array(await de.subtle.decrypt({ iv: n, name: "AES-CBC" }, u, i));
  } catch {
  }
  if (!f) throw new wo();
  return f;
}
async function dL(r, t, i, n, o, s) {
  let e;
  t instanceof Uint8Array ? e = await de.subtle.importKey("raw", t, "AES-GCM", false, ["decrypt"]) : (ri(t, r, "decrypt"), e = t);
  try {
    return new Uint8Array(await de.subtle.decrypt({ additionalData: s, iv: n, name: "AES-GCM", tagLength: 128 }, e, lr(i, o)));
  } catch {
    throw new wo();
  }
}
const O_ = async (r, t, i, n, o, s) => {
  if (!wt(t) && !(t instanceof Uint8Array)) throw new TypeError(Je(t, ...Ze, "Uint8Array"));
  if (!n) throw new ie("JWE Initialization Vector missing");
  if (!o) throw new ie("JWE Authentication Tag missing");
  switch (P_(r, n), r) {
    case "A128CBC-HS256":
    case "A192CBC-HS384":
    case "A256CBC-HS512":
      return t instanceof Uint8Array && Ml(t, parseInt(r.slice(-3), 10)), lL(r, t, i, n, o, s);
    case "A128GCM":
    case "A192GCM":
    case "A256GCM":
      return t instanceof Uint8Array && Ml(t, parseInt(r.slice(1, 4), 10)), dL(r, t, i, n, o, s);
    default:
      throw new pe("Unsupported JWE Content Encryption Algorithm");
  }
}, Oa = (...r) => {
  const t = r.filter(Boolean);
  if (t.length === 0 || t.length === 1) return true;
  let i;
  for (const n of t) {
    const o = Object.keys(n);
    if (!i || i.size === 0) {
      i = new Set(o);
      continue;
    }
    for (const s of o) {
      if (i.has(s)) return false;
      i.add(s);
    }
  }
  return true;
};
function pL(r) {
  return typeof r == "object" && r !== null;
}
function Ce(r) {
  if (!pL(r) || Object.prototype.toString.call(r) !== "[object Object]") return false;
  if (Object.getPrototypeOf(r) === null) return true;
  let t = r;
  for (; Object.getPrototypeOf(t) !== null; ) t = Object.getPrototypeOf(t);
  return Object.getPrototypeOf(r) === t;
}
const ed = [{ hash: "SHA-256", name: "HMAC" }, true, ["sign"]];
function j_(r, t) {
  if (r.algorithm.length !== parseInt(t.slice(1, 4), 10)) throw new TypeError(`Invalid key size for alg: ${t}`);
}
function q_(r, t, i) {
  if (wt(r)) return ri(r, t, i), r;
  if (r instanceof Uint8Array) return de.subtle.importKey("raw", r, "AES-KW", true, [i]);
  throw new TypeError(Je(r, ...Ze, "Uint8Array"));
}
const cp = async (r, t, i) => {
  const n = await q_(t, r, "wrapKey");
  j_(n, r);
  const o = await de.subtle.importKey("raw", i, ...ed);
  return new Uint8Array(await de.subtle.wrapKey("raw", o, n, "AES-KW"));
}, lp = async (r, t, i) => {
  const n = await q_(t, r, "unwrapKey");
  j_(n, r);
  const o = await de.subtle.unwrapKey("raw", i, n, "AES-KW", ...ed);
  return new Uint8Array(await de.subtle.exportKey("raw", o));
};
async function M_(r, t, i, n, o = new Uint8Array(0), s = new Uint8Array(0)) {
  if (!wt(r)) throw new TypeError(Je(r, ...Ze));
  if (ri(r, "ECDH"), !wt(t)) throw new TypeError(Je(t, ...Ze));
  ri(t, "ECDH", "deriveBits");
  const e = lr(qd(Se.encode(i)), qd(o), qd(s), Tp(n));
  let u;
  r.algorithm.name === "X25519" ? u = 256 : r.algorithm.name === "X448" ? u = 448 : u = Math.ceil(parseInt(r.algorithm.namedCurve.substr(-3), 10) / 8) << 3;
  const a = new Uint8Array(await de.subtle.deriveBits({ name: r.algorithm.name, public: r }, t, u));
  return nL(a, n, e);
}
async function fL(r) {
  if (!wt(r)) throw new TypeError(Je(r, ...Ze));
  return de.subtle.generateKey(r.algorithm, true, ["deriveBits"]);
}
function V_(r) {
  if (!wt(r)) throw new TypeError(Je(r, ...Ze));
  return ["P-256", "P-384", "P-521"].includes(r.algorithm.namedCurve) || r.algorithm.name === "X25519" || r.algorithm.name === "X448";
}
function hL(r) {
  if (!(r instanceof Uint8Array) || r.length < 8) throw new ie("PBES2 Salt Input must be 8 or more octets");
}
function yL(r, t) {
  if (r instanceof Uint8Array) return de.subtle.importKey("raw", r, "PBKDF2", false, ["deriveBits"]);
  if (wt(r)) return ri(r, t, "deriveBits", "deriveKey"), r;
  throw new TypeError(Je(r, ...Ze, "Uint8Array"));
}
async function N_(r, t, i, n) {
  hL(r);
  const o = iL(t, r), s = parseInt(t.slice(13, 16), 10), e = { hash: `SHA-${t.slice(8, 11)}`, iterations: i, name: "PBKDF2", salt: o }, u = { length: s, name: "AES-KW" }, a = await yL(n, t);
  if (a.usages.includes("deriveBits")) return new Uint8Array(await de.subtle.deriveBits(e, a, s));
  if (a.usages.includes("deriveKey")) return de.subtle.deriveKey(e, a, u, false, ["wrapKey", "unwrapKey"]);
  throw new TypeError('PBKDF2 key "usages" must include "deriveBits" or "deriveKey"');
}
const mL = async (r, t, i, n = 2048, o = Yl(new Uint8Array(16))) => {
  const s = await N_(o, r, n, t);
  return { encryptedKey: await cp(r.slice(-6), s, i), p2c: n, p2s: Le(o) };
}, bL = async (r, t, i, n, o) => {
  const s = await N_(o, r, n, t);
  return lp(r.slice(-6), s, i);
};
function Vl(r) {
  switch (r) {
    case "RSA-OAEP":
    case "RSA-OAEP-256":
    case "RSA-OAEP-384":
    case "RSA-OAEP-512":
      return "RSA-OAEP";
    default:
      throw new pe(`alg ${r} is not supported either by JOSE or your javascript runtime`);
  }
}
const td = (r, t) => {
  if (r.startsWith("RS") || r.startsWith("PS")) {
    const { modulusLength: i } = t.algorithm;
    if (typeof i != "number" || i < 2048) throw new TypeError(`${r} requires key modulusLength to be 2048 bits or larger`);
  }
}, gL = async (r, t, i) => {
  if (!wt(t)) throw new TypeError(Je(t, ...Ze));
  if (ri(t, r, "encrypt", "wrapKey"), td(r, t), t.usages.includes("encrypt")) return new Uint8Array(await de.subtle.encrypt(Vl(r), t, i));
  if (t.usages.includes("wrapKey")) {
    const n = await de.subtle.importKey("raw", i, ...ed);
    return new Uint8Array(await de.subtle.wrapKey("raw", n, t, Vl(r)));
  }
  throw new TypeError('RSA-OAEP key "usages" must include "encrypt" or "wrapKey" for this operation');
}, EL = async (r, t, i) => {
  if (!wt(t)) throw new TypeError(Je(t, ...Ze));
  if (ri(t, r, "decrypt", "unwrapKey"), td(r, t), t.usages.includes("decrypt")) return new Uint8Array(await de.subtle.decrypt(Vl(r), t, i));
  if (t.usages.includes("unwrapKey")) {
    const n = await de.subtle.unwrapKey("raw", i, t, Vl(r), ...ed);
    return new Uint8Array(await de.subtle.exportKey("raw", n));
  }
  throw new TypeError('RSA-OAEP key "usages" must include "decrypt" or "unwrapKey" for this operation');
};
function Ao(r) {
  return Ce(r) && typeof r.kty == "string";
}
function vL(r) {
  return r.kty !== "oct" && typeof r.d == "string";
}
function RL(r) {
  return r.kty !== "oct" && typeof r.d > "u";
}
function _L(r) {
  return Ao(r) && r.kty === "oct" && typeof r.k == "string";
}
function wL(r) {
  let t, i;
  switch (r.kty) {
    case "RSA": {
      switch (r.alg) {
        case "PS256":
        case "PS384":
        case "PS512":
          t = { name: "RSA-PSS", hash: `SHA-${r.alg.slice(-3)}` }, i = r.d ? ["sign"] : ["verify"];
          break;
        case "RS256":
        case "RS384":
        case "RS512":
          t = { name: "RSASSA-PKCS1-v1_5", hash: `SHA-${r.alg.slice(-3)}` }, i = r.d ? ["sign"] : ["verify"];
          break;
        case "RSA-OAEP":
        case "RSA-OAEP-256":
        case "RSA-OAEP-384":
        case "RSA-OAEP-512":
          t = { name: "RSA-OAEP", hash: `SHA-${parseInt(r.alg.slice(-3), 10) || 1}` }, i = r.d ? ["decrypt", "unwrapKey"] : ["encrypt", "wrapKey"];
          break;
        default:
          throw new pe('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
      }
      break;
    }
    case "EC": {
      switch (r.alg) {
        case "ES256":
          t = { name: "ECDSA", namedCurve: "P-256" }, i = r.d ? ["sign"] : ["verify"];
          break;
        case "ES384":
          t = { name: "ECDSA", namedCurve: "P-384" }, i = r.d ? ["sign"] : ["verify"];
          break;
        case "ES512":
          t = { name: "ECDSA", namedCurve: "P-521" }, i = r.d ? ["sign"] : ["verify"];
          break;
        case "ECDH-ES":
        case "ECDH-ES+A128KW":
        case "ECDH-ES+A192KW":
        case "ECDH-ES+A256KW":
          t = { name: "ECDH", namedCurve: r.crv }, i = r.d ? ["deriveBits"] : [];
          break;
        default:
          throw new pe('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
      }
      break;
    }
    case "OKP": {
      switch (r.alg) {
        case "Ed25519":
          t = { name: "Ed25519" }, i = r.d ? ["sign"] : ["verify"];
          break;
        case "EdDSA":
          t = { name: r.crv }, i = r.d ? ["sign"] : ["verify"];
          break;
        case "ECDH-ES":
        case "ECDH-ES+A128KW":
        case "ECDH-ES+A192KW":
        case "ECDH-ES+A256KW":
          t = { name: r.crv }, i = r.d ? ["deriveBits"] : [];
          break;
        default:
          throw new pe('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
      }
      break;
    }
    default:
      throw new pe('Invalid or unsupported JWK "kty" (Key Type) Parameter value');
  }
  return { algorithm: t, keyUsages: i };
}
const z_ = async (r) => {
  if (!r.alg) throw new TypeError('"alg" argument is required when "jwk.alg" is not present');
  const { algorithm: t, keyUsages: i } = wL(r), n = [t, r.ext ?? false, r.key_ops ?? i], o = { ...r };
  return delete o.alg, delete o.use, de.subtle.importKey("jwk", o, ...n);
}, G_ = (r) => Ae(r);
let go, Eo;
const F_ = (r) => r?.[Symbol.toStringTag] === "KeyObject", Nl = async (r, t, i, n, o = false) => {
  let s = r.get(t);
  if (s?.[n]) return s[n];
  const e = await z_({ ...i, alg: n });
  return o && Object.freeze(t), s ? s[n] = e : r.set(t, { [n]: e }), e;
}, xL = (r, t) => {
  if (F_(r)) {
    let i = r.export({ format: "jwk" });
    return delete i.d, delete i.dp, delete i.dq, delete i.p, delete i.q, delete i.qi, i.k ? G_(i.k) : (Eo || (Eo = /* @__PURE__ */ new WeakMap()), Nl(Eo, r, i, t));
  }
  return Ao(r) ? r.k ? Ae(r.k) : (Eo || (Eo = /* @__PURE__ */ new WeakMap()), Nl(Eo, r, r, t, true)) : r;
}, AL = (r, t) => {
  if (F_(r)) {
    let i = r.export({ format: "jwk" });
    return i.k ? G_(i.k) : (go || (go = /* @__PURE__ */ new WeakMap()), Nl(go, r, i, t));
  }
  return Ao(r) ? r.k ? Ae(r.k) : (go || (go = /* @__PURE__ */ new WeakMap()), Nl(go, r, r, t, true)) : r;
}, zl = { normalizePublicKey: xL, normalizePrivateKey: AL };
function Bp(r) {
  switch (r) {
    case "A128GCM":
      return 128;
    case "A192GCM":
      return 192;
    case "A256GCM":
    case "A128CBC-HS256":
      return 256;
    case "A192CBC-HS384":
      return 384;
    case "A256CBC-HS512":
      return 512;
    default:
      throw new pe(`Unsupported JWE Algorithm: ${r}`);
  }
}
const en = (r) => Yl(new Uint8Array(Bp(r) >> 3)), $_ = (r, t) => {
  const i = (r.match(/.{1,64}/g) || []).join(`
`);
  return `-----BEGIN ${t}-----
${i}
-----END ${t}-----`;
}, H_ = async (r, t, i) => {
  if (!wt(i)) throw new TypeError(Je(i, ...Ze));
  if (!i.extractable) throw new TypeError("CryptoKey is not extractable");
  if (i.type !== r) throw new TypeError(`key is not a ${r} key`);
  return $_(Lp(new Uint8Array(await de.subtle.exportKey(t, i))), `${r.toUpperCase()} KEY`);
}, SL = (r) => H_("public", "spki", r), CL = (r) => H_("private", "pkcs8", r), Qr = (r, t, i = 0) => {
  i === 0 && (t.unshift(t.length), t.unshift(6));
  const n = r.indexOf(t[0], i);
  if (n === -1) return false;
  const o = r.subarray(n, n + t.length);
  return o.length !== t.length ? false : o.every((s, e) => s === t[e]) || Qr(r, t, n + 1);
}, wv = (r) => {
  switch (true) {
    case Qr(r, [42, 134, 72, 206, 61, 3, 1, 7]):
      return "P-256";
    case Qr(r, [43, 129, 4, 0, 34]):
      return "P-384";
    case Qr(r, [43, 129, 4, 0, 35]):
      return "P-521";
    case Qr(r, [43, 101, 110]):
      return "X25519";
    case Qr(r, [43, 101, 111]):
      return "X448";
    case Qr(r, [43, 101, 112]):
      return "Ed25519";
    case Qr(r, [43, 101, 113]):
      return "Ed448";
    default:
      throw new pe("Invalid or unsupported EC Key Curve or OKP Key Sub Type");
  }
}, X_ = async (r, t, i, n, o) => {
  let s, e;
  const u = new Uint8Array(atob(i.replace(r, "")).split("").map((c) => c.charCodeAt(0))), a = t === "spki";
  switch (n) {
    case "PS256":
    case "PS384":
    case "PS512":
      s = { name: "RSA-PSS", hash: `SHA-${n.slice(-3)}` }, e = a ? ["verify"] : ["sign"];
      break;
    case "RS256":
    case "RS384":
    case "RS512":
      s = { name: "RSASSA-PKCS1-v1_5", hash: `SHA-${n.slice(-3)}` }, e = a ? ["verify"] : ["sign"];
      break;
    case "RSA-OAEP":
    case "RSA-OAEP-256":
    case "RSA-OAEP-384":
    case "RSA-OAEP-512":
      s = { name: "RSA-OAEP", hash: `SHA-${parseInt(n.slice(-3), 10) || 1}` }, e = a ? ["encrypt", "wrapKey"] : ["decrypt", "unwrapKey"];
      break;
    case "ES256":
      s = { name: "ECDSA", namedCurve: "P-256" }, e = a ? ["verify"] : ["sign"];
      break;
    case "ES384":
      s = { name: "ECDSA", namedCurve: "P-384" }, e = a ? ["verify"] : ["sign"];
      break;
    case "ES512":
      s = { name: "ECDSA", namedCurve: "P-521" }, e = a ? ["verify"] : ["sign"];
      break;
    case "ECDH-ES":
    case "ECDH-ES+A128KW":
    case "ECDH-ES+A192KW":
    case "ECDH-ES+A256KW": {
      const c = wv(u);
      s = c.startsWith("P-") ? { name: "ECDH", namedCurve: c } : { name: c }, e = a ? [] : ["deriveBits"];
      break;
    }
    case "Ed25519":
      s = { name: "Ed25519" }, e = a ? ["verify"] : ["sign"];
      break;
    case "EdDSA":
      s = { name: wv(u) }, e = a ? ["verify"] : ["sign"];
      break;
    default:
      throw new pe('Invalid or unsupported "alg" (Algorithm) value');
  }
  return de.subtle.importKey(t, u, s, o?.extractable ?? false, e);
}, TL = (r, t, i) => X_(/(?:-----(?:BEGIN|END) PRIVATE KEY-----|\s)/g, "pkcs8", r, t, i), W_ = (r, t, i) => X_(/(?:-----(?:BEGIN|END) PUBLIC KEY-----|\s)/g, "spki", r, t, i);
function xv(r) {
  const t = [];
  let i = 0;
  for (; i < r.length; ) {
    const n = J_(r.subarray(i));
    t.push(n), i += n.byteLength;
  }
  return t;
}
function J_(r) {
  let t = 0, i = r[0] & 31;
  if (t++, i === 31) {
    for (i = 0; r[t] >= 128; ) i = i * 128 + r[t] - 128, t++;
    i = i * 128 + r[t] - 128, t++;
  }
  let n = 0;
  if (r[t] < 128) n = r[t], t++;
  else if (n === 128) {
    for (n = 0; r[t + n] !== 0 || r[t + n + 1] !== 0; ) {
      if (n > r.byteLength) throw new TypeError("invalid indefinite form length");
      n++;
    }
    const s = t + n + 2;
    return { byteLength: s, contents: r.subarray(t, t + n), raw: r.subarray(0, s) };
  } else {
    const s = r[t] & 127;
    t++, n = 0;
    for (let e = 0; e < s; e++) n = n * 256 + r[t], t++;
  }
  const o = t + n;
  return { byteLength: o, contents: r.subarray(t, o), raw: r.subarray(0, o) };
}
function LL(r) {
  const t = xv(xv(J_(r).contents)[0].contents);
  return Lp(t[t[0].raw[0] === 160 ? 6 : 5].raw);
}
function kL(r) {
  const t = r.replace(/(?:-----(?:BEGIN|END) CERTIFICATE-----|\s)/g, ""), i = k_(t);
  return $_(LL(i), "PUBLIC KEY");
}
const DL = (r, t, i) => {
  let n;
  try {
    n = kL(r);
  } catch (o) {
    throw new TypeError("Failed to parse the X.509 certificate", { cause: o });
  }
  return W_(n, t, i);
};
async function PL(r, t, i) {
  if (typeof r != "string" || r.indexOf("-----BEGIN PUBLIC KEY-----") !== 0) throw new TypeError('"spki" must be SPKI formatted string');
  return W_(r, t, i);
}
async function BL(r, t, i) {
  if (typeof r != "string" || r.indexOf("-----BEGIN CERTIFICATE-----") !== 0) throw new TypeError('"x509" must be X.509 formatted string');
  return DL(r, t, i);
}
async function UL(r, t, i) {
  if (typeof r != "string" || r.indexOf("-----BEGIN PRIVATE KEY-----") !== 0) throw new TypeError('"pkcs8" must be PKCS#8 formatted string');
  return TL(r, t, i);
}
async function ja(r, t) {
  if (!Ce(r)) throw new TypeError("JWK must be an object");
  switch (t || (t = r.alg), r.kty) {
    case "oct":
      if (typeof r.k != "string" || !r.k) throw new TypeError('missing "k" (Key Value) Parameter value');
      return Ae(r.k);
    case "RSA":
      if ("oth" in r && r.oth !== void 0) throw new pe('RSA JWK "oth" (Other Primes Info) Parameter value is not supported');
    case "EC":
    case "OKP":
      return z_({ ...r, alg: t });
    default:
      throw new pe('Unsupported "kty" (Key Type) Parameter value');
  }
}
const _o = (r) => r?.[Symbol.toStringTag], dp = (r, t, i) => {
  if (t.use !== void 0 && t.use !== "sig") throw new TypeError("Invalid key for this operation, when present its use must be sig");
  if (t.key_ops !== void 0 && t.key_ops.includes?.(i) !== true) throw new TypeError(`Invalid key for this operation, when present its key_ops must include ${i}`);
  if (t.alg !== void 0 && t.alg !== r) throw new TypeError(`Invalid key for this operation, when present its alg must be ${r}`);
  return true;
}, IL = (r, t, i, n) => {
  if (!(t instanceof Uint8Array)) {
    if (n && Ao(t)) {
      if (_L(t) && dp(r, t, i)) return;
      throw new TypeError('JSON Web Key for symmetric algorithms must have JWK "kty" (Key Type) equal to "oct" and the JWK "k" (Key Value) present');
    }
    if (!K_(t)) throw new TypeError(I_(r, t, ...Ze, "Uint8Array", n ? "JSON Web Key" : null));
    if (t.type !== "secret") throw new TypeError(`${_o(t)} instances for symmetric algorithms must be of type "secret"`);
  }
}, KL = (r, t, i, n) => {
  if (n && Ao(t)) switch (i) {
    case "sign":
      if (vL(t) && dp(r, t, i)) return;
      throw new TypeError("JSON Web Key for this operation be a private JWK");
    case "verify":
      if (RL(t) && dp(r, t, i)) return;
      throw new TypeError("JSON Web Key for this operation be a public JWK");
  }
  if (!K_(t)) throw new TypeError(I_(r, t, ...Ze, n ? "JSON Web Key" : null));
  if (t.type === "secret") throw new TypeError(`${_o(t)} instances for asymmetric algorithms must not be of type "secret"`);
  if (i === "sign" && t.type === "public") throw new TypeError(`${_o(t)} instances for asymmetric algorithm signing must be of type "private"`);
  if (i === "decrypt" && t.type === "public") throw new TypeError(`${_o(t)} instances for asymmetric algorithm decryption must be of type "private"`);
  if (t.algorithm && i === "verify" && t.type === "private") throw new TypeError(`${_o(t)} instances for asymmetric algorithm verifying must be of type "public"`);
  if (t.algorithm && i === "encrypt" && t.type === "private") throw new TypeError(`${_o(t)} instances for asymmetric algorithm encryption must be of type "public"`);
};
function Z_(r, t, i, n) {
  t.startsWith("HS") || t === "dir" || t.startsWith("PBES2") || /^A\d{3}(?:GCM)?KW$/.test(t) ? IL(t, i, n, r) : KL(t, i, n, r);
}
const Q_ = Z_.bind(void 0, false), pp = Z_.bind(void 0, true);
async function OL(r, t, i, n, o) {
  if (!(i instanceof Uint8Array)) throw new TypeError(Je(i, "Uint8Array"));
  const s = parseInt(r.slice(1, 4), 10), e = await de.subtle.importKey("raw", i.subarray(s >> 3), "AES-CBC", false, ["encrypt"]), u = await de.subtle.importKey("raw", i.subarray(0, s >> 3), { hash: `SHA-${s << 1}`, name: "HMAC" }, false, ["sign"]), a = new Uint8Array(await de.subtle.encrypt({ iv: n, name: "AES-CBC" }, e, t)), c = lr(o, n, a, L_(o.length << 3)), l = new Uint8Array((await de.subtle.sign("HMAC", u, c)).slice(0, s >> 3));
  return { ciphertext: a, tag: l, iv: n };
}
async function jL(r, t, i, n, o) {
  let s;
  i instanceof Uint8Array ? s = await de.subtle.importKey("raw", i, "AES-GCM", false, ["encrypt"]) : (ri(i, r, "encrypt"), s = i);
  const e = new Uint8Array(await de.subtle.encrypt({ additionalData: o, iv: n, name: "AES-GCM", tagLength: 128 }, s, t)), u = e.slice(-16);
  return { ciphertext: e.slice(0, -16), tag: u, iv: n };
}
const Y_ = async (r, t, i, n, o) => {
  if (!wt(i) && !(i instanceof Uint8Array)) throw new TypeError(Je(i, ...Ze, "Uint8Array"));
  switch (n ? P_(r, n) : n = sL(r), r) {
    case "A128CBC-HS256":
    case "A192CBC-HS384":
    case "A256CBC-HS512":
      return i instanceof Uint8Array && Ml(i, parseInt(r.slice(-3), 10)), OL(r, t, i, n, o);
    case "A128GCM":
    case "A192GCM":
    case "A256GCM":
      return i instanceof Uint8Array && Ml(i, parseInt(r.slice(1, 4), 10)), jL(r, t, i, n, o);
    default:
      throw new pe("Unsupported JWE Content Encryption Algorithm");
  }
};
async function qL(r, t, i, n) {
  const o = r.slice(0, 7), s = await Y_(o, i, t, n, new Uint8Array(0));
  return { encryptedKey: s.ciphertext, iv: Le(s.iv), tag: Le(s.tag) };
}
async function ML(r, t, i, n, o) {
  const s = r.slice(0, 7);
  return O_(s, t, i, n, o, new Uint8Array(0));
}
async function VL(r, t, i, n, o) {
  switch (Q_(r, t, "decrypt"), t = await zl.normalizePrivateKey?.(t, r) || t, r) {
    case "dir": {
      if (i !== void 0) throw new ie("Encountered unexpected JWE Encrypted Key");
      return t;
    }
    case "ECDH-ES":
      if (i !== void 0) throw new ie("Encountered unexpected JWE Encrypted Key");
    case "ECDH-ES+A128KW":
    case "ECDH-ES+A192KW":
    case "ECDH-ES+A256KW": {
      if (!Ce(n.epk)) throw new ie('JOSE Header "epk" (Ephemeral Public Key) missing or invalid');
      if (!V_(t)) throw new pe("ECDH with the provided key is not allowed or not supported by your javascript runtime");
      const s = await ja(n.epk, r);
      let e, u;
      if (n.apu !== void 0) {
        if (typeof n.apu != "string") throw new ie('JOSE Header "apu" (Agreement PartyUInfo) invalid');
        try {
          e = Ae(n.apu);
        } catch {
          throw new ie("Failed to base64url decode the apu");
        }
      }
      if (n.apv !== void 0) {
        if (typeof n.apv != "string") throw new ie('JOSE Header "apv" (Agreement PartyVInfo) invalid');
        try {
          u = Ae(n.apv);
        } catch {
          throw new ie("Failed to base64url decode the apv");
        }
      }
      const a = await M_(s, t, r === "ECDH-ES" ? n.enc : r, r === "ECDH-ES" ? Bp(n.enc) : parseInt(r.slice(-5, -2), 10), e, u);
      if (r === "ECDH-ES") return a;
      if (i === void 0) throw new ie("JWE Encrypted Key missing");
      return lp(r.slice(-6), a, i);
    }
    case "RSA1_5":
    case "RSA-OAEP":
    case "RSA-OAEP-256":
    case "RSA-OAEP-384":
    case "RSA-OAEP-512": {
      if (i === void 0) throw new ie("JWE Encrypted Key missing");
      return EL(r, t, i);
    }
    case "PBES2-HS256+A128KW":
    case "PBES2-HS384+A192KW":
    case "PBES2-HS512+A256KW": {
      if (i === void 0) throw new ie("JWE Encrypted Key missing");
      if (typeof n.p2c != "number") throw new ie('JOSE Header "p2c" (PBES2 Count) missing or invalid');
      const s = o?.maxPBES2Count || 1e4;
      if (n.p2c > s) throw new ie('JOSE Header "p2c" (PBES2 Count) out is of acceptable bounds');
      if (typeof n.p2s != "string") throw new ie('JOSE Header "p2s" (PBES2 Salt) missing or invalid');
      let e;
      try {
        e = Ae(n.p2s);
      } catch {
        throw new ie("Failed to base64url decode the p2s");
      }
      return bL(r, t, i, n.p2c, e);
    }
    case "A128KW":
    case "A192KW":
    case "A256KW": {
      if (i === void 0) throw new ie("JWE Encrypted Key missing");
      return lp(r, t, i);
    }
    case "A128GCMKW":
    case "A192GCMKW":
    case "A256GCMKW": {
      if (i === void 0) throw new ie("JWE Encrypted Key missing");
      if (typeof n.iv != "string") throw new ie('JOSE Header "iv" (Initialization Vector) missing or invalid');
      if (typeof n.tag != "string") throw new ie('JOSE Header "tag" (Authentication Tag) missing or invalid');
      let s;
      try {
        s = Ae(n.iv);
      } catch {
        throw new ie("Failed to base64url decode the iv");
      }
      let e;
      try {
        e = Ae(n.tag);
      } catch {
        throw new ie("Failed to base64url decode the tag");
      }
      return ML(r, t, i, s, e);
    }
    default:
      throw new pe('Invalid or unsupported "alg" (JWE Algorithm) header value');
  }
}
function qa(r, t, i, n, o) {
  if (o.crit !== void 0 && n?.crit === void 0) throw new r('"crit" (Critical) Header Parameter MUST be integrity protected');
  if (!n || n.crit === void 0) return /* @__PURE__ */ new Set();
  if (!Array.isArray(n.crit) || n.crit.length === 0 || n.crit.some((e) => typeof e != "string" || e.length === 0)) throw new r('"crit" (Critical) Header Parameter MUST be an array of non-empty strings when present');
  let s;
  i !== void 0 ? s = new Map([...Object.entries(i), ...t.entries()]) : s = t;
  for (const e of n.crit) {
    if (!s.has(e)) throw new pe(`Extension Header Parameter "${e}" is not recognized`);
    if (o[e] === void 0) throw new r(`Extension Header Parameter "${e}" is missing`);
    if (s.get(e) && n[e] === void 0) throw new r(`Extension Header Parameter "${e}" MUST be integrity protected`);
  }
  return new Set(n.crit);
}
const fp = (r, t) => {
  if (t !== void 0 && (!Array.isArray(t) || t.some((i) => typeof i != "string"))) throw new TypeError(`"${r}" option must be an array of strings`);
  if (t) return new Set(t);
};
async function Up(r, t, i) {
  if (!Ce(r)) throw new ie("Flattened JWE must be an object");
  if (r.protected === void 0 && r.header === void 0 && r.unprotected === void 0) throw new ie("JOSE Header missing");
  if (r.iv !== void 0 && typeof r.iv != "string") throw new ie("JWE Initialization Vector incorrect type");
  if (typeof r.ciphertext != "string") throw new ie("JWE Ciphertext missing or incorrect type");
  if (r.tag !== void 0 && typeof r.tag != "string") throw new ie("JWE Authentication Tag incorrect type");
  if (r.protected !== void 0 && typeof r.protected != "string") throw new ie("JWE Protected Header incorrect type");
  if (r.encrypted_key !== void 0 && typeof r.encrypted_key != "string") throw new ie("JWE Encrypted Key incorrect type");
  if (r.aad !== void 0 && typeof r.aad != "string") throw new ie("JWE AAD incorrect type");
  if (r.header !== void 0 && !Ce(r.header)) throw new ie("JWE Shared Unprotected Header incorrect type");
  if (r.unprotected !== void 0 && !Ce(r.unprotected)) throw new ie("JWE Per-Recipient Unprotected Header incorrect type");
  let n;
  if (r.protected) try {
    const T = Ae(r.protected);
    n = JSON.parse(Nt.decode(T));
  } catch {
    throw new ie("JWE Protected Header is invalid");
  }
  if (!Oa(n, r.header, r.unprotected)) throw new ie("JWE Protected, JWE Unprotected Header, and JWE Per-Recipient Unprotected Header Parameter names must be disjoint");
  const o = { ...n, ...r.header, ...r.unprotected };
  if (qa(ie, /* @__PURE__ */ new Map(), i?.crit, n, o), o.zip !== void 0) throw new pe('JWE "zip" (Compression Algorithm) Header Parameter is not supported.');
  const { alg: s, enc: e } = o;
  if (typeof s != "string" || !s) throw new ie("missing JWE Algorithm (alg) in JWE Header");
  if (typeof e != "string" || !e) throw new ie("missing JWE Encryption Algorithm (enc) in JWE Header");
  const u = i && fp("keyManagementAlgorithms", i.keyManagementAlgorithms), a = i && fp("contentEncryptionAlgorithms", i.contentEncryptionAlgorithms);
  if (u && !u.has(s) || !u && s.startsWith("PBES2")) throw new ka('"alg" (Algorithm) Header Parameter value not allowed');
  if (a && !a.has(e)) throw new ka('"enc" (Encryption Algorithm) Header Parameter value not allowed');
  let c;
  if (r.encrypted_key !== void 0) try {
    c = Ae(r.encrypted_key);
  } catch {
    throw new ie("Failed to base64url decode the encrypted_key");
  }
  let l = false;
  typeof t == "function" && (t = await t(n, r), l = true);
  let d;
  try {
    d = await VL(s, t, c, o, i);
  } catch (T) {
    if (T instanceof TypeError || T instanceof ie || T instanceof pe) throw T;
    d = en(e);
  }
  let f, h;
  if (r.iv !== void 0) try {
    f = Ae(r.iv);
  } catch {
    throw new ie("Failed to base64url decode the iv");
  }
  if (r.tag !== void 0) try {
    h = Ae(r.tag);
  } catch {
    throw new ie("Failed to base64url decode the tag");
  }
  const p = Se.encode(r.protected ?? "");
  let b;
  r.aad !== void 0 ? b = lr(p, Se.encode("."), Se.encode(r.aad)) : b = p;
  let E;
  try {
    E = Ae(r.ciphertext);
  } catch {
    throw new ie("Failed to base64url decode the ciphertext");
  }
  const x = { plaintext: await O_(e, d, E, f, h, b) };
  if (r.protected !== void 0 && (x.protectedHeader = n), r.aad !== void 0) try {
    x.additionalAuthenticatedData = Ae(r.aad);
  } catch {
    throw new ie("Failed to base64url decode the aad");
  }
  return r.unprotected !== void 0 && (x.sharedUnprotectedHeader = r.unprotected), r.header !== void 0 && (x.unprotectedHeader = r.header), l ? { ...x, key: t } : x;
}
async function ew(r, t, i) {
  if (r instanceof Uint8Array && (r = Nt.decode(r)), typeof r != "string") throw new ie("Compact JWE must be a string or Uint8Array");
  const { 0: n, 1: o, 2: s, 3: e, 4: u, length: a } = r.split(".");
  if (a !== 5) throw new ie("Invalid Compact JWE");
  const c = await Up({ ciphertext: e, iv: s || void 0, protected: n, tag: u || void 0, encrypted_key: o || void 0 }, t, i), l = { plaintext: c.plaintext, protectedHeader: c.protectedHeader };
  return typeof t == "function" ? { ...l, key: c.key } : l;
}
async function NL(r, t, i) {
  if (!Ce(r)) throw new ie("General JWE must be an object");
  if (!Array.isArray(r.recipients) || !r.recipients.every(Ce)) throw new ie("JWE Recipients missing or incorrect type");
  if (!r.recipients.length) throw new ie("JWE Recipients has no members");
  for (const n of r.recipients) try {
    return await Up({ aad: r.aad, ciphertext: r.ciphertext, encrypted_key: n.encrypted_key, header: n.header, iv: r.iv, protected: r.protected, tag: r.tag, unprotected: r.unprotected }, t, i);
  } catch {
  }
  throw new wo();
}
const tw = Symbol(), zL = async (r) => {
  if (r instanceof Uint8Array) return { kty: "oct", k: Le(r) };
  if (!wt(r)) throw new TypeError(Je(r, ...Ze, "Uint8Array"));
  if (!r.extractable) throw new TypeError("non-extractable CryptoKey cannot be exported as a JWK");
  const { ext: t, key_ops: i, alg: n, use: o, ...s } = await de.subtle.exportKey("jwk", r);
  return s;
};
async function GL(r) {
  return SL(r);
}
async function FL(r) {
  return CL(r);
}
async function rw(r) {
  return zL(r);
}
async function iw(r, t, i, n, o = {}) {
  let s, e, u;
  switch (Q_(r, i, "encrypt"), i = await zl.normalizePublicKey?.(i, r) || i, r) {
    case "dir": {
      u = i;
      break;
    }
    case "ECDH-ES":
    case "ECDH-ES+A128KW":
    case "ECDH-ES+A192KW":
    case "ECDH-ES+A256KW": {
      if (!V_(i)) throw new pe("ECDH with the provided key is not allowed or not supported by your javascript runtime");
      const { apu: a, apv: c } = o;
      let { epk: l } = o;
      l || (l = (await fL(i)).privateKey);
      const { x: d, y: f, crv: h, kty: p } = await rw(l), b = await M_(i, l, r === "ECDH-ES" ? t : r, r === "ECDH-ES" ? Bp(t) : parseInt(r.slice(-5, -2), 10), a, c);
      if (e = { epk: { x: d, crv: h, kty: p } }, p === "EC" && (e.epk.y = f), a && (e.apu = Le(a)), c && (e.apv = Le(c)), r === "ECDH-ES") {
        u = b;
        break;
      }
      u = n || en(t);
      const E = r.slice(-6);
      s = await cp(E, b, u);
      break;
    }
    case "RSA1_5":
    case "RSA-OAEP":
    case "RSA-OAEP-256":
    case "RSA-OAEP-384":
    case "RSA-OAEP-512": {
      u = n || en(t), s = await gL(r, i, u);
      break;
    }
    case "PBES2-HS256+A128KW":
    case "PBES2-HS384+A192KW":
    case "PBES2-HS512+A256KW": {
      u = n || en(t);
      const { p2c: a, p2s: c } = o;
      ({ encryptedKey: s, ...e } = await mL(r, i, u, a, c));
      break;
    }
    case "A128KW":
    case "A192KW":
    case "A256KW": {
      u = n || en(t), s = await cp(r, i, u);
      break;
    }
    case "A128GCMKW":
    case "A192GCMKW":
    case "A256GCMKW": {
      u = n || en(t);
      const { iv: a } = o;
      ({ encryptedKey: s, ...e } = await qL(r, i, u, a));
      break;
    }
    default:
      throw new pe('Invalid or unsupported "alg" (JWE Algorithm) header value');
  }
  return { cek: u, encryptedKey: s, parameters: e };
}
class Gl {
  constructor(t) {
    if (!(t instanceof Uint8Array)) throw new TypeError("plaintext must be an instance of Uint8Array");
    this._plaintext = t;
  }
  setKeyManagementParameters(t) {
    if (this._keyManagementParameters) throw new TypeError("setKeyManagementParameters can only be called once");
    return this._keyManagementParameters = t, this;
  }
  setProtectedHeader(t) {
    if (this._protectedHeader) throw new TypeError("setProtectedHeader can only be called once");
    return this._protectedHeader = t, this;
  }
  setSharedUnprotectedHeader(t) {
    if (this._sharedUnprotectedHeader) throw new TypeError("setSharedUnprotectedHeader can only be called once");
    return this._sharedUnprotectedHeader = t, this;
  }
  setUnprotectedHeader(t) {
    if (this._unprotectedHeader) throw new TypeError("setUnprotectedHeader can only be called once");
    return this._unprotectedHeader = t, this;
  }
  setAdditionalAuthenticatedData(t) {
    return this._aad = t, this;
  }
  setContentEncryptionKey(t) {
    if (this._cek) throw new TypeError("setContentEncryptionKey can only be called once");
    return this._cek = t, this;
  }
  setInitializationVector(t) {
    if (this._iv) throw new TypeError("setInitializationVector can only be called once");
    return this._iv = t, this;
  }
  async encrypt(t, i) {
    if (!this._protectedHeader && !this._unprotectedHeader && !this._sharedUnprotectedHeader) throw new ie("either setProtectedHeader, setUnprotectedHeader, or sharedUnprotectedHeader must be called before #encrypt()");
    if (!Oa(this._protectedHeader, this._unprotectedHeader, this._sharedUnprotectedHeader)) throw new ie("JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint");
    const n = { ...this._protectedHeader, ...this._unprotectedHeader, ...this._sharedUnprotectedHeader };
    if (qa(ie, /* @__PURE__ */ new Map(), i?.crit, this._protectedHeader, n), n.zip !== void 0) throw new pe('JWE "zip" (Compression Algorithm) Header Parameter is not supported.');
    const { alg: o, enc: s } = n;
    if (typeof o != "string" || !o) throw new ie('JWE "alg" (Algorithm) Header Parameter missing or invalid');
    if (typeof s != "string" || !s) throw new ie('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');
    let e;
    if (this._cek && (o === "dir" || o === "ECDH-ES")) throw new TypeError(`setContentEncryptionKey cannot be called with JWE "alg" (Algorithm) Header ${o}`);
    let u;
    {
      let b;
      ({ cek: u, encryptedKey: e, parameters: b } = await iw(o, s, t, this._cek, this._keyManagementParameters)), b && (i && tw in i ? this._unprotectedHeader ? this._unprotectedHeader = { ...this._unprotectedHeader, ...b } : this.setUnprotectedHeader(b) : this._protectedHeader ? this._protectedHeader = { ...this._protectedHeader, ...b } : this.setProtectedHeader(b));
    }
    let a, c, l;
    this._protectedHeader ? c = Se.encode(Le(JSON.stringify(this._protectedHeader))) : c = Se.encode(""), this._aad ? (l = Le(this._aad), a = lr(c, Se.encode("."), Se.encode(l))) : a = c;
    const { ciphertext: d, tag: f, iv: h } = await Y_(s, this._plaintext, u, this._iv, a), p = { ciphertext: Le(d) };
    return h && (p.iv = Le(h)), f && (p.tag = Le(f)), e && (p.encrypted_key = Le(e)), l && (p.aad = l), this._protectedHeader && (p.protected = Nt.decode(c)), this._sharedUnprotectedHeader && (p.unprotected = this._sharedUnprotectedHeader), this._unprotectedHeader && (p.header = this._unprotectedHeader), p;
  }
}
class $L {
  constructor(t, i, n) {
    this.parent = t, this.key = i, this.options = n;
  }
  setUnprotectedHeader(t) {
    if (this.unprotectedHeader) throw new TypeError("setUnprotectedHeader can only be called once");
    return this.unprotectedHeader = t, this;
  }
  addRecipient(...t) {
    return this.parent.addRecipient(...t);
  }
  encrypt(...t) {
    return this.parent.encrypt(...t);
  }
  done() {
    return this.parent;
  }
}
class HL {
  constructor(t) {
    this._recipients = [], this._plaintext = t;
  }
  addRecipient(t, i) {
    const n = new $L(this, t, { crit: i?.crit });
    return this._recipients.push(n), n;
  }
  setProtectedHeader(t) {
    if (this._protectedHeader) throw new TypeError("setProtectedHeader can only be called once");
    return this._protectedHeader = t, this;
  }
  setSharedUnprotectedHeader(t) {
    if (this._unprotectedHeader) throw new TypeError("setSharedUnprotectedHeader can only be called once");
    return this._unprotectedHeader = t, this;
  }
  setAdditionalAuthenticatedData(t) {
    return this._aad = t, this;
  }
  async encrypt() {
    if (!this._recipients.length) throw new ie("at least one recipient must be added");
    if (this._recipients.length === 1) {
      const [o] = this._recipients, s = await new Gl(this._plaintext).setAdditionalAuthenticatedData(this._aad).setProtectedHeader(this._protectedHeader).setSharedUnprotectedHeader(this._unprotectedHeader).setUnprotectedHeader(o.unprotectedHeader).encrypt(o.key, { ...o.options }), e = { ciphertext: s.ciphertext, iv: s.iv, recipients: [{}], tag: s.tag };
      return s.aad && (e.aad = s.aad), s.protected && (e.protected = s.protected), s.unprotected && (e.unprotected = s.unprotected), s.encrypted_key && (e.recipients[0].encrypted_key = s.encrypted_key), s.header && (e.recipients[0].header = s.header), e;
    }
    let t;
    for (let o = 0; o < this._recipients.length; o++) {
      const s = this._recipients[o];
      if (!Oa(this._protectedHeader, this._unprotectedHeader, s.unprotectedHeader)) throw new ie("JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint");
      const e = { ...this._protectedHeader, ...this._unprotectedHeader, ...s.unprotectedHeader }, { alg: u } = e;
      if (typeof u != "string" || !u) throw new ie('JWE "alg" (Algorithm) Header Parameter missing or invalid');
      if (u === "dir" || u === "ECDH-ES") throw new ie('"dir" and "ECDH-ES" alg may only be used with a single recipient');
      if (typeof e.enc != "string" || !e.enc) throw new ie('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');
      if (!t) t = e.enc;
      else if (t !== e.enc) throw new ie('JWE "enc" (Encryption Algorithm) Header Parameter must be the same for all recipients');
      if (qa(ie, /* @__PURE__ */ new Map(), s.options.crit, this._protectedHeader, e), e.zip !== void 0) throw new pe('JWE "zip" (Compression Algorithm) Header Parameter is not supported.');
    }
    const i = en(t), n = { ciphertext: "", iv: "", recipients: [], tag: "" };
    for (let o = 0; o < this._recipients.length; o++) {
      const s = this._recipients[o], e = {};
      n.recipients.push(e);
      const a = { ...this._protectedHeader, ...this._unprotectedHeader, ...s.unprotectedHeader }.alg.startsWith("PBES2") ? 2048 + o : void 0;
      if (o === 0) {
        const d = await new Gl(this._plaintext).setAdditionalAuthenticatedData(this._aad).setContentEncryptionKey(i).setProtectedHeader(this._protectedHeader).setSharedUnprotectedHeader(this._unprotectedHeader).setUnprotectedHeader(s.unprotectedHeader).setKeyManagementParameters({ p2c: a }).encrypt(s.key, { ...s.options, [tw]: true });
        n.ciphertext = d.ciphertext, n.iv = d.iv, n.tag = d.tag, d.aad && (n.aad = d.aad), d.protected && (n.protected = d.protected), d.unprotected && (n.unprotected = d.unprotected), e.encrypted_key = d.encrypted_key, d.header && (e.header = d.header);
        continue;
      }
      const { encryptedKey: c, parameters: l } = await iw(s.unprotectedHeader?.alg || this._protectedHeader?.alg || this._unprotectedHeader?.alg, t, s.key, i, { p2c: a });
      e.encrypted_key = Le(c), (s.unprotectedHeader || l) && (e.header = { ...s.unprotectedHeader, ...l });
    }
    return n;
  }
}
function nw(r, t) {
  const i = `SHA-${r.slice(-3)}`;
  switch (r) {
    case "HS256":
    case "HS384":
    case "HS512":
      return { hash: i, name: "HMAC" };
    case "PS256":
    case "PS384":
    case "PS512":
      return { hash: i, name: "RSA-PSS", saltLength: r.slice(-3) >> 3 };
    case "RS256":
    case "RS384":
    case "RS512":
      return { hash: i, name: "RSASSA-PKCS1-v1_5" };
    case "ES256":
    case "ES384":
    case "ES512":
      return { hash: i, name: "ECDSA", namedCurve: t.namedCurve };
    case "Ed25519":
      return { name: "Ed25519" };
    case "EdDSA":
      return { name: t.name };
    default:
      throw new pe(`alg ${r} is not supported either by JOSE or your javascript runtime`);
  }
}
async function ow(r, t, i) {
  if (i === "sign" && (t = await zl.normalizePrivateKey(t, r)), i === "verify" && (t = await zl.normalizePublicKey(t, r)), wt(t)) return cL(t, r, i), t;
  if (t instanceof Uint8Array) {
    if (!r.startsWith("HS")) throw new TypeError(Je(t, ...Ze));
    return de.subtle.importKey("raw", t, { hash: `SHA-${r.slice(-3)}`, name: "HMAC" }, false, [i]);
  }
  throw new TypeError(Je(t, ...Ze, "Uint8Array", "JSON Web Key"));
}
const XL = async (r, t, i, n) => {
  const o = await ow(r, t, "verify");
  td(r, o);
  const s = nw(r, o.algorithm);
  try {
    return await de.subtle.verify(s, o, i, n);
  } catch {
    return false;
  }
};
async function Ip(r, t, i) {
  if (!Ce(r)) throw new me("Flattened JWS must be an object");
  if (r.protected === void 0 && r.header === void 0) throw new me('Flattened JWS must have either of the "protected" or "header" members');
  if (r.protected !== void 0 && typeof r.protected != "string") throw new me("JWS Protected Header incorrect type");
  if (r.payload === void 0) throw new me("JWS Payload missing");
  if (typeof r.signature != "string") throw new me("JWS Signature missing or incorrect type");
  if (r.header !== void 0 && !Ce(r.header)) throw new me("JWS Unprotected Header incorrect type");
  let n = {};
  if (r.protected) try {
    const b = Ae(r.protected);
    n = JSON.parse(Nt.decode(b));
  } catch {
    throw new me("JWS Protected Header is invalid");
  }
  if (!Oa(n, r.header)) throw new me("JWS Protected and JWS Unprotected Header Parameter names must be disjoint");
  const o = { ...n, ...r.header }, s = qa(me, /* @__PURE__ */ new Map([["b64", true]]), i?.crit, n, o);
  let e = true;
  if (s.has("b64") && (e = n.b64, typeof e != "boolean")) throw new me('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
  const { alg: u } = o;
  if (typeof u != "string" || !u) throw new me('JWS "alg" (Algorithm) Header Parameter missing or invalid');
  const a = i && fp("algorithms", i.algorithms);
  if (a && !a.has(u)) throw new ka('"alg" (Algorithm) Header Parameter value not allowed');
  if (e) {
    if (typeof r.payload != "string") throw new me("JWS Payload must be a string");
  } else if (typeof r.payload != "string" && !(r.payload instanceof Uint8Array)) throw new me("JWS Payload must be a string or an Uint8Array instance");
  let c = false;
  typeof t == "function" ? (t = await t(n, r), c = true, pp(u, t, "verify"), Ao(t) && (t = await ja(t, u))) : pp(u, t, "verify");
  const l = lr(Se.encode(r.protected ?? ""), Se.encode("."), typeof r.payload == "string" ? Se.encode(r.payload) : r.payload);
  let d;
  try {
    d = Ae(r.signature);
  } catch {
    throw new me("Failed to base64url decode the signature");
  }
  if (!await XL(u, t, d, l)) throw new Ql();
  let h;
  if (e) try {
    h = Ae(r.payload);
  } catch {
    throw new me("Failed to base64url decode the payload");
  }
  else typeof r.payload == "string" ? h = Se.encode(r.payload) : h = r.payload;
  const p = { payload: h };
  return r.protected !== void 0 && (p.protectedHeader = n), r.header !== void 0 && (p.unprotectedHeader = r.header), c ? { ...p, key: t } : p;
}
async function sw(r, t, i) {
  if (r instanceof Uint8Array && (r = Nt.decode(r)), typeof r != "string") throw new me("Compact JWS must be a string or Uint8Array");
  const { 0: n, 1: o, 2: s, length: e } = r.split(".");
  if (e !== 3) throw new me("Invalid Compact JWS");
  const u = await Ip({ payload: o, protected: n, signature: s }, t, i), a = { payload: u.payload, protectedHeader: u.protectedHeader };
  return typeof t == "function" ? { ...a, key: u.key } : a;
}
async function WL(r, t, i) {
  if (!Ce(r)) throw new me("General JWS must be an object");
  if (!Array.isArray(r.signatures) || !r.signatures.every(Ce)) throw new me("JWS Signatures missing or incorrect type");
  for (const n of r.signatures) try {
    return await Ip({ header: n.header, payload: r.payload, protected: n.protected, signature: n.signature }, t, i);
  } catch {
  }
  throw new Ql();
}
const Yr = (r) => Math.floor(r.getTime() / 1e3), aw = 60, uw = aw * 60, Kp = uw * 24, JL = Kp * 7, ZL = Kp * 365.25, QL = /^(\+|\-)? ?(\d+|\d+\.\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)(?: (ago|from now))?$/i, Sa = (r) => {
  const t = QL.exec(r);
  if (!t || t[4] && t[1]) throw new TypeError("Invalid time period format");
  const i = parseFloat(t[2]), n = t[3].toLowerCase();
  let o;
  switch (n) {
    case "sec":
    case "secs":
    case "second":
    case "seconds":
    case "s":
      o = Math.round(i);
      break;
    case "minute":
    case "minutes":
    case "min":
    case "mins":
    case "m":
      o = Math.round(i * aw);
      break;
    case "hour":
    case "hours":
    case "hr":
    case "hrs":
    case "h":
      o = Math.round(i * uw);
      break;
    case "day":
    case "days":
    case "d":
      o = Math.round(i * Kp);
      break;
    case "week":
    case "weeks":
    case "w":
      o = Math.round(i * JL);
      break;
    default:
      o = Math.round(i * ZL);
      break;
  }
  return t[1] === "-" || t[4] === "ago" ? -o : o;
}, Av = (r) => r.toLowerCase().replace(/^application\//, ""), YL = (r, t) => typeof r == "string" ? t.includes(r) : Array.isArray(r) ? t.some(Set.prototype.has.bind(new Set(r))) : false, Op = (r, t, i = {}) => {
  let n;
  try {
    n = JSON.parse(Nt.decode(t));
  } catch {
  }
  if (!Ce(n)) throw new lt("JWT Claims Set must be a top-level JSON object");
  const { typ: o } = i;
  if (o && (typeof r.typ != "string" || Av(r.typ) !== Av(o))) throw new ct('unexpected "typ" JWT header value', n, "typ", "check_failed");
  const { requiredClaims: s = [], issuer: e, subject: u, audience: a, maxTokenAge: c } = i, l = [...s];
  c !== void 0 && l.push("iat"), a !== void 0 && l.push("aud"), u !== void 0 && l.push("sub"), e !== void 0 && l.push("iss");
  for (const p of new Set(l.reverse())) if (!(p in n)) throw new ct(`missing required "${p}" claim`, n, p, "missing");
  if (e && !(Array.isArray(e) ? e : [e]).includes(n.iss)) throw new ct('unexpected "iss" claim value', n, "iss", "check_failed");
  if (u && n.sub !== u) throw new ct('unexpected "sub" claim value', n, "sub", "check_failed");
  if (a && !YL(n.aud, typeof a == "string" ? [a] : a)) throw new ct('unexpected "aud" claim value', n, "aud", "check_failed");
  let d;
  switch (typeof i.clockTolerance) {
    case "string":
      d = Sa(i.clockTolerance);
      break;
    case "number":
      d = i.clockTolerance;
      break;
    case "undefined":
      d = 0;
      break;
    default:
      throw new TypeError("Invalid clockTolerance option type");
  }
  const { currentDate: f } = i, h = Yr(f || /* @__PURE__ */ new Date());
  if ((n.iat !== void 0 || c) && typeof n.iat != "number") throw new ct('"iat" claim must be a number', n, "iat", "invalid");
  if (n.nbf !== void 0) {
    if (typeof n.nbf != "number") throw new ct('"nbf" claim must be a number', n, "nbf", "invalid");
    if (n.nbf > h + d) throw new ct('"nbf" claim timestamp check failed', n, "nbf", "check_failed");
  }
  if (n.exp !== void 0) {
    if (typeof n.exp != "number") throw new ct('"exp" claim must be a number', n, "exp", "invalid");
    if (n.exp <= h - d) throw new ql('"exp" claim timestamp check failed', n, "exp", "check_failed");
  }
  if (c) {
    const p = h - n.iat, b = typeof c == "number" ? c : Sa(c);
    if (p - d > b) throw new ql('"iat" claim timestamp check failed (too far in the past)', n, "iat", "check_failed");
    if (p < 0 - d) throw new ct('"iat" claim timestamp check failed (it should be in the past)', n, "iat", "check_failed");
  }
  return n;
};
async function ek(r, t, i) {
  const n = await sw(r, t, i);
  if (n.protectedHeader.crit?.includes("b64") && n.protectedHeader.b64 === false) throw new lt("JWTs MUST NOT use unencoded payload");
  const s = { payload: Op(n.protectedHeader, n.payload, i), protectedHeader: n.protectedHeader };
  return typeof t == "function" ? { ...s, key: n.key } : s;
}
async function tk(r, t, i) {
  const n = await ew(r, t, i), o = Op(n.protectedHeader, n.plaintext, i), { protectedHeader: s } = n;
  if (s.iss !== void 0 && s.iss !== o.iss) throw new ct('replicated "iss" claim header parameter mismatch', o, "iss", "mismatch");
  if (s.sub !== void 0 && s.sub !== o.sub) throw new ct('replicated "sub" claim header parameter mismatch', o, "sub", "mismatch");
  if (s.aud !== void 0 && JSON.stringify(s.aud) !== JSON.stringify(o.aud)) throw new ct('replicated "aud" claim header parameter mismatch', o, "aud", "mismatch");
  const e = { payload: o, protectedHeader: s };
  return typeof t == "function" ? { ...e, key: n.key } : e;
}
class cw {
  constructor(t) {
    this._flattened = new Gl(t);
  }
  setContentEncryptionKey(t) {
    return this._flattened.setContentEncryptionKey(t), this;
  }
  setInitializationVector(t) {
    return this._flattened.setInitializationVector(t), this;
  }
  setProtectedHeader(t) {
    return this._flattened.setProtectedHeader(t), this;
  }
  setKeyManagementParameters(t) {
    return this._flattened.setKeyManagementParameters(t), this;
  }
  async encrypt(t, i) {
    const n = await this._flattened.encrypt(t, i);
    return [n.protected, n.encrypted_key, n.iv, n.ciphertext, n.tag].join(".");
  }
}
const rk = async (r, t, i) => {
  const n = await ow(r, t, "sign");
  td(r, n);
  const o = await de.subtle.sign(nw(r, n.algorithm), n, i);
  return new Uint8Array(o);
};
class jp {
  constructor(t) {
    if (!(t instanceof Uint8Array)) throw new TypeError("payload must be an instance of Uint8Array");
    this._payload = t;
  }
  setProtectedHeader(t) {
    if (this._protectedHeader) throw new TypeError("setProtectedHeader can only be called once");
    return this._protectedHeader = t, this;
  }
  setUnprotectedHeader(t) {
    if (this._unprotectedHeader) throw new TypeError("setUnprotectedHeader can only be called once");
    return this._unprotectedHeader = t, this;
  }
  async sign(t, i) {
    if (!this._protectedHeader && !this._unprotectedHeader) throw new me("either setProtectedHeader or setUnprotectedHeader must be called before #sign()");
    if (!Oa(this._protectedHeader, this._unprotectedHeader)) throw new me("JWS Protected and JWS Unprotected Header Parameter names must be disjoint");
    const n = { ...this._protectedHeader, ...this._unprotectedHeader }, o = qa(me, /* @__PURE__ */ new Map([["b64", true]]), i?.crit, this._protectedHeader, n);
    let s = true;
    if (o.has("b64") && (s = this._protectedHeader.b64, typeof s != "boolean")) throw new me('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
    const { alg: e } = n;
    if (typeof e != "string" || !e) throw new me('JWS "alg" (Algorithm) Header Parameter missing or invalid');
    pp(e, t, "sign");
    let u = this._payload;
    s && (u = Se.encode(Le(u)));
    let a;
    this._protectedHeader ? a = Se.encode(Le(JSON.stringify(this._protectedHeader))) : a = Se.encode("");
    const c = lr(a, Se.encode("."), u), l = await rk(e, t, c), d = { signature: Le(l), payload: "" };
    return s && (d.payload = Nt.decode(u)), this._unprotectedHeader && (d.header = this._unprotectedHeader), this._protectedHeader && (d.protected = Nt.decode(a)), d;
  }
}
class lw {
  constructor(t) {
    this._flattened = new jp(t);
  }
  setProtectedHeader(t) {
    return this._flattened.setProtectedHeader(t), this;
  }
  async sign(t, i) {
    const n = await this._flattened.sign(t, i);
    if (n.payload === void 0) throw new TypeError("use the flattened module for creating JWS with b64: false");
    return `${n.protected}.${n.payload}.${n.signature}`;
  }
}
class ik {
  constructor(t, i, n) {
    this.parent = t, this.key = i, this.options = n;
  }
  setProtectedHeader(t) {
    if (this.protectedHeader) throw new TypeError("setProtectedHeader can only be called once");
    return this.protectedHeader = t, this;
  }
  setUnprotectedHeader(t) {
    if (this.unprotectedHeader) throw new TypeError("setUnprotectedHeader can only be called once");
    return this.unprotectedHeader = t, this;
  }
  addSignature(...t) {
    return this.parent.addSignature(...t);
  }
  sign(...t) {
    return this.parent.sign(...t);
  }
  done() {
    return this.parent;
  }
}
class nk {
  constructor(t) {
    this._signatures = [], this._payload = t;
  }
  addSignature(t, i) {
    const n = new ik(this, t, i);
    return this._signatures.push(n), n;
  }
  async sign() {
    if (!this._signatures.length) throw new me("at least one signature must be added");
    const t = { signatures: [], payload: "" };
    for (let i = 0; i < this._signatures.length; i++) {
      const n = this._signatures[i], o = new jp(this._payload);
      o.setProtectedHeader(n.protectedHeader), o.setUnprotectedHeader(n.unprotectedHeader);
      const { payload: s, ...e } = await o.sign(n.key, n.options);
      if (i === 0) t.payload = s;
      else if (t.payload !== s) throw new me("inconsistent use of JWS Unencoded Payload (RFC7797)");
      t.signatures.push(e);
    }
    return t;
  }
}
function ji(r, t) {
  if (!Number.isFinite(t)) throw new TypeError(`Invalid ${r} input`);
  return t;
}
class qp {
  constructor(t = {}) {
    if (!Ce(t)) throw new TypeError("JWT Claims Set MUST be an object");
    this._payload = t;
  }
  setIssuer(t) {
    return this._payload = { ...this._payload, iss: t }, this;
  }
  setSubject(t) {
    return this._payload = { ...this._payload, sub: t }, this;
  }
  setAudience(t) {
    return this._payload = { ...this._payload, aud: t }, this;
  }
  setJti(t) {
    return this._payload = { ...this._payload, jti: t }, this;
  }
  setNotBefore(t) {
    return typeof t == "number" ? this._payload = { ...this._payload, nbf: ji("setNotBefore", t) } : t instanceof Date ? this._payload = { ...this._payload, nbf: ji("setNotBefore", Yr(t)) } : this._payload = { ...this._payload, nbf: Yr(/* @__PURE__ */ new Date()) + Sa(t) }, this;
  }
  setExpirationTime(t) {
    return typeof t == "number" ? this._payload = { ...this._payload, exp: ji("setExpirationTime", t) } : t instanceof Date ? this._payload = { ...this._payload, exp: ji("setExpirationTime", Yr(t)) } : this._payload = { ...this._payload, exp: Yr(/* @__PURE__ */ new Date()) + Sa(t) }, this;
  }
  setIssuedAt(t) {
    return typeof t > "u" ? this._payload = { ...this._payload, iat: Yr(/* @__PURE__ */ new Date()) } : t instanceof Date ? this._payload = { ...this._payload, iat: ji("setIssuedAt", Yr(t)) } : typeof t == "string" ? this._payload = { ...this._payload, iat: ji("setIssuedAt", Yr(/* @__PURE__ */ new Date()) + Sa(t)) } : this._payload = { ...this._payload, iat: ji("setIssuedAt", t) }, this;
  }
}
class ok extends qp {
  setProtectedHeader(t) {
    return this._protectedHeader = t, this;
  }
  async sign(t, i) {
    const n = new lw(Se.encode(JSON.stringify(this._payload)));
    if (n.setProtectedHeader(this._protectedHeader), Array.isArray(this._protectedHeader?.crit) && this._protectedHeader.crit.includes("b64") && this._protectedHeader.b64 === false) throw new lt("JWTs MUST NOT use unencoded payload");
    return n.sign(t, i);
  }
}
class sk extends qp {
  setProtectedHeader(t) {
    if (this._protectedHeader) throw new TypeError("setProtectedHeader can only be called once");
    return this._protectedHeader = t, this;
  }
  setKeyManagementParameters(t) {
    if (this._keyManagementParameters) throw new TypeError("setKeyManagementParameters can only be called once");
    return this._keyManagementParameters = t, this;
  }
  setContentEncryptionKey(t) {
    if (this._cek) throw new TypeError("setContentEncryptionKey can only be called once");
    return this._cek = t, this;
  }
  setInitializationVector(t) {
    if (this._iv) throw new TypeError("setInitializationVector can only be called once");
    return this._iv = t, this;
  }
  replicateIssuerAsHeader() {
    return this._replicateIssuerAsHeader = true, this;
  }
  replicateSubjectAsHeader() {
    return this._replicateSubjectAsHeader = true, this;
  }
  replicateAudienceAsHeader() {
    return this._replicateAudienceAsHeader = true, this;
  }
  async encrypt(t, i) {
    const n = new cw(Se.encode(JSON.stringify(this._payload)));
    return this._replicateIssuerAsHeader && (this._protectedHeader = { ...this._protectedHeader, iss: this._payload.iss }), this._replicateSubjectAsHeader && (this._protectedHeader = { ...this._protectedHeader, sub: this._payload.sub }), this._replicateAudienceAsHeader && (this._protectedHeader = { ...this._protectedHeader, aud: this._payload.aud }), n.setProtectedHeader(this._protectedHeader), this._iv && n.setInitializationVector(this._iv), this._cek && n.setContentEncryptionKey(this._cek), this._keyManagementParameters && n.setKeyManagementParameters(this._keyManagementParameters), n.encrypt(t, i);
  }
}
const Hr = (r, t) => {
  if (typeof r != "string" || !r) throw new kp(`${t} missing or invalid`);
};
async function dw(r, t) {
  if (!Ce(r)) throw new TypeError("JWK must be an object");
  if (t ?? (t = "sha256"), t !== "sha256" && t !== "sha384" && t !== "sha512") throw new TypeError('digestAlgorithm must one of "sha256", "sha384", or "sha512"');
  let i;
  switch (r.kty) {
    case "EC":
      Hr(r.crv, '"crv" (Curve) Parameter'), Hr(r.x, '"x" (X Coordinate) Parameter'), Hr(r.y, '"y" (Y Coordinate) Parameter'), i = { crv: r.crv, kty: r.kty, x: r.x, y: r.y };
      break;
    case "OKP":
      Hr(r.crv, '"crv" (Subtype of Key Pair) Parameter'), Hr(r.x, '"x" (Public Key) Parameter'), i = { crv: r.crv, kty: r.kty, x: r.x };
      break;
    case "RSA":
      Hr(r.e, '"e" (Exponent) Parameter'), Hr(r.n, '"n" (Modulus) Parameter'), i = { e: r.e, kty: r.kty, n: r.n };
      break;
    case "oct":
      Hr(r.k, '"k" (Key Value) Parameter'), i = { k: r.k, kty: r.kty };
      break;
    default:
      throw new pe('"kty" (Key Type) Parameter missing or unsupported');
  }
  const n = Se.encode(JSON.stringify(i));
  return Le(await T_(t, n));
}
async function ak(r, t) {
  t ?? (t = "sha256");
  const i = await dw(r, t);
  return `urn:ietf:params:oauth:jwk-thumbprint:sha-${t.slice(-3)}:${i}`;
}
async function uk(r, t) {
  const i = { ...r, ...t?.header };
  if (!Ce(i.jwk)) throw new me('"jwk" (JSON Web Key) Header Parameter must be a JSON object');
  const n = await ja({ ...i.jwk, ext: true }, i.alg);
  if (n instanceof Uint8Array || n.type !== "public") throw new me('"jwk" (JSON Web Key) Header Parameter must be a public key');
  return n;
}
function ck(r) {
  switch (typeof r == "string" && r.slice(0, 2)) {
    case "RS":
    case "PS":
      return "RSA";
    case "ES":
      return "EC";
    case "Ed":
      return "OKP";
    default:
      throw new pe('Unsupported "alg" value for a JSON Web Key Set');
  }
}
function lk(r) {
  return r && typeof r == "object" && Array.isArray(r.keys) && r.keys.every(dk);
}
function dk(r) {
  return Ce(r);
}
function pw(r) {
  return typeof structuredClone == "function" ? structuredClone(r) : JSON.parse(JSON.stringify(r));
}
class pk {
  constructor(t) {
    if (this._cached = /* @__PURE__ */ new WeakMap(), !lk(t)) throw new Jl("JSON Web Key Set malformed");
    this._jwks = pw(t);
  }
  async getKey(t, i) {
    const { alg: n, kid: o } = { ...t, ...i?.header }, s = ck(n), e = this._jwks.keys.filter((c) => {
      let l = s === c.kty;
      if (l && typeof o == "string" && (l = o === c.kid), l && typeof c.alg == "string" && (l = n === c.alg), l && typeof c.use == "string" && (l = c.use === "sig"), l && Array.isArray(c.key_ops) && (l = c.key_ops.includes("verify")), l) switch (n) {
        case "ES256":
          l = c.crv === "P-256";
          break;
        case "ES256K":
          l = c.crv === "secp256k1";
          break;
        case "ES384":
          l = c.crv === "P-384";
          break;
        case "ES512":
          l = c.crv === "P-521";
          break;
        case "Ed25519":
          l = c.crv === "Ed25519";
          break;
        case "EdDSA":
          l = c.crv === "Ed25519" || c.crv === "Ed448";
          break;
      }
      return l;
    }), { 0: u, length: a } = e;
    if (a === 0) throw new Zl();
    if (a !== 1) {
      const c = new Dp(), { _cached: l } = this;
      throw c[Symbol.asyncIterator] = async function* () {
        for (const d of e) try {
          yield await Sv(l, d, n);
        } catch {
        }
      }, c;
    }
    return Sv(this._cached, u, n);
  }
}
async function Sv(r, t, i) {
  const n = r.get(t) || r.set(t, {}).get(t);
  if (n[i] === void 0) {
    const o = await ja({ ...t, ext: true }, i);
    if (o instanceof Uint8Array || o.type !== "public") throw new Jl("JSON Web Key Set members must be public keys");
    n[i] = o;
  }
  return n[i];
}
function hp(r) {
  const t = new pk(r), i = async (n, o) => t.getKey(n, o);
  return Object.defineProperties(i, { jwks: { value: () => pw(t._jwks), enumerable: true, configurable: false, writable: false } }), i;
}
const fk = async (r, t, i) => {
  let n, o, s = false;
  typeof AbortController == "function" && (n = new AbortController(), o = setTimeout(() => {
    s = true, n.abort();
  }, t));
  const e = await fetch(r.href, { signal: n ? n.signal : void 0, redirect: "manual", headers: i.headers }).catch((u) => {
    throw s ? new Pp() : u;
  });
  if (o !== void 0 && clearTimeout(o), e.status !== 200) throw new qe("Expected 200 OK from the JSON Web Key Set HTTP response");
  try {
    return await e.json();
  } catch {
    throw new qe("Failed to parse the JSON Web Key Set HTTP response as JSON");
  }
};
function hk() {
  return typeof WebSocketPair < "u" || typeof navigator < "u" && navigator.userAgent === "Cloudflare-Workers" || typeof EdgeRuntime < "u" && EdgeRuntime === "vercel";
}
let yp;
(typeof navigator > "u" || !navigator.userAgent?.startsWith?.("Mozilla/5.0 ")) && (yp = "jose/v5.10.0");
const Ca = Symbol();
function yk(r, t) {
  return !(typeof r != "object" || r === null || !("uat" in r) || typeof r.uat != "number" || Date.now() - r.uat >= t || !("jwks" in r) || !Ce(r.jwks) || !Array.isArray(r.jwks.keys) || !Array.prototype.every.call(r.jwks.keys, Ce));
}
class mk {
  constructor(t, i) {
    if (!(t instanceof URL)) throw new TypeError("url must be an instance of URL");
    this._url = new URL(t.href), this._options = { agent: i?.agent, headers: i?.headers }, this._timeoutDuration = typeof i?.timeoutDuration == "number" ? i?.timeoutDuration : 5e3, this._cooldownDuration = typeof i?.cooldownDuration == "number" ? i?.cooldownDuration : 3e4, this._cacheMaxAge = typeof i?.cacheMaxAge == "number" ? i?.cacheMaxAge : 6e5, i?.[Ca] !== void 0 && (this._cache = i?.[Ca], yk(i?.[Ca], this._cacheMaxAge) && (this._jwksTimestamp = this._cache.uat, this._local = hp(this._cache.jwks)));
  }
  coolingDown() {
    return typeof this._jwksTimestamp == "number" ? Date.now() < this._jwksTimestamp + this._cooldownDuration : false;
  }
  fresh() {
    return typeof this._jwksTimestamp == "number" ? Date.now() < this._jwksTimestamp + this._cacheMaxAge : false;
  }
  async getKey(t, i) {
    (!this._local || !this.fresh()) && await this.reload();
    try {
      return await this._local(t, i);
    } catch (n) {
      if (n instanceof Zl && this.coolingDown() === false) return await this.reload(), this._local(t, i);
      throw n;
    }
  }
  async reload() {
    this._pendingFetch && hk() && (this._pendingFetch = void 0);
    const t = new Headers(this._options.headers);
    yp && !t.has("User-Agent") && (t.set("User-Agent", yp), this._options.headers = Object.fromEntries(t.entries())), this._pendingFetch || (this._pendingFetch = fk(this._url, this._timeoutDuration, this._options).then((i) => {
      this._local = hp(i), this._cache && (this._cache.uat = Date.now(), this._cache.jwks = i), this._jwksTimestamp = Date.now(), this._pendingFetch = void 0;
    }).catch((i) => {
      throw this._pendingFetch = void 0, i;
    })), await this._pendingFetch;
  }
}
function bk(r, t) {
  const i = new mk(r, t), n = async (o, s) => i.getKey(o, s);
  return Object.defineProperties(n, { coolingDown: { get: () => i.coolingDown(), enumerable: true, configurable: false }, fresh: { get: () => i.fresh(), enumerable: true, configurable: false }, reload: { value: () => i.reload(), enumerable: true, configurable: false, writable: false }, reloading: { get: () => !!i._pendingFetch, enumerable: true, configurable: false }, jwks: { value: () => i._local?.jwks(), enumerable: true, configurable: false, writable: false } }), n;
}
const gk = Ca;
class Ek extends qp {
  encode() {
    const t = Le(JSON.stringify({ alg: "none" })), i = Le(JSON.stringify(this._payload));
    return `${t}.${i}.`;
  }
  static decode(t, i) {
    if (typeof t != "string") throw new lt("Unsecured JWT must be a string");
    const { 0: n, 1: o, 2: s, length: e } = t.split(".");
    if (e !== 3 || s !== "") throw new lt("Invalid Unsecured JWT");
    let u;
    try {
      if (u = JSON.parse(Nt.decode(Ae(n))), u.alg !== "none") throw new Error();
    } catch {
      throw new lt("Invalid Unsecured JWT");
    }
    return { payload: Op(u, Ae(o), i), header: u };
  }
}
const vk = Le, Mp = Ae, Rk = Object.freeze(Object.defineProperty({ __proto__: null, decode: Mp, encode: vk }, Symbol.toStringTag, { value: "Module" }));
function _k(r) {
  let t;
  if (typeof r == "string") {
    const i = r.split(".");
    (i.length === 3 || i.length === 5) && ([t] = i);
  } else if (typeof r == "object" && r) if ("protected" in r) t = r.protected;
  else throw new TypeError("Token does not contain a Protected Header");
  try {
    if (typeof t != "string" || !t) throw new Error();
    const i = JSON.parse(Nt.decode(Mp(t)));
    if (!Ce(i)) throw new Error();
    return i;
  } catch {
    throw new TypeError("Invalid Token or Protected Header formatting");
  }
}
function wk(r) {
  if (typeof r != "string") throw new lt("JWTs must use Compact JWS serialization, JWT must be a string");
  const { 1: t, length: i } = r.split(".");
  if (i === 5) throw new lt("Only JWTs using Compact JWS serialization can be decoded");
  if (i !== 3) throw new lt("Invalid JWT");
  if (!t) throw new lt("JWTs must contain a payload");
  let n;
  try {
    n = Mp(t);
  } catch {
    throw new lt("Failed to base64url decode the payload");
  }
  let o;
  try {
    o = JSON.parse(Nt.decode(n));
  } catch {
    throw new lt("Failed to parse the decoded payload as JSON");
  }
  if (!Ce(o)) throw new lt("Invalid JWT Claims Set");
  return o;
}
async function xk(r, t) {
  let i, n, o;
  switch (r) {
    case "HS256":
    case "HS384":
    case "HS512":
      i = parseInt(r.slice(-3), 10), n = { name: "HMAC", hash: `SHA-${i}`, length: i }, o = ["sign", "verify"];
      break;
    case "A128CBC-HS256":
    case "A192CBC-HS384":
    case "A256CBC-HS512":
      return i = parseInt(r.slice(-3), 10), Yl(new Uint8Array(i >> 3));
    case "A128KW":
    case "A192KW":
    case "A256KW":
      i = parseInt(r.slice(1, 4), 10), n = { name: "AES-KW", length: i }, o = ["wrapKey", "unwrapKey"];
      break;
    case "A128GCMKW":
    case "A192GCMKW":
    case "A256GCMKW":
    case "A128GCM":
    case "A192GCM":
    case "A256GCM":
      i = parseInt(r.slice(1, 4), 10), n = { name: "AES-GCM", length: i }, o = ["encrypt", "decrypt"];
      break;
    default:
      throw new pe('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
  }
  return de.subtle.generateKey(n, t?.extractable ?? false, o);
}
function Md(r) {
  const t = r?.modulusLength ?? 2048;
  if (typeof t != "number" || t < 2048) throw new pe("Invalid or unsupported modulusLength option provided, 2048 bits or larger keys must be used");
  return t;
}
async function Ak(r, t) {
  let i, n;
  switch (r) {
    case "PS256":
    case "PS384":
    case "PS512":
      i = { name: "RSA-PSS", hash: `SHA-${r.slice(-3)}`, publicExponent: new Uint8Array([1, 0, 1]), modulusLength: Md(t) }, n = ["sign", "verify"];
      break;
    case "RS256":
    case "RS384":
    case "RS512":
      i = { name: "RSASSA-PKCS1-v1_5", hash: `SHA-${r.slice(-3)}`, publicExponent: new Uint8Array([1, 0, 1]), modulusLength: Md(t) }, n = ["sign", "verify"];
      break;
    case "RSA-OAEP":
    case "RSA-OAEP-256":
    case "RSA-OAEP-384":
    case "RSA-OAEP-512":
      i = { name: "RSA-OAEP", hash: `SHA-${parseInt(r.slice(-3), 10) || 1}`, publicExponent: new Uint8Array([1, 0, 1]), modulusLength: Md(t) }, n = ["decrypt", "unwrapKey", "encrypt", "wrapKey"];
      break;
    case "ES256":
      i = { name: "ECDSA", namedCurve: "P-256" }, n = ["sign", "verify"];
      break;
    case "ES384":
      i = { name: "ECDSA", namedCurve: "P-384" }, n = ["sign", "verify"];
      break;
    case "ES512":
      i = { name: "ECDSA", namedCurve: "P-521" }, n = ["sign", "verify"];
      break;
    case "Ed25519":
      i = { name: "Ed25519" }, n = ["sign", "verify"];
      break;
    case "EdDSA": {
      n = ["sign", "verify"];
      const o = t?.crv ?? "Ed25519";
      switch (o) {
        case "Ed25519":
        case "Ed448":
          i = { name: o };
          break;
        default:
          throw new pe("Invalid or unsupported crv option provided");
      }
      break;
    }
    case "ECDH-ES":
    case "ECDH-ES+A128KW":
    case "ECDH-ES+A192KW":
    case "ECDH-ES+A256KW": {
      n = ["deriveKey", "deriveBits"];
      const o = t?.crv ?? "P-256";
      switch (o) {
        case "P-256":
        case "P-384":
        case "P-521": {
          i = { name: "ECDH", namedCurve: o };
          break;
        }
        case "X25519":
        case "X448":
          i = { name: o };
          break;
        default:
          throw new pe("Invalid or unsupported crv option provided, supported values are P-256, P-384, P-521, X25519, and X448");
      }
      break;
    }
    default:
      throw new pe('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
  }
  return de.subtle.generateKey(i, t?.extractable ?? false, n);
}
async function Sk(r, t) {
  return Ak(r, t);
}
async function Ck(r, t) {
  return xk(r, t);
}
const Tk = "WebCryptoAPI", Lk = Object.freeze(Object.defineProperty({ __proto__: null, CompactEncrypt: cw, CompactSign: lw, EmbeddedJWK: uk, EncryptJWT: sk, FlattenedEncrypt: Gl, FlattenedSign: jp, GeneralEncrypt: HL, GeneralSign: nk, SignJWT: ok, UnsecuredJWT: Ek, base64url: Rk, calculateJwkThumbprint: dw, calculateJwkThumbprintUri: ak, compactDecrypt: ew, compactVerify: sw, createLocalJWKSet: hp, createRemoteJWKSet: bk, cryptoRuntime: Tk, decodeJwt: wk, decodeProtectedHeader: _k, errors: oL, experimental_jwksCache: gk, exportJWK: rw, exportPKCS8: FL, exportSPKI: GL, flattenedDecrypt: Up, flattenedVerify: Ip, generalDecrypt: NL, generalVerify: WL, generateKeyPair: Sk, generateSecret: Ck, importJWK: ja, importPKCS8: UL, importSPKI: PL, importX509: BL, jwksCache: Ca, jwtDecrypt: tk, jwtVerify: ek }, Symbol.toStringTag, { value: "Module" })), kk = Fl(Lk);
var Al = {}, Cv;
function Dk() {
  if (Cv) return Al;
  Cv = 1, Object.defineProperty(Al, "__esModule", { value: true }), Al.either = r;
  function r(t, i) {
    if (t != null && i != null && t !== i) throw new TypeError(`Expected "${i}", got "${t}"`);
    return t ?? i ?? void 0;
  }
  return Al;
}
var Tv;
function Pk() {
  if (Tv) return cs;
  Tv = 1, Object.defineProperty(cs, "__esModule", { value: true }), cs.JoseKey = void 0;
  const r = kk, t = ni(), i = Dk(), { JOSEError: n } = r.errors;
  class o extends t.Key {
    async getKeyObj(e) {
      if (!this.algorithms.includes(e)) throw new t.JwkError(`Key cannot be used with algorithm "${e}"`);
      try {
        return await (0, r.importJWK)(this.jwk, e);
      } catch (u) {
        throw new t.JwkError("Failed to import JWK", void 0, { cause: u });
      }
    }
    async createJwt(e, u) {
      try {
        const { kid: a } = e;
        if (a && a !== this.kid) throw new t.JwtCreateError(`Invalid "kid" (${a}) used to sign with key "${this.kid}"`);
        const { alg: c } = e;
        if (!c) throw new t.JwtCreateError('Missing "alg" in JWT header');
        const l = await this.getKeyObj(c);
        return await new r.SignJWT(u).setProtectedHeader({ ...e, alg: c, kid: this.kid }).sign(l);
      } catch (a) {
        throw a instanceof n ? new t.JwtCreateError(a.message, a.code, { cause: a }) : t.JwtCreateError.from(a);
      }
    }
    async verifyJwt(e, u) {
      try {
        const a = await (0, r.jwtVerify)(e, async ({ alg: d }) => this.getKeyObj(d), { ...u, algorithms: this.algorithms }), c = t.jwtHeaderSchema.safeParse(a.protectedHeader);
        if (!c.success) throw new t.JwtVerifyError("Invalid JWT header", void 0, { cause: c.error });
        const l = t.jwtPayloadSchema.safeParse(a.payload);
        if (!l.success) throw new t.JwtVerifyError("Invalid JWT payload", void 0, { cause: l.error });
        return { protectedHeader: c.data, payload: l.data };
      } catch (a) {
        throw a instanceof n ? new t.JwtVerifyError(a.message, a.code, { cause: a }) : t.JwtVerifyError.from(a);
      }
    }
    static async generateKeyPair(e = ["ES256"], u) {
      if (!e.length) throw new t.JwkError("No algorithms provided for key generation");
      const a = [];
      for (const c of e) try {
        return await (0, r.generateKeyPair)(c, u);
      } catch (l) {
        a.push(l);
      }
      throw new t.JwkError("Failed to generate key pair", void 0, { cause: new AggregateError(a, "None of the algorithms worked") });
    }
    static async generate(e = ["ES256"], u, a) {
      const c = await this.generateKeyPair(e, { ...a, extractable: true });
      return this.fromImportable(c.privateKey, u);
    }
    static async fromImportable(e, u) {
      if (typeof e == "string") {
        if (e.startsWith("-----")) return this.fromPKCS8(e, "", u);
        if (e.startsWith("{")) return this.fromJWK(e, u);
        throw new t.JwkError("Invalid input");
      }
      if (typeof e == "object") return "kty" in e || "alg" in e ? this.fromJWK(e, u) : this.fromKeyLike(e, u);
      throw new t.JwkError("Invalid input");
    }
    static async fromKeyLike(e, u, a) {
      const c = await (0, r.exportJWK)(e);
      if (a) {
        if (!c.alg) c.alg = a;
        else if (c.alg !== a) throw new t.JwkError('Invalid "alg" in JWK');
      }
      return this.fromJWK(c, u);
    }
    static async fromPKCS8(e, u, a) {
      const c = await (0, r.importPKCS8)(e, u, { extractable: true });
      return this.fromKeyLike(c, a);
    }
    static async fromJWK(e, u) {
      const a = typeof e == "string" ? JSON.parse(e) : e;
      if (!a || typeof a != "object") throw new t.JwkError("Invalid JWK");
      const c = (0, i.either)(a.kid, u), l = a.use || "sig";
      return new o(t.jwkValidator.parse({ ...a, kid: c, use: l }));
    }
  }
  return cs.JoseKey = o, cs;
}
var Lv;
function Bk() {
  return Lv || (Lv = 1, function(r) {
    var t = Oi && Oi.__createBinding || (Object.create ? function(n, o, s, e) {
      e === void 0 && (e = s);
      var u = Object.getOwnPropertyDescriptor(o, s);
      (!u || ("get" in u ? !o.__esModule : u.writable || u.configurable)) && (u = { enumerable: true, get: function() {
        return o[s];
      } }), Object.defineProperty(n, e, u);
    } : function(n, o, s, e) {
      e === void 0 && (e = s), n[e] = o[s];
    }), i = Oi && Oi.__exportStar || function(n, o) {
      for (var s in n) s !== "default" && !Object.prototype.hasOwnProperty.call(o, s) && t(o, n, s);
    };
    Object.defineProperty(r, "__esModule", { value: true }), i(Pk(), r);
  }(Oi)), Oi;
}
var vo = {}, kv;
function Uk() {
  if (kv) return vo;
  kv = 1, Object.defineProperty(vo, "__esModule", { value: true }), vo.toSubtleAlgorithm = r, vo.fromSubtleAlgorithm = t, vo.isCryptoKeyPair = i;
  function r(n, o, s) {
    switch (n) {
      case "PS256":
      case "PS384":
      case "PS512":
        return { name: "RSA-PSS", hash: `SHA-${n.slice(-3)}`, modulusLength: s?.modulusLength ?? 2048, publicExponent: new Uint8Array([1, 0, 1]) };
      case "RS256":
      case "RS384":
      case "RS512":
        return { name: "RSASSA-PKCS1-v1_5", hash: `SHA-${n.slice(-3)}`, modulusLength: s?.modulusLength ?? 2048, publicExponent: new Uint8Array([1, 0, 1]) };
      case "ES256":
      case "ES384":
        return { name: "ECDSA", namedCurve: `P-${n.slice(-3)}` };
      case "ES512":
        return { name: "ECDSA", namedCurve: "P-521" };
      default:
        throw new TypeError(`Unsupported alg "${n}"`);
    }
  }
  function t(n) {
    switch (n.name) {
      case "RSA-PSS":
      case "RSASSA-PKCS1-v1_5": {
        const o = n.hash.name;
        switch (o) {
          case "SHA-256":
          case "SHA-384":
          case "SHA-512":
            return `${n.name === "RSA-PSS" ? "PS" : "RS"}${o.slice(-3)}`;
          default:
            throw new TypeError("unsupported RsaHashedKeyAlgorithm hash");
        }
      }
      case "ECDSA": {
        const o = n.namedCurve;
        switch (o) {
          case "P-256":
          case "P-384":
          case "P-512":
            return `ES${o.slice(-3)}`;
          case "P-521":
            return "ES512";
          default:
            throw new TypeError("unsupported EcKeyAlgorithm namedCurve");
        }
      }
      case "Ed448":
      case "Ed25519":
        return "EdDSA";
      default:
        throw new TypeError(`Unexpected algorithm "${n.name}"`);
    }
  }
  function i(n, o) {
    return typeof n == "object" && n !== null && "privateKey" in n && n.privateKey instanceof CryptoKey && n.privateKey.type === "private" && (o == null || n.privateKey.extractable === o) && n.privateKey.usages.includes("sign") && "publicKey" in n && n.publicKey instanceof CryptoKey && n.publicKey.type === "public" && n.publicKey.extractable === true && n.publicKey.usages.includes("verify");
  }
  return vo;
}
var Dv;
function Ik() {
  return Dv || (Dv = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.WebcryptoKey = r.jwkWithAlgSchema = void 0;
    const t = oe(), i = ni(), n = Bk(), o = Uk();
    r.jwkWithAlgSchema = t.z.intersection(i.jwkSchema, t.z.object({ alg: t.z.string() }));
    class s extends n.JoseKey {
      static async generate(u = ["ES256"], a = crypto.randomUUID(), c) {
        const l = await this.generateKeyPair(u, c);
        if (!(0, o.isCryptoKeyPair)(l)) throw new TypeError("Invalid CryptoKeyPair");
        return this.fromKeypair(l, a);
      }
      static async fromKeypair(u, a) {
        const { key_ops: c, use: l, alg: d = (0, o.fromSubtleAlgorithm)(u.privateKey.algorithm), ...f } = await crypto.subtle.exportKey("jwk", u.privateKey.extractable ? u.privateKey : u.publicKey);
        if (l && l !== "sig") throw new TypeError(`Unsupported JWK use "${l}"`);
        if (c && !c.some((h) => h === "sign" || h === "verify")) throw new TypeError(`Invalid key_ops "${c}" for "sig" use`);
        return new s(r.jwkWithAlgSchema.parse({ ...f, kid: a, alg: d, use: "sig" }), u);
      }
      constructor(u, a) {
        super(u), Object.defineProperty(this, "cryptoKeyPair", { enumerable: true, configurable: true, writable: true, value: a });
      }
      get isPrivate() {
        return true;
      }
      get privateJwk() {
        if (super.isPrivate) return this.jwk;
        throw new Error("Private Webcrypto Key not exportable");
      }
      async getKeyObj(u) {
        if (this.jwk.alg !== u) throw new i.JwkError(`Key cannot be used with algorithm "${u}"`);
        return this.cryptoKeyPair.privateKey;
      }
    }
    r.WebcryptoKey = s;
  }(Ud)), Ud;
}
var Pv;
function Vp() {
  return Pv || (Pv = 1, function(r) {
    var t = Ui && Ui.__createBinding || (Object.create ? function(n, o, s, e) {
      e === void 0 && (e = s);
      var u = Object.getOwnPropertyDescriptor(o, s);
      (!u || ("get" in u ? !o.__esModule : u.writable || u.configurable)) && (u = { enumerable: true, get: function() {
        return o[s];
      } }), Object.defineProperty(n, e, u);
    } : function(n, o, s, e) {
      e === void 0 && (e = s), n[e] = o[s];
    }), i = Ui && Ui.__exportStar || function(n, o) {
      for (var s in n) s !== "default" && !Object.prototype.hasOwnProperty.call(o, s) && t(o, n, s);
    };
    Object.defineProperty(r, "__esModule", { value: true }), i(Ik(), r);
  }(Ui)), Ui;
}
var qi = {}, Mi = {}, Vi = {}, cr = {}, Ni = {}, Bv;
function Ma() {
  if (Bv) return Ni;
  Bv = 1, Object.defineProperty(Ni, "__esModule", { value: true }), Ni.InvalidDidError = Ni.DidError = void 0;
  class r extends Error {
    constructor(n, o, s, e = 400, u) {
      super(o, { cause: u }), Object.defineProperty(this, "did", { enumerable: true, configurable: true, writable: true, value: n }), Object.defineProperty(this, "code", { enumerable: true, configurable: true, writable: true, value: s }), Object.defineProperty(this, "status", { enumerable: true, configurable: true, writable: true, value: e });
    }
    get statusCode() {
      return this.status;
    }
    toString() {
      return `${this.constructor.name} ${this.code} (${this.did}): ${this.message}`;
    }
    static from(n, o) {
      if (n instanceof r) return n;
      const s = n instanceof Error ? n.message : typeof n == "string" ? n : "An unknown error occurred", e = (typeof n?.statusCode == "number" ? n.statusCode : void 0) ?? (typeof n?.status == "number" ? n.status : void 0);
      return new r(o, s, "did-unknown-error", e, n);
    }
  }
  Ni.DidError = r;
  class t extends r {
    constructor(n, o, s) {
      super(n, o, "did-invalid", 400, s);
    }
  }
  return Ni.InvalidDidError = t, Ni;
}
var zi = {}, Xr = {}, Uv;
function Kk() {
  if (Uv) return Xr;
  Uv = 1, Object.defineProperty(Xr, "__esModule", { value: true }), Xr.DID_PLC_PREFIX = void 0, Xr.isDidPlc = o, Xr.asDidPlc = s, Xr.assertDidPlc = e;
  const r = Ma(), t = "did:plc:";
  Xr.DID_PLC_PREFIX = t;
  const i = t.length, n = 32;
  function o(a) {
    if (typeof a != "string" || a.length !== n || !a.startsWith(t)) return false;
    for (let c = i; c < n; c++) if (!u(a.charCodeAt(c))) return false;
    return true;
  }
  function s(a) {
    return e(a), a;
  }
  function e(a) {
    if (typeof a != "string") throw new r.InvalidDidError(typeof a, "DID must be a string");
    if (!a.startsWith(t)) throw new r.InvalidDidError(a, "Invalid did:plc prefix");
    if (a.length !== n) throw new r.InvalidDidError(a, `did:plc must be ${n} characters long`);
    for (let c = i; c < n; c++) if (!u(a.charCodeAt(c))) throw new r.InvalidDidError(a, `Invalid character at position ${c}`);
  }
  const u = (a) => a >= 97 && a <= 122 || a >= 50 && a <= 55;
  return Xr;
}
var Vd = {}, Lt = {}, Iv;
function Np() {
  if (Iv) return Lt;
  Iv = 1, Object.defineProperty(Lt, "__esModule", { value: true }), Lt.didSchema = Lt.DID_PREFIX = void 0, Lt.assertDidMethod = o, Lt.extractDidMethod = s, Lt.assertDidMsid = e, Lt.assertDid = u, Lt.isDid = a, Lt.asDid = c;
  const r = oe(), t = Ma(), i = "did:";
  Lt.DID_PREFIX = i;
  const n = i.length;
  function o(l, d = 0, f = l.length) {
    if (!Number.isFinite(f) || !Number.isFinite(d) || f < d || f > l.length) throw new TypeError("Invalid start or end position");
    if (f === d) throw new t.InvalidDidError(l, "Empty method name");
    let h;
    for (let p = d; p < f; p++) if (h = l.charCodeAt(p), (h < 97 || h > 122) && (h < 48 || h > 57)) throw new t.InvalidDidError(l, `Invalid character at position ${p} in DID method name`);
  }
  function s(l) {
    const d = l.indexOf(":", n);
    return l.slice(n, d);
  }
  function e(l, d = 0, f = l.length) {
    if (!Number.isFinite(f) || !Number.isFinite(d) || f < d || f > l.length) throw new TypeError("Invalid start or end position");
    if (f === d) throw new t.InvalidDidError(l, "DID method-specific id must not be empty");
    let h;
    for (let p = d; p < f; p++) if (h = l.charCodeAt(p), (h < 97 || h > 122) && (h < 65 || h > 90) && (h < 48 || h > 57) && h !== 46 && h !== 45 && h !== 95) {
      if (h === 58) {
        if (p === f - 1) throw new t.InvalidDidError(l, 'DID cannot end with ":"');
        continue;
      }
      if (h === 37) {
        if (h = l.charCodeAt(++p), (h < 48 || h > 57) && (h < 65 || h > 70)) throw new t.InvalidDidError(l, `Invalid pct-encoded character at position ${p}`);
        if (h = l.charCodeAt(++p), (h < 48 || h > 57) && (h < 65 || h > 70)) throw new t.InvalidDidError(l, `Invalid pct-encoded character at position ${p}`);
        if (p >= f) throw new t.InvalidDidError(l, `Incomplete pct-encoded character at position ${p - 2}`);
        continue;
      }
      throw new t.InvalidDidError(l, `Disallowed character in DID at position ${p}`);
    }
  }
  function u(l) {
    if (typeof l != "string") throw new t.InvalidDidError(typeof l, "DID must be a string");
    const { length: d } = l;
    if (d > 2048) throw new t.InvalidDidError(l, "DID is too long (2048 chars max)");
    if (!l.startsWith(i)) throw new t.InvalidDidError(l, `DID requires "${i}" prefix`);
    const f = l.indexOf(":", n);
    if (f === -1) throw new t.InvalidDidError(l, "Missing colon after method name");
    o(l, n, f), e(l, f + 1, d);
  }
  function a(l) {
    try {
      return u(l), true;
    } catch (d) {
      if (d instanceof t.DidError) return false;
      throw d;
    }
  }
  function c(l) {
    return u(l), l;
  }
  return Lt.didSchema = r.z.string().superRefine((l, d) => {
    try {
      return u(l), true;
    } catch (f) {
      return d.addIssue({ code: r.z.ZodIssueCode.custom, message: f instanceof Error ? f.message : "Unexpected error" }), false;
    }
  }), Lt;
}
var Kv;
function Ok() {
  return Kv || (Kv = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.DID_WEB_PREFIX = void 0, r.isDidWeb = n, r.asDidWeb = o, r.assertDidWeb = s, r.didWebToUrl = e, r.urlToDidWeb = u;
    const t = Ma(), i = Np();
    r.DID_WEB_PREFIX = "did:web:";
    function n(a) {
      if (typeof a != "string" || !a.startsWith(r.DID_WEB_PREFIX) || a.charAt(r.DID_WEB_PREFIX.length) === ":") return false;
      try {
        return e(a), true;
      } catch {
        return false;
      }
    }
    function o(a) {
      return s(a), a;
    }
    function s(a) {
      if (typeof a != "string") throw new t.InvalidDidError(typeof a, "DID must be a string");
      if (!a.startsWith(r.DID_WEB_PREFIX)) throw new t.InvalidDidError(a, "Invalid did:web prefix");
      if (a.charAt(r.DID_WEB_PREFIX.length) === ":") throw new t.InvalidDidError(a, "did:web MSID must not start with a colon");
      e(a);
    }
    function e(a) {
      (0, i.assertDidMsid)(a, r.DID_WEB_PREFIX.length);
      const c = r.DID_WEB_PREFIX.length, l = a.indexOf(":", c), d = l === -1 ? a.slice(c) : a.slice(c, l), f = l === -1 ? "" : a.slice(l);
      try {
        const h = new URL(`https://${d.replaceAll("%3A", ":")}${f.replaceAll(":", "/")}`);
        return h.hostname === "localhost" && (h.protocol = "http:"), h;
      } catch (h) {
        throw new t.InvalidDidError(a, "Invalid Web DID", h);
      }
    }
    function u(a) {
      const c = a.port ? `%3A${a.port}` : "", l = a.pathname === "/" ? "" : a.pathname.replaceAll("/", ":");
      return `did:web:${a.hostname}${c}${l}`;
    }
  }(Vd)), Vd;
}
var Ov;
function fw() {
  return Ov || (Ov = 1, function(r) {
    var t = zi && zi.__createBinding || (Object.create ? function(n, o, s, e) {
      e === void 0 && (e = s);
      var u = Object.getOwnPropertyDescriptor(o, s);
      (!u || ("get" in u ? !o.__esModule : u.writable || u.configurable)) && (u = { enumerable: true, get: function() {
        return o[s];
      } }), Object.defineProperty(n, e, u);
    } : function(n, o, s, e) {
      e === void 0 && (e = s), n[e] = o[s];
    }), i = zi && zi.__exportStar || function(n, o) {
      for (var s in n) s !== "default" && !Object.prototype.hasOwnProperty.call(o, s) && t(o, n, s);
    };
    Object.defineProperty(r, "__esModule", { value: true }), i(Kk(), r), i(Ok(), r);
  }(zi)), zi;
}
var jv;
function jk() {
  if (jv) return cr;
  jv = 1, Object.defineProperty(cr, "__esModule", { value: true }), cr.atprotoDidSchema = void 0, cr.isAtprotoDid = n, cr.asAtprotoDid = o, cr.assertAtprotoDid = s, cr.assertAtprotoDidWeb = e, cr.isAtprotoDidWeb = u;
  const r = oe(), t = Ma(), i = fw();
  cr.atprotoDidSchema = r.z.string().refine(n, 'Atproto only allows "plc" and "web" DID methods');
  function n(a) {
    return typeof a != "string" ? false : a.startsWith(i.DID_PLC_PREFIX) ? (0, i.isDidPlc)(a) : a.startsWith(i.DID_WEB_PREFIX) ? u(a) : false;
  }
  function o(a) {
    return s(a), a;
  }
  function s(a) {
    if (typeof a != "string") throw new t.InvalidDidError(typeof a, "DID must be a string");
    if (a.startsWith(i.DID_PLC_PREFIX)) (0, i.assertDidPlc)(a);
    else if (a.startsWith(i.DID_WEB_PREFIX)) e(a);
    else throw new t.InvalidDidError(a, 'Atproto only allows "plc" and "web" DID methods');
  }
  function e(a) {
    if ((0, i.assertDidWeb)(a), a.includes(":", i.DID_WEB_PREFIX.length)) throw new t.InvalidDidError(a, "Atproto does not allow path components in Web DIDs");
    if (a.includes("%3A", i.DID_WEB_PREFIX.length) && !a.startsWith("did:web:localhost%3A")) throw new t.InvalidDidError(a, "Atproto does not allow port numbers in Web DIDs, except for localhost");
  }
  function u(a) {
    try {
      return e(a), true;
    } catch {
      return false;
    }
  }
  return cr;
}
var Nd = {}, qv;
function qk() {
  return qv || (qv = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.didDocumentValidator = r.didDocumentSchema = void 0;
    const t = oe(), i = Np(), n = t.z.string().refine((f) => {
      try {
        return new URL(f), true;
      } catch {
        return false;
      }
    }, "RFC3968 compliant URI"), o = t.z.union([i.didSchema, t.z.array(i.didSchema)]), s = t.z.union([n, t.z.string().regex(/^#[^#]+$/)]), e = t.z.object({ id: s, type: t.z.string().min(1), controller: o, publicKeyJwk: t.z.record(t.z.string(), t.z.unknown()).optional(), publicKeyMultibase: t.z.string().optional() }), u = s, a = t.z.union([t.z.string(), t.z.array(t.z.string())]), c = t.z.union([n, t.z.record(t.z.string(), n), t.z.array(t.z.union([n, t.z.record(t.z.string(), n)])).nonempty()]), l = t.z.object({ id: u, type: a, serviceEndpoint: c }), d = t.z.union([s, e]);
    r.didDocumentSchema = t.z.object({ "@context": t.z.union([t.z.literal("https://www.w3.org/ns/did/v1"), t.z.array(t.z.string().url()).nonempty().refine((f) => f[0] === "https://www.w3.org/ns/did/v1", { message: "First @context must be https://www.w3.org/ns/did/v1" })]), id: i.didSchema, controller: o.optional(), alsoKnownAs: t.z.array(n).optional(), service: t.z.array(l).optional(), authentication: t.z.array(d).optional(), verificationMethod: t.z.array(t.z.union([e, s])).optional() }), r.didDocumentValidator = r.didDocumentSchema.superRefine(({ id: f, service: h }, p) => {
      if (h) {
        const b = /* @__PURE__ */ new Set();
        for (let E = 0; E < h.length; E++) {
          const g = h[E], x = g.id.startsWith("#") ? `${f}${g.id}` : g.id;
          b.has(x) ? p.addIssue({ code: t.z.ZodIssueCode.custom, message: `Duplicate service id (${g.id}) found in the document`, path: ["service", E, "id"] }) : b.add(x);
        }
      }
    });
  }(Nd)), Nd;
}
var Mv;
function sn() {
  return Mv || (Mv = 1, function(r) {
    var t = Vi && Vi.__createBinding || (Object.create ? function(n, o, s, e) {
      e === void 0 && (e = s);
      var u = Object.getOwnPropertyDescriptor(o, s);
      (!u || ("get" in u ? !o.__esModule : u.writable || u.configurable)) && (u = { enumerable: true, get: function() {
        return o[s];
      } }), Object.defineProperty(n, e, u);
    } : function(n, o, s, e) {
      e === void 0 && (e = s), n[e] = o[s];
    }), i = Vi && Vi.__exportStar || function(n, o) {
      for (var s in n) s !== "default" && !Object.prototype.hasOwnProperty.call(o, s) && t(o, n, s);
    };
    Object.defineProperty(r, "__esModule", { value: true }), i(jk(), r), i(qk(), r), i(Ma(), r), i(Np(), r), i(fw(), r);
  }(Vi)), Vi;
}
var ls = {}, vr = {}, ds = {}, Vv;
function Mk() {
  if (Vv) return ds;
  Vv = 1, Object.defineProperty(ds, "__esModule", { value: true }), ds.LRUCache = void 0;
  const r = typeof performance == "object" && performance && typeof performance.now == "function" ? performance : Date, t = /* @__PURE__ */ new Set(), i = typeof process == "object" && process ? process : {}, n = (f, h, p, b) => {
    typeof i.emitWarning == "function" ? i.emitWarning(f, h, p, b) : console.error(`[${p}] ${h}: ${f}`);
  };
  let o = globalThis.AbortController, s = globalThis.AbortSignal;
  if (typeof o > "u") {
    s = class {
      onabort;
      _onabort = [];
      reason;
      aborted = false;
      addEventListener(b, E) {
        this._onabort.push(E);
      }
    }, o = class {
      constructor() {
        h();
      }
      signal = new s();
      abort(b) {
        if (!this.signal.aborted) {
          this.signal.reason = b, this.signal.aborted = true;
          for (const E of this.signal._onabort) E(b);
          this.signal.onabort?.(b);
        }
      }
    };
    let f = i.env?.LRU_CACHE_IGNORE_AC_WARNING !== "1";
    const h = () => {
      f && (f = false, n("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.", "NO_ABORT_CONTROLLER", "ENOTSUP", h));
    };
  }
  const e = (f) => !t.has(f), u = (f) => f && f === Math.floor(f) && f > 0 && isFinite(f), a = (f) => u(f) ? f <= Math.pow(2, 8) ? Uint8Array : f <= Math.pow(2, 16) ? Uint16Array : f <= Math.pow(2, 32) ? Uint32Array : f <= Number.MAX_SAFE_INTEGER ? c : null : null;
  class c extends Array {
    constructor(h) {
      super(h), this.fill(0);
    }
  }
  class l {
    heap;
    length;
    static #u = false;
    static create(h) {
      const p = a(h);
      if (!p) return [];
      l.#u = true;
      const b = new l(h, p);
      return l.#u = false, b;
    }
    constructor(h, p) {
      if (!l.#u) throw new TypeError("instantiate Stack using Stack.create(n)");
      this.heap = new p(h), this.length = 0;
    }
    push(h) {
      this.heap[this.length++] = h;
    }
    pop() {
      return this.heap[--this.length];
    }
  }
  class d {
    #u;
    #d;
    #y;
    #m;
    #k;
    #D;
    ttl;
    ttlResolution;
    ttlAutopurge;
    updateAgeOnGet;
    updateAgeOnHas;
    allowStale;
    noDisposeOnSet;
    noUpdateTTL;
    maxEntrySize;
    sizeCalculation;
    noDeleteOnFetchRejection;
    noDeleteOnStaleGet;
    allowStaleOnFetchAbort;
    allowStaleOnFetchRejection;
    ignoreFetchAbort;
    #n;
    #b;
    #i;
    #r;
    #e;
    #c;
    #p;
    #a;
    #o;
    #g;
    #s;
    #E;
    #v;
    #f;
    #R;
    #S;
    #l;
    static unsafeExposeInternals(h) {
      return { starts: h.#v, ttls: h.#f, sizes: h.#E, keyMap: h.#i, keyList: h.#r, valList: h.#e, next: h.#c, prev: h.#p, get head() {
        return h.#a;
      }, get tail() {
        return h.#o;
      }, free: h.#g, isBackgroundFetch: (p) => h.#t(p), backgroundFetch: (p, b, E, g) => h.#U(p, b, E, g), moveToTail: (p) => h.#L(p), indexes: (p) => h.#_(p), rindexes: (p) => h.#w(p), isStale: (p) => h.#h(p) };
    }
    get max() {
      return this.#u;
    }
    get maxSize() {
      return this.#d;
    }
    get calculatedSize() {
      return this.#b;
    }
    get size() {
      return this.#n;
    }
    get fetchMethod() {
      return this.#k;
    }
    get memoMethod() {
      return this.#D;
    }
    get dispose() {
      return this.#y;
    }
    get disposeAfter() {
      return this.#m;
    }
    constructor(h) {
      const { max: p = 0, ttl: b, ttlResolution: E = 1, ttlAutopurge: g, updateAgeOnGet: x, updateAgeOnHas: T, allowStale: A, dispose: K, disposeAfter: j, noDisposeOnSet: O, noUpdateTTL: z, maxSize: H = 0, maxEntrySize: X = 0, sizeCalculation: F, fetchMethod: C, memoMethod: k, noDeleteOnFetchRejection: U, noDeleteOnStaleGet: I, allowStaleOnFetchRejection: N, allowStaleOnFetchAbort: Z, ignoreFetchAbort: se } = h;
      if (p !== 0 && !u(p)) throw new TypeError("max option must be a nonnegative integer");
      const le = p ? a(p) : Array;
      if (!le) throw new Error("invalid max value: " + p);
      if (this.#u = p, this.#d = H, this.maxEntrySize = X || this.#d, this.sizeCalculation = F, this.sizeCalculation) {
        if (!this.#d && !this.maxEntrySize) throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");
        if (typeof this.sizeCalculation != "function") throw new TypeError("sizeCalculation set to non-function");
      }
      if (k !== void 0 && typeof k != "function") throw new TypeError("memoMethod must be a function if defined");
      if (this.#D = k, C !== void 0 && typeof C != "function") throw new TypeError("fetchMethod must be a function if specified");
      if (this.#k = C, this.#S = !!C, this.#i = /* @__PURE__ */ new Map(), this.#r = new Array(p).fill(void 0), this.#e = new Array(p).fill(void 0), this.#c = new le(p), this.#p = new le(p), this.#a = 0, this.#o = 0, this.#g = l.create(p), this.#n = 0, this.#b = 0, typeof K == "function" && (this.#y = K), typeof j == "function" ? (this.#m = j, this.#s = []) : (this.#m = void 0, this.#s = void 0), this.#R = !!this.#y, this.#l = !!this.#m, this.noDisposeOnSet = !!O, this.noUpdateTTL = !!z, this.noDeleteOnFetchRejection = !!U, this.allowStaleOnFetchRejection = !!N, this.allowStaleOnFetchAbort = !!Z, this.ignoreFetchAbort = !!se, this.maxEntrySize !== 0) {
        if (this.#d !== 0 && !u(this.#d)) throw new TypeError("maxSize must be a positive integer if specified");
        if (!u(this.maxEntrySize)) throw new TypeError("maxEntrySize must be a positive integer if specified");
        this.#V();
      }
      if (this.allowStale = !!A, this.noDeleteOnStaleGet = !!I, this.updateAgeOnGet = !!x, this.updateAgeOnHas = !!T, this.ttlResolution = u(E) || E === 0 ? E : 1, this.ttlAutopurge = !!g, this.ttl = b || 0, this.ttl) {
        if (!u(this.ttl)) throw new TypeError("ttl must be a positive integer if specified");
        this.#I();
      }
      if (this.#u === 0 && this.ttl === 0 && this.#d === 0) throw new TypeError("At least one of max, maxSize, or ttl is required");
      if (!this.ttlAutopurge && !this.#u && !this.#d) {
        const ve = "LRU_CACHE_UNBOUNDED";
        e(ve) && (t.add(ve), n("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.", "UnboundedCacheWarning", ve, d));
      }
    }
    getRemainingTTL(h) {
      return this.#i.has(h) ? 1 / 0 : 0;
    }
    #I() {
      const h = new c(this.#u), p = new c(this.#u);
      this.#f = h, this.#v = p, this.#K = (g, x, T = r.now()) => {
        if (p[g] = x !== 0 ? T : 0, h[g] = x, x !== 0 && this.ttlAutopurge) {
          const A = setTimeout(() => {
            this.#h(g) && this.#x(this.#r[g], "expire");
          }, x + 1);
          A.unref && A.unref();
        }
      }, this.#C = (g) => {
        p[g] = h[g] !== 0 ? r.now() : 0;
      }, this.#A = (g, x) => {
        if (h[x]) {
          const T = h[x], A = p[x];
          if (!T || !A) return;
          g.ttl = T, g.start = A, g.now = b || E();
          const K = g.now - A;
          g.remainingTTL = T - K;
        }
      };
      let b = 0;
      const E = () => {
        const g = r.now();
        if (this.ttlResolution > 0) {
          b = g;
          const x = setTimeout(() => b = 0, this.ttlResolution);
          x.unref && x.unref();
        }
        return g;
      };
      this.getRemainingTTL = (g) => {
        const x = this.#i.get(g);
        if (x === void 0) return 0;
        const T = h[x], A = p[x];
        if (!T || !A) return 1 / 0;
        const K = (b || E()) - A;
        return T - K;
      }, this.#h = (g) => {
        const x = p[g], T = h[g];
        return !!T && !!x && (b || E()) - x > T;
      };
    }
    #C = () => {
    };
    #A = () => {
    };
    #K = () => {
    };
    #h = () => false;
    #V() {
      const h = new c(this.#u);
      this.#b = 0, this.#E = h, this.#T = (p) => {
        this.#b -= h[p], h[p] = 0;
      }, this.#O = (p, b, E, g) => {
        if (this.#t(b)) return 0;
        if (!u(E)) if (g) {
          if (typeof g != "function") throw new TypeError("sizeCalculation must be a function");
          if (E = g(b, p), !u(E)) throw new TypeError("sizeCalculation return invalid (expect positive integer)");
        } else throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");
        return E;
      }, this.#P = (p, b, E) => {
        if (h[p] = b, this.#d) {
          const g = this.#d - h[p];
          for (; this.#b > g; ) this.#B(true);
        }
        this.#b += h[p], E && (E.entrySize = b, E.totalCalculatedSize = this.#b);
      };
    }
    #T = (h) => {
    };
    #P = (h, p, b) => {
    };
    #O = (h, p, b, E) => {
      if (b || E) throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");
      return 0;
    };
    *#_({ allowStale: h = this.allowStale } = {}) {
      if (this.#n) for (let p = this.#o; !(!this.#j(p) || ((h || !this.#h(p)) && (yield p), p === this.#a)); ) p = this.#p[p];
    }
    *#w({ allowStale: h = this.allowStale } = {}) {
      if (this.#n) for (let p = this.#a; !(!this.#j(p) || ((h || !this.#h(p)) && (yield p), p === this.#o)); ) p = this.#c[p];
    }
    #j(h) {
      return h !== void 0 && this.#i.get(this.#r[h]) === h;
    }
    *entries() {
      for (const h of this.#_()) this.#e[h] !== void 0 && this.#r[h] !== void 0 && !this.#t(this.#e[h]) && (yield [this.#r[h], this.#e[h]]);
    }
    *rentries() {
      for (const h of this.#w()) this.#e[h] !== void 0 && this.#r[h] !== void 0 && !this.#t(this.#e[h]) && (yield [this.#r[h], this.#e[h]]);
    }
    *keys() {
      for (const h of this.#_()) {
        const p = this.#r[h];
        p !== void 0 && !this.#t(this.#e[h]) && (yield p);
      }
    }
    *rkeys() {
      for (const h of this.#w()) {
        const p = this.#r[h];
        p !== void 0 && !this.#t(this.#e[h]) && (yield p);
      }
    }
    *values() {
      for (const h of this.#_()) this.#e[h] !== void 0 && !this.#t(this.#e[h]) && (yield this.#e[h]);
    }
    *rvalues() {
      for (const h of this.#w()) this.#e[h] !== void 0 && !this.#t(this.#e[h]) && (yield this.#e[h]);
    }
    [Symbol.iterator]() {
      return this.entries();
    }
    [Symbol.toStringTag] = "LRUCache";
    find(h, p = {}) {
      for (const b of this.#_()) {
        const E = this.#e[b], g = this.#t(E) ? E.__staleWhileFetching : E;
        if (g !== void 0 && h(g, this.#r[b], this)) return this.get(this.#r[b], p);
      }
    }
    forEach(h, p = this) {
      for (const b of this.#_()) {
        const E = this.#e[b], g = this.#t(E) ? E.__staleWhileFetching : E;
        g !== void 0 && h.call(p, g, this.#r[b], this);
      }
    }
    rforEach(h, p = this) {
      for (const b of this.#w()) {
        const E = this.#e[b], g = this.#t(E) ? E.__staleWhileFetching : E;
        g !== void 0 && h.call(p, g, this.#r[b], this);
      }
    }
    purgeStale() {
      let h = false;
      for (const p of this.#w({ allowStale: true })) this.#h(p) && (this.#x(this.#r[p], "expire"), h = true);
      return h;
    }
    info(h) {
      const p = this.#i.get(h);
      if (p === void 0) return;
      const b = this.#e[p], E = this.#t(b) ? b.__staleWhileFetching : b;
      if (E === void 0) return;
      const g = { value: E };
      if (this.#f && this.#v) {
        const x = this.#f[p], T = this.#v[p];
        if (x && T) {
          const A = x - (r.now() - T);
          g.ttl = A, g.start = Date.now();
        }
      }
      return this.#E && (g.size = this.#E[p]), g;
    }
    dump() {
      const h = [];
      for (const p of this.#_({ allowStale: true })) {
        const b = this.#r[p], E = this.#e[p], g = this.#t(E) ? E.__staleWhileFetching : E;
        if (g === void 0 || b === void 0) continue;
        const x = { value: g };
        if (this.#f && this.#v) {
          x.ttl = this.#f[p];
          const T = r.now() - this.#v[p];
          x.start = Math.floor(Date.now() - T);
        }
        this.#E && (x.size = this.#E[p]), h.unshift([b, x]);
      }
      return h;
    }
    load(h) {
      this.clear();
      for (const [p, b] of h) {
        if (b.start) {
          const E = Date.now() - b.start;
          b.start = r.now() - E;
        }
        this.set(p, b.value, b);
      }
    }
    set(h, p, b = {}) {
      if (p === void 0) return this.delete(h), this;
      const { ttl: E = this.ttl, start: g, noDisposeOnSet: x = this.noDisposeOnSet, sizeCalculation: T = this.sizeCalculation, status: A } = b;
      let { noUpdateTTL: K = this.noUpdateTTL } = b;
      const j = this.#O(h, p, b.size || 0, T);
      if (this.maxEntrySize && j > this.maxEntrySize) return A && (A.set = "miss", A.maxEntrySizeExceeded = true), this.#x(h, "set"), this;
      let O = this.#n === 0 ? void 0 : this.#i.get(h);
      if (O === void 0) O = this.#n === 0 ? this.#o : this.#g.length !== 0 ? this.#g.pop() : this.#n === this.#u ? this.#B(false) : this.#n, this.#r[O] = h, this.#e[O] = p, this.#i.set(h, O), this.#c[this.#o] = O, this.#p[O] = this.#o, this.#o = O, this.#n++, this.#P(O, j, A), A && (A.set = "add"), K = false;
      else {
        this.#L(O);
        const z = this.#e[O];
        if (p !== z) {
          if (this.#S && this.#t(z)) {
            z.__abortController.abort(new Error("replaced"));
            const { __staleWhileFetching: H } = z;
            H !== void 0 && !x && (this.#R && this.#y?.(H, h, "set"), this.#l && this.#s?.push([H, h, "set"]));
          } else x || (this.#R && this.#y?.(z, h, "set"), this.#l && this.#s?.push([z, h, "set"]));
          if (this.#T(O), this.#P(O, j, A), this.#e[O] = p, A) {
            A.set = "replace";
            const H = z && this.#t(z) ? z.__staleWhileFetching : z;
            H !== void 0 && (A.oldValue = H);
          }
        } else A && (A.set = "update");
      }
      if (E !== 0 && !this.#f && this.#I(), this.#f && (K || this.#K(O, E, g), A && this.#A(A, O)), !x && this.#l && this.#s) {
        const z = this.#s;
        let H;
        for (; H = z?.shift(); ) this.#m?.(...H);
      }
      return this;
    }
    pop() {
      try {
        for (; this.#n; ) {
          const h = this.#e[this.#a];
          if (this.#B(true), this.#t(h)) {
            if (h.__staleWhileFetching) return h.__staleWhileFetching;
          } else if (h !== void 0) return h;
        }
      } finally {
        if (this.#l && this.#s) {
          const h = this.#s;
          let p;
          for (; p = h?.shift(); ) this.#m?.(...p);
        }
      }
    }
    #B(h) {
      const p = this.#a, b = this.#r[p], E = this.#e[p];
      return this.#S && this.#t(E) ? E.__abortController.abort(new Error("evicted")) : (this.#R || this.#l) && (this.#R && this.#y?.(E, b, "evict"), this.#l && this.#s?.push([E, b, "evict"])), this.#T(p), h && (this.#r[p] = void 0, this.#e[p] = void 0, this.#g.push(p)), this.#n === 1 ? (this.#a = this.#o = 0, this.#g.length = 0) : this.#a = this.#c[p], this.#i.delete(b), this.#n--, p;
    }
    has(h, p = {}) {
      const { updateAgeOnHas: b = this.updateAgeOnHas, status: E } = p, g = this.#i.get(h);
      if (g !== void 0) {
        const x = this.#e[g];
        if (this.#t(x) && x.__staleWhileFetching === void 0) return false;
        if (this.#h(g)) E && (E.has = "stale", this.#A(E, g));
        else return b && this.#C(g), E && (E.has = "hit", this.#A(E, g)), true;
      } else E && (E.has = "miss");
      return false;
    }
    peek(h, p = {}) {
      const { allowStale: b = this.allowStale } = p, E = this.#i.get(h);
      if (E === void 0 || !b && this.#h(E)) return;
      const g = this.#e[E];
      return this.#t(g) ? g.__staleWhileFetching : g;
    }
    #U(h, p, b, E) {
      const g = p === void 0 ? void 0 : this.#e[p];
      if (this.#t(g)) return g;
      const x = new o(), { signal: T } = b;
      T?.addEventListener("abort", () => x.abort(T.reason), { signal: x.signal });
      const A = { signal: x.signal, options: b, context: E }, K = (F, C = false) => {
        const { aborted: k } = x.signal, U = b.ignoreFetchAbort && F !== void 0;
        if (b.status && (k && !C ? (b.status.fetchAborted = true, b.status.fetchError = x.signal.reason, U && (b.status.fetchAbortIgnored = true)) : b.status.fetchResolved = true), k && !U && !C) return O(x.signal.reason);
        const I = H;
        return this.#e[p] === H && (F === void 0 ? I.__staleWhileFetching ? this.#e[p] = I.__staleWhileFetching : this.#x(h, "fetch") : (b.status && (b.status.fetchUpdated = true), this.set(h, F, A.options))), F;
      }, j = (F) => (b.status && (b.status.fetchRejected = true, b.status.fetchError = F), O(F)), O = (F) => {
        const { aborted: C } = x.signal, k = C && b.allowStaleOnFetchAbort, U = k || b.allowStaleOnFetchRejection, I = U || b.noDeleteOnFetchRejection, N = H;
        if (this.#e[p] === H && (!I || N.__staleWhileFetching === void 0 ? this.#x(h, "fetch") : k || (this.#e[p] = N.__staleWhileFetching)), U) return b.status && N.__staleWhileFetching !== void 0 && (b.status.returnedStale = true), N.__staleWhileFetching;
        if (N.__returned === N) throw F;
      }, z = (F, C) => {
        const k = this.#k?.(h, g, A);
        k && k instanceof Promise && k.then((U) => F(U === void 0 ? void 0 : U), C), x.signal.addEventListener("abort", () => {
          (!b.ignoreFetchAbort || b.allowStaleOnFetchAbort) && (F(void 0), b.allowStaleOnFetchAbort && (F = (U) => K(U, true)));
        });
      };
      b.status && (b.status.fetchDispatched = true);
      const H = new Promise(z).then(K, j), X = Object.assign(H, { __abortController: x, __staleWhileFetching: g, __returned: void 0 });
      return p === void 0 ? (this.set(h, X, { ...A.options, status: void 0 }), p = this.#i.get(h)) : this.#e[p] = X, X;
    }
    #t(h) {
      if (!this.#S) return false;
      const p = h;
      return !!p && p instanceof Promise && p.hasOwnProperty("__staleWhileFetching") && p.__abortController instanceof o;
    }
    async fetch(h, p = {}) {
      const { allowStale: b = this.allowStale, updateAgeOnGet: E = this.updateAgeOnGet, noDeleteOnStaleGet: g = this.noDeleteOnStaleGet, ttl: x = this.ttl, noDisposeOnSet: T = this.noDisposeOnSet, size: A = 0, sizeCalculation: K = this.sizeCalculation, noUpdateTTL: j = this.noUpdateTTL, noDeleteOnFetchRejection: O = this.noDeleteOnFetchRejection, allowStaleOnFetchRejection: z = this.allowStaleOnFetchRejection, ignoreFetchAbort: H = this.ignoreFetchAbort, allowStaleOnFetchAbort: X = this.allowStaleOnFetchAbort, context: F, forceRefresh: C = false, status: k, signal: U } = p;
      if (!this.#S) return k && (k.fetch = "get"), this.get(h, { allowStale: b, updateAgeOnGet: E, noDeleteOnStaleGet: g, status: k });
      const I = { allowStale: b, updateAgeOnGet: E, noDeleteOnStaleGet: g, ttl: x, noDisposeOnSet: T, size: A, sizeCalculation: K, noUpdateTTL: j, noDeleteOnFetchRejection: O, allowStaleOnFetchRejection: z, allowStaleOnFetchAbort: X, ignoreFetchAbort: H, status: k, signal: U };
      let N = this.#i.get(h);
      if (N === void 0) {
        k && (k.fetch = "miss");
        const Z = this.#U(h, N, I, F);
        return Z.__returned = Z;
      } else {
        const Z = this.#e[N];
        if (this.#t(Z)) {
          const _e = b && Z.__staleWhileFetching !== void 0;
          return k && (k.fetch = "inflight", _e && (k.returnedStale = true)), _e ? Z.__staleWhileFetching : Z.__returned = Z;
        }
        const se = this.#h(N);
        if (!C && !se) return k && (k.fetch = "hit"), this.#L(N), E && this.#C(N), k && this.#A(k, N), Z;
        const le = this.#U(h, N, I, F), be = le.__staleWhileFetching !== void 0 && b;
        return k && (k.fetch = se ? "stale" : "refresh", be && se && (k.returnedStale = true)), be ? le.__staleWhileFetching : le.__returned = le;
      }
    }
    async forceFetch(h, p = {}) {
      const b = await this.fetch(h, p);
      if (b === void 0) throw new Error("fetch() returned undefined");
      return b;
    }
    memo(h, p = {}) {
      const b = this.#D;
      if (!b) throw new Error("no memoMethod provided to constructor");
      const { context: E, forceRefresh: g, ...x } = p, T = this.get(h, x);
      if (!g && T !== void 0) return T;
      const A = b(h, T, { options: x, context: E });
      return this.set(h, A, x), A;
    }
    get(h, p = {}) {
      const { allowStale: b = this.allowStale, updateAgeOnGet: E = this.updateAgeOnGet, noDeleteOnStaleGet: g = this.noDeleteOnStaleGet, status: x } = p, T = this.#i.get(h);
      if (T !== void 0) {
        const A = this.#e[T], K = this.#t(A);
        return x && this.#A(x, T), this.#h(T) ? (x && (x.get = "stale"), K ? (x && b && A.__staleWhileFetching !== void 0 && (x.returnedStale = true), b ? A.__staleWhileFetching : void 0) : (g || this.#x(h, "expire"), x && b && (x.returnedStale = true), b ? A : void 0)) : (x && (x.get = "hit"), K ? A.__staleWhileFetching : (this.#L(T), E && this.#C(T), A));
      } else x && (x.get = "miss");
    }
    #q(h, p) {
      this.#p[p] = h, this.#c[h] = p;
    }
    #L(h) {
      h !== this.#o && (h === this.#a ? this.#a = this.#c[h] : this.#q(this.#p[h], this.#c[h]), this.#q(this.#o, h), this.#o = h);
    }
    delete(h) {
      return this.#x(h, "delete");
    }
    #x(h, p) {
      let b = false;
      if (this.#n !== 0) {
        const E = this.#i.get(h);
        if (E !== void 0) if (b = true, this.#n === 1) this.#M(p);
        else {
          this.#T(E);
          const g = this.#e[E];
          if (this.#t(g) ? g.__abortController.abort(new Error("deleted")) : (this.#R || this.#l) && (this.#R && this.#y?.(g, h, p), this.#l && this.#s?.push([g, h, p])), this.#i.delete(h), this.#r[E] = void 0, this.#e[E] = void 0, E === this.#o) this.#o = this.#p[E];
          else if (E === this.#a) this.#a = this.#c[E];
          else {
            const x = this.#p[E];
            this.#c[x] = this.#c[E];
            const T = this.#c[E];
            this.#p[T] = this.#p[E];
          }
          this.#n--, this.#g.push(E);
        }
      }
      if (this.#l && this.#s?.length) {
        const E = this.#s;
        let g;
        for (; g = E?.shift(); ) this.#m?.(...g);
      }
      return b;
    }
    clear() {
      return this.#M("delete");
    }
    #M(h) {
      for (const p of this.#w({ allowStale: true })) {
        const b = this.#e[p];
        if (this.#t(b)) b.__abortController.abort(new Error("deleted"));
        else {
          const E = this.#r[p];
          this.#R && this.#y?.(b, E, h), this.#l && this.#s?.push([b, E, h]);
        }
      }
      if (this.#i.clear(), this.#e.fill(void 0), this.#r.fill(void 0), this.#f && this.#v && (this.#f.fill(0), this.#v.fill(0)), this.#E && this.#E.fill(0), this.#a = 0, this.#o = 0, this.#g.length = 0, this.#b = 0, this.#n = 0, this.#l && this.#s) {
        const p = this.#s;
        let b;
        for (; b = p?.shift(); ) this.#m?.(...b);
      }
    }
  }
  return ds.LRUCache = d, ds;
}
var Sl = {}, Nv;
function Vk() {
  if (Nv) return Sl;
  Nv = 1, Object.defineProperty(Sl, "__esModule", { value: true }), Sl.roughSizeOfObject = t;
  const r = /* @__PURE__ */ new WeakMap();
  function t(i) {
    const n = /* @__PURE__ */ new Set(), o = [i];
    let s = 0;
    for (; o.length; ) {
      const e = o.pop();
      switch (typeof e) {
        case "string":
          s += 12 + 4 * Math.ceil(e.length / 4);
          break;
        case "number":
          s += 12;
          break;
        case "boolean":
          s += 4;
          break;
        case "object":
          if (s += 4, e === null) break;
          if (r.has(e)) {
            s += r.get(e);
            break;
          }
          if (n.has(e)) continue;
          if (n.add(e), Array.isArray(e)) s += 4, o.push(...e);
          else {
            s += 8;
            const u = Object.getOwnPropertyNames(e);
            for (let a = 0; a < u.length; a++) {
              s += 4;
              const c = u[a], l = e[c];
              l !== void 0 && o.push(l), o.push(c);
            }
          }
          break;
        case "function":
          s += 8;
          break;
        case "symbol":
          s += 8;
          break;
        case "bigint":
          s += 16;
          break;
      }
    }
    return typeof i == "object" && i !== null && r.set(i, s), s;
  }
  return Sl;
}
var zv;
function zp() {
  if (zv) return vr;
  zv = 1;
  var r = vr && vr.__classPrivateFieldSet || function(c, l, d, f, h) {
    if (f === "m") throw new TypeError("Private method is not writable");
    if (f === "a" && !h) throw new TypeError("Private accessor was defined without a setter");
    if (typeof l == "function" ? c !== l || !h : !l.has(c)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return f === "a" ? h.call(c, d) : h ? h.value = d : l.set(c, d), d;
  }, t = vr && vr.__classPrivateFieldGet || function(c, l, d, f) {
    if (d === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof l == "function" ? c !== l || !f : !l.has(c)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return d === "m" ? f : d === "a" ? f.call(c) : f ? f.value : l.get(c);
  }, i;
  Object.defineProperty(vr, "__esModule", { value: true }), vr.SimpleStoreMemory = void 0;
  const n = Mk(), o = Vk(), s = Symbol("nullItem"), e = (c) => c === null ? s : c, u = (c) => c === s ? null : c;
  class a {
    constructor({ sizeCalculation: l, ...d }) {
      i.set(this, void 0), r(this, i, new n.LRUCache({ ...d, allowStale: false, updateAgeOnGet: false, updateAgeOnHas: false, sizeCalculation: l ? (f, h) => l(u(f), h) : d.maxEntrySize != null || d.maxSize != null ? o.roughSizeOfObject : void 0 }), "f");
    }
    get(l) {
      const d = t(this, i, "f").get(l);
      if (d !== void 0) return u(d);
    }
    set(l, d) {
      t(this, i, "f").set(l, e(d));
    }
    del(l) {
      t(this, i, "f").delete(l);
    }
    clear() {
      t(this, i, "f").clear();
    }
  }
  return vr.SimpleStoreMemory = a, i = /* @__PURE__ */ new WeakMap(), vr;
}
var Gv;
function hw() {
  if (Gv) return ls;
  Gv = 1, Object.defineProperty(ls, "__esModule", { value: true }), ls.DidCacheMemory = void 0;
  const r = zp(), t = 3600 * 1e3, i = 50 * 1024 * 1024;
  class n extends r.SimpleStoreMemory {
    constructor(s) {
      super(s?.max == null ? { ttl: t, maxSize: i, ...s } : { ttl: t, ...s });
    }
  }
  return ls.DidCacheMemory = n, ls;
}
var ps = {}, Gi = {}, fs = {}, Fv;
function Nk() {
  if (Fv) return fs;
  Fv = 1, Object.defineProperty(fs, "__esModule", { value: true }), fs.CachedGetter = void 0;
  const r = () => true, t = () => false;
  class i {
    constructor(o, s, e) {
      Object.defineProperty(this, "getter", { enumerable: true, configurable: true, writable: true, value: o }), Object.defineProperty(this, "store", { enumerable: true, configurable: true, writable: true, value: s }), Object.defineProperty(this, "options", { enumerable: true, configurable: true, writable: true, value: e }), Object.defineProperty(this, "pending", { enumerable: true, configurable: true, writable: true, value: /* @__PURE__ */ new Map() });
    }
    async get(o, s) {
      s?.signal?.throwIfAborted();
      const e = this.options?.isStale, u = s?.noCache ? t : s?.allowStale || e == null ? r : async (d) => !await e(o, d);
      let a;
      for (; a = this.pending.get(o); ) {
        try {
          const { isFresh: d, value: f } = await a;
          if (d || await u(f)) return f;
        } catch {
        }
        s?.signal?.throwIfAborted();
      }
      const c = Promise.resolve().then(async () => {
        const d = await this.getStored(o, s);
        return d !== void 0 && await u(d) ? { isFresh: false, value: d } : Promise.resolve().then(async () => (0, this.getter)(o, s, d)).catch(async (f) => {
          if (d !== void 0) try {
            const h = this.options?.deleteOnError;
            await h?.(f, o, d) && await this.delStored(o, f);
          } catch (h) {
            throw new AggregateError([f, h], "Error while deleting stored value");
          }
          throw f;
        }).then(async (f) => (await this.setStored(o, f), { isFresh: true, value: f }));
      }).finally(() => {
        this.pending.delete(o);
      });
      if (this.pending.has(o)) throw new Error("Concurrent request for the same key");
      this.pending.set(o, c);
      const { value: l } = await c;
      return l;
    }
    bind(o) {
      return async (s) => this.get(o, s);
    }
    async getStored(o, s) {
      try {
        return await this.store.get(o, s);
      } catch {
        return;
      }
    }
    async setStored(o, s) {
      try {
        await this.store.set(o, s);
      } catch (e) {
        const u = this.options?.onStoreError;
        await u?.(e, o, s);
      }
    }
    async delStored(o, s) {
      await this.store.del(o);
    }
  }
  return fs.CachedGetter = i, fs;
}
var zd = {}, $v;
function zk() {
  return $v || ($v = 1, Object.defineProperty(zd, "__esModule", { value: true })), zd;
}
var Hv;
function Va() {
  return Hv || (Hv = 1, function(r) {
    var t = Gi && Gi.__createBinding || (Object.create ? function(n, o, s, e) {
      e === void 0 && (e = s);
      var u = Object.getOwnPropertyDescriptor(o, s);
      (!u || ("get" in u ? !o.__esModule : u.writable || u.configurable)) && (u = { enumerable: true, get: function() {
        return o[s];
      } }), Object.defineProperty(n, e, u);
    } : function(n, o, s, e) {
      e === void 0 && (e = s), n[e] = o[s];
    }), i = Gi && Gi.__exportStar || function(n, o) {
      for (var s in n) s !== "default" && !Object.prototype.hasOwnProperty.call(o, s) && t(o, n, s);
    };
    Object.defineProperty(r, "__esModule", { value: true }), i(Nk(), r), i(zk(), r);
  }(Gi)), Gi;
}
var Xv;
function Gk() {
  if (Xv) return ps;
  Xv = 1, Object.defineProperty(ps, "__esModule", { value: true }), ps.DidResolverCached = void 0;
  const r = Va(), t = hw();
  class i {
    constructor(o, s = new t.DidCacheMemory()) {
      Object.defineProperty(this, "getter", { enumerable: true, configurable: true, writable: true, value: void 0 }), this.getter = new r.CachedGetter((e, u) => o.resolve(e, u), s);
    }
    async resolve(o, s) {
      return this.getter.get(o, s);
    }
  }
  return ps.DidResolverCached = i, ps;
}
var Gd = {}, Wv;
function Fk() {
  return Wv || (Wv = 1, Object.defineProperty(Gd, "__esModule", { value: true })), Gd;
}
var hs = {}, ys = {}, Fi = {}, ms = {}, Jv;
function Gp() {
  if (Jv) return ms;
  Jv = 1, Object.defineProperty(ms, "__esModule", { value: true }), ms.FetchError = void 0;
  class r extends Error {
    constructor(i, n, o) {
      super(n, o), Object.defineProperty(this, "statusCode", { enumerable: true, configurable: true, writable: true, value: i });
    }
    get expose() {
      return true;
    }
  }
  return ms.FetchError = r, ms;
}
var Fd = {}, bs = {}, Zv;
function Fp() {
  if (Zv) return bs;
  Zv = 1, Object.defineProperty(bs, "__esModule", { value: true }), bs.toRequestTransformer = r, bs.asRequest = t;
  function r(i) {
    return function(n, o) {
      return i.call(this, t(n, o));
    };
  }
  function t(i, n) {
    return !n && i instanceof Request ? i : new Request(i, n);
  }
  return bs;
}
var Rt = {}, Qv;
function rd() {
  if (Qv) return Rt;
  Qv = 1, Object.defineProperty(Rt, "__esModule", { value: true }), Rt.extractUrl = Rt.MaxBytesTransformStream = Rt.ifString = void 0, Rt.isIp = r, Rt.padLines = o, Rt.cancelBody = s, Rt.logCancellationError = e, Rt.stringifyMessage = u;
  function r(d) {
    return !!(d.match(/^\d+\.\d+\.\d+\.\d+$/) || d.startsWith("[") && d.endsWith("]"));
  }
  const t = (d) => typeof d == "string" ? d : void 0;
  Rt.ifString = t;
  class i extends TransformStream {
    constructor(f) {
      if (!(f >= 0)) throw new TypeError("maxBytes must be a non-negative number");
      let h = 0;
      super({ transform: (p, b) => {
        (h += p.length) <= f ? b.enqueue(p) : b.error(new Error("Response too large"));
      } });
    }
  }
  Rt.MaxBytesTransformStream = i;
  const n = /\r?\n/g;
  function o(d, f) {
    return d && f + d.replace(n, `$&${f}`);
  }
  async function s(d, f) {
    d.body && !d.bodyUsed && !d.body.locked && typeof d.body.cancel == "function" && (typeof f == "function" ? d.body.cancel().catch(f) : f === "log" ? d.body.cancel().catch(e) : await d.body.cancel());
  }
  function e(d) {
    console.warn("Failed to cancel response body", d);
  }
  async function u(d) {
    try {
      const f = a(d.headers), h = await c(d);
      return f && h ? `${f}
${h}` : f || h;
    } finally {
      s(d, "log");
    }
  }
  function a(d) {
    return Array.from(d).map(([f, h]) => `${f}: ${h}`).join(`
`);
  }
  async function c(d) {
    try {
      const f = await d.blob();
      if (f.type?.startsWith("text/")) {
        const h = await f.text();
        return JSON.stringify(h);
      }
      if (/application\/(?:\w+\+)?json/.test(f.type)) {
        const h = await f.text();
        return h.includes(`
`) ? JSON.stringify(JSON.parse(h)) : h;
      }
      return `[Body size: ${f.size}, type: ${JSON.stringify(f.type)} ]`;
    } catch {
      return "[Body could not be read]";
    }
  }
  const l = (d) => typeof d == "string" ? new URL(d) : d instanceof URL ? d : new URL(d.url);
  return Rt.extractUrl = l, Rt;
}
var Yv;
function yw() {
  return Yv || (Yv = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.DEFAULT_FORBIDDEN_DOMAIN_NAMES = r.FetchRequestError = void 0, r.protocolCheckRequestTransform = u, r.redirectCheckRequestTransform = a, r.requireHostHeaderTransform = c, r.forbiddenDomainNameRequestTransform = l;
    const t = Gp(), i = Fp(), n = rd();
    class o extends t.FetchError {
      constructor(f, h, p, b) {
        if (h == null || !p) {
          const E = e(s(b?.cause));
          h ?? (h = E[0]), p || (p = E[1]);
        }
        super(h, p, b), Object.defineProperty(this, "request", { enumerable: true, configurable: true, writable: true, value: f });
      }
      get expose() {
        return this.statusCode !== 500;
      }
      static from(f, h) {
        return h instanceof o ? h : new o(f, void 0, void 0, { cause: h });
      }
    }
    r.FetchRequestError = o;
    function s(d) {
      return d instanceof TypeError && d.message === "fetch failed" && d.cause !== void 0 ? d.cause : d;
    }
    function e(d) {
      if (typeof d == "string" && d.length > 0) return [500, d];
      if (!(d instanceof Error)) return [500, "Failed to fetch"];
      switch (d.message) {
        case "failed to fetch the data URL":
          return [400, d.message];
        case "unexpected redirect":
        case "cors failure":
        case "blocked":
        case "proxy authentication required":
          return [502, d.message];
      }
      const f = d.code;
      if (typeof f == "string") switch (true) {
        case f === "ENOTFOUND":
          return [400, "Invalid hostname"];
        case f === "ECONNREFUSED":
          return [502, "Connection refused"];
        case f === "DEPTH_ZERO_SELF_SIGNED_CERT":
          return [502, "Self-signed certificate"];
        case f.startsWith("ERR_TLS"):
          return [502, "TLS error"];
        case f.startsWith("ECONN"):
          return [502, "Connection error"];
        default:
          return [500, `${f} error`];
      }
      return [500, d.message];
    }
    function u(d) {
      return (f, h) => {
        const { protocol: p, port: b } = (0, n.extractUrl)(f), E = (0, i.asRequest)(f, h), g = Object.hasOwn(d, p) ? d[p] : void 0;
        if (g) {
          if (g !== true) {
            if (!g.allowCustomPort && b !== "") throw new o(E, 400, `Custom ${p} ports not allowed`);
          }
        } else throw new o(E, 400, `Forbidden protocol "${p}"`);
        return E;
      };
    }
    function a() {
      return (d, f) => {
        const h = (0, i.asRequest)(d, f);
        if (h.redirect === "follow") throw new o(h, 500, 'Request redirect must be "error" or "manual"');
        return h;
      };
    }
    function c() {
      return (d, f) => {
        const { protocol: h, hostname: p } = (0, n.extractUrl)(d), b = (0, i.asRequest)(d, f);
        if (h !== "http:" && h !== "https:") throw new o(b, 400, `"${h}" requests are not allowed`);
        if (!p || (0, n.isIp)(p)) throw new o(b, 400, "Invalid hostname");
        return b;
      };
    }
    r.DEFAULT_FORBIDDEN_DOMAIN_NAMES = ["example.com", "*.example.com", "example.org", "*.example.org", "example.net", "*.example.net", "googleusercontent.com", "*.googleusercontent.com"];
    function l(d = r.DEFAULT_FORBIDDEN_DOMAIN_NAMES) {
      const f = new Set(d);
      return f.size === 0 ? i.asRequest : async (h, p) => {
        const { hostname: b } = (0, n.extractUrl)(h), E = (0, i.asRequest)(h, p);
        if (f.has(b)) throw new o(E, 403, "Forbidden hostname");
        let g = b.indexOf(".");
        for (; g !== -1; ) {
          const x = b.slice(g + 1);
          if (f.has(`*.${x}`)) throw new o(E, 403, "Forbidden hostname");
          g = b.indexOf(".", g + 1);
        }
        return E;
      };
    }
  }(Fd)), Fd;
}
var xe = {}, $d = {}, $i = {}, e0;
function $k() {
  if (e0) return $i;
  e0 = 1, Object.defineProperty($i, "__esModule", { value: true }), $i.pipeTwo = $i.pipe = void 0;
  function r(...i) {
    return i.reduce(t);
  }
  $i.pipe = r;
  function t(i, n) {
    return async (o) => n(await i(o));
  }
  return $i.pipeTwo = t, $i;
}
var t0;
function $p() {
  return t0 || (t0 = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.pipeTwo = r.pipe = void 0;
    var t = $k();
    Object.defineProperty(r, "pipe", { enumerable: true, get: function() {
      return t.pipe;
    } }), Object.defineProperty(r, "pipeTwo", { enumerable: true, get: function() {
      return t.pipeTwo;
    } });
  }($d)), $d;
}
var Rr = {}, r0;
function mw() {
  if (r0) return Rr;
  r0 = 1;
  var r = Rr && Rr.__classPrivateFieldSet || function(o, s, e, u, a) {
    if (u === "m") throw new TypeError("Private method is not writable");
    if (u === "a" && !a) throw new TypeError("Private accessor was defined without a setter");
    if (typeof s == "function" ? o !== s || !a : !s.has(o)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return u === "a" ? a.call(o, e) : a ? a.value = e : s.set(o, e), e;
  }, t = Rr && Rr.__classPrivateFieldGet || function(o, s, e, u) {
    if (e === "a" && !u) throw new TypeError("Private accessor was defined without a getter");
    if (typeof s == "function" ? o !== s || !u : !s.has(o)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return e === "m" ? u : e === "a" ? u.call(o) : u ? u.value : s.get(o);
  }, i;
  Object.defineProperty(Rr, "__esModule", { value: true }), Rr.TransformedResponse = void 0;
  class n extends Response {
    constructor(s, e) {
      if (!s.body) throw new TypeError("Response body is not available");
      if (s.bodyUsed) throw new TypeError("Response body is already used");
      super(s.body.pipeThrough(e), { status: s.status, statusText: s.statusText, headers: s.headers }), i.set(this, void 0), r(this, i, s, "f");
    }
    get url() {
      return t(this, i, "f").url;
    }
    get redirected() {
      return t(this, i, "f").redirected;
    }
    get type() {
      return t(this, i, "f").type;
    }
    get statusText() {
      return t(this, i, "f").statusText;
    }
  }
  return Rr.TransformedResponse = n, i = /* @__PURE__ */ new WeakMap(), Rr;
}
var i0;
function Hk() {
  if (i0) return xe;
  i0 = 1, Object.defineProperty(xe, "__esModule", { value: true }), xe.fetchJsonZodProcessor = xe.FetchResponseError = void 0, xe.peekJson = u, xe.checkLength = a, xe.extractLength = c, xe.extractMime = l, xe.cancelBodyOnError = d, xe.fetchOkProcessor = f, xe.fetchOkTransformer = h, xe.fetchMaxSizeProcessor = p, xe.fetchResponseMaxSizeChecker = b, xe.fetchTypeProcessor = E, xe.fetchResponseTypeChecker = g, xe.fetchResponseJsonTransformer = x, xe.fetchJsonProcessor = T, xe.fetchJsonValidatorProcessor = A;
  const r = $p(), t = Gp(), i = mw(), n = rd(), o = /^application\/(?:[^()<>@,;:/[\]\\?={} \t]+\+)?json$/i;
  class s extends t.FetchError {
    constructor(j, O = j.status, z = j.statusText, H) {
      super(O, z, H), Object.defineProperty(this, "response", { enumerable: true, configurable: true, writable: true, value: j });
    }
    static async from(j, O = e, z = j.status, H) {
      const X = typeof O == "string" ? O : typeof O == "function" ? await O(j) : void 0;
      return new s(j, z, X, H);
    }
  }
  xe.FetchResponseError = s;
  const e = async (K) => {
    const j = l(K);
    if (j) try {
      if (j === "text/plain") return await K.text();
      if (o.test(j)) {
        const O = await K.json();
        if (typeof O == "string") return O;
        if (typeof O == "object" && O != null) {
          const z = (0, n.ifString)(O.error_description);
          if (z) return z;
          const H = (0, n.ifString)(O.error);
          if (H) return H;
          const X = (0, n.ifString)(O.message);
          if (X) return X;
        }
      }
    } catch {
    }
  };
  async function u(K, j = 1 / 0) {
    if (l(K) !== "application/json") return;
    a(K, j);
    const z = K.clone();
    return (K.body && j < 1 / 0 ? new i.TransformedResponse(z, new n.MaxBytesTransformStream(j)) : z).json();
  }
  function a(K, j) {
    if (!(j >= 0)) throw new TypeError("maxBytes must be a non-negative number");
    const O = c(K);
    if (O != null && O > j) throw new s(K, 502, "Response too large");
    return O;
  }
  function c(K) {
    const j = K.headers.get("Content-Length");
    if (j == null) return;
    if (!/^\d+$/.test(j)) throw new s(K, 502, "Invalid Content-Length");
    const O = Number(j);
    if (!Number.isSafeInteger(O)) throw new s(K, 502, "Content-Length too large");
    return O;
  }
  function l(K) {
    const j = K.headers.get("Content-Type");
    if (j != null) return j.split(";", 1)[0].trim();
  }
  function d(K, j = n.logCancellationError) {
    return async (O) => {
      try {
        return await K(O);
      } catch (z) {
        throw await (0, n.cancelBody)(O, j ?? void 0), z;
      }
    };
  }
  function f(K) {
    return d((j) => h(j, K));
  }
  async function h(K, j) {
    if (K.ok) return K;
    throw await s.from(K, j);
  }
  function p(K) {
    if (K === 1 / 0) return (j) => j;
    if (!Number.isFinite(K) || K < 0) throw new TypeError("maxBytes must be a 0, Infinity or a positive number");
    return d((j) => b(j, K));
  }
  function b(K, j) {
    if (j === 1 / 0 || (a(K, j), !K.body)) return K;
    const O = new n.MaxBytesTransformStream(j);
    return new i.TransformedResponse(K, O);
  }
  function E(K, j = true) {
    const O = typeof K == "string" ? (z) => z === K : K instanceof RegExp ? (z) => K.test(z) : K;
    return d((z) => g(z, O, j));
  }
  async function g(K, j, O = true) {
    const z = l(K);
    if (z) {
      if (!j(z.toLowerCase())) throw await s.from(K, `Unexpected response Content-Type (${z})`, 502);
    } else if (O) throw await s.from(K, "Missing response Content-Type header", 502);
    return K;
  }
  async function x(K) {
    try {
      const j = await K.json();
      return { response: K, json: j };
    } catch (j) {
      throw new s(K, 502, "Unable to parse response as JSON", { cause: j });
    }
  }
  function T(K = o, j = true) {
    return (0, r.pipe)(E(K, j), d(x));
  }
  function A(K, j) {
    if ("parseAsync" in K && typeof K.parseAsync == "function") return async (O) => K.parseAsync(O.json, j);
    if ("parse" in K && typeof K.parse == "function") return async (O) => K.parse(O.json, j);
    throw new TypeError("Invalid schema");
  }
  return xe.fetchJsonZodProcessor = A, xe;
}
var Hi = {}, n0;
function Xk() {
  if (n0) return Hi;
  n0 = 1, Object.defineProperty(Hi, "__esModule", { value: true }), Hi.timedFetch = void 0, Hi.loggedFetch = o, Hi.bindFetch = e;
  const r = yw(), t = Fp(), i = mw(), n = rd();
  function o({ fetch: u = globalThis.fetch, logRequest: a = true, logResponse: c = true, logError: l = true }) {
    const d = a === true ? async (p) => {
      const b = await (0, n.stringifyMessage)(p);
      console.info(`> ${p.method} ${p.url}
${(0, n.padLines)(b, "  ")}`);
    } : a || void 0, f = c === true ? async (p) => {
      const b = await (0, n.stringifyMessage)(p.clone());
      console.info(`< HTTP/1.1 ${p.status} ${p.statusText}
${(0, n.padLines)(b, "  ")}`);
    } : c || void 0, h = l === true ? async (p) => {
      console.error("< Error:", p);
    } : l || void 0;
    return !d && !f && !h ? u : (0, t.toRequestTransformer)(async function(p) {
      d && await d(p);
      try {
        const b = await u.call(this, p);
        return f && await f(b, p), b;
      } catch (b) {
        throw h && await h(b, p), b;
      }
    });
  }
  const s = (u = 6e4, a = globalThis.fetch) => {
    if (u === 1 / 0) return a;
    if (!Number.isFinite(u) || u <= 0) throw new TypeError("Timeout must be positive");
    return (0, t.toRequestTransformer)(async function(c) {
      const l = new AbortController(), d = l.signal, f = () => {
        l.abort();
      }, h = () => {
        clearTimeout(p), c.signal?.removeEventListener("abort", f);
      }, p = setTimeout(f, u);
      typeof p == "object" && p.unref?.(), c.signal?.addEventListener("abort", f), d.addEventListener("abort", h);
      const b = await a.call(this, c, { signal: d });
      if (b.body) {
        const E = new TransformStream({ flush: h });
        return new i.TransformedResponse(b, E);
      } else return h(), b;
    });
  };
  Hi.timedFetch = s;
  function e(u = globalThis.fetch, a = globalThis) {
    return (0, t.toRequestTransformer)(async (c) => {
      try {
        return await u.call(a, c);
      } catch (l) {
        throw r.FetchRequestError.from(c, l);
      }
    });
  }
  return Hi;
}
var o0;
function kr() {
  return o0 || (o0 = 1, function(r) {
    var t = Fi && Fi.__createBinding || (Object.create ? function(n, o, s, e) {
      e === void 0 && (e = s);
      var u = Object.getOwnPropertyDescriptor(o, s);
      (!u || ("get" in u ? !o.__esModule : u.writable || u.configurable)) && (u = { enumerable: true, get: function() {
        return o[s];
      } }), Object.defineProperty(n, e, u);
    } : function(n, o, s, e) {
      e === void 0 && (e = s), n[e] = o[s];
    }), i = Fi && Fi.__exportStar || function(n, o) {
      for (var s in n) s !== "default" && !Object.prototype.hasOwnProperty.call(o, s) && t(o, n, s);
    };
    Object.defineProperty(r, "__esModule", { value: true }), i(Gp(), r), i(yw(), r), i(Hk(), r), i(Xk(), r), i(Fp(), r), i(rd(), r);
  }(Fi)), Fi;
}
var s0;
function Wk() {
  if (s0) return ys;
  s0 = 1, Object.defineProperty(ys, "__esModule", { value: true }), ys.DidResolverBase = void 0;
  const r = oe(), t = sn(), i = kr();
  class n {
    constructor(s) {
      Object.defineProperty(this, "methods", { enumerable: true, configurable: true, writable: true, value: void 0 }), this.methods = new Map(Object.entries(s));
    }
    async resolve(s, e) {
      e?.signal?.throwIfAborted();
      const u = (0, t.extractDidMethod)(s), a = this.methods.get(u);
      if (!a) throw new t.DidError(s, "Unsupported DID method", "did-method-invalid", 400);
      try {
        const c = await a.resolve(s, e);
        if (c.id !== s) throw new t.DidError(s, `DID document id (${c.id}) does not match DID`, "did-document-id-mismatch", 400);
        return c;
      } catch (c) {
        if (c instanceof i.FetchResponseError) {
          const l = c.response.status >= 500 ? 502 : c.response.status;
          throw new t.DidError(s, c.message, "did-fetch-error", l, c);
        }
        throw c instanceof i.FetchError ? new t.DidError(s, c.message, "did-fetch-error", 400, c) : c instanceof r.ZodError ? new t.DidError(s, c.message, "did-document-format-error", 503, c) : t.DidError.from(c, s);
      }
    }
  }
  return ys.DidResolverBase = n, ys;
}
var gs = {}, a0;
function bw() {
  if (a0) return gs;
  a0 = 1, Object.defineProperty(gs, "__esModule", { value: true }), gs.DidPlcMethod = void 0;
  const r = sn(), t = kr(), n = (0, $p().pipe)((0, t.fetchOkProcessor)(), (0, t.fetchJsonProcessor)(/^application\/(did\+ld\+)?json$/), (0, t.fetchJsonZodProcessor)(r.didDocumentValidator));
  class o {
    constructor(e) {
      Object.defineProperty(this, "fetch", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "plcDirectoryUrl", { enumerable: true, configurable: true, writable: true, value: void 0 }), this.plcDirectoryUrl = new URL(e?.plcDirectoryUrl || "https://plc.directory/"), this.fetch = (0, t.bindFetch)(e?.fetch);
    }
    async resolve(e, u) {
      (0, r.assertDidPlc)(e);
      const a = new URL(`/${encodeURIComponent(e)}`, this.plcDirectoryUrl);
      return this.fetch(a, { redirect: "error", headers: { accept: "application/did+ld+json,application/json" }, signal: u?.signal }).then(n);
    }
  }
  return gs.DidPlcMethod = o, gs;
}
var Ro = {}, u0;
function gw() {
  if (u0) return Ro;
  u0 = 1, Object.defineProperty(Ro, "__esModule", { value: true }), Ro.DidWebMethod = void 0, Ro.buildDidWebDocumentUrl = s;
  const r = sn(), t = kr(), n = (0, $p().pipe)((0, t.fetchOkProcessor)(), (0, t.fetchJsonProcessor)(/^application\/(did\+ld\+)?json$/), (0, t.fetchJsonZodProcessor)(r.didDocumentValidator));
  class o {
    constructor({ fetch: u = globalThis.fetch, allowHttp: a = true } = {}) {
      Object.defineProperty(this, "fetch", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "allowHttp", { enumerable: true, configurable: true, writable: true, value: void 0 }), this.fetch = (0, t.bindFetch)(u), this.allowHttp = a;
    }
    async resolve(u, a) {
      const c = s(u);
      if (!this.allowHttp && c.protocol === "http:") throw new r.DidError(u, 'Resolution of "http" did:web is not allowed', "did-web-http-not-allowed");
      return this.fetch(c, { redirect: "error", headers: { accept: "application/did+ld+json,application/json" }, signal: a?.signal }).then(n);
    }
  }
  Ro.DidWebMethod = o;
  function s(e) {
    const u = (0, r.didWebToUrl)(e);
    return u.pathname === "/" ? new URL("/.well-known/did.json", u) : new URL(`${u.pathname}/did.json`, u);
  }
  return Ro;
}
var c0;
function Jk() {
  if (c0) return hs;
  c0 = 1, Object.defineProperty(hs, "__esModule", { value: true }), hs.DidResolverCommon = void 0;
  const r = Wk(), t = bw(), i = gw();
  class n extends r.DidResolverBase {
    constructor(s) {
      super({ plc: new t.DidPlcMethod(s), web: new i.DidWebMethod(s) });
    }
  }
  return hs.DidResolverCommon = n, hs;
}
var Hd = {}, l0;
function Zk() {
  return l0 || (l0 = 1, Object.defineProperty(Hd, "__esModule", { value: true })), Hd;
}
var Xi = {}, d0;
function Qk() {
  return d0 || (d0 = 1, function(r) {
    var t = Xi && Xi.__createBinding || (Object.create ? function(n, o, s, e) {
      e === void 0 && (e = s);
      var u = Object.getOwnPropertyDescriptor(o, s);
      (!u || ("get" in u ? !o.__esModule : u.writable || u.configurable)) && (u = { enumerable: true, get: function() {
        return o[s];
      } }), Object.defineProperty(n, e, u);
    } : function(n, o, s, e) {
      e === void 0 && (e = s), n[e] = o[s];
    }), i = Xi && Xi.__exportStar || function(n, o) {
      for (var s in n) s !== "default" && !Object.prototype.hasOwnProperty.call(o, s) && t(o, n, s);
    };
    Object.defineProperty(r, "__esModule", { value: true }), i(bw(), r), i(gw(), r);
  }(Xi)), Xi;
}
var Xd = {}, p0;
function Yk() {
  return p0 || (p0 = 1, Object.defineProperty(Xd, "__esModule", { value: true })), Xd;
}
var f0;
function Ew() {
  return f0 || (f0 = 1, function(r) {
    var t = Mi && Mi.__createBinding || (Object.create ? function(n, o, s, e) {
      e === void 0 && (e = s);
      var u = Object.getOwnPropertyDescriptor(o, s);
      (!u || ("get" in u ? !o.__esModule : u.writable || u.configurable)) && (u = { enumerable: true, get: function() {
        return o[s];
      } }), Object.defineProperty(n, e, u);
    } : function(n, o, s, e) {
      e === void 0 && (e = s), n[e] = o[s];
    }), i = Mi && Mi.__exportStar || function(n, o) {
      for (var s in n) s !== "default" && !Object.prototype.hasOwnProperty.call(o, s) && t(o, n, s);
    };
    Object.defineProperty(r, "__esModule", { value: true }), i(sn(), r), i(hw(), r), i(Gk(), r), i(Fk(), r), i(Jk(), r), i(Zk(), r), i(Qk(), r), i(Yk(), r);
  }(Mi)), Mi;
}
var Wi = {}, Cl = {}, h0;
function id() {
  if (h0) return Cl;
  h0 = 1, Object.defineProperty(Cl, "__esModule", { value: true }), Cl.isResolvedHandle = t;
  const r = sn();
  function t(i) {
    return i === null || (0, r.isAtprotoDid)(i);
  }
  return Cl;
}
var Wd = {}, y0;
function eD() {
  return y0 || (y0 = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.AppViewHandleResolver = r.xrpcErrorSchema = void 0;
    const t = oe(), i = id();
    r.xrpcErrorSchema = t.z.object({ error: t.z.string(), message: t.z.string().optional() });
    class n {
      static from(s, e) {
        return typeof s == "string" || s instanceof URL ? new n(s, e) : s;
      }
      constructor(s, e) {
        Object.defineProperty(this, "serviceUrl", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "fetch", { enumerable: true, configurable: true, writable: true, value: void 0 }), this.serviceUrl = new URL(s), this.fetch = e?.fetch ?? globalThis.fetch;
      }
      async resolve(s, e) {
        const u = new URL("/xrpc/com.atproto.identity.resolveHandle", this.serviceUrl);
        u.searchParams.set("handle", s);
        const a = await this.fetch.call(null, u, { cache: e?.noCache ? "no-cache" : void 0, signal: e?.signal, redirect: "error" }), c = await a.json();
        if (a.status === 400) {
          const d = r.xrpcErrorSchema.parse(c);
          if (d.error === "InvalidRequest" && d.message === "Unable to resolve handle") return null;
        }
        if (!a.ok) throw new TypeError("Invalid response from resolveHandle method");
        const l = c?.did;
        if (!(0, i.isResolvedHandle)(l)) throw new TypeError("Invalid DID returned from resolveHandle method");
        return l;
      }
    }
    r.AppViewHandleResolver = n;
  }(Wd)), Wd;
}
var Es = {}, vs = {}, Rs = {}, m0;
function tD() {
  if (m0) return Rs;
  m0 = 1, Object.defineProperty(Rs, "__esModule", { value: true }), Rs.DnsHandleResolver = void 0;
  const r = id(), t = "_atproto", i = "did=";
  class n {
    constructor(s) {
      Object.defineProperty(this, "resolveTxt", { enumerable: true, configurable: true, writable: true, value: s });
    }
    async resolve(s) {
      const e = await this.resolveTxt.call(null, `${t}.${s}`);
      if (!e) return null;
      for (let u = 0; u < e.length; u++) {
        if (!e[u].startsWith(i)) continue;
        for (let c = u + 1; c < e.length; c++) if (e[c].startsWith(i)) return null;
        const a = e[u].slice(i.length);
        return (0, r.isResolvedHandle)(a) ? a : null;
      }
      return null;
    }
  }
  return Rs.DnsHandleResolver = n, Rs;
}
var _s = {}, b0;
function rD() {
  if (b0) return _s;
  b0 = 1, Object.defineProperty(_s, "__esModule", { value: true }), _s.WellKnownHandleResolver = void 0;
  const r = id();
  class t {
    constructor(n) {
      Object.defineProperty(this, "fetch", { enumerable: true, configurable: true, writable: true, value: void 0 }), this.fetch = n?.fetch ?? globalThis.fetch;
    }
    async resolve(n, o) {
      const s = new URL("/.well-known/atproto-did", `https://${n}`);
      try {
        const a = (await (await this.fetch.call(null, s, { cache: o?.noCache ? "no-cache" : void 0, signal: o?.signal, redirect: "error" })).text()).split(`
`)[0].trim();
        return (0, r.isResolvedHandle)(a) ? a : null;
      } catch {
        return o?.signal?.throwIfAborted(), null;
      }
    }
  }
  return _s.WellKnownHandleResolver = t, _s;
}
var g0;
function vw() {
  if (g0) return vs;
  g0 = 1, Object.defineProperty(vs, "__esModule", { value: true }), vs.AtprotoHandleResolver = void 0;
  const r = tD(), t = rD(), i = () => {
  };
  class n {
    constructor(s) {
      Object.defineProperty(this, "httpResolver", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "dnsResolver", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "dnsResolverFallback", { enumerable: true, configurable: true, writable: true, value: void 0 }), this.httpResolver = new t.WellKnownHandleResolver(s), this.dnsResolver = new r.DnsHandleResolver(s.resolveTxt), this.dnsResolverFallback = s.resolveTxtFallback ? new r.DnsHandleResolver(s.resolveTxtFallback) : void 0;
    }
    async resolve(s, e) {
      e?.signal?.throwIfAborted();
      const u = new AbortController(), { signal: a } = u;
      e?.signal?.addEventListener("abort", () => u.abort(), { signal: a });
      const c = { ...e, signal: a };
      try {
        const l = this.dnsResolver.resolve(s, c), d = this.httpResolver.resolve(s, c);
        d.catch(i);
        const f = await l;
        if (f) return f;
        a.throwIfAborted();
        const h = await d;
        return h || (a.throwIfAborted(), this.dnsResolverFallback?.resolve(s, c) ?? null);
      } finally {
        u.abort();
      }
    }
  }
  return vs.AtprotoHandleResolver = n, vs;
}
var E0;
function iD() {
  if (E0) return Es;
  E0 = 1, Object.defineProperty(Es, "__esModule", { value: true }), Es.AtprotoDohHandleResolver = void 0;
  const r = vw();
  class t extends r.AtprotoHandleResolver {
    constructor(d) {
      super({ ...d, resolveTxt: i(d), resolveTxtFallback: void 0 });
    }
  }
  Es.AtprotoDohHandleResolver = t;
  function i({ dohEndpoint: l, fetch: d = globalThis.fetch }) {
    return async (f) => {
      const h = new URL(l);
      h.searchParams.set("type", "TXT"), h.searchParams.set("name", f);
      const p = await d(h, { method: "GET", headers: { accept: "application/dns-json" }, redirect: "follow" });
      try {
        const b = p.headers.get("content-type")?.trim();
        if (p.ok) {
          if (b?.match(/application\/(dns-)?json/i) == null) throw new TypeError("Unexpected response from DoH server");
        } else {
          const g = b?.startsWith("text/plain") ? await p.text() : `Failed to resolve ${f}`;
          throw new TypeError(g);
        }
        return s(await p.json()).Answer?.filter(a).map(c) ?? null;
      } finally {
        p.bodyUsed === false && p.body?.cancel().catch(n);
      }
    };
  }
  function n(l) {
    (!(l instanceof DOMException) || l.name !== "AbortError") && console.error("An error occurred while cancelling the response body:", l);
  }
  function o(l) {
    return !(typeof l != "object" || l === null || !("Status" in l) || typeof l.Status != "number" || "Answer" in l && !e(l.Answer, u));
  }
  function s(l) {
    if (o(l)) return l;
    throw new TypeError("Invalid DoH response");
  }
  function e(l, d) {
    return Array.isArray(l) && l.every(d);
  }
  function u(l) {
    return typeof l == "object" && l !== null && "name" in l && typeof l.name == "string" && "type" in l && typeof l.type == "number" && "data" in l && typeof l.data == "string" && "TTL" in l && typeof l.TTL == "number";
  }
  function a(l) {
    return l.type === 16;
  }
  function c(l) {
    return l.data.replace(/^"|"$/g, "").replace(/\\"/g, '"');
  }
  return Es;
}
var ws = {}, v0;
function nD() {
  if (v0) return ws;
  v0 = 1, Object.defineProperty(ws, "__esModule", { value: true }), ws.CachedHandleResolver = void 0;
  const r = Va(), t = zp();
  class i {
    constructor(o, s = new t.SimpleStoreMemory({ max: 1e3, ttl: 10 * 6e4 })) {
      Object.defineProperty(this, "getter", { enumerable: true, configurable: true, writable: true, value: void 0 }), this.getter = new r.CachedGetter((e, u) => o.resolve(e, u), s);
    }
    async resolve(o, s) {
      return this.getter.get(o, s);
    }
  }
  return ws.CachedHandleResolver = i, ws;
}
var R0;
function Hp() {
  return R0 || (R0 = 1, function(r) {
    var t = Wi && Wi.__createBinding || (Object.create ? function(n, o, s, e) {
      e === void 0 && (e = s);
      var u = Object.getOwnPropertyDescriptor(o, s);
      (!u || ("get" in u ? !o.__esModule : u.writable || u.configurable)) && (u = { enumerable: true, get: function() {
        return o[s];
      } }), Object.defineProperty(n, e, u);
    } : function(n, o, s, e) {
      e === void 0 && (e = s), n[e] = o[s];
    }), i = Wi && Wi.__exportStar || function(n, o) {
      for (var s in n) s !== "default" && !Object.prototype.hasOwnProperty.call(o, s) && t(o, n, s);
    };
    Object.defineProperty(r, "__esModule", { value: true }), i(id(), r), i(eD(), r), i(iD(), r), i(vw(), r), i(nD(), r);
  }(Wi)), Wi;
}
var Ji = {}, xs = {}, _0;
function Rw() {
  return _0 || (_0 = 1, Object.defineProperty(xs, "__esModule", { value: true }), xs.CLIENT_ASSERTION_TYPE_JWT_BEARER = void 0, xs.CLIENT_ASSERTION_TYPE_JWT_BEARER = "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"), xs;
}
var Jd = {}, Wr = {}, w0;
function Xp() {
  if (w0) return Wr;
  w0 = 1, Object.defineProperty(Wr, "__esModule", { value: true }), Wr.isHostnameIP = r, Wr.isLoopbackHost = t, Wr.isLoopbackUrl = i, Wr.safeUrl = n, Wr.extractUrlPath = o;
  function r(s) {
    return !!(s.match(/^\d+\.\d+\.\d+\.\d+$/) || s.startsWith("[") && s.endsWith("]"));
  }
  function t(s) {
    return s === "localhost" || s === "127.0.0.1" || s === "[::1]";
  }
  function i(s) {
    const e = typeof s == "string" ? new URL(s) : s;
    return t(e.hostname);
  }
  function n(s) {
    try {
      return new URL(s);
    } catch {
      return null;
    }
  }
  function o(s) {
    const e = s.startsWith("https://") ? 8 : s.startsWith("http://") ? 7 : -1;
    if (e === -1) throw new TypeError('URL must use the "https:" or "http:" protocol');
    const u = s.indexOf("#", e), a = s.indexOf("?", e), c = a !== -1 && (u === -1 || a < u) ? a : -1, l = u === -1 ? c === -1 ? s.length : c : c === -1 ? u : Math.min(u, c), d = s.indexOf("/", e), f = d === -1 || d > l ? l : d;
    if (e === f) throw new TypeError("URL must contain a host");
    return s.substring(f, l);
  }
  return Wr;
}
var x0;
function oi() {
  return x0 || (x0 = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.privateUseUriSchema = r.webUriSchema = r.httpsUriSchema = r.loopbackUriSchema = r.dangerousUriSchema = void 0;
    const t = oe(), i = Xp(), n = URL.canParse ?? ((o) => {
      try {
        return new URL(o), true;
      } catch {
        return false;
      }
    });
    r.dangerousUriSchema = t.z.string().refine((o) => o.includes(":") && n(o), { message: "Invalid URL" }), r.loopbackUriSchema = r.dangerousUriSchema.superRefine((o, s) => {
      if (!o.startsWith("http://")) return s.addIssue({ code: t.ZodIssueCode.custom, message: 'URL must use the "http:" protocol' }), false;
      const e = new URL(o);
      return (0, i.isLoopbackHost)(e.hostname) ? true : (s.addIssue({ code: t.ZodIssueCode.custom, message: 'URL must use "localhost", "127.0.0.1" or "[::1]" as hostname' }), false);
    }), r.httpsUriSchema = r.dangerousUriSchema.superRefine((o, s) => {
      if (!o.startsWith("https://")) return s.addIssue({ code: t.ZodIssueCode.custom, message: 'URL must use the "https:" protocol' }), false;
      const e = new URL(o);
      if ((0, i.isLoopbackHost)(e.hostname)) return s.addIssue({ code: t.ZodIssueCode.custom, message: "https: URL must not use a loopback host" }), false;
      if (!(0, i.isHostnameIP)(e.hostname)) {
        if (!e.hostname.includes(".")) return s.addIssue({ code: t.ZodIssueCode.custom, message: "Domain name must contain at least two segments" }), false;
        if (e.hostname.endsWith(".local")) return s.addIssue({ code: t.ZodIssueCode.custom, message: 'Domain name must not end with ".local"' }), false;
      }
      return true;
    }), r.webUriSchema = t.z.string().superRefine((o, s) => {
      if (o.startsWith("http://")) {
        const e = r.loopbackUriSchema.safeParse(o);
        return e.success || e.error.issues.forEach(s.addIssue, s), e.success;
      }
      if (o.startsWith("https://")) {
        const e = r.httpsUriSchema.safeParse(o);
        return e.success || e.error.issues.forEach(s.addIssue, s), e.success;
      }
      return s.addIssue({ code: t.ZodIssueCode.custom, message: 'URL must use the "http:" or "https:" protocol' }), false;
    }), r.privateUseUriSchema = r.dangerousUriSchema.superRefine((o, s) => {
      const e = o.indexOf("."), u = o.indexOf(":");
      if (e === -1 || u === -1 || e > u) return s.addIssue({ code: t.ZodIssueCode.custom, message: 'Private-use URI scheme requires a "." as part of the protocol' }), false;
      const a = new URL(o);
      return a.protocol.includes(".") ? a.hostname ? (s.addIssue({ code: t.ZodIssueCode.custom, message: 'Private-use URI schemes must not include a hostname (only one "/" is allowed after the protocol, as per RFC 8252)' }), false) : true : (s.addIssue({ code: t.ZodIssueCode.custom, message: "Invalid private-use URI scheme" }), false);
    });
  }(Jd)), Jd;
}
var Tl = {}, Jr = {}, As = {}, A0;
function So() {
  if (A0) return As;
  A0 = 1, Object.defineProperty(As, "__esModule", { value: true }), As.oauthClientIdSchema = void 0;
  const r = oe();
  return As.oauthClientIdSchema = r.z.string().min(1), As;
}
var Zd = {}, S0;
function Na() {
  return S0 || (S0 = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.oauthRedirectUriSchema = r.oauthPrivateUseRedirectURISchema = r.oauthHttpsRedirectURISchema = r.oauthLoopbackRedirectURISchema = void 0;
    const t = oe(), i = oi();
    r.oauthLoopbackRedirectURISchema = i.loopbackUriSchema.superRefine((n, o) => n.startsWith("http://localhost") ? (o.addIssue({ code: t.ZodIssueCode.custom, message: 'Use of "localhost" hostname is not allowed (RFC 8252), use a loopback IP such as "127.0.0.1" instead' }), false) : true), r.oauthHttpsRedirectURISchema = i.httpsUriSchema, r.oauthPrivateUseRedirectURISchema = i.privateUseUriSchema, r.oauthRedirectUriSchema = t.z.union([r.oauthLoopbackRedirectURISchema, r.oauthHttpsRedirectURISchema, r.oauthPrivateUseRedirectURISchema], { message: 'URL must use the "https:" or "http:" protocol, or a private-use URI scheme (RFC 8252)' });
  }(Zd)), Zd;
}
var Ss = {}, C0;
function nd() {
  if (C0) return Ss;
  C0 = 1, Object.defineProperty(Ss, "__esModule", { value: true }), Ss.oauthScopeSchema = void 0;
  const r = oe();
  return Ss.oauthScopeSchema = r.z.string().regex(/^[\x21\x23-\x5B\x5D-\x7E]+(?: [\x21\x23-\x5B\x5D-\x7E]+)*$/), Ss;
}
var T0;
function _w() {
  if (T0) return Jr;
  T0 = 1, Object.defineProperty(Jr, "__esModule", { value: true }), Jr.oauthClientIdLoopbackSchema = void 0, Jr.isOAuthClientIdLoopback = s, Jr.assertOAuthLoopbackClientId = e, Jr.parseOAuthLoopbackClientId = u;
  const r = oe(), t = So(), i = Na(), n = nd(), o = "http://localhost";
  Jr.oauthClientIdLoopbackSchema = t.oauthClientIdSchema.superRefine((a, c) => {
    try {
      return e(a), true;
    } catch (l) {
      return c.addIssue({ code: r.ZodIssueCode.custom, message: l instanceof TypeError ? l.message : "Invalid loopback client ID" }), false;
    }
  });
  function s(a) {
    try {
      return u(a), true;
    } catch {
      return false;
    }
  }
  function e(a) {
    u(a);
  }
  function u(a) {
    if (a.startsWith(o)) {
      if (a.includes("#", o.length)) throw new TypeError("Loopback ClientID must not contain a hash component");
    } else throw new TypeError(`Loopback ClientID must start with "${o}"`);
    const c = a.length > o.length && a[o.length] === "/" ? o.length + 1 : o.length;
    if (a.length === c) return {};
    if (a[c] !== "?") throw new TypeError("Loopback ClientID must not contain a path component");
    const l = new URLSearchParams(a.slice(c + 1));
    for (const h of l.keys()) if (h !== "redirect_uri" && h !== "scope") throw new TypeError(`Invalid query parameter "${h}" in client ID`);
    const d = l.get("scope") ?? void 0;
    if (d != null) {
      if (l.getAll("scope").length > 1) throw new TypeError("Loopback ClientID must contain at most one scope query parameter");
      if (!n.oauthScopeSchema.safeParse(d).success) throw new TypeError("Invalid scope query parameter in client ID");
    }
    const f = l.has("redirect_uri") ? l.getAll("redirect_uri").map((h) => i.oauthLoopbackRedirectURISchema.parse(h)) : void 0;
    return { scope: d, redirect_uris: f };
  }
  return Jr;
}
var L0;
function oD() {
  if (L0) return Tl;
  L0 = 1, Object.defineProperty(Tl, "__esModule", { value: true }), Tl.atprotoLoopbackClientMetadata = t;
  const r = _w();
  function t(i) {
    const { scope: n = "atproto", redirect_uris: o = ["http://127.0.0.1/", "http://[::1]/"] } = (0, r.parseOAuthLoopbackClientId)(i);
    return { client_id: i, scope: n, redirect_uris: o, client_name: "Loopback client", response_types: ["code"], grant_types: ["authorization_code", "refresh_token"], token_endpoint_auth_method: "none", application_type: "native", dpop_bound_access_tokens: true };
  }
  return Tl;
}
var Cs = {}, k0;
function ww() {
  if (k0) return Cs;
  k0 = 1, Object.defineProperty(Cs, "__esModule", { value: true }), Cs.oauthAccessTokenSchema = void 0;
  const r = oe();
  return Cs.oauthAccessTokenSchema = r.z.string().min(1), Cs;
}
var Ts = {}, D0;
function xw() {
  if (D0) return Ts;
  D0 = 1, Object.defineProperty(Ts, "__esModule", { value: true }), Ts.oauthAuthorizationCodeGrantTokenRequestSchema = void 0;
  const r = oe(), t = Na();
  return Ts.oauthAuthorizationCodeGrantTokenRequestSchema = r.z.object({ grant_type: r.z.literal("authorization_code"), code: r.z.string().min(1), redirect_uri: t.oauthRedirectUriSchema, code_verifier: r.z.string().min(43).max(128).regex(/^[a-zA-Z0-9-._~]+$/).optional() }), Ts;
}
var Qd = {}, P0;
function Wp() {
  return P0 || (P0 = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.oauthAuthorizationDetailsSchema = r.oauthAuthorizationDetailSchema = void 0;
    const t = oe(), i = oi();
    r.oauthAuthorizationDetailSchema = t.z.object({ type: t.z.string(), locations: t.z.array(i.dangerousUriSchema).optional(), actions: t.z.array(t.z.string()).optional(), datatypes: t.z.array(t.z.string()).optional(), identifier: t.z.string().optional(), privileges: t.z.array(t.z.string()).optional() }), r.oauthAuthorizationDetailsSchema = t.z.array(r.oauthAuthorizationDetailSchema);
  }(Qd)), Qd;
}
var Ls = {}, B0;
function Jp() {
  if (B0) return Ls;
  B0 = 1, Object.defineProperty(Ls, "__esModule", { value: true }), Ls.oauthAuthorizationRequestJarSchema = void 0;
  const r = oe(), t = ni();
  return Ls.oauthAuthorizationRequestJarSchema = r.z.object({ request: r.z.union([t.signedJwtSchema, t.unsignedJwtSchema]) }), Ls;
}
var ks = {}, Ds = {}, Ps = {}, U0;
function Aw() {
  if (U0) return Ps;
  U0 = 1, Object.defineProperty(Ps, "__esModule", { value: true }), Ps.oauthCodeChallengeMethodSchema = void 0;
  const r = oe();
  return Ps.oauthCodeChallengeMethodSchema = r.z.enum(["S256", "plain"]), Ps;
}
var Bs = {}, I0;
function Zp() {
  if (I0) return Bs;
  I0 = 1, Object.defineProperty(Bs, "__esModule", { value: true }), Bs.oauthResponseTypeSchema = void 0;
  const r = oe();
  return Bs.oauthResponseTypeSchema = r.z.enum(["code", "token", "none", "code id_token token", "code id_token", "code token", "id_token token", "id_token"]), Bs;
}
var Us = {}, K0;
function Sw() {
  if (K0) return Us;
  K0 = 1, Object.defineProperty(Us, "__esModule", { value: true }), Us.oidcClaimsParameterSchema = void 0;
  const r = oe();
  return Us.oidcClaimsParameterSchema = r.z.enum(["auth_time", "nonce", "acr", "name", "family_name", "given_name", "middle_name", "nickname", "preferred_username", "gender", "picture", "profile", "website", "birthdate", "zoneinfo", "locale", "updated_at", "email", "email_verified", "phone_number", "phone_number_verified", "address"]), Us;
}
var Is = {}, O0;
function Cw() {
  if (O0) return Is;
  O0 = 1, Object.defineProperty(Is, "__esModule", { value: true }), Is.oidcClaimsPropertiesSchema = void 0;
  const r = oe(), t = r.z.union([r.z.string(), r.z.number(), r.z.boolean()]);
  return Is.oidcClaimsPropertiesSchema = r.z.object({ essential: r.z.boolean().optional(), value: t.optional(), values: r.z.array(t).optional() }), Is;
}
var Ks = {}, j0;
function Tw() {
  if (j0) return Ks;
  j0 = 1, Object.defineProperty(Ks, "__esModule", { value: true }), Ks.oidcEntityTypeSchema = void 0;
  const r = oe();
  return Ks.oidcEntityTypeSchema = r.z.enum(["userinfo", "id_token"]), Ks;
}
var q0;
function Qp() {
  if (q0) return Ds;
  q0 = 1, Object.defineProperty(Ds, "__esModule", { value: true }), Ds.oauthAuthorizationRequestParametersSchema = void 0;
  const r = oe(), t = ni(), i = Wp(), n = So(), o = Aw(), s = Na(), e = Zp(), u = nd(), a = Sw(), c = Cw(), l = Tw();
  return Ds.oauthAuthorizationRequestParametersSchema = r.z.object({ client_id: n.oauthClientIdSchema, state: r.z.string().optional(), redirect_uri: s.oauthRedirectUriSchema.optional(), scope: u.oauthScopeSchema.optional(), response_type: e.oauthResponseTypeSchema, code_challenge: r.z.string().optional(), code_challenge_method: o.oauthCodeChallengeMethodSchema.default("S256").optional(), dpop_jkt: r.z.string().optional(), response_mode: r.z.enum(["query", "fragment", "form_post"]).optional(), nonce: r.z.string().optional(), max_age: r.z.number().int().min(0).optional(), claims: r.z.record(l.oidcEntityTypeSchema, r.z.record(a.oidcClaimsParameterSchema, r.z.union([r.z.literal(null), c.oidcClaimsPropertiesSchema]))).optional(), login_hint: r.z.string().min(1).optional(), ui_locales: r.z.string().regex(/^[a-z]{2,3}(-[A-Z]{2})?( [a-z]{2,3}(-[A-Z]{2})?)*$/).optional(), id_token_hint: t.signedJwtSchema.optional(), display: r.z.enum(["page", "popup", "touch", "wap"]).optional(), prompt: r.z.enum(["none", "login", "consent", "select_account"]).optional(), authorization_details: i.oauthAuthorizationDetailsSchema.optional() }), Ds;
}
var M0;
function sD() {
  if (M0) return ks;
  M0 = 1, Object.defineProperty(ks, "__esModule", { value: true }), ks.oauthAuthorizationRequestParSchema = void 0;
  const r = oe(), t = Jp(), i = Qp();
  return ks.oauthAuthorizationRequestParSchema = r.z.union([i.oauthAuthorizationRequestParametersSchema, t.oauthAuthorizationRequestJarSchema]), ks;
}
var Os = {}, js = {}, qs = {}, V0;
function Lw() {
  if (V0) return qs;
  V0 = 1, Object.defineProperty(qs, "__esModule", { value: true }), qs.oauthRequestUriSchema = void 0;
  const r = oe();
  return qs.oauthRequestUriSchema = r.z.string(), qs;
}
var N0;
function kw() {
  if (N0) return js;
  N0 = 1, Object.defineProperty(js, "__esModule", { value: true }), js.oauthAuthorizationRequestUriSchema = void 0;
  const r = oe(), t = Lw();
  return js.oauthAuthorizationRequestUriSchema = r.z.object({ request_uri: t.oauthRequestUriSchema }), js;
}
var z0;
function aD() {
  if (z0) return Os;
  z0 = 1, Object.defineProperty(Os, "__esModule", { value: true }), Os.oauthAuthorizationRequestQuerySchema = void 0;
  const r = oe(), t = Jp(), i = Qp(), n = kw();
  return Os.oauthAuthorizationRequestQuerySchema = r.z.union([i.oauthAuthorizationRequestParametersSchema, t.oauthAuthorizationRequestJarSchema, n.oauthAuthorizationRequestUriSchema]), Os;
}
var Yd = {}, Ms = {}, G0;
function Yp() {
  if (G0) return Ms;
  G0 = 1, Object.defineProperty(Ms, "__esModule", { value: true }), Ms.oauthIssuerIdentifierSchema = void 0;
  const r = oe(), t = oi();
  return Ms.oauthIssuerIdentifierSchema = t.webUriSchema.superRefine((i, n) => {
    if (i.endsWith("/")) return n.addIssue({ code: r.z.ZodIssueCode.custom, message: "Issuer URL must not end with a slash" }), false;
    const o = new URL(i);
    if (o.username || o.password) return n.addIssue({ code: r.z.ZodIssueCode.custom, message: "Issuer URL must not contain a username or password" }), false;
    if (o.hash || o.search) return n.addIssue({ code: r.z.ZodIssueCode.custom, message: "Issuer URL must not contain a query or fragment" }), false;
    const s = o.pathname === "/" ? o.origin : o.href;
    return i !== s ? (n.addIssue({ code: r.z.ZodIssueCode.custom, message: "Issuer URL must be in the canonical form" }), false) : true;
  }), Ms;
}
var F0;
function uD() {
  return F0 || (F0 = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.oauthAuthorizationServerMetadataValidator = r.oauthAuthorizationServerMetadataSchema = void 0;
    const t = oe(), i = Aw(), n = Yp(), o = oi();
    r.oauthAuthorizationServerMetadataSchema = t.z.object({ issuer: n.oauthIssuerIdentifierSchema, claims_supported: t.z.array(t.z.string()).optional(), claims_locales_supported: t.z.array(t.z.string()).optional(), claims_parameter_supported: t.z.boolean().optional(), request_parameter_supported: t.z.boolean().optional(), request_uri_parameter_supported: t.z.boolean().optional(), require_request_uri_registration: t.z.boolean().optional(), scopes_supported: t.z.array(t.z.string()).optional(), subject_types_supported: t.z.array(t.z.string()).optional(), response_types_supported: t.z.array(t.z.string()).optional(), response_modes_supported: t.z.array(t.z.string()).optional(), grant_types_supported: t.z.array(t.z.string()).optional(), code_challenge_methods_supported: t.z.array(i.oauthCodeChallengeMethodSchema).min(1).optional(), ui_locales_supported: t.z.array(t.z.string()).optional(), id_token_signing_alg_values_supported: t.z.array(t.z.string()).optional(), display_values_supported: t.z.array(t.z.string()).optional(), request_object_signing_alg_values_supported: t.z.array(t.z.string()).optional(), authorization_response_iss_parameter_supported: t.z.boolean().optional(), authorization_details_types_supported: t.z.array(t.z.string()).optional(), request_object_encryption_alg_values_supported: t.z.array(t.z.string()).optional(), request_object_encryption_enc_values_supported: t.z.array(t.z.string()).optional(), jwks_uri: o.webUriSchema.optional(), authorization_endpoint: o.webUriSchema, token_endpoint: o.webUriSchema, token_endpoint_auth_methods_supported: t.z.array(t.z.string()).optional(), token_endpoint_auth_signing_alg_values_supported: t.z.array(t.z.string()).optional(), revocation_endpoint: o.webUriSchema.optional(), introspection_endpoint: o.webUriSchema.optional(), pushed_authorization_request_endpoint: o.webUriSchema.optional(), require_pushed_authorization_requests: t.z.boolean().optional(), userinfo_endpoint: o.webUriSchema.optional(), end_session_endpoint: o.webUriSchema.optional(), registration_endpoint: o.webUriSchema.optional(), dpop_signing_alg_values_supported: t.z.array(t.z.string()).optional(), protected_resources: t.z.array(o.webUriSchema).optional(), client_id_metadata_document_supported: t.z.boolean().optional() }), r.oauthAuthorizationServerMetadataValidator = r.oauthAuthorizationServerMetadataSchema.superRefine((s, e) => {
      s.require_pushed_authorization_requests && !s.pushed_authorization_request_endpoint && e.addIssue({ code: t.z.ZodIssueCode.custom, message: '"pushed_authorization_request_endpoint" required when "require_pushed_authorization_requests" is true' });
    }).superRefine((s, e) => {
      s.response_types_supported && (s.response_types_supported.includes("code") || e.addIssue({ code: t.z.ZodIssueCode.custom, message: 'Response type "code" is required' }));
    });
  }(Yd)), Yd;
}
var Vs = {}, $0;
function Dw() {
  if ($0) return Vs;
  $0 = 1, Object.defineProperty(Vs, "__esModule", { value: true }), Vs.oauthClientCredentialsGrantTokenRequestSchema = void 0;
  const r = oe();
  return Vs.oauthClientCredentialsGrantTokenRequestSchema = r.z.object({ grant_type: r.z.literal("client_credentials") }), Vs;
}
var ep = {}, H0;
function cD() {
  return H0 || (H0 = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.oauthClientCredentialsSchema = r.oauthClientCredentialsNoneSchema = r.oauthClientCredentialsSecretPostSchema = r.oauthClientCredentialsJwtBearerSchema = void 0;
    const t = oe(), i = ni(), n = Rw(), o = So();
    r.oauthClientCredentialsJwtBearerSchema = t.z.object({ client_id: o.oauthClientIdSchema, client_assertion_type: t.z.literal(n.CLIENT_ASSERTION_TYPE_JWT_BEARER), client_assertion: i.signedJwtSchema }), r.oauthClientCredentialsSecretPostSchema = t.z.object({ client_id: o.oauthClientIdSchema, client_secret: t.z.string() }), r.oauthClientCredentialsNoneSchema = t.z.object({ client_id: o.oauthClientIdSchema }), r.oauthClientCredentialsSchema = t.z.union([r.oauthClientCredentialsJwtBearerSchema, r.oauthClientCredentialsSecretPostSchema, r.oauthClientCredentialsNoneSchema]);
  }(ep)), ep;
}
var tp = {}, X0;
function lD() {
  return X0 || (X0 = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.oauthClientIdDiscoverableSchema = void 0, r.isOAuthClientIdDiscoverable = s, r.assertOAuthDiscoverableClientId = e, r.parseOAuthDiscoverableClientId = u;
    const t = oe(), i = So(), n = oi(), o = Xp();
    r.oauthClientIdDiscoverableSchema = t.z.intersection(i.oauthClientIdSchema, n.httpsUriSchema).superRefine((a, c) => {
      const l = new URL(a);
      return l.username || l.password ? (c.addIssue({ code: t.z.ZodIssueCode.custom, message: "ClientID must not contain credentials" }), false) : l.hash ? (c.addIssue({ code: t.z.ZodIssueCode.custom, message: "ClientID must not contain a fragment" }), false) : l.pathname === "/" ? (c.addIssue({ code: t.z.ZodIssueCode.custom, message: 'ClientID must contain a path component (e.g. "/client-metadata.json")' }), false) : l.pathname.endsWith("/") ? (c.addIssue({ code: t.z.ZodIssueCode.custom, message: "ClientID path must not end with a trailing slash" }), false) : (0, o.isHostnameIP)(l.hostname) ? (c.addIssue({ code: t.z.ZodIssueCode.custom, message: "ClientID hostname must not be an IP address" }), false) : (0, o.extractUrlPath)(a) !== l.pathname ? (c.addIssue({ code: t.z.ZodIssueCode.custom, message: `ClientID must be in canonical form ("${l.href}", got "${a}")` }), false) : true;
    });
    function s(a) {
      return r.oauthClientIdDiscoverableSchema.safeParse(a).success;
    }
    function e(a) {
      r.oauthClientIdDiscoverableSchema.parse(a);
    }
    function u(a) {
      return new URL(r.oauthClientIdDiscoverableSchema.parse(a));
    }
  }(tp)), tp;
}
var Ns = {}, zs = {}, W0;
function Pw() {
  if (W0) return zs;
  W0 = 1, Object.defineProperty(zs, "__esModule", { value: true }), zs.oauthEndpointAuthMethod = void 0;
  const r = oe();
  return zs.oauthEndpointAuthMethod = r.z.enum(["client_secret_basic", "client_secret_jwt", "client_secret_post", "none", "private_key_jwt", "self_signed_tls_client_auth", "tls_client_auth"]), zs;
}
var Gs = {}, J0;
function Bw() {
  if (J0) return Gs;
  J0 = 1, Object.defineProperty(Gs, "__esModule", { value: true }), Gs.oauthGrantTypeSchema = void 0;
  const r = oe();
  return Gs.oauthGrantTypeSchema = r.z.enum(["authorization_code", "implicit", "refresh_token", "password", "client_credentials", "urn:ietf:params:oauth:grant-type:jwt-bearer", "urn:ietf:params:oauth:grant-type:saml2-bearer"]), Gs;
}
var Z0;
function dD() {
  if (Z0) return Ns;
  Z0 = 1, Object.defineProperty(Ns, "__esModule", { value: true }), Ns.oauthClientMetadataSchema = void 0;
  const r = oe(), t = ni(), i = So(), n = Pw(), o = Bw(), s = Na(), e = Zp(), u = nd(), a = oi();
  return Ns.oauthClientMetadataSchema = r.z.object({ redirect_uris: r.z.array(s.oauthRedirectUriSchema).nonempty(), response_types: r.z.array(e.oauthResponseTypeSchema).nonempty().default(["code"]), grant_types: r.z.array(o.oauthGrantTypeSchema).nonempty().default(["authorization_code"]), scope: u.oauthScopeSchema.optional(), token_endpoint_auth_method: n.oauthEndpointAuthMethod.default("none").optional(), token_endpoint_auth_signing_alg: r.z.string().optional(), userinfo_signed_response_alg: r.z.string().optional(), userinfo_encrypted_response_alg: r.z.string().optional(), jwks_uri: a.webUriSchema.optional(), jwks: t.jwksPubSchema.optional(), application_type: r.z.enum(["web", "native"]).default("web").optional(), subject_type: r.z.enum(["public", "pairwise"]).default("public").optional(), request_object_signing_alg: r.z.string().optional(), id_token_signed_response_alg: r.z.string().optional(), authorization_signed_response_alg: r.z.string().default("RS256").optional(), authorization_encrypted_response_enc: r.z.enum(["A128CBC-HS256"]).optional(), authorization_encrypted_response_alg: r.z.string().optional(), client_id: i.oauthClientIdSchema.optional(), client_name: r.z.string().optional(), client_uri: a.webUriSchema.optional(), policy_uri: a.webUriSchema.optional(), tos_uri: a.webUriSchema.optional(), logo_uri: a.webUriSchema.optional(), default_max_age: r.z.number().optional(), require_auth_time: r.z.boolean().optional(), contacts: r.z.array(r.z.string().email()).optional(), tls_client_certificate_bound_access_tokens: r.z.boolean().optional(), dpop_bound_access_tokens: r.z.boolean().optional(), authorization_details_types: r.z.array(r.z.string()).optional() }), Ns;
}
var Fs = {}, Q0;
function pD() {
  return Q0 || (Q0 = 1, Object.defineProperty(Fs, "__esModule", { value: true }), Fs.OAUTH_ENDPOINT_NAMES = void 0, Fs.OAUTH_ENDPOINT_NAMES = ["token", "revocation", "introspection", "pushed_authorization_request"]), Fs;
}
var rp = {}, Y0;
function fD() {
  return Y0 || (Y0 = 1, Object.defineProperty(rp, "__esModule", { value: true })), rp;
}
var $s = {}, eR;
function hD() {
  if (eR) return $s;
  eR = 1, Object.defineProperty($s, "__esModule", { value: true }), $s.oauthParResponseSchema = void 0;
  const r = oe();
  return $s.oauthParResponseSchema = r.z.object({ request_uri: r.z.string(), expires_in: r.z.number().int().positive() }), $s;
}
var Hs = {}, tR;
function Uw() {
  if (tR) return Hs;
  tR = 1, Object.defineProperty(Hs, "__esModule", { value: true }), Hs.oauthPasswordGrantTokenRequestSchema = void 0;
  const r = oe();
  return Hs.oauthPasswordGrantTokenRequestSchema = r.z.object({ grant_type: r.z.literal("password"), username: r.z.string(), password: r.z.string() }), Hs;
}
var Xs = {}, rR;
function yD() {
  if (rR) return Xs;
  rR = 1, Object.defineProperty(Xs, "__esModule", { value: true }), Xs.oauthProtectedResourceMetadataSchema = void 0;
  const r = oe(), t = Yp(), i = oi();
  return Xs.oauthProtectedResourceMetadataSchema = r.z.object({ resource: i.webUriSchema.refine((n) => !n.includes("?"), { message: "Resource URL must not contain query parameters" }).refine((n) => !n.includes("#"), { message: "Resource URL must not contain a fragment" }), authorization_servers: r.z.array(t.oauthIssuerIdentifierSchema).optional(), jwks_uri: i.webUriSchema.optional(), scopes_supported: r.z.array(r.z.string()).optional(), bearer_methods_supported: r.z.array(r.z.enum(["header", "body", "query"])).optional(), resource_signing_alg_values_supported: r.z.array(r.z.string()).optional(), resource_documentation: i.webUriSchema.optional(), resource_policy_uri: i.webUriSchema.optional(), resource_tos_uri: i.webUriSchema.optional() }), Xs;
}
var Ws = {}, Js = {}, iR;
function ef() {
  if (iR) return Js;
  iR = 1, Object.defineProperty(Js, "__esModule", { value: true }), Js.oauthRefreshTokenSchema = void 0;
  const r = oe();
  return Js.oauthRefreshTokenSchema = r.z.string().min(1), Js;
}
var nR;
function Iw() {
  if (nR) return Ws;
  nR = 1, Object.defineProperty(Ws, "__esModule", { value: true }), Ws.oauthRefreshTokenGrantTokenRequestSchema = void 0;
  const r = oe(), t = ef();
  return Ws.oauthRefreshTokenGrantTokenRequestSchema = r.z.object({ grant_type: r.z.literal("refresh_token"), refresh_token: t.oauthRefreshTokenSchema }), Ws;
}
var Zs = {}, oR;
function mD() {
  if (oR) return Zs;
  oR = 1, Object.defineProperty(Zs, "__esModule", { value: true }), Zs.oauthResponseModeSchema = void 0;
  const r = oe();
  return Zs.oauthResponseModeSchema = r.z.enum(["query", "fragment", "form_post"]), Zs;
}
var Qs = {}, sR;
function bD() {
  if (sR) return Qs;
  sR = 1, Object.defineProperty(Qs, "__esModule", { value: true }), Qs.oauthTokenIdentificationSchema = void 0;
  const r = oe(), t = ww(), i = ef();
  return Qs.oauthTokenIdentificationSchema = r.z.object({ token: r.z.union([t.oauthAccessTokenSchema, i.oauthRefreshTokenSchema]), token_type_hint: r.z.enum(["access_token", "refresh_token"]).optional() }), Qs;
}
var Ys = {}, aR;
function gD() {
  if (aR) return Ys;
  aR = 1, Object.defineProperty(Ys, "__esModule", { value: true }), Ys.oauthTokenRequestSchema = void 0;
  const r = oe(), t = xw(), i = Dw(), n = Uw(), o = Iw();
  return Ys.oauthTokenRequestSchema = r.z.discriminatedUnion("grant_type", [t.oauthAuthorizationCodeGrantTokenRequestSchema, o.oauthRefreshTokenGrantTokenRequestSchema, n.oauthPasswordGrantTokenRequestSchema, i.oauthClientCredentialsGrantTokenRequestSchema]), Ys;
}
var ea = {}, ta = {}, uR;
function Kw() {
  if (uR) return ta;
  uR = 1, Object.defineProperty(ta, "__esModule", { value: true }), ta.oauthTokenTypeSchema = void 0;
  const r = oe();
  return ta.oauthTokenTypeSchema = r.z.union([r.z.string().regex(/^DPoP$/i).transform(() => "DPoP"), r.z.string().regex(/^Bearer$/i).transform(() => "Bearer")]), ta;
}
var cR;
function ED() {
  if (cR) return ea;
  cR = 1, Object.defineProperty(ea, "__esModule", { value: true }), ea.oauthTokenResponseSchema = void 0;
  const r = oe(), t = ni(), i = Wp(), n = Kw();
  return ea.oauthTokenResponseSchema = r.z.object({ access_token: r.z.string(), token_type: n.oauthTokenTypeSchema, scope: r.z.string().optional(), refresh_token: r.z.string().optional(), expires_in: r.z.number().optional(), id_token: t.signedJwtSchema.optional(), authorization_details: i.oauthAuthorizationDetailsSchema.optional() }).passthrough(), ea;
}
var lR;
function rr() {
  return lR || (lR = 1, function(r) {
    var t = Ji && Ji.__createBinding || (Object.create ? function(n, o, s, e) {
      e === void 0 && (e = s);
      var u = Object.getOwnPropertyDescriptor(o, s);
      (!u || ("get" in u ? !o.__esModule : u.writable || u.configurable)) && (u = { enumerable: true, get: function() {
        return o[s];
      } }), Object.defineProperty(n, e, u);
    } : function(n, o, s, e) {
      e === void 0 && (e = s), n[e] = o[s];
    }), i = Ji && Ji.__exportStar || function(n, o) {
      for (var s in n) s !== "default" && !Object.prototype.hasOwnProperty.call(o, s) && t(o, n, s);
    };
    Object.defineProperty(r, "__esModule", { value: true }), i(Rw(), r), i(oi(), r), i(Xp(), r), i(oD(), r), i(ww(), r), i(xw(), r), i(Wp(), r), i(Jp(), r), i(sD(), r), i(Qp(), r), i(aD(), r), i(kw(), r), i(uD(), r), i(Dw(), r), i(cD(), r), i(lD(), r), i(_w(), r), i(So(), r), i(dD(), r), i(Pw(), r), i(pD(), r), i(Bw(), r), i(fD(), r), i(Yp(), r), i(hD(), r), i(Uw(), r), i(yD(), r), i(Na(), r), i(Iw(), r), i(ef(), r), i(Lw(), r), i(mD(), r), i(Zp(), r), i(nd(), r), i(bD(), r), i(gD(), r), i(ED(), r), i(Kw(), r), i(Sw(), r), i(Cw(), r), i(Tw(), r);
  }(Ji)), Ji;
}
var ra = {}, Zi = {}, dR;
function an() {
  return dR || (dR = 1, function(r) {
    var t = Zi && Zi.__classPrivateFieldSet || function(c, l, d, f, h) {
      if (f === "m") throw new TypeError("Private method is not writable");
      if (f === "a" && !h) throw new TypeError("Private accessor was defined without a setter");
      if (typeof l == "function" ? c !== l || !h : !l.has(c)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return f === "a" ? h.call(c, d) : h ? h.value = d : l.set(c, d), d;
    }, i = Zi && Zi.__classPrivateFieldGet || function(c, l, d, f) {
      if (d === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof l == "function" ? c !== l || !f : !l.has(c)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return d === "m" ? f : d === "a" ? f.call(c) : f ? f.value : l.get(c);
    };
    Object.defineProperty(r, "__esModule", { value: true }), r.includesSpaceSeparatedValue = r.CustomEventTarget = r.CustomEvent = r.timeoutSignal = r.ifString = void 0, r.contentMime = s, r.combineSignals = a, Symbol.dispose ?? (Symbol.dispose = Symbol("@@dispose"));
    const n = (c) => typeof c == "string" ? c : void 0;
    r.ifString = n;
    const o = (c, l) => {
      if (!Number.isInteger(c) || c < 0) throw new TypeError("Expected a positive integer");
      l?.signal?.throwIfAborted();
      const d = new AbortController(), { signal: f } = d;
      l?.signal?.addEventListener("abort", (p) => d.abort(p), { once: true, signal: f });
      const h = setTimeout((p) => d.abort(p), c, new Error("Timeout"));
      return h?.unref?.(), f.addEventListener("abort", () => clearTimeout(h), { once: true, signal: f }), Object.defineProperty(f, Symbol.dispose, { value: () => d.abort() }), f;
    };
    r.timeoutSignal = o;
    function s(c) {
      return c.get("content-type")?.split(";")[0].trim();
    }
    r.CustomEvent = globalThis.CustomEvent ?? (() => {
      var c;
      class l extends Event {
        constructor(f, h) {
          if (!arguments.length) throw new TypeError("type argument is required");
          super(f, h), c.set(this, void 0), t(this, c, h?.detail ?? null, "f");
        }
        get detail() {
          return i(this, c, "f");
        }
      }
      return c = /* @__PURE__ */ new WeakMap(), Object.defineProperties(l.prototype, { [Symbol.toStringTag]: { writable: false, enumerable: false, configurable: true, value: "CustomEvent" }, detail: { enumerable: true } }), l;
    })();
    class e {
      constructor() {
        Object.defineProperty(this, "eventTarget", { enumerable: true, configurable: true, writable: true, value: new EventTarget() });
      }
      addEventListener(l, d, f) {
        this.eventTarget.addEventListener(l, d, f);
      }
      removeEventListener(l, d, f) {
        this.eventTarget.removeEventListener(l, d, f);
      }
      dispatchCustomEvent(l, d, f) {
        return this.eventTarget.dispatchEvent(new r.CustomEvent(l, { ...f, detail: d }));
      }
    }
    r.CustomEventTarget = e;
    const u = (c, l) => {
      if (l.length === 0) throw new TypeError("Value cannot be empty");
      if (l.includes(" ")) throw new TypeError("Value cannot contain spaces");
      const d = c.length, f = l.length;
      if (d < f) return false;
      let h = c.indexOf(l), p;
      for (; h !== -1; ) {
        if (p = h + f, (h === 0 || c[h - 1] === " ") && (p === d || c[p] === " ")) return true;
        h = c.indexOf(l, p + 1);
      }
      return false;
    };
    r.includesSpaceSeparatedValue = u;
    function a(c) {
      const l = new AbortController(), d = function(f) {
        const h = new Error("This operation was aborted", { cause: this.reason });
        l.abort(h);
      };
      for (const f of c) if (f) {
        if (f.aborted) throw l.abort(), new Error("One of the signals is already aborted", { cause: f.reason });
        f.addEventListener("abort", d, { signal: l.signal });
      }
      return l[Symbol.dispose] = () => {
        const f = new Error("AbortController was disposed");
        l.abort(f);
      }, l;
    }
  }(Zi)), Zi;
}
var pR;
function Ow() {
  if (pR) return ra;
  pR = 1, Object.defineProperty(ra, "__esModule", { value: true }), ra.OAuthAuthorizationServerMetadataResolver = void 0;
  const r = rr(), t = kr(), i = Va(), n = an();
  class o extends i.CachedGetter {
    constructor(e, u, a) {
      super(async (c, l) => this.fetchMetadata(c, l), e), Object.defineProperty(this, "fetch", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "allowHttpIssuer", { enumerable: true, configurable: true, writable: true, value: void 0 }), this.fetch = (0, t.bindFetch)(u), this.allowHttpIssuer = a?.allowHttpIssuer === true;
    }
    async get(e, u) {
      const a = r.oauthIssuerIdentifierSchema.parse(e);
      if (!this.allowHttpIssuer && a.startsWith("http:")) throw new TypeError("Unsecure issuer URL protocol only allowed in development and test environments");
      return super.get(a, u);
    }
    async fetchMetadata(e, u) {
      const a = new URL("/.well-known/oauth-authorization-server", e), c = new Request(a, { headers: { accept: "application/json" }, cache: u?.noCache ? "no-cache" : void 0, signal: u?.signal, redirect: "manual" }), l = await this.fetch(c);
      if (l.status !== 200) throw await (0, t.cancelBody)(l, "log"), await t.FetchResponseError.from(l, `Unexpected status code ${l.status} for "${a}"`, void 0, { cause: c });
      if ((0, n.contentMime)(l.headers) !== "application/json") throw await (0, t.cancelBody)(l, "log"), await t.FetchResponseError.from(l, `Unexpected content type for "${a}"`, void 0, { cause: c });
      const d = r.oauthAuthorizationServerMetadataValidator.parse(await l.json());
      if (d.issuer !== e) throw new TypeError(`Invalid issuer ${d.issuer}`);
      if (d.client_id_metadata_document_supported !== true) throw new TypeError(`Authorization server "${e}" does not support client_id_metadata_document`);
      return d;
    }
  }
  return ra.OAuthAuthorizationServerMetadataResolver = o, ra;
}
var ia = {}, fR;
function jw() {
  if (fR) return ia;
  fR = 1, Object.defineProperty(ia, "__esModule", { value: true }), ia.OAuthCallbackError = void 0;
  class r extends Error {
    static from(i, n, o) {
      if (i instanceof r) return i;
      const s = i instanceof Error ? i.message : void 0;
      return new r(n, s, o, i);
    }
    constructor(i, n = i.get("error_description") || "OAuth callback error", o, s) {
      super(n, { cause: s }), Object.defineProperty(this, "params", { enumerable: true, configurable: true, writable: true, value: i }), Object.defineProperty(this, "state", { enumerable: true, configurable: true, writable: true, value: o });
    }
  }
  return ia.OAuthCallbackError = r, ia;
}
var na = {}, Qi = {}, oa = {}, hR;
function vD() {
  if (hR) return oa;
  hR = 1, Object.defineProperty(oa, "__esModule", { value: true }), oa.IdentityResolver = void 0;
  const r = nn(), t = Hp();
  class i {
    constructor(s, e) {
      Object.defineProperty(this, "didResolver", { enumerable: true, configurable: true, writable: true, value: s }), Object.defineProperty(this, "handleResolver", { enumerable: true, configurable: true, writable: true, value: e });
    }
    async resolve(s, e) {
      const u = (0, t.isResolvedHandle)(s) ? await this.getDocumentFromDid(s, e) : await this.getDocumentFromHandle(s, e), a = u.service?.find(n, u);
      if (!a) throw new TypeError(`No valid "AtprotoPersonalDataServer" service found in "${u.id}" DID document`);
      return { did: u.id, pds: new URL(a.serviceEndpoint) };
    }
    async getDocumentFromDid(s, e) {
      return this.didResolver.resolve(s, e);
    }
    async getDocumentFromHandle(s, e) {
      const u = (0, r.normalizeAndEnsureValidHandle)(s), a = await this.handleResolver.resolve(u, e);
      if (!a) throw new TypeError(`Handle "${u}" does not resolve to a DID`);
      e?.signal?.throwIfAborted();
      const c = await this.didResolver.resolve(a, e);
      if (!c.alsoKnownAs?.includes(`at://${u}`)) throw new TypeError(`Did document for "${a}" does not include the handle "${u}"`);
      return c;
    }
  }
  oa.IdentityResolver = i;
  function n(o) {
    return typeof o.serviceEndpoint == "string" && o.type === "AtprotoPersonalDataServer" && (o.id.startsWith("#") ? o.id === "#atproto_pds" : o.id === `${this.id}#atproto_pds`);
  }
  return oa;
}
var yR;
function RD() {
  return yR || (yR = 1, function(r) {
    var t = Qi && Qi.__createBinding || (Object.create ? function(n, o, s, e) {
      e === void 0 && (e = s);
      var u = Object.getOwnPropertyDescriptor(o, s);
      (!u || ("get" in u ? !o.__esModule : u.writable || u.configurable)) && (u = { enumerable: true, get: function() {
        return o[s];
      } }), Object.defineProperty(n, e, u);
    } : function(n, o, s, e) {
      e === void 0 && (e = s), n[e] = o[s];
    }), i = Qi && Qi.__exportStar || function(n, o) {
      for (var s in n) s !== "default" && !Object.prototype.hasOwnProperty.call(o, s) && t(o, n, s);
    };
    Object.defineProperty(r, "__esModule", { value: true }), i(vD(), r);
  }(Qi)), Qi;
}
var sa = {}, mR;
function qw() {
  return mR || (mR = 1, Object.defineProperty(sa, "__esModule", { value: true }), sa.FALLBACK_ALG = void 0, sa.FALLBACK_ALG = "ES256"), sa;
}
var aa = {}, bR;
function od() {
  if (bR) return aa;
  bR = 1, Object.defineProperty(aa, "__esModule", { value: true }), aa.TokenRevokedError = void 0;
  class r extends Error {
    constructor(i, n = `The session for "${i}" was successfully revoked`, o) {
      super(n, o), Object.defineProperty(this, "sub", { enumerable: true, configurable: true, writable: true, value: i });
    }
  }
  return aa.TokenRevokedError = r, aa;
}
var ua = {}, gR;
function Mw() {
  if (gR) return ua;
  gR = 1, Object.defineProperty(ua, "__esModule", { value: true }), ua.OAuthProtectedResourceMetadataResolver = void 0;
  const r = rr(), t = kr(), i = Va(), n = an();
  class o extends i.CachedGetter {
    constructor(e, u = globalThis.fetch, a) {
      super(async (c, l) => this.fetchMetadata(c, l), e), Object.defineProperty(this, "fetch", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "allowHttpResource", { enumerable: true, configurable: true, writable: true, value: void 0 }), this.fetch = (0, t.bindFetch)(u), this.allowHttpResource = a?.allowHttpResource === true;
    }
    async get(e, u) {
      const { protocol: a, origin: c } = new URL(e);
      if (a !== "https:" && a !== "http:") throw new TypeError(`Invalid protected resource metadata URL protocol: ${a}`);
      if (a === "http:" && !this.allowHttpResource) throw new TypeError(`Unsecure resource metadata URL (${a}) only allowed in development and test environments`);
      return super.get(c, u);
    }
    async fetchMetadata(e, u) {
      const a = new URL("/.well-known/oauth-protected-resource", e), c = new Request(a, { signal: u?.signal, headers: { accept: "application/json" }, cache: u?.noCache ? "no-cache" : void 0, redirect: "manual" }), l = await this.fetch(c);
      if (l.status !== 200) throw await (0, t.cancelBody)(l, "log"), await t.FetchResponseError.from(l, `Unexpected status code ${l.status} for "${a}"`, void 0, { cause: c });
      if ((0, n.contentMime)(l.headers) !== "application/json") throw await (0, t.cancelBody)(l, "log"), await t.FetchResponseError.from(l, `Unexpected content type for "${a}"`, void 0, { cause: c });
      const d = r.oauthProtectedResourceMetadataSchema.parse(await l.json());
      if (d.resource !== e) throw new TypeError(`Invalid issuer ${d.resource}`);
      return d;
    }
  }
  return ua.OAuthProtectedResourceMetadataResolver = o, ua;
}
var ca = {}, la = {}, ER;
function Vw() {
  if (ER) return la;
  ER = 1, Object.defineProperty(la, "__esModule", { value: true }), la.OAuthResolverError = void 0;
  const r = oe();
  class t extends Error {
    constructor(n, o) {
      super(n, o);
    }
    static from(n, o) {
      if (n instanceof t) return n;
      const s = n instanceof r.ZodError ? `${n.errors[0].path} ${n.errors[0].message}` : null, e = (o ?? "Unable to resolve identity") + (s ? ` (${s})` : "");
      return new t(e, { cause: n });
    }
  }
  return la.OAuthResolverError = t, la;
}
var vR;
function _D() {
  if (vR) return ca;
  vR = 1, Object.defineProperty(ca, "__esModule", { value: true }), ca.OAuthResolver = void 0;
  const r = rr(), t = Vw();
  class i {
    constructor(o, s, e) {
      Object.defineProperty(this, "identityResolver", { enumerable: true, configurable: true, writable: true, value: o }), Object.defineProperty(this, "protectedResourceMetadataResolver", { enumerable: true, configurable: true, writable: true, value: s }), Object.defineProperty(this, "authorizationServerMetadataResolver", { enumerable: true, configurable: true, writable: true, value: e });
    }
    async resolve(o, s) {
      return /^https?:\/\//.test(o) ? this.resolveFromService(o, s) : this.resolveFromIdentity(o, s);
    }
    async resolveFromService(o, s) {
      try {
        return { metadata: await this.getResourceServerMetadata(o, s) };
      } catch (e) {
        if (!s?.signal?.aborted && e instanceof t.OAuthResolverError) try {
          const u = r.oauthIssuerIdentifierSchema.safeParse(o);
          if (u.success) return { metadata: await this.getAuthorizationServerMetadata(u.data, s) };
        } catch {
        }
        throw e;
      }
    }
    async resolveFromIdentity(o, s) {
      const e = await this.resolveIdentity(o, s);
      s?.signal?.throwIfAborted();
      const u = await this.getResourceServerMetadata(e.pds, s);
      return { identity: e, metadata: u };
    }
    async resolveIdentity(o, s) {
      try {
        return await this.identityResolver.resolve(o, s);
      } catch (e) {
        throw t.OAuthResolverError.from(e, `Failed to resolve identity: ${o}`);
      }
    }
    async getAuthorizationServerMetadata(o, s) {
      try {
        return await this.authorizationServerMetadataResolver.get(o, s);
      } catch (e) {
        throw t.OAuthResolverError.from(e, `Failed to resolve OAuth server metadata for issuer: ${o}`);
      }
    }
    async getResourceServerMetadata(o, s) {
      try {
        const e = await this.protectedResourceMetadataResolver.get(o, s);
        if (e.authorization_servers?.length !== 1) throw new t.OAuthResolverError(e.authorization_servers?.length ? `Unable to determine authorization server for PDS: ${o}` : `No authorization servers found for PDS: ${o}`);
        const u = e.authorization_servers[0];
        s?.signal?.throwIfAborted();
        const a = await this.getAuthorizationServerMetadata(u, s);
        if (a.protected_resources && !a.protected_resources.includes(e.resource)) throw new t.OAuthResolverError(`PDS "${o}" not protected by issuer "${u}"`);
        return a;
      } catch (e) {
        throw t.OAuthResolverError.from(e, `Failed to resolve OAuth server metadata for resource: ${o}`);
      }
    }
  }
  return ca.OAuthResolver = i, ca;
}
var da = {}, _r = {}, ip = {}, RR;
function wD() {
  return RR || (RR = 1, function(r) {
    Object.defineProperty(r, "__esModule", { value: true }), r.atprotoTokenResponseSchema = r.atprotoScopeSchema = r.isAtprotoScope = void 0;
    const t = oe(), i = sn(), n = rr(), o = an(), s = (e) => (0, o.includesSpaceSeparatedValue)(e, "atproto");
    r.isAtprotoScope = s, r.atprotoScopeSchema = t.z.string().refine(r.isAtprotoScope, 'The "atproto" scope is required'), r.atprotoTokenResponseSchema = n.oauthTokenResponseSchema.extend({ token_type: t.z.literal("DPoP"), sub: i.atprotoDidSchema, scope: r.atprotoScopeSchema, id_token: t.z.never().optional() });
  }(ip)), ip;
}
var pa = {}, _R;
function tf() {
  if (_R) return pa;
  _R = 1, Object.defineProperty(pa, "__esModule", { value: true }), pa.TokenRefreshError = void 0;
  class r extends Error {
    constructor(i, n, o) {
      super(n, o), Object.defineProperty(this, "sub", { enumerable: true, configurable: true, writable: true, value: i });
    }
  }
  return pa.TokenRefreshError = r, pa;
}
var Ll = {}, wR;
function Nw() {
  if (wR) return Ll;
  wR = 1, Object.defineProperty(Ll, "__esModule", { value: true }), Ll.dpopFetchWrapper = o;
  const r = Cp, t = kr(), i = globalThis.crypto?.subtle, n = globalThis.ReadableStream;
  function o({ key: c, iss: l, supportedAlgs: d, nonces: f, sha256: h = typeof i < "u" ? a : void 0, isAuthServer: p, fetch: b = globalThis.fetch }) {
    if (!h) throw new TypeError("crypto.subtle is not available in this environment. Please provide a sha256 function.");
    const E = u(c, d);
    return async function(g, x) {
      if (!c.algorithms.includes(E)) throw new TypeError(`Key does not support the algorithm ${E}`);
      const T = x == null && g instanceof Request ? g : new Request(g, x), A = T.headers.get("Authorization"), K = A?.startsWith("DPoP ") ? await h(A.slice(5)) : void 0, { method: j, url: O } = T, { origin: z } = new URL(O);
      let H;
      try {
        H = await f.get(z);
      } catch {
      }
      const X = await s(c, E, l, j, O, H, K);
      T.headers.set("DPoP", X);
      const F = await b.call(this, T), C = F.headers.get("DPoP-Nonce");
      if (!C || C === H) return F;
      try {
        await f.set(z, C);
      } catch {
      }
      if (!await e(F, p) || g === T || n && x?.body instanceof n) return F;
      await (0, t.cancelBody)(F, "log");
      const U = await s(c, E, l, j, O, C, K), I = new Request(g, x);
      return I.headers.set("DPoP", U), b.call(this, I);
    };
  }
  async function s(c, l, d, f, h, p, b) {
    if (!c.bareJwk) throw new Error("Only asymmetric keys can be used as DPoP proofs");
    const E = Math.floor(Date.now() / 1e3);
    return c.createJwt({ alg: l, typ: "dpop+jwt", jwk: c.bareJwk }, { iss: d, iat: E, jti: Math.random().toString(36).slice(2), htm: f, htu: h, nonce: p, ath: b });
  }
  async function e(c, l) {
    if ((l === void 0 || l === false) && c.status === 401) {
      const d = c.headers.get("WWW-Authenticate");
      if (d?.startsWith("DPoP")) return d.includes('error="use_dpop_nonce"');
    }
    if ((l === void 0 || l === true) && c.status === 400) try {
      const d = await (0, t.peekJson)(c, 10240);
      return typeof d == "object" && d?.error === "use_dpop_nonce";
    } catch {
      return false;
    }
    return false;
  }
  function u(c, l) {
    if (l) {
      const d = l.find((f) => c.algorithms.includes(f));
      if (d) return d;
    } else {
      const [d] = c.algorithms;
      if (d) return d;
    }
    throw new Error("Key does not match any alg supported by the server");
  }
  async function a(c) {
    if (i == null) throw new Error("crypto.subtle is not available in this environment. Please provide a sha256 function.");
    const l = new TextEncoder().encode(c), d = await i.digest("SHA-256", l), f = new Uint8Array(d);
    return r.base64url.baseEncode(f);
  }
  return Ll;
}
var fa = {}, xR;
function rf() {
  if (xR) return fa;
  xR = 1, Object.defineProperty(fa, "__esModule", { value: true }), fa.OAuthResponseError = void 0;
  const r = an();
  class t extends Error {
    constructor(n, o) {
      const s = typeof o == "object" ? o : void 0, e = (0, r.ifString)(s?.error), u = (0, r.ifString)(s?.error_description), a = e ? `"${e}"` : "unknown", c = u ? `: ${u}` : "", l = `OAuth ${a} error${c}`;
      super(l), Object.defineProperty(this, "response", { enumerable: true, configurable: true, writable: true, value: n }), Object.defineProperty(this, "payload", { enumerable: true, configurable: true, writable: true, value: o }), Object.defineProperty(this, "error", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "errorDescription", { enumerable: true, configurable: true, writable: true, value: void 0 }), this.error = e, this.errorDescription = u;
    }
    get status() {
      return this.response.status;
    }
    get headers() {
      return this.response.headers;
    }
  }
  return fa.OAuthResponseError = t, fa;
}
var AR;
function zw() {
  if (AR) return _r;
  AR = 1;
  var r = _r && _r.__addDisposableResource || function(d, f, h) {
    if (f != null) {
      if (typeof f != "object" && typeof f != "function") throw new TypeError("Object expected.");
      var p, b;
      if (h) {
        if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
        p = f[Symbol.asyncDispose];
      }
      if (p === void 0) {
        if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
        p = f[Symbol.dispose], h && (b = p);
      }
      if (typeof p != "function") throw new TypeError("Object not disposable.");
      b && (p = function() {
        try {
          b.call(this);
        } catch (E) {
          return Promise.reject(E);
        }
      }), d.stack.push({ value: f, dispose: p, async: h });
    } else h && d.stack.push({ async: true });
    return f;
  }, t = _r && _r.__disposeResources || /* @__PURE__ */ function(d) {
    return function(f) {
      function h(g) {
        f.error = f.hasError ? new d(g, f.error, "An error was suppressed during disposal.") : g, f.hasError = true;
      }
      var p, b = 0;
      function E() {
        for (; p = f.stack.pop(); ) try {
          if (!p.async && b === 1) return b = 0, f.stack.push(p), Promise.resolve().then(E);
          if (p.dispose) {
            var g = p.dispose.call(p.value);
            if (p.async) return b |= 2, Promise.resolve(g).then(E, function(x) {
              return h(x), E();
            });
          } else b |= 1;
        } catch (x) {
          h(x);
        }
        if (b === 1) return f.hasError ? Promise.reject(f.error) : Promise.resolve();
        if (f.hasError) throw f.error;
      }
      return E();
    };
  }(typeof SuppressedError == "function" ? SuppressedError : function(d, f, h) {
    var p = new Error(h);
    return p.name = "SuppressedError", p.error = d, p.suppressed = f, p;
  });
  Object.defineProperty(_r, "__esModule", { value: true }), _r.OAuthServerAgent = void 0;
  const i = rr(), n = kr(), o = wD(), s = qw(), e = tf(), u = Nw(), a = rf(), c = an();
  class l {
    constructor(f, h, p, b, E, g, x, T) {
      Object.defineProperty(this, "dpopKey", { enumerable: true, configurable: true, writable: true, value: f }), Object.defineProperty(this, "serverMetadata", { enumerable: true, configurable: true, writable: true, value: h }), Object.defineProperty(this, "clientMetadata", { enumerable: true, configurable: true, writable: true, value: p }), Object.defineProperty(this, "dpopNonces", { enumerable: true, configurable: true, writable: true, value: b }), Object.defineProperty(this, "oauthResolver", { enumerable: true, configurable: true, writable: true, value: E }), Object.defineProperty(this, "runtime", { enumerable: true, configurable: true, writable: true, value: g }), Object.defineProperty(this, "keyset", { enumerable: true, configurable: true, writable: true, value: x }), Object.defineProperty(this, "dpopFetch", { enumerable: true, configurable: true, writable: true, value: void 0 }), this.dpopFetch = (0, u.dpopFetchWrapper)({ fetch: (0, n.bindFetch)(T), iss: p.client_id, key: f, supportedAlgs: h.dpop_signing_alg_values_supported, sha256: async (A) => g.sha256(A), nonces: b, isAuthServer: true });
    }
    get issuer() {
      return this.serverMetadata.issuer;
    }
    async revoke(f) {
      try {
        await this.request("revocation", { token: f });
      } catch {
      }
    }
    async exchangeCode(f, h) {
      const p = Date.now(), b = await this.request("token", { grant_type: "authorization_code", redirect_uri: this.clientMetadata.redirect_uris[0], code: f, code_verifier: h });
      try {
        return { aud: await this.verifyIssuer(b.sub), sub: b.sub, iss: this.issuer, scope: b.scope, refresh_token: b.refresh_token, access_token: b.access_token, token_type: b.token_type, expires_at: typeof b.expires_in == "number" ? new Date(p + b.expires_in * 1e3).toISOString() : void 0 };
      } catch (E) {
        throw await this.revoke(b.access_token), E;
      }
    }
    async refresh(f) {
      if (!f.refresh_token) throw new e.TokenRefreshError(f.sub, "No refresh token available");
      const h = await this.verifyIssuer(f.sub), p = Date.now(), b = await this.request("token", { grant_type: "refresh_token", refresh_token: f.refresh_token });
      return { aud: h, sub: f.sub, iss: this.issuer, scope: b.scope, refresh_token: b.refresh_token, access_token: b.access_token, token_type: b.token_type, expires_at: typeof b.expires_in == "number" ? new Date(p + b.expires_in * 1e3).toISOString() : void 0 };
    }
    async verifyIssuer(f) {
      const h = { stack: [], error: void 0, hasError: false };
      try {
        const p = r(h, (0, c.timeoutSignal)(1e4), false), b = await this.oauthResolver.resolveFromIdentity(f, { noCache: true, allowStale: false, signal: p });
        if (this.issuer !== b.metadata.issuer) throw new TypeError("Issuer mismatch");
        return b.identity.pds.href;
      } catch (p) {
        h.error = p, h.hasError = true;
      } finally {
        t(h);
      }
    }
    async request(f, h) {
      const p = this.serverMetadata[`${f}_endpoint`];
      if (!p) throw new Error(`No ${f} endpoint available`);
      const b = await this.buildClientAuth(f), { response: E, json: g } = await this.dpopFetch(p, { method: "POST", headers: { ...b.headers, "Content-Type": "application/json" }, body: JSON.stringify({ ...h, ...b.payload }) }).then((0, n.fetchJsonProcessor)());
      if (E.ok) switch (f) {
        case "token":
          return o.atprotoTokenResponseSchema.parse(g);
        case "pushed_authorization_request":
          return i.oauthParResponseSchema.parse(g);
        default:
          return g;
      }
      else throw new a.OAuthResponseError(E, g);
    }
    async buildClientAuth(f) {
      const h = this.serverMetadata.token_endpoint_auth_methods_supported, p = this.clientMetadata.token_endpoint_auth_method;
      if (p === "private_key_jwt" || this.keyset && !p && (h?.includes("private_key_jwt") ?? false)) {
        if (!this.keyset) throw new Error("No keyset available");
        try {
          const b = this.serverMetadata.token_endpoint_auth_signing_alg_values_supported ?? s.FALLBACK_ALG, E = this.clientMetadata.jwks?.keys.map(({ kid: g }) => g).filter((g) => typeof g == "string");
          return { payload: { client_id: this.clientMetadata.client_id, client_assertion_type: i.CLIENT_ASSERTION_TYPE_JWT_BEARER, client_assertion: await this.keyset.createJwt({ alg: b, kid: E }, { iss: this.clientMetadata.client_id, sub: this.clientMetadata.client_id, aud: this.serverMetadata.issuer, jti: await this.runtime.generateNonce(), iat: Math.floor(Date.now() / 1e3) }) } };
        } catch (b) {
          if (p === "private_key_jwt") throw b;
        }
      }
      if (p === "none" || !p && (h?.includes("none") ?? true)) return { payload: { client_id: this.clientMetadata.client_id } };
      throw new Error(`Unsupported ${f} authentication method`);
    }
  }
  return _r.OAuthServerAgent = l, _r;
}
var SR;
function Gw() {
  if (SR) return da;
  SR = 1, Object.defineProperty(da, "__esModule", { value: true }), da.OAuthServerFactory = void 0;
  const r = zw();
  class t {
    constructor(n, o, s, e, u, a) {
      Object.defineProperty(this, "clientMetadata", { enumerable: true, configurable: true, writable: true, value: n }), Object.defineProperty(this, "runtime", { enumerable: true, configurable: true, writable: true, value: o }), Object.defineProperty(this, "resolver", { enumerable: true, configurable: true, writable: true, value: s }), Object.defineProperty(this, "fetch", { enumerable: true, configurable: true, writable: true, value: e }), Object.defineProperty(this, "keyset", { enumerable: true, configurable: true, writable: true, value: u }), Object.defineProperty(this, "dpopNonceCache", { enumerable: true, configurable: true, writable: true, value: a });
    }
    async fromIssuer(n, o, s) {
      const e = await this.resolver.getAuthorizationServerMetadata(n, s);
      return this.fromMetadata(e, o);
    }
    async fromMetadata(n, o) {
      return new r.OAuthServerAgent(o, n, this.clientMetadata, this.dpopNonceCache, this.resolver, this.runtime, this.keyset, this.fetch);
    }
  }
  return da.OAuthServerFactory = t, da;
}
var ha = {}, ya = {}, CR;
function nf() {
  if (CR) return ya;
  CR = 1, Object.defineProperty(ya, "__esModule", { value: true }), ya.TokenInvalidError = void 0;
  class r extends Error {
    constructor(i, n = `The session for "${i}" is invalid`, o) {
      super(n, o), Object.defineProperty(this, "sub", { enumerable: true, configurable: true, writable: true, value: i });
    }
  }
  return ya.TokenInvalidError = r, ya;
}
var TR;
function Fw() {
  if (TR) return ha;
  TR = 1, Object.defineProperty(ha, "__esModule", { value: true }), ha.OAuthSession = void 0;
  const r = kr(), t = nf(), i = od(), n = Nw(), o = globalThis.ReadableStream;
  class s {
    constructor(a, c, l, d = globalThis.fetch) {
      Object.defineProperty(this, "server", { enumerable: true, configurable: true, writable: true, value: a }), Object.defineProperty(this, "sub", { enumerable: true, configurable: true, writable: true, value: c }), Object.defineProperty(this, "sessionGetter", { enumerable: true, configurable: true, writable: true, value: l }), Object.defineProperty(this, "dpopFetch", { enumerable: true, configurable: true, writable: true, value: void 0 }), this.dpopFetch = (0, n.dpopFetchWrapper)({ fetch: (0, r.bindFetch)(d), iss: a.clientMetadata.client_id, key: a.dpopKey, supportedAlgs: a.serverMetadata.dpop_signing_alg_values_supported, sha256: async (f) => a.runtime.sha256(f), nonces: a.dpopNonces, isAuthServer: false });
    }
    get did() {
      return this.sub;
    }
    get serverMetadata() {
      return this.server.serverMetadata;
    }
    async getTokenSet(a) {
      const { tokenSet: c } = await this.sessionGetter.get(this.sub, { noCache: a === true, allowStale: a === false });
      return c;
    }
    async getTokenInfo(a = "auto") {
      const c = await this.getTokenSet(a), l = c.expires_at == null ? void 0 : new Date(c.expires_at);
      return { expiresAt: l, get expired() {
        return l == null ? void 0 : l.getTime() < Date.now() - 5e3;
      }, scope: c.scope, iss: c.iss, aud: c.aud, sub: c.sub };
    }
    async signOut() {
      try {
        const a = await this.getTokenSet(false);
        await this.server.revoke(a.access_token);
      } finally {
        await this.sessionGetter.delStored(this.sub, new i.TokenRevokedError(this.sub));
      }
    }
    async fetchHandler(a, c) {
      const l = await this.getTokenSet("auto"), d = new URL(a, l.aud), f = `${l.token_type} ${l.access_token}`, h = new Headers(c?.headers);
      h.set("Authorization", f);
      const p = await this.dpopFetch(d, { ...c, headers: h });
      if (!e(p)) return p;
      let b;
      try {
        b = await this.getTokenSet(true);
      } catch {
        return p;
      }
      if (o && c?.body instanceof o) return p;
      const E = `${b.token_type} ${b.access_token}`, g = new URL(a, b.aud);
      h.set("Authorization", E);
      const x = await this.dpopFetch(g, { ...c, headers: h });
      return e(x) && await this.sessionGetter.delStored(this.sub, new t.TokenInvalidError(this.sub)), x;
    }
  }
  ha.OAuthSession = s;
  function e(u) {
    if (u.status !== 401) return false;
    const a = u.headers.get("WWW-Authenticate");
    return a != null && (a.startsWith("Bearer ") || a.startsWith("DPoP ")) && a.includes('error="invalid_token"');
  }
  return ha;
}
var ma = {}, ba = {}, LR;
function xD() {
  if (LR) return ba;
  LR = 1, Object.defineProperty(ba, "__esModule", { value: true }), ba.requestLocalLock = void 0;
  const r = /* @__PURE__ */ new Map();
  function t(n) {
    return new Promise((o) => {
      const e = (r.get(n) ?? Promise.resolve()).then(() => new Promise((u) => {
        o(() => {
          r.get(n) === e && r.delete(n), u();
        });
      }));
      r.set(n, e);
    });
  }
  const i = (n, o) => t(n).then(async (s) => {
    try {
      return await o();
    } finally {
      s();
    }
  });
  return ba.requestLocalLock = i, ba;
}
var kR;
function AD() {
  if (kR) return ma;
  kR = 1, Object.defineProperty(ma, "__esModule", { value: true }), ma.Runtime = void 0;
  const r = Cp, t = xD();
  class i {
    constructor(e) {
      Object.defineProperty(this, "implementation", { enumerable: true, configurable: true, writable: true, value: e }), Object.defineProperty(this, "hasImplementationLock", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "usingLock", { enumerable: true, configurable: true, writable: true, value: void 0 });
      const { requestLock: u } = e;
      this.hasImplementationLock = u != null, this.usingLock = u?.bind(e) || t.requestLocalLock;
    }
    async generateKey(e) {
      const u = Array.from(e).sort(o);
      return this.implementation.createKey(u);
    }
    async sha256(e) {
      const u = new TextEncoder().encode(e), a = await this.implementation.digest(u, { name: "sha256" });
      return r.base64url.baseEncode(a);
    }
    async generateNonce(e = 16) {
      const u = await this.implementation.getRandomValues(e);
      return r.base64url.baseEncode(u);
    }
    async generatePKCE(e) {
      const u = await this.generateVerifier(e);
      return { verifier: u, challenge: await this.sha256(u), method: "S256" };
    }
    async calculateJwkThumbprint(e) {
      const u = n(e), a = JSON.stringify(u);
      return this.sha256(a);
    }
    async generateVerifier(e = 32) {
      if (e < 32 || e > 96) throw new TypeError("Invalid code_verifier length");
      const u = await this.implementation.getRandomValues(e);
      return r.base64url.baseEncode(u);
    }
  }
  ma.Runtime = i;
  function n(s) {
    const e = (u) => {
      const a = s[u];
      if (typeof a != "string" || !a) throw new TypeError(`"${u}" Parameter missing or invalid`);
      return a;
    };
    switch (s.kty) {
      case "EC":
        return { crv: e("crv"), kty: e("kty"), x: e("x"), y: e("y") };
      case "OKP":
        return { crv: e("crv"), kty: e("kty"), x: e("x") };
      case "RSA":
        return { e: e("e"), kty: e("kty"), n: e("n") };
      case "oct":
        return { k: e("k"), kty: e("kty") };
      default:
        throw new TypeError('"kty" (Key Type) Parameter missing or unsupported');
    }
  }
  function o(s, e) {
    if (s === "ES256K") return -1;
    if (e === "ES256K") return 1;
    for (const u of ["ES", "PS", "RS"]) if (s.startsWith(u)) {
      if (e.startsWith(u)) {
        const a = parseInt(s.slice(2, 5)), c = parseInt(e.slice(2, 5));
        return a - c;
      }
      return -1;
    } else if (e.startsWith(u)) return 1;
    return 0;
  }
  return ma;
}
var wr = {}, DR;
function $w() {
  if (DR) return wr;
  DR = 1;
  var r = wr && wr.__addDisposableResource || function(c, l, d) {
    if (l != null) {
      if (typeof l != "object" && typeof l != "function") throw new TypeError("Object expected.");
      var f, h;
      if (d) {
        if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
        f = l[Symbol.asyncDispose];
      }
      if (f === void 0) {
        if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
        f = l[Symbol.dispose], d && (h = f);
      }
      if (typeof f != "function") throw new TypeError("Object not disposable.");
      h && (f = function() {
        try {
          h.call(this);
        } catch (p) {
          return Promise.reject(p);
        }
      }), c.stack.push({ value: l, dispose: f, async: d });
    } else d && c.stack.push({ async: true });
    return l;
  }, t = wr && wr.__disposeResources || /* @__PURE__ */ function(c) {
    return function(l) {
      function d(b) {
        l.error = l.hasError ? new c(b, l.error, "An error was suppressed during disposal.") : b, l.hasError = true;
      }
      var f, h = 0;
      function p() {
        for (; f = l.stack.pop(); ) try {
          if (!f.async && h === 1) return h = 0, l.stack.push(f), Promise.resolve().then(p);
          if (f.dispose) {
            var b = f.dispose.call(f.value);
            if (f.async) return h |= 2, Promise.resolve(b).then(p, function(E) {
              return d(E), p();
            });
          } else h |= 1;
        } catch (E) {
          d(E);
        }
        if (h === 1) return l.hasError ? Promise.reject(l.error) : Promise.resolve();
        if (l.hasError) throw l.error;
      }
      return p();
    };
  }(typeof SuppressedError == "function" ? SuppressedError : function(c, l, d) {
    var f = new Error(d);
    return f.name = "SuppressedError", f.error = c, f.suppressed = l, f;
  });
  Object.defineProperty(wr, "__esModule", { value: true }), wr.SessionGetter = void 0;
  const i = Va(), n = nf(), o = tf(), s = od(), e = rf(), u = an();
  class a extends i.CachedGetter {
    constructor(l, d, f) {
      super(async (h, p, b) => {
        if (b === void 0) {
          const T = "The session was deleted by another process", A = new o.TokenRefreshError(h, T);
          throw this.dispatchEvent("deleted", { sub: h, cause: A }), A;
        }
        const { dpopKey: E, tokenSet: g } = b;
        if (h !== g.sub) throw new o.TokenRefreshError(h, "Stored session sub mismatch");
        if (!g.refresh_token) throw new o.TokenRefreshError(h, "No refresh token available");
        const x = await d.fromIssuer(g.iss, E);
        p?.signal?.throwIfAborted();
        try {
          const T = await x.refresh(g);
          if (h !== T.sub) throw new o.TokenRefreshError(h, "Token set sub mismatch");
          return { dpopKey: E, tokenSet: T };
        } catch (T) {
          if (T instanceof e.OAuthResponseError && T.status === 400 && T.error === "invalid_grant") {
            if (!f.hasImplementationLock) {
              await new Promise((j) => setTimeout(j, 1e3));
              const K = await this.getStored(h);
              if (K === void 0) {
                const j = "The session was deleted by another process";
                throw new o.TokenRefreshError(h, j, { cause: T });
              } else if (K.tokenSet.access_token !== g.access_token || K.tokenSet.refresh_token !== g.refresh_token) return K;
            }
            const A = T.errorDescription ?? "The session was revoked";
            throw new o.TokenRefreshError(h, A, { cause: T });
          }
          throw T;
        }
      }, l, { isStale: (h, { tokenSet: p }) => p.expires_at != null && new Date(p.expires_at).getTime() < Date.now() + 1e4 + 3e4 * Math.random(), onStoreError: async (h, p, { tokenSet: b, dpopKey: E }) => {
        throw await (await d.fromIssuer(b.iss, E)).revoke(b.refresh_token ?? b.access_token), h;
      }, deleteOnError: async (h) => h instanceof o.TokenRefreshError || h instanceof s.TokenRevokedError || h instanceof n.TokenInvalidError }), Object.defineProperty(this, "runtime", { enumerable: true, configurable: true, writable: true, value: f }), Object.defineProperty(this, "eventTarget", { enumerable: true, configurable: true, writable: true, value: new u.CustomEventTarget() });
    }
    addEventListener(l, d, f) {
      this.eventTarget.addEventListener(l, d, f);
    }
    removeEventListener(l, d, f) {
      this.eventTarget.removeEventListener(l, d, f);
    }
    dispatchEvent(l, d) {
      return this.eventTarget.dispatchCustomEvent(l, d);
    }
    async setStored(l, d) {
      if (l !== d.tokenSet.sub) throw new TypeError("Token set does not match the expected sub");
      await super.setStored(l, d), this.dispatchEvent("updated", { sub: l, ...d });
    }
    async delStored(l, d) {
      await super.delStored(l, d), this.dispatchEvent("deleted", { sub: l, cause: d });
    }
    async getSession(l, d) {
      return this.get(l, { noCache: d === true, allowStale: d === false });
    }
    async get(l, d) {
      const f = await this.runtime.usingLock(`@atproto-oauth-client-${l}`, async () => {
        const h = { stack: [], error: void 0, hasError: false };
        try {
          const p = r(h, (0, u.timeoutSignal)(3e4, d), false), b = r(h, (0, u.combineSignals)([d?.signal, p]), false);
          return await super.get(l, { ...d, signal: b.signal });
        } catch (p) {
          h.error = p, h.hasError = true;
        } finally {
          t(h);
        }
      });
      if (l !== f.tokenSet.sub) throw new Error("Token set does not match the expected sub");
      return f;
    }
  }
  return wr.SessionGetter = a, wr;
}
var kl = {}, ga = {}, PR;
function Hw() {
  if (PR) return ga;
  PR = 1, Object.defineProperty(ga, "__esModule", { value: true }), ga.clientMetadataSchema = void 0;
  const r = oe(), t = rr();
  return ga.clientMetadataSchema = t.oauthClientMetadataSchema.extend({ client_id: r.z.union([t.oauthClientIdDiscoverableSchema, t.oauthClientIdLoopbackSchema]) }), ga;
}
var BR;
function SD() {
  if (BR) return kl;
  BR = 1, Object.defineProperty(kl, "__esModule", { value: true }), kl.validateClientMetadata = o;
  const r = rr(), t = Hw(), i = "token_endpoint_auth_method", n = "token_endpoint_auth_signing_alg";
  function o(s, e) {
    if (s.jwks) {
      if (!e) throw new TypeError("Keyset must not be provided when jwks is provided");
      for (const l of s.jwks.keys) if (l.kid) {
        if (!e.has(l.kid)) throw new TypeError(`Key with kid "${l.kid}" not found in keyset`);
      } else throw new TypeError('Key must have a "kid" property');
    }
    !s.jwks && !s.jwks_uri && e?.size && (s = { ...s, jwks: e.toJSON() });
    const u = t.clientMetadataSchema.parse(s);
    if (u.client_id.startsWith("http:") ? (0, r.assertOAuthLoopbackClientId)(u.client_id) : (0, r.assertOAuthDiscoverableClientId)(u.client_id), !u.scope?.split(" ")?.includes("atproto")) throw new TypeError('Client metadata must include the "atproto" scope');
    if (!u.response_types.includes("code")) throw new TypeError('"response_types" must include "code"');
    if (!u.grant_types.includes("authorization_code")) throw new TypeError('"grant_types" must include "authorization_code"');
    const c = u[i];
    switch (c) {
      case void 0:
        throw new TypeError(`${i} must be provided`);
      case "none":
        if (u[n]) throw new TypeError(`${n} must not be provided when ${i} is "${c}"`);
        break;
      case "private_key_jwt":
        if (!e?.size) throw new TypeError(`A non-empty keyset must be provided when ${i} is "${c}"`);
        if (!u[n]) throw new TypeError(`${n} must be provided when ${i} is "${c}"`);
        break;
      default:
        throw new TypeError(`Invalid "token_endpoint_auth_method" value: ${c}`);
    }
    return u;
  }
  return kl;
}
var UR;
function CD() {
  if (UR) return na;
  UR = 1, Object.defineProperty(na, "__esModule", { value: true }), na.OAuthClient = void 0;
  const r = ni(), t = rr(), i = Ew(), n = Hp(), o = RD(), s = zp(), e = qw(), u = od(), a = Ow(), c = jw(), l = Mw(), d = _D(), f = Gw(), h = Fw(), p = AD(), b = $w(), E = an(), g = SD();
  class x extends E.CustomEventTarget {
    static async fetchMetadata({ clientId: A, fetch: K = globalThis.fetch, signal: j }) {
      j?.throwIfAborted();
      const O = new Request(A, { redirect: "error", signal: j }), z = await K(O);
      if (z.status !== 200) throw z.body?.cancel?.(), new TypeError(`Failed to fetch client metadata: ${z.status}`);
      const H = z.headers.get("content-type")?.split(";")[0].trim();
      if (H !== "application/json") throw z.body?.cancel?.(), new TypeError(`Invalid client metadata content type: ${H}`);
      const X = await z.json();
      return j?.throwIfAborted(), t.oauthClientMetadataSchema.parse(X);
    }
    constructor({ fetch: A = globalThis.fetch, allowHttp: K = false, stateStore: j, sessionStore: O, didCache: z = void 0, dpopNonceCache: H = new s.SimpleStoreMemory({ ttl: 6e4, max: 100 }), handleCache: X = void 0, authorizationServerMetadataCache: F = new s.SimpleStoreMemory({ ttl: 6e4, max: 100 }), protectedResourceMetadataCache: C = new s.SimpleStoreMemory({ ttl: 6e4, max: 100 }), responseMode: k, clientMetadata: U, handleResolver: I, plcDirectoryUrl: N, runtimeImplementation: Z, keyset: se }) {
      super(), Object.defineProperty(this, "clientMetadata", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "responseMode", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "keyset", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "runtime", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "fetch", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "oauthResolver", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "serverFactory", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "sessionGetter", { enumerable: true, configurable: true, writable: true, value: void 0 }), Object.defineProperty(this, "stateStore", { enumerable: true, configurable: true, writable: true, value: void 0 }), this.keyset = se ? se instanceof r.Keyset ? se : new r.Keyset(se) : void 0, this.clientMetadata = (0, g.validateClientMetadata)(U, this.keyset), this.responseMode = k, this.runtime = new p.Runtime(Z), this.fetch = A, this.oauthResolver = new d.OAuthResolver(new o.IdentityResolver(new i.DidResolverCached(new i.DidResolverCommon({ fetch: A, plcDirectoryUrl: N, allowHttp: K }), z), new n.CachedHandleResolver(n.AppViewHandleResolver.from(I, { fetch: A }), X)), new l.OAuthProtectedResourceMetadataResolver(C, A, { allowHttpResource: K }), new a.OAuthAuthorizationServerMetadataResolver(F, A, { allowHttpIssuer: K })), this.serverFactory = new f.OAuthServerFactory(this.clientMetadata, this.runtime, this.oauthResolver, this.fetch, this.keyset, H), this.sessionGetter = new b.SessionGetter(O, this.serverFactory, this.runtime), this.stateStore = j;
      for (const le of ["deleted", "updated"]) this.sessionGetter.addEventListener(le, (ve) => {
        this.dispatchCustomEvent(le, ve.detail) || ve.preventDefault();
      });
    }
    get identityResolver() {
      return this.oauthResolver.identityResolver;
    }
    get didResolver() {
      return this.identityResolver.didResolver;
    }
    get handleResolver() {
      return this.identityResolver.handleResolver;
    }
    get jwks() {
      return this.keyset?.publicJwks ?? { keys: [] };
    }
    async authorize(A, { signal: K, ...j } = {}) {
      const O = j?.redirect_uri ?? this.clientMetadata.redirect_uris[0];
      if (!this.clientMetadata.redirect_uris.includes(O)) throw new TypeError("Invalid redirect_uri");
      const { identity: z, metadata: H } = await this.oauthResolver.resolve(A, { signal: K }), X = await this.runtime.generatePKCE(), F = await this.runtime.generateKey(H.dpop_signing_alg_values_supported || [e.FALLBACK_ALG]), C = await this.runtime.generateNonce();
      await this.stateStore.set(C, { iss: H.issuer, dpopKey: F, verifier: X.verifier, appState: j?.state });
      const k = { ...j, client_id: this.clientMetadata.client_id, redirect_uri: O, code_challenge: X.challenge, code_challenge_method: X.method, state: C, login_hint: z ? A : void 0, response_mode: this.responseMode, response_type: "code", scope: j?.scope ?? this.clientMetadata.scope }, U = new URL(H.authorization_endpoint);
      if (U.protocol !== "https:" && U.protocol !== "http:") throw new TypeError(`Invalid authorization endpoint protocol: ${U.protocol}`);
      if (H.pushed_authorization_request_endpoint) {
        const N = await (await this.serverFactory.fromMetadata(H, F)).request("pushed_authorization_request", k);
        return U.searchParams.set("client_id", this.clientMetadata.client_id), U.searchParams.set("request_uri", N.request_uri), U;
      } else {
        if (H.require_pushed_authorization_requests) throw new Error("Server requires pushed authorization requests (PAR) but no PAR endpoint is available");
        for (const [N, Z] of Object.entries(k)) Z && U.searchParams.set(N, String(Z));
        if (U.pathname.length + U.search.length < 2048) return U;
        if (!H.pushed_authorization_request_endpoint) throw new Error("Login URL too long");
      }
      throw new Error("Server does not support pushed authorization requests (PAR)");
    }
    async abortRequest(A) {
      A.searchParams.get("request_uri");
    }
    async callback(A) {
      if (A.get("response") != null) throw new c.OAuthCallbackError(A, "JARM not supported");
      const j = A.get("iss"), O = A.get("state"), z = A.get("error"), H = A.get("code");
      if (!O) throw new c.OAuthCallbackError(A, 'Missing "state" parameter');
      const X = await this.stateStore.get(O);
      if (X) await this.stateStore.del(O);
      else throw new c.OAuthCallbackError(A, `Unknown authorization session "${O}"`);
      try {
        if (z != null) throw new c.OAuthCallbackError(A, void 0, X.appState);
        if (!H) throw new c.OAuthCallbackError(A, 'Missing "code" query param', X.appState);
        const F = await this.serverFactory.fromIssuer(X.iss, X.dpopKey);
        if (j != null) {
          if (!F.issuer) throw new c.OAuthCallbackError(A, "Issuer not found in metadata", X.appState);
          if (F.issuer !== j) throw new c.OAuthCallbackError(A, "Issuer mismatch", X.appState);
        } else if (F.serverMetadata.authorization_response_iss_parameter_supported) throw new c.OAuthCallbackError(A, "iss missing from the response", X.appState);
        const C = await F.exchangeCode(H, X.verifier);
        try {
          return await this.sessionGetter.setStored(C.sub, { dpopKey: X.dpopKey, tokenSet: C }), { session: this.createSession(F, C.sub), state: X.appState ?? null };
        } catch (k) {
          throw await F.revoke(C.refresh_token || C.access_token), k;
        }
      } catch (F) {
        throw c.OAuthCallbackError.from(F, A, X.appState);
      }
    }
    async restore(A, K = "auto") {
      (0, i.assertAtprotoDid)(A);
      const { dpopKey: j, tokenSet: O } = await this.sessionGetter.get(A, { noCache: K === true, allowStale: K === false }), z = await this.serverFactory.fromIssuer(O.iss, j, { noCache: K === true, allowStale: K === false });
      return this.createSession(z, A);
    }
    async revoke(A) {
      (0, i.assertAtprotoDid)(A);
      const { dpopKey: K, tokenSet: j } = await this.sessionGetter.get(A, { allowStale: true });
      try {
        await (await this.serverFactory.fromIssuer(j.iss, K)).revoke(j.access_token);
      } finally {
        await this.sessionGetter.delStored(A, new u.TokenRevokedError(A));
      }
    }
    createSession(A, K) {
      return new h.OAuthSession(A, K, this.sessionGetter, this.fetch);
    }
  }
  return na.OAuthClient = x, na;
}
var np = {}, IR;
function TD() {
  return IR || (IR = 1, Object.defineProperty(np, "__esModule", { value: true })), np;
}
var op = {}, KR;
function LD() {
  return KR || (KR = 1, Object.defineProperty(op, "__esModule", { value: true })), op;
}
var OR;
function Xw() {
  return OR || (OR = 1, function(r) {
    var t = qi && qi.__createBinding || (Object.create ? function(o, s, e, u) {
      u === void 0 && (u = e);
      var a = Object.getOwnPropertyDescriptor(s, e);
      (!a || ("get" in a ? !s.__esModule : a.writable || a.configurable)) && (a = { enumerable: true, get: function() {
        return s[e];
      } }), Object.defineProperty(o, u, a);
    } : function(o, s, e, u) {
      u === void 0 && (u = e), o[u] = s[e];
    }), i = qi && qi.__exportStar || function(o, s) {
      for (var e in o) e !== "default" && !Object.prototype.hasOwnProperty.call(s, e) && t(s, o, e);
    };
    Object.defineProperty(r, "__esModule", { value: true }), r.FetchResponseError = r.FetchRequestError = r.FetchError = void 0, i(Ew(), r);
    var n = kr();
    Object.defineProperty(r, "FetchError", { enumerable: true, get: function() {
      return n.FetchError;
    } }), Object.defineProperty(r, "FetchRequestError", { enumerable: true, get: function() {
      return n.FetchRequestError;
    } }), Object.defineProperty(r, "FetchResponseError", { enumerable: true, get: function() {
      return n.FetchResponseError;
    } }), i(Hp(), r), i(sn(), r), i(rr(), r), i(Ow(), r), i(jw(), r), i(CD(), r), i(Mw(), r), i(Vw(), r), i(rf(), r), i(zw(), r), i(Gw(), r), i(Fw(), r), i(TD(), r), i($w(), r), i(LD(), r), i(Hw(), r), i(nf(), r), i(tf(), r), i(od(), r);
  }(qi)), qi;
}
var Ea = {}, xr = {}, Yi = {}, Ar = {}, Sr = {}, va = {}, Ra = {}, _a = {}, jR;
function Ww() {
  if (jR) return _a;
  jR = 1, Object.defineProperty(_a, "__esModule", { value: true }), _a.handleRequest = r, _a.promisify = t;
  function r(i, n, o) {
    const s = () => {
      i.removeEventListener("success", e), i.removeEventListener("error", u);
    }, e = () => {
      n(i.result), s();
    }, u = () => {
      o(i.error || new Error("Unknown error")), s();
    };
    i.addEventListener("success", e), i.addEventListener("error", u);
  }
  function t(i) {
    return new Promise((n, o) => {
      r(i, n, o);
    });
  }
  return _a;
}
var qR;
function Jw() {
  if (qR) return Ra;
  qR = 1, Object.defineProperty(Ra, "__esModule", { value: true }), Ra.DBIndex = void 0;
  const r = Ww();
  class t {
    constructor(n) {
      Object.defineProperty(this, "idbIndex", { enumerable: true, configurable: true, writable: true, value: n });
    }
    count(n) {
      return (0, r.promisify)(this.idbIndex.count(n));
    }
    get(n) {
      return (0, r.promisify)(this.idbIndex.get(n));
    }
    getKey(n) {
      return (0, r.promisify)(this.idbIndex.getKey(n));
    }
    getAll(n, o) {
      return (0, r.promisify)(this.idbIndex.getAll(n, o));
    }
    getAllKeys(n, o) {
      return (0, r.promisify)(this.idbIndex.getAllKeys(n, o));
    }
    deleteAll(n) {
      return new Promise((o, s) => {
        const e = this.idbIndex.openCursor(n);
        e.onsuccess = function(u) {
          const a = u.target.result;
          a ? (a.delete(), a.continue()) : o();
        }, e.onerror = function(u) {
          s(u.target?.error || new Error("Unexpected error"));
        };
      });
    }
  }
  return Ra.DBIndex = t, Ra;
}
var MR;
function Zw() {
  if (MR) return va;
  MR = 1, Object.defineProperty(va, "__esModule", { value: true }), va.DBObjectStore = void 0;
  const r = Jw(), t = Ww();
  class i {
    constructor(o) {
      Object.defineProperty(this, "idbObjStore", { enumerable: true, configurable: true, writable: true, value: o });
    }
    get name() {
      return this.idbObjStore.name;
    }
    index(o) {
      return new r.DBIndex(this.idbObjStore.index(o));
    }
    get(o) {
      return (0, t.promisify)(this.idbObjStore.get(o));
    }
    getKey(o) {
      return (0, t.promisify)(this.idbObjStore.getKey(o));
    }
    getAll(o, s) {
      return (0, t.promisify)(this.idbObjStore.getAll(o, s));
    }
    getAllKeys(o, s) {
      return (0, t.promisify)(this.idbObjStore.getAllKeys(o, s));
    }
    add(o, s) {
      return (0, t.promisify)(this.idbObjStore.add(o, s));
    }
    put(o, s) {
      return (0, t.promisify)(this.idbObjStore.put(o, s));
    }
    delete(o) {
      return (0, t.promisify)(this.idbObjStore.delete(o));
    }
    clear() {
      return (0, t.promisify)(this.idbObjStore.clear());
    }
  }
  return va.DBObjectStore = i, va;
}
var VR;
function Qw() {
  if (VR) return Sr;
  VR = 1;
  var r = Sr && Sr.__classPrivateFieldSet || function(s, e, u, a, c) {
    if (a === "m") throw new TypeError("Private method is not writable");
    if (a === "a" && !c) throw new TypeError("Private accessor was defined without a setter");
    if (typeof e == "function" ? s !== e || !c : !e.has(s)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return a === "a" ? c.call(s, u) : c ? c.value = u : e.set(s, u), u;
  }, t = Sr && Sr.__classPrivateFieldGet || function(s, e, u, a) {
    if (u === "a" && !a) throw new TypeError("Private accessor was defined without a getter");
    if (typeof e == "function" ? s !== e || !a : !e.has(s)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return u === "m" ? a : u === "a" ? a.call(s) : a ? a.value : e.get(s);
  }, i;
  Object.defineProperty(Sr, "__esModule", { value: true }), Sr.DBTransaction = void 0;
  const n = Zw();
  class o {
    constructor(e) {
      i.set(this, void 0), r(this, i, e, "f");
      const u = () => {
        c();
      }, a = () => {
        c();
      }, c = () => {
        r(this, i, null, "f"), e.removeEventListener("abort", u), e.removeEventListener("complete", a);
      };
      e.addEventListener("abort", u), e.addEventListener("complete", a);
    }
    get tx() {
      if (!t(this, i, "f")) throw new Error("Transaction already ended");
      return t(this, i, "f");
    }
    async abort() {
      const { tx: e } = this;
      r(this, i, null, "f"), e.abort();
    }
    async commit() {
      const { tx: e } = this;
      r(this, i, null, "f"), e.commit?.();
    }
    objectStore(e) {
      const u = this.tx.objectStore(e);
      return new n.DBObjectStore(u);
    }
    [(i = /* @__PURE__ */ new WeakMap(), Symbol.dispose)]() {
      t(this, i, "f") && this.commit();
    }
  }
  return Sr.DBTransaction = o, Sr;
}
var NR;
function kD() {
  if (NR) return Ar;
  NR = 1;
  var r = Ar && Ar.__classPrivateFieldSet || function(s, e, u, a, c) {
    if (a === "m") throw new TypeError("Private method is not writable");
    if (a === "a" && !c) throw new TypeError("Private accessor was defined without a setter");
    if (typeof e == "function" ? s !== e || !c : !e.has(s)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return a === "a" ? c.call(s, u) : c ? c.value = u : e.set(s, u), u;
  }, t = Ar && Ar.__classPrivateFieldGet || function(s, e, u, a) {
    if (u === "a" && !a) throw new TypeError("Private accessor was defined without a getter");
    if (typeof e == "function" ? s !== e || !a : !e.has(s)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return u === "m" ? a : u === "a" ? a.call(s) : a ? a.value : e.get(s);
  }, i;
  Object.defineProperty(Ar, "__esModule", { value: true }), Ar.DB = void 0;
  const n = Qw();
  class o {
    static async open(e, u, a) {
      const c = await new Promise((l, d) => {
        const f = indexedDB.open(e, u.length);
        f.onerror = () => d(f.error), f.onsuccess = () => l(f.result), f.onupgradeneeded = ({ oldVersion: h, newVersion: p }) => {
          const b = f.result;
          try {
            for (let E = h; E < (p ?? u.length); ++E) {
              const g = u[E];
              if (g) g(b);
              else throw new Error(`Missing migration for version ${E}`);
            }
          } catch (E) {
            b.close(), d(E);
          }
        };
      });
      return new o(c, a);
    }
    constructor(e, u) {
      Object.defineProperty(this, "txOptions", { enumerable: true, configurable: true, writable: true, value: u }), i.set(this, void 0), r(this, i, e, "f");
      const a = () => {
        r(this, i, null, "f"), e.removeEventListener("versionchange", a), e.removeEventListener("close", a), e.close();
      };
      e.addEventListener("versionchange", a), e.addEventListener("close", a);
    }
    get db() {
      if (!t(this, i, "f")) throw new Error("Database closed");
      return t(this, i, "f");
    }
    get name() {
      return this.db.name;
    }
    get objectStoreNames() {
      return this.db.objectStoreNames;
    }
    get version() {
      return this.db.version;
    }
    async transaction(e, u, a) {
      return new Promise(async (c, l) => {
        try {
          const d = this.db.transaction(e, u, this.txOptions);
          let f = { done: false };
          d.oncomplete = () => {
            f.done ? c(f.value) : l(new Error("Transaction completed without result"));
          }, d.onerror = () => l(d.error), d.onabort = () => l(d.error || new Error("Transaction aborted"));
          try {
            f = { done: true, value: await a(new n.DBTransaction(d)) }, d.commit();
          } catch (h) {
            throw d.abort(), h;
          }
        } catch (d) {
          l(d);
        }
      });
    }
    close() {
      const { db: e } = this;
      r(this, i, null, "f"), e.close();
    }
    [(i = /* @__PURE__ */ new WeakMap(), Symbol.dispose)]() {
      if (t(this, i, "f")) return this.close();
    }
  }
  return Ar.DB = o, Ar;
}
var zR;
function DD() {
  return zR || (zR = 1, function(r) {
    var t = Yi && Yi.__createBinding || (Object.create ? function(n, o, s, e) {
      e === void 0 && (e = s);
      var u = Object.getOwnPropertyDescriptor(o, s);
      (!u || ("get" in u ? !o.__esModule : u.writable || u.configurable)) && (u = { enumerable: true, get: function() {
        return o[s];
      } }), Object.defineProperty(n, e, u);
    } : function(n, o, s, e) {
      e === void 0 && (e = s), n[e] = o[s];
    }), i = Yi && Yi.__exportStar || function(n, o) {
      for (var s in n) s !== "default" && !Object.prototype.hasOwnProperty.call(o, s) && t(o, n, s);
    };
    Object.defineProperty(r, "__esModule", { value: true }), x_(), i(kD(), r), i(Jw(), r), i(Zw(), r), i(Qw(), r);
  }(Yi)), Yi;
}
var GR;
function PD() {
  if (GR) return xr;
  GR = 1;
  var r = xr && xr.__classPrivateFieldSet || function(l, d, f, h, p) {
    if (h === "m") throw new TypeError("Private method is not writable");
    if (h === "a" && !p) throw new TypeError("Private accessor was defined without a setter");
    if (typeof d == "function" ? l !== d || !p : !d.has(l)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return h === "a" ? p.call(l, f) : p ? p.value = f : d.set(l, f), f;
  }, t = xr && xr.__classPrivateFieldGet || function(l, d, f, h) {
    if (f === "a" && !h) throw new TypeError("Private accessor was defined without a getter");
    if (typeof d == "function" ? l !== d || !h : !d.has(l)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return f === "m" ? h : f === "a" ? h.call(l) : h ? h.value : d.get(l);
  }, i, n;
  Object.defineProperty(xr, "__esModule", { value: true }), xr.BrowserOAuthDatabase = void 0;
  const o = Vp(), s = DD();
  function e(l) {
    if (!(l instanceof o.WebcryptoKey) || !l.kid) throw new Error("Invalid key object");
    return { keyId: l.kid, keyPair: l.cryptoKeyPair };
  }
  async function u(l) {
    return o.WebcryptoKey.fromKeypair(l.keyPair, l.keyId);
  }
  const a = ["state", "session", "didCache", "dpopNonceCache", "handleCache", "authorizationServerMetadataCache", "protectedResourceMetadataCache"];
  class c {
    constructor(d) {
      i.set(this, void 0), n.set(this, void 0), r(this, i, s.DB.open(d?.name ?? "@atproto-oauth-client", [(f) => {
        for (const h of a) f.createObjectStore(h, { autoIncrement: true }).createIndex("expiresAt", "expiresAt", { unique: false });
      }], { durability: d?.durability ?? "strict" }), "f"), r(this, n, setInterval(() => {
        this.cleanup();
      }, d?.cleanupInterval ?? 3e4), "f");
    }
    async run(d, f, h) {
      return await (await t(this, i, "f")).transaction([d], f, (b) => h(b.objectStore(d)));
    }
    createStore(d, { encode: f, decode: h, expiresAt: p }) {
      return { get: async (b) => {
        const E = await this.run(d, "readonly", (g) => g.get(b));
        if (E !== void 0) {
          if (E.expiresAt != null && new Date(E.expiresAt) < /* @__PURE__ */ new Date()) {
            await this.run(d, "readwrite", (g) => g.delete(b));
            return;
          }
          return h(E.value);
        }
      }, set: async (b, E) => {
        const g = { value: await f(E), expiresAt: p(E)?.toISOString() };
        await this.run(d, "readwrite", (x) => x.put(g, b));
      }, del: async (b) => {
        await this.run(d, "readwrite", (E) => E.delete(b));
      } };
    }
    getSessionStore() {
      return this.createStore("session", { expiresAt: ({ tokenSet: d }) => d.refresh_token || d.expires_at == null ? null : new Date(d.expires_at), encode: ({ dpopKey: d, ...f }) => ({ ...f, dpopKey: e(d) }), decode: async ({ dpopKey: d, ...f }) => ({ ...f, dpopKey: await u(d) }) });
    }
    getStateStore() {
      return this.createStore("state", { expiresAt: (d) => new Date(Date.now() + 10 * 6e4), encode: ({ dpopKey: d, ...f }) => ({ ...f, dpopKey: e(d) }), decode: async ({ dpopKey: d, ...f }) => ({ ...f, dpopKey: await u(d) }) });
    }
    getDpopNonceCache() {
      return this.createStore("dpopNonceCache", { expiresAt: (d) => new Date(Date.now() + 6e5), encode: (d) => d, decode: (d) => d });
    }
    getDidCache() {
      return this.createStore("didCache", { expiresAt: (d) => new Date(Date.now() + 6e4), encode: (d) => d, decode: (d) => d });
    }
    getHandleCache() {
      return this.createStore("handleCache", { expiresAt: (d) => new Date(Date.now() + 6e4), encode: (d) => d, decode: (d) => d });
    }
    getAuthorizationServerMetadataCache() {
      return this.createStore("authorizationServerMetadataCache", { expiresAt: (d) => new Date(Date.now() + 6e4), encode: (d) => d, decode: (d) => d });
    }
    getProtectedResourceMetadataCache() {
      return this.createStore("protectedResourceMetadataCache", { expiresAt: (d) => new Date(Date.now() + 6e4), encode: (d) => d, decode: (d) => d });
    }
    async cleanup() {
      const d = await t(this, i, "f");
      for (const f of a) await d.transaction([f], "readwrite", (h) => h.objectStore(f).index("expiresAt").deleteAll(IDBKeyRange.upperBound(Date.now())));
    }
    async [(i = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap(), Symbol.asyncDispose)]() {
      clearInterval(t(this, n, "f")), r(this, n, void 0, "f");
      const d = t(this, i, "f");
      r(this, i, Promise.reject(new Error("Database has been disposed")), "f"), t(this, i, "f").catch(() => null);
      const f = await d.catch(() => null);
      f && await (f[Symbol.asyncDispose] || f[Symbol.dispose]).call(f);
    }
  }
  return xr.BrowserOAuthDatabase = c, xr;
}
var wa = {}, FR;
function BD() {
  if (FR) return wa;
  FR = 1, Object.defineProperty(wa, "__esModule", { value: true }), wa.BrowserRuntimeImplementation = void 0;
  const r = Vp(), t = navigator.locks?.request ? (n, o) => navigator.locks.request(n, { mode: "exclusive" }, async () => o()) : void 0;
  class i {
    constructor() {
      if (Object.defineProperty(this, "requestLock", { enumerable: true, configurable: true, writable: true, value: t }), typeof crypto != "object" || !crypto?.subtle) throw new Error("Crypto with CryptoSubtle is required. If running in a browser, make sure the current page is loaded over HTTPS.");
      this.requestLock || console.warn("Locks API not available. You should consider using a more recent browser.");
    }
    async createKey(o) {
      return r.WebcryptoKey.generate(o);
    }
    getRandomValues(o) {
      return crypto.getRandomValues(new Uint8Array(o));
    }
    async digest(o, { name: s }) {
      switch (s) {
        case "sha256":
        case "sha384":
        case "sha512": {
          const e = await crypto.subtle.digest(`SHA-${s.slice(3)}`, o);
          return new Uint8Array(e);
        }
        default:
          throw new Error(`Unsupported digest algorithm: ${s}`);
      }
    }
  }
  return wa.BrowserRuntimeImplementation = i, wa;
}
var xa = {}, $R;
function Yw() {
  if ($R) return xa;
  $R = 1, Object.defineProperty(xa, "__esModule", { value: true }), xa.LoginContinuedInParentWindowError = void 0;
  class r extends Error {
    constructor() {
      super("Login complete, please close the popup window."), Object.defineProperty(this, "code", { enumerable: true, configurable: true, writable: true, value: "LOGIN_CONTINUED_IN_PARENT_WINDOW" });
    }
  }
  return xa.LoginContinuedInParentWindowError = r, xa;
}
var Dl = {}, HR;
function ex() {
  if (HR) return Dl;
  HR = 1, Object.defineProperty(Dl, "__esModule", { value: true }), Dl.buildLoopbackClientId = t;
  const r = rr();
  function t(i, n = "127.0.0.1") {
    if (!(0, r.isLoopbackHost)(i.hostname)) throw new TypeError(`Expected a loopback host, got ${i.hostname}`);
    const o = `http://${i.hostname === "localhost" ? n : i.hostname}${i.port && !i.port.startsWith(":") ? `:${i.port}` : i.port}${i.pathname}`;
    return `http://localhost${i.pathname === "/" ? "" : i.pathname}?redirect_uri=${encodeURIComponent(o)}`;
  }
  return Dl;
}
var XR;
function UD() {
  if (XR) return Ea;
  XR = 1;
  var r;
  Object.defineProperty(Ea, "__esModule", { value: true }), Ea.BrowserOAuthClient = void 0;
  const t = Xw(), i = rr(), n = PD(), o = BD(), s = Yw(), e = ex(), u = "@@atproto/oauth-client-browser", a = `${u}(popup-channel)`, c = `${u}(popup-state):`, l = new BroadcastChannel(`${u}(synchronization-channel)`);
  class d extends t.OAuthClient {
    static async load({ clientId: p, ...b }) {
      if (p.startsWith("http:")) {
        const E = (0, i.atprotoLoopbackClientMetadata)(p);
        return new d({ clientMetadata: E, ...b });
      } else if (p.startsWith("https:")) {
        (0, i.assertOAuthDiscoverableClientId)(p);
        const E = await t.OAuthClient.fetchMetadata({ clientId: p, ...b });
        return new d({ clientMetadata: E, ...b });
      } else throw new TypeError(`Invalid client id: ${p}`);
    }
    constructor({ clientMetadata: p = (0, i.atprotoLoopbackClientMetadata)((0, e.buildLoopbackClientId)(window.location)), responseMode: b = "fragment", ...E }) {
      if (!globalThis.crypto?.subtle) throw new Error("WebCrypto API is required");
      if (!["query", "fragment"].includes(b)) throw new TypeError(`Invalid response mode: ${b}`);
      const g = new n.BrowserOAuthDatabase();
      super({ ...E, clientMetadata: p, responseMode: b, keyset: void 0, runtimeImplementation: new o.BrowserRuntimeImplementation(), sessionStore: g.getSessionStore(), stateStore: g.getStateStore(), didCache: g.getDidCache(), handleCache: g.getHandleCache(), dpopNonceCache: g.getDpopNonceCache(), authorizationServerMetadataCache: g.getAuthorizationServerMetadataCache(), protectedResourceMetadataCache: g.getProtectedResourceMetadataCache() }), Object.defineProperty(this, r, { enumerable: true, configurable: true, writable: true, value: void 0 });
      const x = new AbortController(), { signal: T } = x;
      this[Symbol.dispose] = () => x.abort(), T.addEventListener("abort", () => g[Symbol.asyncDispose](), { once: true }), this.addEventListener("deleted", ({ detail: { sub: A } }) => {
        localStorage.getItem(`${u}(sub)`) === A && localStorage.removeItem(`${u}(sub)`);
      });
      for (const A of ["deleted", "updated"]) this.sessionGetter.addEventListener(A, ({ detail: K }) => {
        l.postMessage([A, K]);
      });
      l.addEventListener("message", (A) => {
        if (A.source !== window) {
          const [K, j] = A.data;
          this.dispatchCustomEvent(K, j);
        }
      }, { signal: T });
    }
    async init(p) {
      await f(this.clientMetadata);
      const b = await this.signInCallback();
      if (b) return localStorage.setItem(`${u}(sub)`, b.session.sub), b;
      const E = localStorage.getItem(`${u}(sub)`);
      if (E) try {
        return { session: await this.restore(E, p) };
      } catch (g) {
        throw localStorage.removeItem(`${u}(sub)`), g;
      }
    }
    async restore(p, b) {
      const E = await super.restore(p, b);
      return localStorage.setItem(`${u}(sub)`, E.sub), E;
    }
    async revoke(p) {
      return localStorage.removeItem(`${u}(sub)`), super.revoke(p);
    }
    async signIn(p, b) {
      return b?.display === "popup" ? this.signInPopup(p, b) : this.signInRedirect(p, b);
    }
    async signInRedirect(p, b) {
      const E = await this.authorize(p, b);
      return window.location.href = E.href, new Promise((g, x) => {
        setTimeout((T) => {
          this.abortRequest(E).then(() => x(T), (A) => x(new AggregateError([T, A])));
        }, 5e3, new Error("User navigated back"));
      });
    }
    async signInPopup(p, b) {
      const E = "width=600,height=600,menubar=no,toolbar=no";
      let g = window.open("about:blank", "_blank", E);
      const x = `${Math.random().toString(36).slice(2)}`, T = await this.authorize(p, { ...b, state: `${c}${x}`, display: b?.display ?? "popup" });
      return b?.signal?.throwIfAborted(), g ? g.window.location.href = T.href : g = window.open(T.href, "_blank", E), g?.focus(), new Promise((A, K) => {
        const j = new BroadcastChannel(a), O = () => {
          clearTimeout(H), j.removeEventListener("message", X), j.close(), b?.signal?.removeEventListener("abort", z), g?.close();
        }, z = () => {
          K(new Error(b?.signal?.aborted ? "Aborted" : "Timeout")), O();
        };
        b?.signal?.addEventListener("abort", z);
        const H = setTimeout(z, 5 * 6e4), X = async ({ data: F }) => {
          if (F.key !== x || !("result" in F)) return;
          j.postMessage({ key: x, ack: true }), O();
          const { result: C } = F;
          if (C.status === "fulfilled") {
            const k = C.value;
            try {
              b?.signal?.throwIfAborted(), A(await this.restore(k, false));
            } catch (U) {
              K(U), this.revoke(k);
            }
          } else {
            const { message: k, params: U } = C.reason;
            K(new t.OAuthCallbackError(new URLSearchParams(U), k));
          }
        };
        j.addEventListener("message", X);
      });
    }
    readCallbackParams() {
      const p = this.responseMode === "fragment" ? new URLSearchParams(location.hash.slice(1)) : new URLSearchParams(location.search);
      if (!p.has("state") || !(p.has("code") || p.has("error"))) return null;
      const b = (g) => location.origin === g.origin && location.pathname === g.pathname;
      return this.clientMetadata.redirect_uris.map((g) => new URL(g)).some(b) ? p : null;
    }
    async signInCallback() {
      const p = this.readCallbackParams();
      if (!p) return null;
      this.responseMode === "fragment" ? history.replaceState(null, "", location.pathname + location.search) : this.responseMode === "query" && history.replaceState(null, "", location.pathname);
      const b = (E) => {
        const g = new BroadcastChannel(a);
        return new Promise((x) => {
          const T = (j) => {
            clearTimeout(K), g.removeEventListener("message", A), g.close(), x(j);
          }, A = ({ data: j }) => {
            "ack" in j && E.key === j.key && T(true);
          };
          g.addEventListener("message", A), g.postMessage(E);
          const K = setTimeout(T, 500, false);
        });
      };
      return this.callback(p).then(async (E) => {
        if (E.state?.startsWith(c)) throw await b({ key: E.state.slice(c.length), result: { status: "fulfilled", value: E.session.sub } }) || await E.session.signOut(), new s.LoginContinuedInParentWindowError();
        return E;
      }).catch(async (E) => {
        throw E instanceof t.OAuthCallbackError && E.state?.startsWith(c) ? (await b({ key: E.state.slice(c.length), result: { status: "rejected", reason: { message: E.message, params: Array.from(E.params.entries()) } } }), new s.LoginContinuedInParentWindowError()) : E;
      }).catch((E) => {
        throw E instanceof s.LoginContinuedInParentWindowError && window.close(), E;
      });
    }
    dispose() {
      this[Symbol.dispose]();
    }
  }
  Ea.BrowserOAuthClient = d, r = Symbol.dispose;
  function f(h) {
    if (!(0, i.isOAuthClientIdLoopback)(h.client_id) || window.location.hostname !== "localhost") return;
    const p = new URL(window.location.href);
    for (const b of h.redirect_uris) {
      const E = new URL(b);
      if ((E.hostname === "127.0.0.1" || E.hostname === "[::1]") && (!E.port || E.port === p.port) && E.protocol === p.protocol && E.pathname === p.pathname) throw E.port = p.port, window.location.href = E.href, new Error("Redirecting to loopback IP...");
    }
    throw new Error(`Please use the loopback IP address instead of ${p}`);
  }
  return Ea;
}
var WR;
function ID() {
  return WR || (WR = 1, function(r) {
    var t = Bi && Bi.__createBinding || (Object.create ? function(o, s, e, u) {
      u === void 0 && (u = e);
      var a = Object.getOwnPropertyDescriptor(s, e);
      (!a || ("get" in a ? !s.__esModule : a.writable || a.configurable)) && (a = { enumerable: true, get: function() {
        return s[e];
      } }), Object.defineProperty(o, u, a);
    } : function(o, s, e, u) {
      u === void 0 && (u = e), o[u] = s[e];
    }), i = Bi && Bi.__exportStar || function(o, s) {
      for (var e in o) e !== "default" && !Object.prototype.hasOwnProperty.call(s, e) && t(s, o, e);
    };
    Object.defineProperty(r, "__esModule", { value: true }), r.buildLoopbackClientId = void 0, x_(), i(Vp(), r), i(Xw(), r), i(UD(), r), i(Yw(), r);
    var n = ex();
    Object.defineProperty(r, "buildLoopbackClientId", { enumerable: true, get: function() {
      return n.buildLoopbackClientId;
    } });
  }(Bi)), Bi;
}
var KD = ID();
const OD = "atproto transition:generic transition:chat.bsky";
let JR = Da(void 0);
const Pl = { scope: OD, get oauth() {
  return Ee(JR);
}, async init() {
  if (this.oauth) return;
  const r = new URL(globalThis.location.href);
  r.hash = "", r.pathname = "/", r.href + "";
  let t;
  t = await (await fetch("/oauth-client.json", { headers: [["accept", "application/json"]] })).json(), tn(JR, Ta(new KD.BrowserOAuthClient({ responseMode: "query", handleResolver: "https://resolver.roomy.chat", clientMetadata: t })));
} };
rn();
const jD = [{ lexicon: 1, id: "chat.roomy.v0.key", description: "Get your keypair from the keyserver.", defs: { main: { type: "query", output: { encoding: "application/json", schema: { type: "object", properties: { publicKey: { type: "string" }, privateKey: { type: "string" } } } } } } }, { lexicon: 1, id: "chat.roomy.v0.key.public", description: "Get the public for the given user from the keyserver.", defs: { main: { type: "query", parameters: { type: "params", properties: { did: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", properties: { publicKey: { type: "string" } } } } } } }, { lexicon: 1, id: "chat.roomy.v1.store", defs: { main: { type: "record", record: { type: "object", properties: { key: { type: "array", items: { type: "string" } }, data: { type: "blob" } } } } } }, { lexicon: 1, id: "chat.roomy.v0.router.token", description: "Get an auth token for connecting to the router.", defs: { main: { type: "query", output: { encoding: "application/json", schema: { type: "object", properties: { token: { type: "string" } } } } } } }, { lexicon: 1, id: "chat.roomy.v0.space.sync.peers", defs: { main: { type: "query", parameters: { type: "params", properties: { docId: { type: "string" } } }, output: { encoding: "application/json", schema: { type: "object", properties: { peers: { type: "array", items: { type: "string" } } } } } } } }, { lexicon: 1, id: "chat.roomy.v0.space.update", defs: { main: { type: "procedure", parameters: { type: "params", properties: { docId: { type: "string" } } }, input: { encoding: "application/json" }, output: { encoding: "application/json" } } } }];
let ei = Da(void 0), _t = Da(void 0), qD = mp(() => {
  let r = Da(void 0);
  return Ee(ei) && Ee(_t) && Ee(_t).getProfile({ actor: Ee(_t).assertDid }).then((t) => {
    tn(r, Ta(t.data));
  }), { get data() {
    return Ee(r);
  } };
}), MD = mp(() => {
  let r = Da(void 0);
  return Ee(ei) && Ee(_t) && Ee(_t).call("chat.roomy.v0.key", void 0, void 0, { headers: { "atproto-proxy": "did:web:keyserver.roomy.chat#roomy_keyserver" } }).then((t) => {
    tn(r, Ta({ publicKey: new Uint8Array(cv(t.data.publicKey)), privateKey: new Uint8Array(cv(t.data.privateKey)) }));
  }), { get value() {
    return Ee(r);
  } };
}), ZR = mp(() => {
  if (!Ee(ei)) return;
  const r = Ee(ei).did;
  return new tx(r, "autodoc");
});
const ZD = { get agent() {
  return Ee(_t);
}, get session() {
  return Ee(ei);
}, set session(r) {
  tn(ei, Ta(r)), r ? (localStorage.setItem("did", r.did), tn(_t, Ta(new GT.Agent(r))), jD.forEach((t) => Ee(_t).lex.add(t))) : (tn(_t, void 0), localStorage.removeItem("did"));
}, get profile() {
  return Ee(qD);
}, get storage() {
  return Ee(ZR);
}, get keypair() {
  return Ee(MD);
}, get repo() {
  return Ee(ZR);
}, async init() {
  globalThis.user = this, await Pl.init();
  const r = localStorage.getItem("did");
  !Ee(ei) && r && Pl.oauth.restore(r).then((t) => this.session = t);
}, async loginWithHandle(r) {
  localStorage.setItem("redirectAfterAuth", window.location.pathname);
  const t = await Pl.oauth.authorize(r, { scope: Pl.scope });
  window.location.href = t.href, await new Promise((i, n) => {
    setTimeout(n, 1e4, new Error("User navigated back from the authorization page"));
  });
}, async uploadBlob(r) {
  if (!Ee(_t)) return Promise.reject("No agent available");
  const t = await Ee(_t).com.atproto.repo.uploadBlob(r), i = t.data.blob;
  console.log(t.data.blob.toJSON());
  const n = { $type: "chat.roomy.v0.images", image: i, alt: "User uploaded image" }, o = await Ee(_t).com.atproto.repo.putRecord({ repo: Ee(_t).did, collection: "chat.roomy.v0.images", rkey: `${Date.now()}`, record: n }), s = `https://cdn.bsky.app/img/feed_thumbnail/plain/${Ee(_t).did}/${i.ipld().ref}`;
  return { blob: i, uri: o.data.uri, cid: o.data.cid, url: s };
}, logout() {
  localStorage.removeItem("did"), tn(ei, void 0);
} };
export {
  tx as I,
  Pl as a,
  cv as b,
  Fl as c,
  GT as d,
  $D as e,
  rx as g,
  ZD as u
};
